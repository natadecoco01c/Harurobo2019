
odom_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000010  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000854  20000000  08006744  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002bc  20000854  08006f98  00020854  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b10  08006f98  00020b10  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fdec  00000000  00000000  0002087d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004336  00000000  00000000  00040669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b83  00000000  00000000  0004499f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b98  00000000  00000000  0004b528  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000de0  00000000  00000000  0004c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001b52f  00000000  00000000  0004cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d1df  00000000  00000000  000683cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008160b  00000000  00000000  000755ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000f6bb9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f70  00000000  00000000  000f6c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000003c  00000000  00000000  000f9ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  000f9be0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000854 	.word	0x20000854
 8000128:	00000000 	.word	0x00000000
 800012c:	080062d8 	.word	0x080062d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000858 	.word	0x20000858
 8000148:	080062d8 	.word	0x080062d8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpun>:
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d108      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_InitTick+0x3c>)
{
 8000fac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fae:	7818      	ldrb	r0, [r3, #0]
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_InitTick+0x40>)
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc0:	f000 fa0e 	bl	80013e0 <HAL_SYSTICK_Config>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	b958      	cbnz	r0, 8000fe0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	2d0f      	cmp	r5, #15
 8000fca:	d809      	bhi.n	8000fe0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f000 f9c4 	bl	8001360 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4620      	mov	r0, r4
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_InitTick+0x44>)
 8000fdc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	e7fc      	b.n	8000fde <HAL_InitTick+0x36>
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x20>)
{
 8000ff2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	f000 f99d 	bl	800133c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ffd0 	bl	8000fa8 <HAL_InitTick>
  HAL_MspInit();
 8001008:	f003 f938 	bl	800427c <HAL_MspInit>
}
 800100c:	2000      	movs	r0, #0
 800100e:	bd08      	pop	{r3, pc}
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x10>)
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_IncTick+0x14>)
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	440b      	add	r3, r1
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000afc 	.word	0x20000afc
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <HAL_GetTick+0x8>)
 800102e:	6818      	ldr	r0, [r3, #0]
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000afc 	.word	0x20000afc

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff6 	bl	800102c <HAL_GetTick>
 8001040:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001044:	bf1e      	ittt	ne
 8001046:	4b04      	ldrne	r3, [pc, #16]	; (8001058 <HAL_Delay+0x20>)
 8001048:	781b      	ldrbne	r3, [r3, #0]
 800104a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	42a0      	cmp	r0, r4
 8001054:	d3fa      	bcc.n	800104c <HAL_Delay+0x14>
  {
  }
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000000 	.word	0x20000000

0800105c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800105c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800105e:	4604      	mov	r4, r0
 8001060:	2800      	cmp	r0, #0
 8001062:	d06e      	beq.n	8001142 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001064:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001068:	b90b      	cbnz	r3, 800106e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800106a:	f003 f929 	bl	80042c0 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	f023 0302 	bic.w	r3, r3, #2
 8001076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ffd8 	bl	800102c <HAL_GetTick>
 800107c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	0791      	lsls	r1, r2, #30
 8001084:	d451      	bmi.n	800112a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff ffcd 	bl	800102c <HAL_GetTick>
 8001092:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	07d2      	lsls	r2, r2, #31
 800109a:	d554      	bpl.n	8001146 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800109c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800109e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	bf0c      	ite	eq
 80010a6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010aa:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80010ae:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80010b0:	7e62      	ldrb	r2, [r4, #25]
 80010b2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	bf0c      	ite	eq
 80010b8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010bc:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010c0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010c2:	7ea2      	ldrb	r2, [r4, #26]
 80010c4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	bf0c      	ite	eq
 80010ca:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ce:	f022 0220 	bicne.w	r2, r2, #32
 80010d2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010d4:	7ee2      	ldrb	r2, [r4, #27]
 80010d6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	bf0c      	ite	eq
 80010dc:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e0:	f042 0210 	orrne.w	r2, r2, #16
 80010e4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010e6:	7f22      	ldrb	r2, [r4, #28]
 80010e8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	bf0c      	ite	eq
 80010ee:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f2:	f022 0208 	bicne.w	r2, r2, #8
 80010f6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010f8:	7f62      	ldrb	r2, [r4, #29]
 80010fa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	bf0c      	ite	eq
 8001100:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001104:	f022 0204 	bicne.w	r2, r2, #4
 8001108:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800110a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800110e:	430a      	orrs	r2, r1
 8001110:	6921      	ldr	r1, [r4, #16]
 8001112:	430a      	orrs	r2, r1
 8001114:	6961      	ldr	r1, [r4, #20]
 8001116:	430a      	orrs	r2, r1
 8001118:	6861      	ldr	r1, [r4, #4]
 800111a:	3901      	subs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001120:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001122:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001124:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001128:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800112a:	f7ff ff7f 	bl	800102c <HAL_GetTick>
 800112e:	1b40      	subs	r0, r0, r5
 8001130:	280a      	cmp	r0, #10
 8001132:	d9a4      	bls.n	800107e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800113c:	2305      	movs	r3, #5
 800113e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e7f0      	b.n	8001128 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001146:	f7ff ff71 	bl	800102c <HAL_GetTick>
 800114a:	1b40      	subs	r0, r0, r5
 800114c:	280a      	cmp	r0, #10
 800114e:	d9a1      	bls.n	8001094 <HAL_CAN_Init+0x38>
 8001150:	e7f0      	b.n	8001134 <HAL_CAN_Init+0xd8>

08001152 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001152:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001156:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001158:	3b01      	subs	r3, #1
 800115a:	2b01      	cmp	r3, #1
 800115c:	d85f      	bhi.n	800121e <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800115e:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001160:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800116e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001170:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001174:	f002 001f 	and.w	r0, r2, #31
 8001178:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800117c:	43c4      	mvns	r4, r0
 800117e:	4025      	ands	r5, r4
 8001180:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001184:	69cd      	ldr	r5, [r1, #28]
 8001186:	bb85      	cbnz	r5, 80011ea <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001188:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800118c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800118e:	4025      	ands	r5, r4
 8001190:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001194:	888d      	ldrh	r5, [r1, #4]
 8001196:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800119a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119e:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011a4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011aa:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ae:	698a      	ldr	r2, [r1, #24]
 80011b0:	bb6a      	cbnz	r2, 800120e <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011b6:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011bc:	690a      	ldr	r2, [r1, #16]
 80011be:	bb52      	cbnz	r2, 8001216 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011c4:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ca:	6a0a      	ldr	r2, [r1, #32]
 80011cc:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ce:	bf02      	ittt	eq
 80011d0:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80011d4:	4310      	orreq	r0, r2
 80011d6:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 80011da:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011ea:	2d01      	cmp	r5, #1
 80011ec:	d1df      	bne.n	80011ae <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011ee:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f2:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011f4:	4305      	orrs	r5, r0
 80011f6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011fa:	888d      	ldrh	r5, [r1, #4]
 80011fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001200:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001208:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800120a:	898d      	ldrh	r5, [r1, #12]
 800120c:	e7cb      	b.n	80011a6 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800120e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001212:	4302      	orrs	r2, r0
 8001214:	e7d0      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001216:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800121a:	4302      	orrs	r2, r0
 800121c:	e7d3      	b.n	80011c6 <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800121e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e7de      	b.n	80011e8 <HAL_CAN_ConfigFilter+0x96>

0800122a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800122a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800122c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001230:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001232:	2b01      	cmp	r3, #1
 8001234:	d11f      	bne.n	8001276 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001236:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001238:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800123a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001246:	f7ff fef1 	bl	800102c <HAL_GetTick>
 800124a:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	6858      	ldr	r0, [r3, #4]
 8001250:	f010 0001 	ands.w	r0, r0, #1
 8001254:	d101      	bne.n	800125a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800125a:	f7ff fee7 	bl	800102c <HAL_GetTick>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	280a      	cmp	r0, #10
 8001262:	d9f3      	bls.n	800124c <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800126c:	2305      	movs	r3, #5
 800126e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
 8001274:	e7f0      	b.n	8001258 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001276:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800127c:	6243      	str	r3, [r0, #36]	; 0x24
 800127e:	e7f8      	b.n	8001272 <HAL_CAN_Start+0x48>

08001280 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001282:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001286:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001288:	3d01      	subs	r5, #1
 800128a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800128c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800128e:	d840      	bhi.n	8001312 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001290:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001294:	d039      	beq.n	800130a <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001296:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800129a:	2c03      	cmp	r4, #3
 800129c:	f04f 0501 	mov.w	r5, #1
 80012a0:	d105      	bne.n	80012ae <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e027      	b.n	80012fe <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012ae:	40a5      	lsls	r5, r4
 80012b0:	601d      	str	r5, [r3, #0]
 80012b2:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80012b6:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 80012ba:	bb08      	cbnz	r0, 8001300 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012bc:	6808      	ldr	r0, [r1, #0]
 80012be:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c6:	6908      	ldr	r0, [r1, #16]
 80012c8:	0124      	lsls	r4, r4, #4
 80012ca:	1933      	adds	r3, r6, r4
 80012cc:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 80012d0:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d2:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012d4:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d6:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d8:	bf02      	ittt	eq
 80012da:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 80012de:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80012e2:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012e6:	6851      	ldr	r1, [r2, #4]
 80012e8:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001300:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001302:	4338      	orrs	r0, r7
 8001304:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001308:	e7db      	b.n	80012c2 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800130a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	e7ca      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001312:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	e7c6      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x28>

0800131a <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800131a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800131e:	3b01      	subs	r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d805      	bhi.n	8001330 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001324:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001326:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001328:	6953      	ldr	r3, [r2, #20]
 800132a:	4319      	orrs	r1, r3
 800132c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800132e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2001      	movs	r0, #1
  }
}
 800133a:	4770      	bx	lr

0800133c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800133e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001342:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001356:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001358:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b570      	push	{r4, r5, r6, lr}
 8001364:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001366:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136e:	f1c4 0507 	rsb	r5, r4, #7
 8001372:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001374:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	bf28      	it	cs
 800137a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137c:	2b06      	cmp	r3, #6
 800137e:	bf98      	it	ls
 8001380:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	bf88      	it	hi
 8001388:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138a:	ea21 0303 	bic.w	r3, r1, r3
 800138e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	fa06 f404 	lsl.w	r4, r6, r4
 8001394:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8001398:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	bfa8      	it	ge
 80013a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80013a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	bfb8      	it	lt
 80013aa:	4a06      	ldrlt	r2, [pc, #24]	; (80013c4 <HAL_NVIC_SetPriority+0x64>)
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	bfb5      	itete	lt
 80013b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	e000ed14 	.word	0xe000ed14

080013c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013c8:	2301      	movs	r3, #1
 80013ca:	0942      	lsrs	r2, r0, #5
 80013cc:	f000 001f 	and.w	r0, r0, #31
 80013d0:	fa03 f000 	lsl.w	r0, r3, r0
 80013d4:	4b01      	ldr	r3, [pc, #4]	; (80013dc <HAL_NVIC_EnableIRQ+0x14>)
 80013d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	3801      	subs	r0, #1
 80013e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013e6:	d20a      	bcs.n	80013fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800140c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001410:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001416:	2304      	movs	r3, #4
 8001418:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800141a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800141c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	6803      	ldr	r3, [r0, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f022 020e 	bic.w	r2, r2, #14
 8001426:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_DMA_Abort_IT+0x88>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_DMA_Abort_IT+0x6a>
 8001436:	3214      	adds	r2, #20
 8001438:	4293      	cmp	r3, r2
 800143a:	d01e      	beq.n	800147a <HAL_DMA_Abort_IT+0x6e>
 800143c:	3214      	adds	r2, #20
 800143e:	4293      	cmp	r3, r2
 8001440:	d01d      	beq.n	800147e <HAL_DMA_Abort_IT+0x72>
 8001442:	3214      	adds	r2, #20
 8001444:	4293      	cmp	r3, r2
 8001446:	d01d      	beq.n	8001484 <HAL_DMA_Abort_IT+0x78>
 8001448:	3214      	adds	r2, #20
 800144a:	4293      	cmp	r3, r2
 800144c:	d01d      	beq.n	800148a <HAL_DMA_Abort_IT+0x7e>
 800144e:	3214      	adds	r2, #20
 8001450:	4293      	cmp	r3, r2
 8001452:	bf0c      	ite	eq
 8001454:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001458:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800145e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001460:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001462:	2301      	movs	r3, #1
 8001464:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001468:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800146a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800146e:	b17b      	cbz	r3, 8001490 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001470:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001472:	4620      	mov	r0, r4
 8001474:	e7d2      	b.n	800141c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001476:	2301      	movs	r3, #1
 8001478:	e7f0      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800147a:	2310      	movs	r3, #16
 800147c:	e7ee      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	e7eb      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	e7e8      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148e:	e7e5      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	4618      	mov	r0, r3
 8001492:	e7c3      	b.n	800141c <HAL_DMA_Abort_IT+0x10>
 8001494:	40020008 	.word	0x40020008
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014a0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	4616      	mov	r6, r2
 80014a4:	4b65      	ldr	r3, [pc, #404]	; (800163c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800164c <HAL_GPIO_Init+0x1b0>
 80014aa:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001650 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80014ae:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80014b4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80014bc:	45a0      	cmp	r8, r4
 80014be:	d17e      	bne.n	80015be <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80014c0:	684d      	ldr	r5, [r1, #4]
 80014c2:	2d12      	cmp	r5, #18
 80014c4:	f000 80ae 	beq.w	8001624 <HAL_GPIO_Init+0x188>
 80014c8:	f200 8087 	bhi.w	80015da <HAL_GPIO_Init+0x13e>
 80014cc:	2d02      	cmp	r5, #2
 80014ce:	f000 80a6 	beq.w	800161e <HAL_GPIO_Init+0x182>
 80014d2:	d87b      	bhi.n	80015cc <HAL_GPIO_Init+0x130>
 80014d4:	2d00      	cmp	r5, #0
 80014d6:	f000 808d 	beq.w	80015f4 <HAL_GPIO_Init+0x158>
 80014da:	2d01      	cmp	r5, #1
 80014dc:	f000 809d 	beq.w	800161a <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	2cff      	cmp	r4, #255	; 0xff
 80014e6:	bf93      	iteet	ls
 80014e8:	4682      	movls	sl, r0
 80014ea:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80014ee:	3d08      	subhi	r5, #8
 80014f0:	f8d0 b000 	ldrls.w	fp, [r0]
 80014f4:	bf92      	itee	ls
 80014f6:	00b5      	lslls	r5, r6, #2
 80014f8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80014fc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fe:	fa09 f805 	lsl.w	r8, r9, r5
 8001502:	ea2b 0808 	bic.w	r8, fp, r8
 8001506:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150a:	bf88      	it	hi
 800150c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001510:	ea48 0505 	orr.w	r5, r8, r5
 8001514:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001518:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800151c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001520:	d04d      	beq.n	80015be <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4f47      	ldr	r7, [pc, #284]	; (8001640 <HAL_GPIO_Init+0x1a4>)
 8001524:	f026 0803 	bic.w	r8, r6, #3
 8001528:	69bd      	ldr	r5, [r7, #24]
 800152a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800152e:	f045 0501 	orr.w	r5, r5, #1
 8001532:	61bd      	str	r5, [r7, #24]
 8001534:	69bd      	ldr	r5, [r7, #24]
 8001536:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800153a:	f005 0501 	and.w	r5, r5, #1
 800153e:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001540:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001546:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800154a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800154e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001552:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	4d3b      	ldr	r5, [pc, #236]	; (8001644 <HAL_GPIO_Init+0x1a8>)
 8001558:	42a8      	cmp	r0, r5
 800155a:	d068      	beq.n	800162e <HAL_GPIO_Init+0x192>
 800155c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001560:	42a8      	cmp	r0, r5
 8001562:	d066      	beq.n	8001632 <HAL_GPIO_Init+0x196>
 8001564:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001568:	42a8      	cmp	r0, r5
 800156a:	d064      	beq.n	8001636 <HAL_GPIO_Init+0x19a>
 800156c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001570:	42a8      	cmp	r0, r5
 8001572:	bf0c      	ite	eq
 8001574:	2503      	moveq	r5, #3
 8001576:	2504      	movne	r5, #4
 8001578:	fa05 f50b 	lsl.w	r5, r5, fp
 800157c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001580:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001584:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001586:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800158a:	bf14      	ite	ne
 800158c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158e:	43a5      	biceq	r5, r4
 8001590:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001592:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001598:	bf14      	ite	ne
 800159a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159c:	43a5      	biceq	r5, r4
 800159e:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a0:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a6:	bf14      	ite	ne
 80015a8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015aa:	43a5      	biceq	r5, r4
 80015ac:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ae:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b4:	bf14      	ite	ne
 80015b6:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b8:	ea25 0404 	biceq.w	r4, r5, r4
 80015bc:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015be:	3601      	adds	r6, #1
 80015c0:	2e10      	cmp	r6, #16
 80015c2:	f47f af74 	bne.w	80014ae <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80015c6:	b003      	add	sp, #12
 80015c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80015cc:	2d03      	cmp	r5, #3
 80015ce:	d022      	beq.n	8001616 <HAL_GPIO_Init+0x17a>
 80015d0:	2d11      	cmp	r5, #17
 80015d2:	d185      	bne.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d4:	68ca      	ldr	r2, [r1, #12]
 80015d6:	3204      	adds	r2, #4
          break;
 80015d8:	e782      	b.n	80014e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80015da:	4f1b      	ldr	r7, [pc, #108]	; (8001648 <HAL_GPIO_Init+0x1ac>)
 80015dc:	42bd      	cmp	r5, r7
 80015de:	d009      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 80015e0:	d812      	bhi.n	8001608 <HAL_GPIO_Init+0x16c>
 80015e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001654 <HAL_GPIO_Init+0x1b8>
 80015e6:	454d      	cmp	r5, r9
 80015e8:	d004      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 80015ea:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80015ee:	454d      	cmp	r5, r9
 80015f0:	f47f af76 	bne.w	80014e0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f4:	688a      	ldr	r2, [r1, #8]
 80015f6:	b1c2      	cbz	r2, 800162a <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80015fa:	bf0c      	ite	eq
 80015fc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001600:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2208      	movs	r2, #8
 8001606:	e76b      	b.n	80014e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001608:	4565      	cmp	r5, ip
 800160a:	d0f3      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 800160c:	4575      	cmp	r5, lr
 800160e:	d0f1      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 8001610:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001658 <HAL_GPIO_Init+0x1bc>
 8001614:	e7eb      	b.n	80015ee <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001616:	2200      	movs	r2, #0
 8001618:	e762      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800161a:	68ca      	ldr	r2, [r1, #12]
          break;
 800161c:	e760      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161e:	68ca      	ldr	r2, [r1, #12]
 8001620:	3208      	adds	r2, #8
          break;
 8001622:	e75d      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001624:	68ca      	ldr	r2, [r1, #12]
 8001626:	320c      	adds	r2, #12
          break;
 8001628:	e75a      	b.n	80014e0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162a:	2204      	movs	r2, #4
 800162c:	e758      	b.n	80014e0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162e:	2500      	movs	r5, #0
 8001630:	e7a2      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 8001632:	2501      	movs	r5, #1
 8001634:	e7a0      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 8001636:	2502      	movs	r5, #2
 8001638:	e79e      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 800163a:	bf00      	nop
 800163c:	40010400 	.word	0x40010400
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	10210000 	.word	0x10210000
 800164c:	10310000 	.word	0x10310000
 8001650:	10320000 	.word	0x10320000
 8001654:	10110000 	.word	0x10110000
 8001658:	10220000 	.word	0x10220000

0800165c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	b10a      	cbz	r2, 8001662 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	6101      	str	r1, [r0, #16]
  }
}
 8001660:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	0409      	lsls	r1, r1, #16
 8001664:	e7fb      	b.n	800165e <HAL_GPIO_WritePin+0x2>
	...

08001668 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001668:	6803      	ldr	r3, [r0, #0]
{
 800166a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	07db      	lsls	r3, r3, #31
{
 8001670:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	d410      	bmi.n	8001696 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	079f      	lsls	r7, r3, #30
 8001678:	d45e      	bmi.n	8001738 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	0719      	lsls	r1, r3, #28
 800167e:	f100 8095 	bmi.w	80017ac <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	075a      	lsls	r2, r3, #29
 8001686:	f100 80bf 	bmi.w	8001808 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	69ea      	ldr	r2, [r5, #28]
 800168c:	2a00      	cmp	r2, #0
 800168e:	f040 812d 	bne.w	80018ec <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001692:	2000      	movs	r0, #0
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001696:	4c90      	ldr	r4, [pc, #576]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d007      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
 80016ac:	6863      	ldr	r3, [r4, #4]
 80016ae:	03de      	lsls	r6, r3, #15
 80016b0:	d509      	bpl.n	80016c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	039c      	lsls	r4, r3, #14
 80016b6:	d5dd      	bpl.n	8001674 <HAL_RCC_OscConfig+0xc>
 80016b8:	686b      	ldr	r3, [r5, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1da      	bne.n	8001674 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	686b      	ldr	r3, [r5, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d110      	bne.n	80016f0 <HAL_RCC_OscConfig+0x88>
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016d6:	f7ff fca9 	bl	800102c <HAL_GetTick>
 80016da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	0398      	lsls	r0, r3, #14
 80016e0:	d4c8      	bmi.n	8001674 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fca3 	bl	800102c <HAL_GetTick>
 80016e6:	1b80      	subs	r0, r0, r6
 80016e8:	2864      	cmp	r0, #100	; 0x64
 80016ea:	d9f7      	bls.n	80016dc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80016ec:	2003      	movs	r0, #3
 80016ee:	e7e7      	b.n	80016c0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	b99b      	cbnz	r3, 800171a <HAL_RCC_OscConfig+0xb2>
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6023      	str	r3, [r4, #0]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001702:	f7ff fc93 	bl	800102c <HAL_GetTick>
 8001706:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	0399      	lsls	r1, r3, #14
 800170c:	d5b2      	bpl.n	8001674 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170e:	f7ff fc8d 	bl	800102c <HAL_GetTick>
 8001712:	1b80      	subs	r0, r0, r6
 8001714:	2864      	cmp	r0, #100	; 0x64
 8001716:	d9f7      	bls.n	8001708 <HAL_RCC_OscConfig+0xa0>
 8001718:	e7e8      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	d103      	bne.n	800172a <HAL_RCC_OscConfig+0xc2>
 8001722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001726:	6023      	str	r3, [r4, #0]
 8001728:	e7d1      	b.n	80016ce <HAL_RCC_OscConfig+0x66>
 800172a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172e:	6023      	str	r3, [r4, #0]
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	e7cd      	b.n	80016d4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001738:	4c67      	ldr	r4, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	f013 0f0c 	tst.w	r3, #12
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d110      	bne.n	800176e <HAL_RCC_OscConfig+0x106>
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	03da      	lsls	r2, r3, #15
 8001750:	d40d      	bmi.n	800176e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	079b      	lsls	r3, r3, #30
 8001756:	d502      	bpl.n	800175e <HAL_RCC_OscConfig+0xf6>
 8001758:	692b      	ldr	r3, [r5, #16]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d1af      	bne.n	80016be <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	696a      	ldr	r2, [r5, #20]
 8001762:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001766:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	e785      	b.n	800167a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176e:	692a      	ldr	r2, [r5, #16]
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x274>)
 8001772:	b16a      	cbz	r2, 8001790 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001778:	f7ff fc58 	bl	800102c <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	079f      	lsls	r7, r3, #30
 8001782:	d4ec      	bmi.n	800175e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fc52 	bl	800102c <HAL_GetTick>
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f7      	bls.n	800177e <HAL_RCC_OscConfig+0x116>
 800178e:	e7ad      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001790:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001792:	f7ff fc4b 	bl	800102c <HAL_GetTick>
 8001796:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	0798      	lsls	r0, r3, #30
 800179c:	f57f af6d 	bpl.w	800167a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc44 	bl	800102c <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9f6      	bls.n	8001798 <HAL_RCC_OscConfig+0x130>
 80017aa:	e79f      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ac:	69aa      	ldr	r2, [r5, #24]
 80017ae:	4c4a      	ldr	r4, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_OscConfig+0x278>)
 80017b2:	b1da      	cbz	r2, 80017ec <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017b8:	f7ff fc38 	bl	800102c <HAL_GetTick>
 80017bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017c0:	079b      	lsls	r3, r3, #30
 80017c2:	d50d      	bpl.n	80017e0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017d4:	9b01      	ldr	r3, [sp, #4]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_RCC_OscConfig+0x16a>
 80017de:	e750      	b.n	8001682 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc24 	bl	800102c <HAL_GetTick>
 80017e4:	1b80      	subs	r0, r0, r6
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9e9      	bls.n	80017be <HAL_RCC_OscConfig+0x156>
 80017ea:	e77f      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80017ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ee:	f7ff fc1d 	bl	800102c <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f6:	079f      	lsls	r7, r3, #30
 80017f8:	f57f af43 	bpl.w	8001682 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fc16 	bl	800102c <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f6      	bls.n	80017f4 <HAL_RCC_OscConfig+0x18c>
 8001806:	e771      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001808:	4c33      	ldr	r4, [pc, #204]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 800180a:	69e3      	ldr	r3, [r4, #28]
 800180c:	00d8      	lsls	r0, r3, #3
 800180e:	d424      	bmi.n	800185a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001810:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	69e3      	ldr	r3, [r4, #28]
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	61e3      	str	r3, [r4, #28]
 800181a:	69e3      	ldr	r3, [r4, #28]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4e30      	ldr	r6, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001826:	6833      	ldr	r3, [r6, #0]
 8001828:	05d9      	lsls	r1, r3, #23
 800182a:	d518      	bpl.n	800185e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	68eb      	ldr	r3, [r5, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d126      	bne.n	8001880 <HAL_RCC_OscConfig+0x218>
 8001832:	6a23      	ldr	r3, [r4, #32]
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800183a:	f7ff fbf7 	bl	800102c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001842:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	6a23      	ldr	r3, [r4, #32]
 8001846:	079b      	lsls	r3, r3, #30
 8001848:	d53f      	bpl.n	80018ca <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800184a:	2f00      	cmp	r7, #0
 800184c:	f43f af1d 	beq.w	800168a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	69e3      	ldr	r3, [r4, #28]
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	61e3      	str	r3, [r4, #28]
 8001858:	e717      	b.n	800168a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2700      	movs	r7, #0
 800185c:	e7e2      	b.n	8001824 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	6833      	ldr	r3, [r6, #0]
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001866:	f7ff fbe1 	bl	800102c <HAL_GetTick>
 800186a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	6833      	ldr	r3, [r6, #0]
 800186e:	05da      	lsls	r2, r3, #23
 8001870:	d4dc      	bmi.n	800182c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fbdb 	bl	800102c <HAL_GetTick>
 8001876:	eba0 0008 	sub.w	r0, r0, r8
 800187a:	2864      	cmp	r0, #100	; 0x64
 800187c:	d9f6      	bls.n	800186c <HAL_RCC_OscConfig+0x204>
 800187e:	e735      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	b9ab      	cbnz	r3, 80018ae <HAL_RCC_OscConfig+0x246>
 8001882:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6223      	str	r3, [r4, #32]
 800188e:	6a23      	ldr	r3, [r4, #32]
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001896:	f7ff fbc9 	bl	800102c <HAL_GetTick>
 800189a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	6a23      	ldr	r3, [r4, #32]
 800189e:	0798      	lsls	r0, r3, #30
 80018a0:	d5d3      	bpl.n	800184a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fbc3 	bl	800102c <HAL_GetTick>
 80018a6:	1b80      	subs	r0, r0, r6
 80018a8:	4540      	cmp	r0, r8
 80018aa:	d9f7      	bls.n	800189c <HAL_RCC_OscConfig+0x234>
 80018ac:	e71e      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	6a23      	ldr	r3, [r4, #32]
 80018b2:	d103      	bne.n	80018bc <HAL_RCC_OscConfig+0x254>
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6223      	str	r3, [r4, #32]
 80018ba:	e7ba      	b.n	8001832 <HAL_RCC_OscConfig+0x1ca>
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6223      	str	r3, [r4, #32]
 80018c2:	6a23      	ldr	r3, [r4, #32]
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	e7b6      	b.n	8001838 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fbaf 	bl	800102c <HAL_GetTick>
 80018ce:	eba0 0008 	sub.w	r0, r0, r8
 80018d2:	42b0      	cmp	r0, r6
 80018d4:	d9b6      	bls.n	8001844 <HAL_RCC_OscConfig+0x1dc>
 80018d6:	e709      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	42420000 	.word	0x42420000
 80018e0:	42420480 	.word	0x42420480
 80018e4:	20000008 	.word	0x20000008
 80018e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4c22      	ldr	r4, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x310>)
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	f43f aee2 	beq.w	80016be <HAL_RCC_OscConfig+0x56>
 80018fa:	2300      	movs	r3, #0
 80018fc:	4e1f      	ldr	r6, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001900:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	d12b      	bne.n	800195c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001904:	f7ff fb92 	bl	800102c <HAL_GetTick>
 8001908:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	0199      	lsls	r1, r3, #6
 800190e:	d41f      	bmi.n	8001950 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001910:	6a2b      	ldr	r3, [r5, #32]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001918:	6862      	ldr	r2, [r4, #4]
 800191a:	68a9      	ldr	r1, [r5, #8]
 800191c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001920:	430a      	orrs	r2, r1
 8001922:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001926:	6862      	ldr	r2, [r4, #4]
 8001928:	430b      	orrs	r3, r1
 800192a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800192e:	4313      	orrs	r3, r2
 8001930:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001932:	2301      	movs	r3, #1
 8001934:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001936:	f7ff fb79 	bl	800102c <HAL_GetTick>
 800193a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	019a      	lsls	r2, r3, #6
 8001940:	f53f aea7 	bmi.w	8001692 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb72 	bl	800102c <HAL_GetTick>
 8001948:	1b40      	subs	r0, r0, r5
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x2d4>
 800194e:	e6cd      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fb6c 	bl	800102c <HAL_GetTick>
 8001954:	1bc0      	subs	r0, r0, r7
 8001956:	2802      	cmp	r0, #2
 8001958:	d9d7      	bls.n	800190a <HAL_RCC_OscConfig+0x2a2>
 800195a:	e6c7      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800195c:	f7ff fb66 	bl	800102c <HAL_GetTick>
 8001960:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	f57f ae94 	bpl.w	8001692 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb5f 	bl	800102c <HAL_GetTick>
 800196e:	1b40      	subs	r0, r0, r5
 8001970:	2802      	cmp	r0, #2
 8001972:	d9f6      	bls.n	8001962 <HAL_RCC_OscConfig+0x2fa>
 8001974:	e6ba      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	42420060 	.word	0x42420060

08001980 <HAL_RCC_GetSysClockFreq>:
{
 8001980:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001984:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001986:	ac02      	add	r4, sp, #8
 8001988:	f103 0510 	add.w	r5, r3, #16
 800198c:	4622      	mov	r2, r4
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	3308      	adds	r3, #8
 8001994:	c203      	stmia	r2!, {r0, r1}
 8001996:	42ab      	cmp	r3, r5
 8001998:	4614      	mov	r4, r2
 800199a:	d1f7      	bne.n	800198c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800199c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80019a0:	4911      	ldr	r1, [pc, #68]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80019a6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019a8:	f003 020c 	and.w	r2, r3, #12
 80019ac:	2a08      	cmp	r2, #8
 80019ae:	d117      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019b4:	a806      	add	r0, sp, #24
 80019b6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019be:	d50c      	bpl.n	80019da <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c2:	480a      	ldr	r0, [pc, #40]	; (80019ec <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ca:	aa06      	add	r2, sp, #24
 80019cc:	4413      	add	r3, r2
 80019ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019d6:	b007      	add	sp, #28
 80019d8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80019dc:	4350      	muls	r0, r2
 80019de:	e7fa      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80019e2:	e7f8      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x56>
 80019e4:	080062f0 	.word	0x080062f0
 80019e8:	40021000 	.word	0x40021000
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	003d0900 	.word	0x003d0900

080019f4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019f4:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x150>)
{
 80019f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fa:	6813      	ldr	r3, [r2, #0]
{
 80019fc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	428b      	cmp	r3, r1
{
 8001a04:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a06:	d328      	bcc.n	8001a5a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	6829      	ldr	r1, [r5, #0]
 8001a0a:	078c      	lsls	r4, r1, #30
 8001a0c:	d432      	bmi.n	8001a74 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	07ca      	lsls	r2, r1, #31
 8001a10:	d445      	bmi.n	8001a9e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a12:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_RCC_ClockConfig+0x150>)
 8001a14:	6813      	ldr	r3, [r2, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	42b3      	cmp	r3, r6
 8001a1c:	d87f      	bhi.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1e:	682a      	ldr	r2, [r5, #0]
 8001a20:	4c49      	ldr	r4, [pc, #292]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
 8001a22:	f012 0f04 	tst.w	r2, #4
 8001a26:	f040 8085 	bne.w	8001b34 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	0713      	lsls	r3, r2, #28
 8001a2c:	d506      	bpl.n	8001a3c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	692a      	ldr	r2, [r5, #16]
 8001a32:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a3a:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3c:	f7ff ffa0 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_RCC_ClockConfig+0x158>)
 8001a44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	40d8      	lsrs	r0, r3
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_RCC_ClockConfig+0x15c>)
 8001a4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff faa9 	bl	8000fa8 <HAL_InitTick>
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	d0cc      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
}
 8001a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7a:	bf1e      	ittt	ne
 8001a7c:	685a      	ldrne	r2, [r3, #4]
 8001a7e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a82:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a86:	bf42      	ittt	mi
 8001a88:	685a      	ldrmi	r2, [r3, #4]
 8001a8a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a8e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	68a8      	ldr	r0, [r5, #8]
 8001a94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a98:	4302      	orrs	r2, r0
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	e7b7      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	686a      	ldr	r2, [r5, #4]
 8001aa0:	4c29      	ldr	r4, [pc, #164]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
 8001aa2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	d0df      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001abc:	f7ff fab6 	bl	800102c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ac2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d113      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d09f      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff faab 	bl	800102c <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	4540      	cmp	r0, r8
 8001ada:	d9f5      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e7c7      	b.n	8001a70 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	2a02      	cmp	r2, #2
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ae8:	e7e0      	b.n	8001aac <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	f013 0f02 	tst.w	r3, #2
 8001aee:	e7dd      	b.n	8001aac <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d089      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff fa95 	bl	800102c <HAL_GetTick>
 8001b02:	1bc0      	subs	r0, r0, r7
 8001b04:	4540      	cmp	r0, r8
 8001b06:	d9f5      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x100>
 8001b08:	e7e8      	b.n	8001adc <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff fa8f 	bl	800102c <HAL_GetTick>
 8001b0e:	1bc0      	subs	r0, r0, r7
 8001b10:	4540      	cmp	r0, r8
 8001b12:	d8e3      	bhi.n	8001adc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b14:	6863      	ldr	r3, [r4, #4]
 8001b16:	f013 0f0c 	tst.w	r3, #12
 8001b1a:	d1f6      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x116>
 8001b1c:	e779      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	6813      	ldr	r3, [r2, #0]
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	4333      	orrs	r3, r6
 8001b26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	42b3      	cmp	r3, r6
 8001b30:	d19d      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x7a>
 8001b32:	e774      	b.n	8001a1e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	68e9      	ldr	r1, [r5, #12]
 8001b38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6063      	str	r3, [r4, #4]
 8001b40:	e773      	b.n	8001a2a <HAL_RCC_ClockConfig+0x36>
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08006318 	.word	0x08006318
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b62:	6810      	ldr	r0, [r2, #0]
}    
 8001b64:	40d8      	lsrs	r0, r3
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08006328 	.word	0x08006328
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b82:	6810      	ldr	r0, [r2, #0]
} 
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08006328 	.word	0x08006328
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b94:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b96:	4604      	mov	r4, r0
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d034      	beq.n	8001c06 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ba0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ba4:	b90b      	cbnz	r3, 8001baa <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ba6:	f002 fbcf 	bl	8004348 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001baa:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bac:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001bb2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bb4:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bbc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001bc0:	4303      	orrs	r3, r0
 8001bc2:	68e0      	ldr	r0, [r4, #12]
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	6920      	ldr	r0, [r4, #16]
 8001bc8:	4303      	orrs	r3, r0
 8001bca:	6960      	ldr	r0, [r4, #20]
 8001bcc:	4303      	orrs	r3, r0
 8001bce:	69e0      	ldr	r0, [r4, #28]
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	6a20      	ldr	r0, [r4, #32]
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001bd8:	4303      	orrs	r3, r0
 8001bda:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001bde:	4303      	orrs	r3, r0
 8001be0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001be2:	0c12      	lsrs	r2, r2, #16
 8001be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be6:	f002 0204 	and.w	r2, r2, #4
 8001bea:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bee:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001bf0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bf2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bf4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bfa:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001bfc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bfe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001c00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8001c04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
 8001c08:	e7fc      	b.n	8001c04 <HAL_SPI_Init+0x70>

08001c0a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0a:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001c0c:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c20:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001c22:	b189      	cbz	r1, 8001c48 <HAL_TIM_Encoder_Start+0x28>
 8001c24:	2904      	cmp	r1, #4
 8001c26:	d007      	beq.n	8001c38 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	e006      	b.n	8001c56 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001c58:	681a      	ldr	r2, [r3, #0]
}
 8001c5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	f04f 0302 	mov.w	r3, #2
 8001c70:	d01c      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x48>
 8001c72:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001c78:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001c7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001c7e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c84:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c88:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c8a:	680a      	ldr	r2, [r1, #0]
 8001c8c:	2a40      	cmp	r2, #64	; 0x40
 8001c8e:	d079      	beq.n	8001d84 <HAL_TIM_ConfigClockSource+0x120>
 8001c90:	d819      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x62>
 8001c92:	2a10      	cmp	r2, #16
 8001c94:	f000 8093 	beq.w	8001dbe <HAL_TIM_ConfigClockSource+0x15a>
 8001c98:	d80a      	bhi.n	8001cb0 <HAL_TIM_ConfigClockSource+0x4c>
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	f000 8089 	beq.w	8001db2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001cac:	4618      	mov	r0, r3
}
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001cb0:	2a20      	cmp	r2, #32
 8001cb2:	f000 808a 	beq.w	8001dca <HAL_TIM_ConfigClockSource+0x166>
 8001cb6:	2a30      	cmp	r2, #48	; 0x30
 8001cb8:	d1f2      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001cba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cc0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001cc4:	e036      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001cc6:	2a70      	cmp	r2, #112	; 0x70
 8001cc8:	d036      	beq.n	8001d38 <HAL_TIM_ConfigClockSource+0xd4>
 8001cca:	d81b      	bhi.n	8001d04 <HAL_TIM_ConfigClockSource+0xa0>
 8001ccc:	2a50      	cmp	r2, #80	; 0x50
 8001cce:	d042      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xf2>
 8001cd0:	2a60      	cmp	r2, #96	; 0x60
 8001cd2:	d1e5      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cd6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cdc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cde:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ce8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001cf4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cf6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001cf8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cfe:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001d02:	e017      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d08:	d011      	beq.n	8001d2e <HAL_TIM_ConfigClockSource+0xca>
 8001d0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d0e:	d1c7      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d10:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d14:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d16:	68c9      	ldr	r1, [r1, #12]
 8001d18:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d22:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d24:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2c:	e002      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	e7b3      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 8001d38:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001d3e:	68c9      	ldr	r1, [r1, #12]
 8001d40:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d4a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d4c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d4e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d50:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001d54:	e7ee      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	684c      	ldr	r4, [r1, #4]
 8001d58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d5a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d62:	f025 0501 	bic.w	r5, r5, #1
 8001d66:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d68:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d6a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d70:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d76:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d7e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001d82:	e7d7      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d84:	684c      	ldr	r4, [r1, #4]
 8001d86:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d88:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d8c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d90:	f025 0501 	bic.w	r5, r5, #1
 8001d94:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d96:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d98:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d9e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001da6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dac:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001db0:	e7c0      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001db2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001db8:	f042 0207 	orr.w	r2, r2, #7
 8001dbc:	e7ba      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dbe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dc4:	f042 0217 	orr.w	r2, r2, #23
 8001dc8:	e7b4      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dd0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001dd4:	e7ae      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
	...

08001dd8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001dda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ddc:	4290      	cmp	r0, r2
 8001dde:	d00a      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001de6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d115      	bne.n	8001e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001df6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dfc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
 8001e00:	4290      	cmp	r0, r2
 8001e02:	d00a      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e0e:	4290      	cmp	r0, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e16:	4290      	cmp	r0, r2
 8001e18:	d103      	bne.n	8001e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e20:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e22:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2c:	688b      	ldr	r3, [r1, #8]
 8001e2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e30:	680b      	ldr	r3, [r1, #0]
 8001e32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
 8001e36:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001e38:	bf04      	itt	eq
 8001e3a:	690b      	ldreq	r3, [r1, #16]
 8001e3c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	6143      	str	r3, [r0, #20]
}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00

08001e48 <HAL_TIM_Base_Init>:
{
 8001e48:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b1a0      	cbz	r0, 8001e78 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e56:	b91b      	cbnz	r3, 8001e60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e5c:	f002 fb0c 	bl	8004478 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e62:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	1d21      	adds	r1, r4, #4
 8001e6a:	f7ff ffb5 	bl	8001dd8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e6e:	2301      	movs	r3, #1
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001e76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e7fc      	b.n	8001e76 <HAL_TIM_Base_Init+0x2e>

08001e7c <HAL_TIM_Encoder_Init>:
{
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	460c      	mov	r4, r1
  if(htim == NULL)
 8001e80:	4605      	mov	r5, r0
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d041      	beq.n	8001f0a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e8e:	b91b      	cbnz	r3, 8001e98 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001e94:	f002 fa94 	bl	80043c0 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e98:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8001e9a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e9c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ea4:	6883      	ldr	r3, [r0, #8]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	f7ff ff94 	bl	8001dd8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001eb0:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001eb2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001eb4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001eb6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001eb8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8001eba:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ebc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ebe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ec2:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ec6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001eca:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ecc:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ed0:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ed2:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eda:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8001edc:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ee2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ee6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001eea:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001eec:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001eee:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef2:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001ef4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001efa:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001efc:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8001efe:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001f00:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8001f02:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f04:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	e7fc      	b.n	8001f08 <HAL_TIM_Encoder_Init+0x8c>

08001f0e <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001f0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f12:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f04f 0302 	mov.w	r3, #2
 8001f1a:	d018      	beq.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f20:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f22:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f24:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f26:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f2c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4322      	orrs	r2, r4
 8001f32:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f4e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f50:	bd10      	pop	{r4, pc}

08001f52 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f52:	6803      	ldr	r3, [r0, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	2320      	movs	r3, #32
 8001f66:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f70:	4680      	mov	r8, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	68c1      	ldr	r1, [r0, #12]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	2419      	movs	r4, #25
 8001f7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f82:	6882      	ldr	r2, [r0, #8]
 8001f84:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001f86:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	f8d8 0014 	ldr.w	r0, [r8, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001f8e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001f92:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f96:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8001fa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <UART_SetConfig+0x138>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d147      	bne.n	8002040 <UART_SetConfig+0xd4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb0:	f7ff fde0 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fb4:	fb04 f300 	mul.w	r3, r4, r0
 8001fb8:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8001fbc:	2764      	movs	r7, #100	; 0x64
 8001fbe:	00b6      	lsls	r6, r6, #2
 8001fc0:	fbb3 f3f6 	udiv	r3, r3, r6
 8001fc4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fc8:	011e      	lsls	r6, r3, #4
 8001fca:	f7ff fdd3 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fce:	4360      	muls	r0, r4
 8001fd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fbb0 f5f3 	udiv	r5, r0, r3
 8001fda:	f7ff fdcb 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fde:	4360      	muls	r0, r4
 8001fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fee:	fb07 5313 	mls	r3, r7, r3, r5
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	; 0x32
 8001ff6:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ffa:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8001ffe:	f7ff fdb9 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002002:	4360      	muls	r0, r4
 8002004:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	fbb0 f9f2 	udiv	r9, r0, r2
 800200e:	f7ff fdb1 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002012:	4360      	muls	r0, r4
 8002014:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002018:	f8d8 2000 	ldr.w	r2, [r8]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	fbb3 f3f7 	udiv	r3, r3, r7
 8002026:	fb07 9313 	mls	r3, r7, r3, r9
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	3332      	adds	r3, #50	; 0x32
 800202e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	432b      	orrs	r3, r5
 8002038:	4433      	add	r3, r6
 800203a:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002040:	f7ff fd88 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002044:	fb04 f300 	mul.w	r3, r4, r0
 8002048:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800204c:	2764      	movs	r7, #100	; 0x64
 800204e:	00b6      	lsls	r6, r6, #2
 8002050:	fbb3 f3f6 	udiv	r3, r3, r6
 8002054:	fbb3 f3f7 	udiv	r3, r3, r7
 8002058:	011e      	lsls	r6, r3, #4
 800205a:	f7ff fd7b 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800205e:	4360      	muls	r0, r4
 8002060:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fbb0 f5f3 	udiv	r5, r0, r3
 800206a:	f7ff fd73 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800206e:	4360      	muls	r0, r4
 8002070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	fbb3 f3f7 	udiv	r3, r3, r7
 800207e:	fb07 5313 	mls	r3, r7, r3, r5
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	fbb3 f3f7 	udiv	r3, r3, r7
 800208a:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800208e:	f7ff fd61 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002092:	4360      	muls	r0, r4
 8002094:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	fbb0 f9f2 	udiv	r9, r0, r2
 800209e:	f7ff fd59 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80020a2:	e7b6      	b.n	8002012 <UART_SetConfig+0xa6>
 80020a4:	40013800 	.word	0x40013800

080020a8 <HAL_UART_Init>:
{
 80020a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020aa:	4604      	mov	r4, r0
 80020ac:	b340      	cbz	r0, 8002100 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b6:	b91b      	cbnz	r3, 80020c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020bc:	f002 f9f4 	bl	80044a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80020c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80020ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80020cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020d2:	f7ff ff4b 	bl	8001f6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80020f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80020fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002100:	2001      	movs	r0, #1
 8002102:	e7fc      	b.n	80020fe <HAL_UART_Init+0x56>

08002104 <HAL_UART_TxCpltCallback>:
 8002104:	4770      	bx	lr

08002106 <HAL_UART_RxCpltCallback>:
 8002106:	4770      	bx	lr

08002108 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002108:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800210c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800210e:	2b22      	cmp	r3, #34	; 0x22
 8002110:	d133      	bne.n	800217a <UART_Receive_IT+0x72>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002112:	6881      	ldr	r1, [r0, #8]
 8002114:	6904      	ldr	r4, [r0, #16]
 8002116:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800211a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800211c:	6802      	ldr	r2, [r0, #0]
 800211e:	d123      	bne.n	8002168 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002120:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002122:	b9ec      	cbnz	r4, 8002160 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002128:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800212c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800212e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002130:	3c01      	subs	r4, #1
 8002132:	b2a4      	uxth	r4, r4
 8002134:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002136:	b98c      	cbnz	r4, 800215c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	f022 0220 	bic.w	r2, r2, #32
 8002140:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002148:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002158:	f7ff ffd5 	bl	8002106 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800215c:	2000      	movs	r0, #0
 800215e:	e00d      	b.n	800217c <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f823 2b01 	strh.w	r2, [r3], #1
 8002166:	e7e1      	b.n	800212c <UART_Receive_IT+0x24>
 8002168:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	6281      	str	r1, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800216e:	b90c      	cbnz	r4, 8002174 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e7dc      	b.n	800212e <UART_Receive_IT+0x26>
 8002174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002178:	e7fa      	b.n	8002170 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800217a:	2002      	movs	r0, #2
}
 800217c:	bd10      	pop	{r4, pc}

0800217e <HAL_UART_ErrorCallback>:
 800217e:	4770      	bx	lr

08002180 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002180:	6803      	ldr	r3, [r0, #0]
{
 8002182:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002184:	681a      	ldr	r2, [r3, #0]
{
 8002186:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002188:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800218a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800218c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800218e:	d107      	bne.n	80021a0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002190:	0696      	lsls	r6, r2, #26
 8002192:	d558      	bpl.n	8002246 <HAL_UART_IRQHandler+0xc6>
 8002194:	068d      	lsls	r5, r1, #26
 8002196:	d556      	bpl.n	8002246 <HAL_UART_IRQHandler+0xc6>
}
 8002198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800219c:	f7ff bfb4 	b.w	8002108 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a0:	f015 0501 	ands.w	r5, r5, #1
 80021a4:	d102      	bne.n	80021ac <HAL_UART_IRQHandler+0x2c>
 80021a6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80021aa:	d04c      	beq.n	8002246 <HAL_UART_IRQHandler+0xc6>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ac:	07d3      	lsls	r3, r2, #31
 80021ae:	d505      	bpl.n	80021bc <HAL_UART_IRQHandler+0x3c>
 80021b0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021b2:	bf42      	ittt	mi
 80021b4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80021b6:	f043 0301 	orrmi.w	r3, r3, #1
 80021ba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021bc:	0750      	lsls	r0, r2, #29
 80021be:	d504      	bpl.n	80021ca <HAL_UART_IRQHandler+0x4a>
 80021c0:	b11d      	cbz	r5, 80021ca <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ca:	0793      	lsls	r3, r2, #30
 80021cc:	d504      	bpl.n	80021d8 <HAL_UART_IRQHandler+0x58>
 80021ce:	b11d      	cbz	r5, 80021d8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d8:	0716      	lsls	r6, r2, #28
 80021da:	d504      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x66>
 80021dc:	b11d      	cbz	r5, 80021e6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e8:	b343      	cbz	r3, 800223c <HAL_UART_IRQHandler+0xbc>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ea:	0695      	lsls	r5, r2, #26
 80021ec:	d504      	bpl.n	80021f8 <HAL_UART_IRQHandler+0x78>
 80021ee:	0688      	lsls	r0, r1, #26
 80021f0:	d502      	bpl.n	80021f8 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff ff88 	bl	8002108 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021f8:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80021fa:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021fc:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002200:	0711      	lsls	r1, r2, #28
 8002202:	d402      	bmi.n	800220a <HAL_UART_IRQHandler+0x8a>
 8002204:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002208:	d019      	beq.n	800223e <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 800220a:	f7ff fea2 	bl	8001f52 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	0652      	lsls	r2, r2, #25
 8002214:	d50f      	bpl.n	8002236 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002216:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002218:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002220:	b148      	cbz	r0, 8002236 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_UART_IRQHandler+0x13c>)
 8002224:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002226:	f7ff f8f1 	bl	800140c <HAL_DMA_Abort_IT>
 800222a:	b138      	cbz	r0, 800223c <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800222c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800222e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002234:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ffa1 	bl	800217e <HAL_UART_ErrorCallback>
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800223e:	f7ff ff9e 	bl	800217e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002244:	e7fa      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002246:	0616      	lsls	r6, r2, #24
 8002248:	d528      	bpl.n	800229c <HAL_UART_IRQHandler+0x11c>
 800224a:	060d      	lsls	r5, r1, #24
 800224c:	d526      	bpl.n	800229c <HAL_UART_IRQHandler+0x11c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800224e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002252:	2a21      	cmp	r2, #33	; 0x21
 8002254:	d1f2      	bne.n	800223c <HAL_UART_IRQHandler+0xbc>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002256:	68a1      	ldr	r1, [r4, #8]
 8002258:	6a22      	ldr	r2, [r4, #32]
 800225a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800225e:	d118      	bne.n	8002292 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002260:	8811      	ldrh	r1, [r2, #0]
 8002262:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002266:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002268:	6921      	ldr	r1, [r4, #16]
 800226a:	b981      	cbnz	r1, 800228e <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 800226c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800226e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002270:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002272:	3a01      	subs	r2, #1
 8002274:	b292      	uxth	r2, r2
 8002276:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002278:	2a00      	cmp	r2, #0
 800227a:	d1df      	bne.n	800223c <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002282:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e7d6      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 800228e:	3201      	adds	r2, #1
 8002290:	e7ed      	b.n	800226e <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002292:	1c51      	adds	r1, r2, #1
 8002294:	6221      	str	r1, [r4, #32]
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	e7e9      	b.n	8002270 <HAL_UART_IRQHandler+0xf0>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d5cd      	bpl.n	800223c <HAL_UART_IRQHandler+0xbc>
 80022a0:	064a      	lsls	r2, r1, #25
 80022a2:	d5cb      	bpl.n	800223c <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022a4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80022a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022ae:	2320      	movs	r3, #32
 80022b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80022b4:	f7ff ff26 	bl	8002104 <HAL_UART_TxCpltCallback>
 80022b8:	e7c0      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
 80022ba:	bf00      	nop
 80022bc:	080022c1 	.word	0x080022c1

080022c0 <UART_DMAAbortOnError>:
{
 80022c0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80022c2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80022c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022c8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80022ca:	f7ff ff58 	bl	800217e <HAL_UART_ErrorCallback>
}
 80022ce:	bd08      	pop	{r3, pc}

080022d0 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>:
#include "MPU9250.h"
//#include "Global.h"
//#include "Timer.h"
//#include <exception>

MPU9250::MPU9250(SPI_TypeDef * const spi, GPIO_TypeDef * const ss_gpio, const uint32_t ss_pin)
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	: _spi(spi), _ss_gpio(ss_gpio), _ss_pin(ss_pin)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	609a      	str	r2, [r3, #8]
{
	this->_gyroZ_bias = 0.0;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
}
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <_ZNK7MPU92509_spiWriteEh>:

uint8_t MPU9250::_spiWrite(const uint8_t data) const
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
	while(!(_spi->SR & SPI_SR_TXE)) ;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d000      	beq.n	800232a <_ZNK7MPU92509_spiWriteEh+0x26>
 8002328:	e7f2      	b.n	8002310 <_ZNK7MPU92509_spiWriteEh+0xc>
	_spi->DR = data;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	60da      	str	r2, [r3, #12]
	while(!(_spi->SR & SPI_SR_RXNE)) ;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d000      	beq.n	800234c <_ZNK7MPU92509_spiWriteEh+0x48>
 800234a:	e7f2      	b.n	8002332 <_ZNK7MPU92509_spiWriteEh+0x2e>
	return (uint8_t)_spi->DR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	b2db      	uxtb	r3, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <_ZNK7MPU925014_spiChipSelectEv>:

void MPU9250::_spiChipSelect(void) const
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = (_ss_pin << 16);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0412      	lsls	r2, r2, #16
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <_ZNK7MPU925016_spiChipDeselectEv>:

void MPU9250::_spiChipDeselect(void) const
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = _ss_pin;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	611a      	str	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <_ZNK7MPU92509WriteByteEhh>:

uint8_t MPU9250::WriteByte(const uint8_t addr, const uint8_t data) const
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
 80023a4:	4613      	mov	r3, r2
 80023a6:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t result = 0x00;
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]

	_spiChipSelect();
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffd6 	bl	800235e <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffa4 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>

	result = _spiWrite(data);
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff9f 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]

	_spiChipDeselect();
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffd6 	bl	800237c <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	b2db      	uxtb	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNK7MPU92509WriteWordEht>:

uint16_t MPU9250::WriteWord(const uint8_t addr, const uint16_t data) const
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
	volatile uint16_t result = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	81fb      	strh	r3, [r7, #14]

	_spiChipSelect();
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffb4 	bl	800235e <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff82 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>

	result = (uint16_t)(_spiWrite((uint8_t)((data >> 8) & 0xff)) << 8);
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff7a 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 8002410:	4603      	mov	r3, r0
 8002412:	b29b      	uxth	r3, r3
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	81fb      	strh	r3, [r7, #14]

	result = (uint16_t)(result | _spiWrite((uint8_t)(data & 0xff)));
 800241a:	883b      	ldrh	r3, [r7, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff6f 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 8002426:	4603      	mov	r3, r0
 8002428:	b29a      	uxth	r2, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	81fb      	strh	r3, [r7, #14]

	_spiChipDeselect();
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffa1 	bl	800237c <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	b29b      	uxth	r3, r3
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <_ZN8MadgwickC1Ev+0x4c>)
 8002454:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800245c:	605a      	str	r2, [r3, #4]
	q1 = 0.0f;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
	q2 = 0.0f;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
	q3 = 0.0f;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
	invSampleFreq = 1.0f / sampleFreqDef;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
 800247c:	615a      	str	r2, [r3, #20]
	anglesComputed = 0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	3dcccccd 	.word	0x3dcccccd

08002498 <_ZN8Madgwick9updateIMUEffffff>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay,
		float az) {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b09b      	sub	sp, #108	; 0x6c
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 80024a6:	4967      	ldr	r1, [pc, #412]	; (8002644 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f7fe fb7b 	bl	8000ba4 <__aeabi_fmul>
 80024ae:	4603      	mov	r3, r0
 80024b0:	60bb      	str	r3, [r7, #8]
	gy *= 0.0174533f;
 80024b2:	4964      	ldr	r1, [pc, #400]	; (8002644 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe fb75 	bl	8000ba4 <__aeabi_fmul>
 80024ba:	4603      	mov	r3, r0
 80024bc:	607b      	str	r3, [r7, #4]
	gz *= 0.0174533f;
 80024be:	4961      	ldr	r1, [pc, #388]	; (8002644 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7fe fb6f 	bl	8000ba4 <__aeabi_fmul>
 80024c6:	4603      	mov	r3, r0
 80024c8:	603b      	str	r3, [r7, #0]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fb65 	bl	8000ba4 <__aeabi_fmul>
 80024da:	4603      	mov	r3, r0
 80024dc:	461c      	mov	r4, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fb5d 	bl	8000ba4 <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7fe fa4e 	bl	8000990 <__aeabi_fsub>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461c      	mov	r4, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fb50 	bl	8000ba4 <__aeabi_fmul>
 8002504:	4603      	mov	r3, r0
 8002506:	4619      	mov	r1, r3
 8002508:	4620      	mov	r0, r4
 800250a:	f7fe fa41 	bl	8000990 <__aeabi_fsub>
 800250e:	4603      	mov	r3, r0
 8002510:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fb45 	bl	8000ba4 <__aeabi_fmul>
 800251a:	4603      	mov	r3, r0
 800251c:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fb3d 	bl	8000ba4 <__aeabi_fmul>
 800252a:	4603      	mov	r3, r0
 800252c:	461c      	mov	r4, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fb35 	bl	8000ba4 <__aeabi_fmul>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	4620      	mov	r0, r4
 8002540:	f7fe fa28 	bl	8000994 <__addsf3>
 8002544:	4603      	mov	r3, r0
 8002546:	461c      	mov	r4, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fb28 	bl	8000ba4 <__aeabi_fmul>
 8002554:	4603      	mov	r3, r0
 8002556:	4619      	mov	r1, r3
 8002558:	4620      	mov	r0, r4
 800255a:	f7fe fa19 	bl	8000990 <__aeabi_fsub>
 800255e:	4603      	mov	r3, r0
 8002560:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fb1d 	bl	8000ba4 <__aeabi_fmul>
 800256a:	4603      	mov	r3, r0
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fb15 	bl	8000ba4 <__aeabi_fmul>
 800257a:	4603      	mov	r3, r0
 800257c:	461c      	mov	r4, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fb0d 	bl	8000ba4 <__aeabi_fmul>
 800258a:	4603      	mov	r3, r0
 800258c:	4619      	mov	r1, r3
 800258e:	4620      	mov	r0, r4
 8002590:	f7fe f9fe 	bl	8000990 <__aeabi_fsub>
 8002594:	4603      	mov	r3, r0
 8002596:	461c      	mov	r4, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fb00 	bl	8000ba4 <__aeabi_fmul>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7fe f9f3 	bl	8000994 <__addsf3>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe faf5 	bl	8000ba4 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe faed 	bl	8000ba4 <__aeabi_fmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461c      	mov	r4, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fae5 	bl	8000ba4 <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fe f9d8 	bl	8000994 <__addsf3>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461c      	mov	r4, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fad8 	bl	8000ba4 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7fe f9c9 	bl	8000990 <__aeabi_fsub>
 80025fe:	4603      	mov	r3, r0
 8002600:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe facd 	bl	8000ba4 <__aeabi_fmul>
 800260a:	4603      	mov	r3, r0
 800260c:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002614:	f7fe fc5a 	bl	8000ecc <__aeabi_fcmpeq>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d014      	beq.n	8002648 <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002624:	f7fe fc52 	bl	8000ecc <__aeabi_fcmpeq>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002636:	f7fe fc49 	bl	8000ecc <__aeabi_fcmpeq>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 8231 	bne.w	8002aa4 <_ZN8Madgwick9updateIMUEffffff+0x60c>
 8002642:	e001      	b.n	8002648 <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 8002644:	3c8efa39 	.word	0x3c8efa39

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002648:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800264a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800264c:	f7fe faaa 	bl	8000ba4 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	461c      	mov	r4, r3
 8002654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002656:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002658:	f7fe faa4 	bl	8000ba4 <__aeabi_fmul>
 800265c:	4603      	mov	r3, r0
 800265e:	4619      	mov	r1, r3
 8002660:	4620      	mov	r0, r4
 8002662:	f7fe f997 	bl	8000994 <__addsf3>
 8002666:	4603      	mov	r3, r0
 8002668:	461c      	mov	r4, r3
 800266a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800266e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002672:	f7fe fa97 	bl	8000ba4 <__aeabi_fmul>
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	4620      	mov	r0, r4
 800267c:	f7fe f98a 	bl	8000994 <__addsf3>
 8002680:	4603      	mov	r3, r0
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fabc 	bl	8002c00 <_ZN8Madgwick7invSqrtEf>
 8002688:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 800268a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800268c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800268e:	f7fe fa89 	bl	8000ba4 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	67bb      	str	r3, [r7, #120]	; 0x78
		ay *= recipNorm;
 8002696:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002698:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800269a:	f7fe fa83 	bl	8000ba4 <__aeabi_fmul>
 800269e:	4603      	mov	r3, r0
 80026a0:	67fb      	str	r3, [r7, #124]	; 0x7c
		az *= recipNorm;
 80026a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026a4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026a8:	f7fe fa7c 	bl	8000ba4 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe f96b 	bl	8000994 <__addsf3>
 80026be:	4603      	mov	r3, r0
 80026c0:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe f963 	bl	8000994 <__addsf3>
 80026ce:	4603      	mov	r3, r0
 80026d0:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe f95b 	bl	8000994 <__addsf3>
 80026de:	4603      	mov	r3, r0
 80026e0:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe f953 	bl	8000994 <__addsf3>
 80026ee:	4603      	mov	r3, r0
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fa52 	bl	8000ba4 <__aeabi_fmul>
 8002700:	4603      	mov	r3, r0
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fa49 	bl	8000ba4 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fa40 	bl	8000ba4 <__aeabi_fmul>
 8002724:	4603      	mov	r3, r0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fa37 	bl	8000ba4 <__aeabi_fmul>
 8002736:	4603      	mov	r3, r0
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fa2e 	bl	8000ba4 <__aeabi_fmul>
 8002748:	4603      	mov	r3, r0
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7fe fa24 	bl	8000ba4 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f7fe fa1a 	bl	8000ba4 <__aeabi_fmul>
 8002770:	4603      	mov	r3, r0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7fe fa10 	bl	8000ba4 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7fe fa06 	bl	8000ba4 <__aeabi_fmul>
 8002798:	4603      	mov	r3, r0
 800279a:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027a0:	f7fe fa00 	bl	8000ba4 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461c      	mov	r4, r3
 80027a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80027aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80027ac:	f7fe f9fa 	bl	8000ba4 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4619      	mov	r1, r3
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7fe f8ed 	bl	8000994 <__addsf3>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461c      	mov	r4, r3
 80027be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027c2:	f7fe f9ef 	bl	8000ba4 <__aeabi_fmul>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4619      	mov	r1, r3
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7fe f8e2 	bl	8000994 <__addsf3>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461c      	mov	r4, r3
 80027d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027d8:	f7fe f9e4 	bl	8000ba4 <__aeabi_fmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	4619      	mov	r1, r3
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7fe f8d5 	bl	8000990 <__aeabi_fsub>
 80027e6:	4603      	mov	r3, r0
 80027e8:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 80027ea:	6a39      	ldr	r1, [r7, #32]
 80027ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027ee:	f7fe f9d9 	bl	8000ba4 <__aeabi_fmul>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461c      	mov	r4, r3
 80027f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80027f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027fa:	f7fe f9d3 	bl	8000ba4 <__aeabi_fmul>
 80027fe:	4603      	mov	r3, r0
 8002800:	4619      	mov	r1, r3
 8002802:	4620      	mov	r0, r4
 8002804:	f7fe f8c4 	bl	8000990 <__aeabi_fsub>
 8002808:	4603      	mov	r3, r0
 800280a:	461c      	mov	r4, r3
 800280c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002812:	f7fe f9c7 	bl	8000ba4 <__aeabi_fmul>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f7fe f9bf 	bl	8000ba4 <__aeabi_fmul>
 8002826:	4603      	mov	r3, r0
 8002828:	4619      	mov	r1, r3
 800282a:	4620      	mov	r0, r4
 800282c:	f7fe f8b2 	bl	8000994 <__addsf3>
 8002830:	4603      	mov	r3, r0
 8002832:	461c      	mov	r4, r3
 8002834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002836:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002838:	f7fe f9b4 	bl	8000ba4 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	4619      	mov	r1, r3
 8002840:	4620      	mov	r0, r4
 8002842:	f7fe f8a5 	bl	8000990 <__aeabi_fsub>
 8002846:	4603      	mov	r3, r0
 8002848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f8a0 	bl	8000990 <__aeabi_fsub>
 8002850:	4603      	mov	r3, r0
 8002852:	461c      	mov	r4, r3
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002856:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002858:	f7fe f9a4 	bl	8000ba4 <__aeabi_fmul>
 800285c:	4603      	mov	r3, r0
 800285e:	4619      	mov	r1, r3
 8002860:	4620      	mov	r0, r4
 8002862:	f7fe f897 	bl	8000994 <__addsf3>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
 800286a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800286e:	f7fe f999 	bl	8000ba4 <__aeabi_fmul>
 8002872:	4603      	mov	r3, r0
 8002874:	4619      	mov	r1, r3
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe f88c 	bl	8000994 <__addsf3>
 800287c:	4603      	mov	r3, r0
 800287e:	461c      	mov	r4, r3
 8002880:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002884:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002886:	f7fe f98d 	bl	8000ba4 <__aeabi_fmul>
 800288a:	4603      	mov	r3, r0
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 800288c:	4619      	mov	r1, r3
 800288e:	4620      	mov	r0, r4
 8002890:	f7fe f880 	bl	8000994 <__addsf3>
 8002894:	4603      	mov	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8002898:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800289c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800289e:	f7fe f981 	bl	8000ba4 <__aeabi_fmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7fe f979 	bl	8000ba4 <__aeabi_fmul>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461c      	mov	r4, r3
 80028b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80028b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028ba:	f7fe f973 	bl	8000ba4 <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f866 	bl	8000994 <__addsf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461c      	mov	r4, r3
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028d0:	f7fe f968 	bl	8000ba4 <__aeabi_fmul>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4619      	mov	r1, r3
 80028d8:	4620      	mov	r0, r4
 80028da:	f7fe f85b 	bl	8000994 <__addsf3>
 80028de:	4603      	mov	r3, r0
 80028e0:	461c      	mov	r4, r3
 80028e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028e6:	f7fe f95d 	bl	8000ba4 <__aeabi_fmul>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7fe f84e 	bl	8000990 <__aeabi_fsub>
 80028f4:	4603      	mov	r3, r0
 80028f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f849 	bl	8000990 <__aeabi_fsub>
 80028fe:	4603      	mov	r3, r0
 8002900:	461c      	mov	r4, r3
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002906:	f7fe f94d 	bl	8000ba4 <__aeabi_fmul>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f7fe f840 	bl	8000994 <__addsf3>
 8002914:	4603      	mov	r3, r0
 8002916:	461c      	mov	r4, r3
 8002918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800291c:	f7fe f942 	bl	8000ba4 <__aeabi_fmul>
 8002920:	4603      	mov	r3, r0
 8002922:	4619      	mov	r1, r3
 8002924:	4620      	mov	r0, r4
 8002926:	f7fe f835 	bl	8000994 <__addsf3>
 800292a:	4603      	mov	r3, r0
 800292c:	461c      	mov	r4, r3
 800292e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002932:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002934:	f7fe f936 	bl	8000ba4 <__aeabi_fmul>
 8002938:	4603      	mov	r3, r0
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 800293a:	4619      	mov	r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f7fe f829 	bl	8000994 <__addsf3>
 8002942:	4603      	mov	r3, r0
 8002944:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002946:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800294a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294c:	f7fe f92a 	bl	8000ba4 <__aeabi_fmul>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f7fe f922 	bl	8000ba4 <__aeabi_fmul>
 8002960:	4603      	mov	r3, r0
 8002962:	461c      	mov	r4, r3
 8002964:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002966:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002968:	f7fe f91c 	bl	8000ba4 <__aeabi_fmul>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe f80d 	bl	8000990 <__aeabi_fsub>
 8002976:	4603      	mov	r3, r0
 8002978:	461c      	mov	r4, r3
 800297a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800297e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002980:	f7fe f910 	bl	8000ba4 <__aeabi_fmul>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7fe f908 	bl	8000ba4 <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f7fd fffb 	bl	8000994 <__addsf3>
 800299e:	4603      	mov	r3, r0
 80029a0:	461c      	mov	r4, r3
 80029a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80029a6:	f7fe f8fd 	bl	8000ba4 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7fd ffee 	bl	8000990 <__aeabi_fsub>
 80029b4:	4603      	mov	r3, r0
 80029b6:	613b      	str	r3, [r7, #16]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029b8:	69f9      	ldr	r1, [r7, #28]
 80029ba:	69f8      	ldr	r0, [r7, #28]
 80029bc:	f7fe f8f2 	bl	8000ba4 <__aeabi_fmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461c      	mov	r4, r3
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	69b8      	ldr	r0, [r7, #24]
 80029c8:	f7fe f8ec 	bl	8000ba4 <__aeabi_fmul>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fd ffdf 	bl	8000994 <__addsf3>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461c      	mov	r4, r3
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	6978      	ldr	r0, [r7, #20]
 80029de:	f7fe f8e1 	bl	8000ba4 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fd ffd4 	bl	8000994 <__addsf3>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461c      	mov	r4, r3
 80029f0:	6939      	ldr	r1, [r7, #16]
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f7fe f8d6 	bl	8000ba4 <__aeabi_fmul>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fd ffc9 	bl	8000994 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f8fb 	bl	8002c00 <_ZN8Madgwick7invSqrtEf>
 8002a0a:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a0e:	69f8      	ldr	r0, [r7, #28]
 8002a10:	f7fe f8c8 	bl	8000ba4 <__aeabi_fmul>
 8002a14:	4603      	mov	r3, r0
 8002a16:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a1a:	69b8      	ldr	r0, [r7, #24]
 8002a1c:	f7fe f8c2 	bl	8000ba4 <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002a24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7fe f8bc 	bl	8000ba4 <__aeabi_fmul>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a32:	6938      	ldr	r0, [r7, #16]
 8002a34:	f7fe f8b6 	bl	8000ba4 <__aeabi_fmul>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69f9      	ldr	r1, [r7, #28]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f8ae 	bl	8000ba4 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a4e:	f7fd ff9f 	bl	8000990 <__aeabi_fsub>
 8002a52:	4603      	mov	r3, r0
 8002a54:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f8a1 	bl	8000ba4 <__aeabi_fmul>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a68:	f7fd ff92 	bl	8000990 <__aeabi_fsub>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f894 	bl	8000ba4 <__aeabi_fmul>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a82:	f7fd ff85 	bl	8000990 <__aeabi_fsub>
 8002a86:	4603      	mov	r3, r0
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6939      	ldr	r1, [r7, #16]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe f887 	bl	8000ba4 <__aeabi_fmul>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a9c:	f7fd ff78 	bl	8000990 <__aeabi_fsub>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685c      	ldr	r4, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f878 	bl	8000ba4 <__aeabi_fmul>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7fd ff6b 	bl	8000994 <__addsf3>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
	q1 += qDot2 * invSampleFreq;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689c      	ldr	r4, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe f867 	bl	8000ba4 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7fd ff5a 	bl	8000994 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]
	q2 += qDot3 * invSampleFreq;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68dc      	ldr	r4, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f856 	bl	8000ba4 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7fd ff49 	bl	8000994 <__addsf3>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	60da      	str	r2, [r3, #12]
	q3 += qDot4 * invSampleFreq;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691c      	ldr	r4, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f845 	bl	8000ba4 <__aeabi_fmul>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7fd ff38 	bl	8000994 <__addsf3>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	611a      	str	r2, [r3, #16]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7fe f834 	bl	8000ba4 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f7fe f82a 	bl	8000ba4 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7fd ff1d 	bl	8000994 <__addsf3>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7fe f81b 	bl	8000ba4 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fd ff0e 	bl	8000994 <__addsf3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe f80c 	bl	8000ba4 <__aeabi_fmul>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7fd feff 	bl	8000994 <__addsf3>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f831 	bl	8002c00 <_ZN8Madgwick7invSqrtEf>
 8002b9e:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fffc 	bl	8000ba4 <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
	q1 *= recipNorm;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fff2 	bl	8000ba4 <__aeabi_fmul>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
	q2 *= recipNorm;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd ffe8 	bl	8000ba4 <__aeabi_fmul>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	60da      	str	r2, [r3, #12]
	q3 *= recipNorm;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd ffde 	bl	8000ba4 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002bf8:	bf00      	nop
 8002bfa:	376c      	adds	r7, #108	; 0x6c
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002c08:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd ffc9 	bl	8000ba4 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	617b      	str	r3, [r7, #20]
	float y = x;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	105a      	asrs	r2, r3, #1
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <_ZN8Madgwick7invSqrtEf+0xac>)
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd ffb3 	bl	8000ba4 <__aeabi_fmul>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fd ffac 	bl	8000ba4 <__aeabi_fmul>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002c54:	f7fd fe9c 	bl	8000990 <__aeabi_fsub>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f7fd ff9f 	bl	8000ba4 <__aeabi_fmul>
 8002c66:	4603      	mov	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6979      	ldr	r1, [r7, #20]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd ff98 	bl	8000ba4 <__aeabi_fmul>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7fd ff91 	bl	8000ba4 <__aeabi_fmul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002c8a:	f7fd fe81 	bl	8000990 <__aeabi_fsub>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f7fd ff84 	bl	8000ba4 <__aeabi_fmul>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	613b      	str	r3, [r7, #16]
	return y;
 8002ca0:	693b      	ldr	r3, [r7, #16]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	5f3759df 	.word	0x5f3759df

08002cb0 <_ZN8Madgwick13computeAnglesEv>:

//-------------------------------------------------------------------------------------------

void Madgwick::computeAngles() {
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	roll = atan2f(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7fd ff6e 	bl	8000ba4 <__aeabi_fmul>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461c      	mov	r4, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f7fd ff64 	bl	8000ba4 <__aeabi_fmul>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7fd fe57 	bl	8000994 <__addsf3>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461c      	mov	r4, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fd ff55 	bl	8000ba4 <__aeabi_fmul>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002d02:	f7fd fe45 	bl	8000990 <__aeabi_fsub>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461d      	mov	r5, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f7fd ff45 	bl	8000ba4 <__aeabi_fmul>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f7fd fe36 	bl	8000990 <__aeabi_fsub>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4619      	mov	r1, r3
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f001 fd31 	bl	8004790 <atan2f>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
	pitch = asinf(-2.0f * (q1 * q3 - q0 * q2));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f7fd ff30 	bl	8000ba4 <__aeabi_fmul>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461c      	mov	r4, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f7fd ff26 	bl	8000ba4 <__aeabi_fmul>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7fd fe17 	bl	8000990 <__aeabi_fsub>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd ff1b 	bl	8000ba4 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fcbf 	bl	80046f4 <asinf>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	61da      	str	r2, [r3, #28]
	yaw = atan2f(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7fd ff0c 	bl	8000ba4 <__aeabi_fmul>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461c      	mov	r4, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f7fd ff02 	bl	8000ba4 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7fd fdf5 	bl	8000994 <__addsf3>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461c      	mov	r4, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7fd fef3 	bl	8000ba4 <__aeabi_fmul>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002dc6:	f7fd fde3 	bl	8000990 <__aeabi_fsub>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461d      	mov	r5, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7fd fee3 	bl	8000ba4 <__aeabi_fmul>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4619      	mov	r1, r3
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7fd fdd4 	bl	8000990 <__aeabi_fsub>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	4620      	mov	r0, r4
 8002dee:	f001 fccf 	bl	8004790 <atan2f>
 8002df2:	4602      	mov	r2, r0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	621a      	str	r2, [r3, #32]
	anglesComputed = 1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}

08002e08 <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e18:	f7fd ff78 	bl	8000d0c <__aeabi_fdiv>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	615a      	str	r2, [r3, #20]
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_ZN8Madgwick13getYawRadiansEv>:
    }
    float getPitchRadians() {
        if (!anglesComputed) computeAngles();
        return pitch;
    }
    float getYawRadians() {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
        if (!anglesComputed) computeAngles();
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <_ZN8Madgwick13getYawRadiansEv+0x18>
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff36 	bl	8002cb0 <_ZN8Madgwick13computeAnglesEv>
        return yaw;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
    }
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_ZN8OdometryC1Ev>:

#include <cmath>

Madgwick MDGF;

Odometry::Odometry(void) {
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]

	this->x = 0.0f;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
	this->y = 0.0f;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
	this->yaw = 0.0f;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]

	//this->mpu9250 = new MPU9250(SPI_MPU9250, GPIOC, GPIO_PIN_0);
	this->mpu9250 = new MPU9250(SPI_MPU9250, GPIO_MPU9250, PIN_MPU9250);
 8002e76:	2010      	movs	r0, #16
 8002e78:	f001 fbb7 	bl	80045ea <_Znwj>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461c      	mov	r4, r3
 8002e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e84:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <_ZN8OdometryC1Ev+0x4c>)
 8002e86:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <_ZN8OdometryC1Ev+0x50>)
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff fa21 	bl	80022d0 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60dc      	str	r4, [r3, #12]
}
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd90      	pop	{r4, r7, pc}
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	40003800 	.word	0x40003800

08002ea4 <_ZNK8Odometry7GetBiasEPfS0_>:

void Odometry::GetBias(float * const avg, float * const stdev) const {
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b09b      	sub	sp, #108	; 0x6c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
	static constexpr int NumOfTrial = 256;

	float _avg[6] = { };
 8002eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	615a      	str	r2, [r3, #20]
	float _stdev[6] = { };
 8002ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	615a      	str	r2, [r3, #20]

	for (int i = 0; i < NumOfTrial; i++) {
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eda:	2bff      	cmp	r3, #255	; 0xff
 8002edc:	f300 80ee 	bgt.w	80030bc <_ZNK8Odometry7GetBiasEPfS0_+0x218>
		float reading[6] = { };
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
 8002ef0:	615a      	str	r2, [r3, #20]
		reading[0] = (int16_t) mpu9250->WriteWord(
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	21c3      	movs	r1, #195	; 0xc3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fa6e 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002f00:	4603      	mov	r3, r0
 8002f02:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_XOUT_H, 0x0000) * 1000.0f
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fdf9 	bl	8000afc <__aeabi_i2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	49b3      	ldr	r1, [pc, #716]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fe48 	bl	8000ba4 <__aeabi_fmul>
 8002f14:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 8002f16:	49b2      	ldr	r1, [pc, #712]	; (80031e0 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fef7 	bl	8000d0c <__aeabi_fdiv>
 8002f1e:	4603      	mov	r3, r0
		reading[0] = (int16_t) mpu9250->WriteWord(
 8002f20:	617b      	str	r3, [r7, #20]
		reading[1] = (int16_t) mpu9250->WriteWord(
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	21c5      	movs	r1, #197	; 0xc5
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fa56 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002f30:	4603      	mov	r3, r0
 8002f32:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_YOUT_H, 0x0000) * 1000.0f
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fde1 	bl	8000afc <__aeabi_i2f>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	49a7      	ldr	r1, [pc, #668]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fe30 	bl	8000ba4 <__aeabi_fmul>
 8002f44:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 8002f46:	49a6      	ldr	r1, [pc, #664]	; (80031e0 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fedf 	bl	8000d0c <__aeabi_fdiv>
 8002f4e:	4603      	mov	r3, r0
		reading[1] = (int16_t) mpu9250->WriteWord(
 8002f50:	61bb      	str	r3, [r7, #24]
		reading[2] = (int16_t) mpu9250->WriteWord(
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	21c7      	movs	r1, #199	; 0xc7
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa3e 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002f60:	4603      	mov	r3, r0
 8002f62:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000) * 1000.0f
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fdc9 	bl	8000afc <__aeabi_i2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	499b      	ldr	r1, [pc, #620]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fe18 	bl	8000ba4 <__aeabi_fmul>
 8002f74:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 8002f76:	499a      	ldr	r1, [pc, #616]	; (80031e0 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fec7 	bl	8000d0c <__aeabi_fdiv>
 8002f7e:	4603      	mov	r3, r0
		reading[2] = (int16_t) mpu9250->WriteWord(
 8002f80:	61fb      	str	r3, [r7, #28]
		reading[3] = (int16_t) mpu9250->WriteWord(
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	21bb      	movs	r1, #187	; 0xbb
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fa26 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_XOUT_H, 0x0000) * 1000.0f
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fdb1 	bl	8000afc <__aeabi_i2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	498f      	ldr	r1, [pc, #572]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fe00 	bl	8000ba4 <__aeabi_fmul>
 8002fa4:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 8002fa6:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd feae 	bl	8000d0c <__aeabi_fdiv>
 8002fb0:	4603      	mov	r3, r0
		reading[3] = (int16_t) mpu9250->WriteWord(
 8002fb2:	623b      	str	r3, [r7, #32]
		reading[4] = (int16_t) mpu9250->WriteWord(
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	21bd      	movs	r1, #189	; 0xbd
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fa0d 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_YOUT_H, 0x0000) * 1000.0f
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fd98 	bl	8000afc <__aeabi_i2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4983      	ldr	r1, [pc, #524]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fde7 	bl	8000ba4 <__aeabi_fmul>
 8002fd6:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 8002fd8:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fe95 	bl	8000d0c <__aeabi_fdiv>
 8002fe2:	4603      	mov	r3, r0
		reading[4] = (int16_t) mpu9250->WriteWord(
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
		reading[5] = (int16_t) mpu9250->WriteWord(
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	21bf      	movs	r1, #191	; 0xbf
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f9f4 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_ZOUT_H, 0x0000) * 1000.0f
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fd7f 	bl	8000afc <__aeabi_i2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4976      	ldr	r1, [pc, #472]	; (80031dc <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fdce 	bl	8000ba4 <__aeabi_fmul>
 8003008:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 800300a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe7c 	bl	8000d0c <__aeabi_fdiv>
 8003014:	4603      	mov	r3, r0
		reading[5] = (int16_t) mpu9250->WriteWord(
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int j = 0; j < 6; j++) {
 8003018:	2300      	movs	r3, #0
 800301a:	663b      	str	r3, [r7, #96]	; 0x60
 800301c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301e:	2b05      	cmp	r3, #5
 8003020:	dc45      	bgt.n	80030ae <_ZNK8Odometry7GetBiasEPfS0_+0x20a>
			_avg[j] += reading[j];
 8003022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800302a:	4413      	add	r3, r2
 800302c:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003038:	440b      	add	r3, r1
 800303a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7fd fca7 	bl	8000994 <__addsf3>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003052:	440b      	add	r3, r1
 8003054:	f843 2c24 	str.w	r2, [r3, #-36]
			_stdev[j] += reading[j] * reading[j];
 8003058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003060:	4413      	add	r3, r2
 8003062:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 8003066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800306e:	4413      	add	r3, r2
 8003070:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800307c:	440b      	add	r3, r1
 800307e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7fd fd8d 	bl	8000ba4 <__aeabi_fmul>
 800308a:	4603      	mov	r3, r0
 800308c:	4619      	mov	r1, r3
 800308e:	4620      	mov	r0, r4
 8003090:	f7fd fc80 	bl	8000994 <__addsf3>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80030a0:	440b      	add	r3, r1
 80030a2:	f843 2c3c 	str.w	r2, [r3, #-60]
		for (int j = 0; j < 6; j++) {
 80030a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a8:	3301      	adds	r3, #1
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
 80030ac:	e7b6      	b.n	800301c <_ZNK8Odometry7GetBiasEPfS0_+0x178>
		}
		//Timer::sleep(5);
		HAL_Delay(4); //６つ分やるとすごい時間になるので短く 5->1
 80030ae:	2004      	movs	r0, #4
 80030b0:	f7fd ffc2 	bl	8001038 <HAL_Delay>
	for (int i = 0; i < NumOfTrial; i++) {
 80030b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b6:	3301      	adds	r3, #1
 80030b8:	667b      	str	r3, [r7, #100]	; 0x64
 80030ba:	e70d      	b.n	8002ed8 <_ZNK8Odometry7GetBiasEPfS0_+0x34>
	}

	for (int k = 0; k < 6; k++) {
 80030bc:	2300      	movs	r3, #0
 80030be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	f300 8085 	bgt.w	80031d2 <_ZNK8Odometry7GetBiasEPfS0_+0x32e>
		_avg[k] /= NumOfTrial;
 80030c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80030d0:	4413      	add	r3, r2
 80030d2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80030d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fe16 	bl	8000d0c <__aeabi_fdiv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80030ec:	440b      	add	r3, r1
 80030ee:	f843 2c24 	str.w	r2, [r3, #-36]

		_stdev[k] -= NumOfTrial * _avg[k] * _avg[k];
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80030fa:	4413      	add	r3, r2
 80030fc:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003108:	4413      	add	r3, r2
 800310a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800310e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fd46 	bl	8000ba4 <__aeabi_fmul>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003124:	440b      	add	r3, r1
 8003126:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fd fd39 	bl	8000ba4 <__aeabi_fmul>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	4620      	mov	r0, r4
 8003138:	f7fd fc2a 	bl	8000990 <__aeabi_fsub>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003148:	440b      	add	r3, r1
 800314a:	f843 2c3c 	str.w	r2, [r3, #-60]
		_stdev[k] /= NumOfTrial - 1;
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003156:	4413      	add	r3, r2
 8003158:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800315c:	4921      	ldr	r1, [pc, #132]	; (80031e4 <_ZNK8Odometry7GetBiasEPfS0_+0x340>)
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd fdd4 	bl	8000d0c <__aeabi_fdiv>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003170:	440b      	add	r3, r1
 8003172:	f843 2c3c 	str.w	r2, [r3, #-60]
		_stdev[k] = sqrtf(_stdev[k]);
 8003176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800317e:	4413      	add	r3, r2
 8003180:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003184:	4618      	mov	r0, r3
 8003186:	f001 fb05 	bl	8004794 <sqrtf>
 800318a:	4602      	mov	r2, r0
 800318c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003194:	440b      	add	r3, r1
 8003196:	f843 2c3c 	str.w	r2, [r3, #-60]

		avg[k] = _avg[k];
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80031aa:	440b      	add	r3, r1
 80031ac:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80031b0:	6013      	str	r3, [r2, #0]
		stdev[k] = _stdev[k];
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	441a      	add	r2, r3
 80031ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80031c2:	440b      	add	r3, r1
 80031c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031c8:	6013      	str	r3, [r2, #0]
	for (int k = 0; k < 6; k++) {
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	3301      	adds	r3, #1
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d0:	e776      	b.n	80030c0 <_ZNK8Odometry7GetBiasEPfS0_+0x21c>
	}
}
 80031d2:	bf00      	nop
 80031d4:	376c      	adds	r7, #108	; 0x6c
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	447a0000 	.word	0x447a0000
 80031e0:	42033333 	.word	0x42033333
 80031e4:	437f0000 	.word	0x437f0000

080031e8 <_ZN8Odometry8InitGyroEv>:

bool Odometry::InitGyro(void) {
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b090      	sub	sp, #64	; 0x40
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	uint8_t whoami = mpu9250->WriteByte(READ_FLAG | MPUREG_WHOAMI, 0x00);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	21f5      	movs	r1, #245	; 0xf5
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f8cd 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>
 80031fe:	4603      	mov	r3, r0
 8003200:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	if (whoami != 0x71) {
 8003204:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003208:	2b71      	cmp	r3, #113	; 0x71
 800320a:	d007      	beq.n	800321c <_ZN8Odometry8InitGyroEv+0x34>
		delete mpu9250;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2110      	movs	r1, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f9e7 	bl	80045e6 <_ZdlPvj>
		return false;
 8003218:	2300      	movs	r3, #0
 800321a:	e0ab      	b.n	8003374 <_ZN8Odometry8InitGyroEv+0x18c>
	}

	// get stable time source
	mpu9250->WriteByte(MPUREG_PWR_MGMT_1, 0x03); // Set clock source to be PLL with z-axis gyroscope reference, bits 2:0 = 011
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2203      	movs	r2, #3
 8003222:	216b      	movs	r1, #107	; 0x6b
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f8b7 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>
	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 4000 and 250 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 000; this sets the sample rate at 8 kHz for both
	// Maximum delay is 0.97 ms which is just over a 1 kHz maximum rate
	//mpu9250->WriteByte(MPUREG_CONFIG, 0x00);
	mpu9250->WriteByte(MPUREG_CONFIG, 0x03);	//1khz
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2203      	movs	r2, #3
 8003230:	211a      	movs	r1, #26
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f8b0 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x07);  // Use a 1 kHz rate; the same rate set in CONFIG above
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x00); //1khzでサンプリング
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	2119      	movs	r1, #25
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f8a9 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	mpu9250->WriteByte(MPUREG_GYRO_CONFIG, BITS_FS_1000DPS);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2210      	movs	r2, #16
 800324c:	211b      	movs	r1, #27
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f8a2 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>
	mpu9250->WriteByte(MPUREG_ACCEL_CONFIG, 0b11000);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2218      	movs	r2, #24
 800325a:	211c      	movs	r1, #28
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f89b 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	//Timer::sleep(100);
	HAL_Delay(100);
 8003262:	2064      	movs	r0, #100	; 0x64
 8003264:	f7fd fee8 	bl	8001038 <HAL_Delay>

	float avg[6] = { };
 8003268:	f107 0320 	add.w	r3, r7, #32
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
 8003278:	615a      	str	r2, [r3, #20]
	float stdev[6] = { 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0 };
 800327a:	4b40      	ldr	r3, [pc, #256]	; (800337c <_ZN8Odometry8InitGyroEv+0x194>)
 800327c:	f107 0408 	add.w	r4, r7, #8
 8003280:	461d      	mov	r5, r3
 8003282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003286:	e895 0003 	ldmia.w	r5, {r0, r1}
 800328a:	e884 0003 	stmia.w	r4, {r0, r1}

	for (int i = 0; i < 10; i++) {
 800328e:	2300      	movs	r3, #0
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	2b09      	cmp	r3, #9
 8003296:	dc6c      	bgt.n	8003372 <_ZN8Odometry8InitGyroEv+0x18a>
		this->GetBias(avg, stdev);
 8003298:	f107 0208 	add.w	r2, r7, #8
 800329c:	f107 0320 	add.w	r3, r7, #32
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fdfe 	bl	8002ea4 <_ZNK8Odometry7GetBiasEPfS0_>

		if (stdev[0] < 700 && stdev[1] < 700 && stdev[2] < 700 && stdev[3] < 700
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4935      	ldr	r1, [pc, #212]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe17 	bl	8000ee0 <__aeabi_fcmplt>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d058      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4931      	ldr	r1, [pc, #196]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fe0f 	bl	8000ee0 <__aeabi_fcmplt>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d050      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	492d      	ldr	r1, [pc, #180]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd fe07 	bl	8000ee0 <__aeabi_fcmplt>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d048      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4929      	ldr	r1, [pc, #164]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fdff 	bl	8000ee0 <__aeabi_fcmplt>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d040      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
				&& stdev[4] < 700 && stdev[5] < 700) {
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fdf7 	bl	8000ee0 <__aeabi_fcmplt>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d038      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4921      	ldr	r1, [pc, #132]	; (8003380 <_ZN8Odometry8InitGyroEv+0x198>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fdef 	bl	8000ee0 <__aeabi_fcmplt>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d030      	beq.n	800336a <_ZN8Odometry8InitGyroEv+0x182>
			movavg[0] = (int32_t) avg[0];
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fe26 	bl	8000f5c <__aeabi_f2iz>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
			movavg[1] = (int32_t) avg[1];
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fe1f 	bl	8000f5c <__aeabi_f2iz>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c
			movavg[2] = (int32_t) avg[2];
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fe18 	bl	8000f5c <__aeabi_f2iz>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
			movavg[3] = (int32_t) avg[3];
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fe11 	bl	8000f5c <__aeabi_f2iz>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	635a      	str	r2, [r3, #52]	; 0x34
			movavg[4] = (int32_t) avg[4];
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe0a 	bl	8000f5c <__aeabi_f2iz>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
			movavg[5] = (int32_t) avg[5];
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fe03 	bl	8000f5c <__aeabi_f2iz>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	63da      	str	r2, [r3, #60]	; 0x3c

			MDGF.begin(this->SamplingFrequency);
 800335c:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8003360:	4808      	ldr	r0, [pc, #32]	; (8003384 <_ZN8Odometry8InitGyroEv+0x19c>)
 8003362:	f7ff fd51 	bl	8002e08 <_ZN8Madgwick5beginEf>

			return true;
 8003366:	2301      	movs	r3, #1
 8003368:	e004      	b.n	8003374 <_ZN8Odometry8InitGyroEv+0x18c>
	for (int i = 0; i < 10; i++) {
 800336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336c:	3301      	adds	r3, #1
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003370:	e78f      	b.n	8003292 <_ZN8Odometry8InitGyroEv+0xaa>
		}
	}

	// gyro unit is not in desirable state (not stabilized)
	return false;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3740      	adds	r7, #64	; 0x40
 8003378:	46bd      	mov	sp, r7
 800337a:	bdb0      	pop	{r4, r5, r7, pc}
 800337c:	08006300 	.word	0x08006300
 8003380:	442f0000 	.word	0x442f0000
 8003384:	20000870 	.word	0x20000870

08003388 <_ZN8Odometry11ReadEncoderEv>:

void Odometry::ReadEncoder(void) {
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	volatile int16_t _p1 = static_cast<int16_t>(TIM3->CNT);
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <_ZN8Odometry11ReadEncoderEv+0xf8>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b21b      	sxth	r3, r3
 8003396:	817b      	strh	r3, [r7, #10]
	TIM3->CNT = 0;
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <_ZN8Odometry11ReadEncoderEv+0xf8>)
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

	volatile int16_t _p2 = (-1)*static_cast<int16_t>(TIM4->CNT);
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	425b      	negs	r3, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	813b      	strh	r3, [r7, #8]
	TIM4->CNT = 0;
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

	// just a simple rotation matrix
	// translate encoder rates to velocity on x-y plane
	float _yaw = yaw; //- ((float) M_PI / 4.0f); //いじるとしたらこの辺　ジャイロの付け方に依る
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	617b      	str	r3, [r7, #20]
	float _cos = cosf(_yaw);
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f001 f931 	bl	8004620 <cosf>
 80033be:	6138      	str	r0, [r7, #16]
	float _sin = sinf(_yaw);
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f001 f961 	bl	8004688 <sinf>
 80033c6:	60f8      	str	r0, [r7, #12]

	x += ((_p1 * _cos) - (_p2 * _sin)) * MPerPulse;
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fb95 	bl	8000afc <__aeabi_i2f>
 80033d2:	4603      	mov	r3, r0
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fbe4 	bl	8000ba4 <__aeabi_fmul>
 80033dc:	4603      	mov	r3, r0
 80033de:	461c      	mov	r4, r3
 80033e0:	893b      	ldrh	r3, [r7, #8]
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fb89 	bl	8000afc <__aeabi_i2f>
 80033ea:	4603      	mov	r3, r0
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fbd8 	bl	8000ba4 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4619      	mov	r1, r3
 80033f8:	4620      	mov	r0, r4
 80033fa:	f7fd fac9 	bl	8000990 <__aeabi_fsub>
 80033fe:	4603      	mov	r3, r0
 8003400:	4921      	ldr	r1, [pc, #132]	; (8003488 <_ZN8Odometry11ReadEncoderEv+0x100>)
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fbce 	bl	8000ba4 <__aeabi_fmul>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f7fd fabe 	bl	8000994 <__addsf3>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	601a      	str	r2, [r3, #0]
	y += ((_p1 * _sin) + (_p2 * _cos)) * MPerPulse;
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	b21b      	sxth	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fb69 	bl	8000afc <__aeabi_i2f>
 800342a:	4603      	mov	r3, r0
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fbb8 	bl	8000ba4 <__aeabi_fmul>
 8003434:	4603      	mov	r3, r0
 8003436:	461c      	mov	r4, r3
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b21b      	sxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fb5d 	bl	8000afc <__aeabi_i2f>
 8003442:	4603      	mov	r3, r0
 8003444:	6939      	ldr	r1, [r7, #16]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fbac 	bl	8000ba4 <__aeabi_fmul>
 800344c:	4603      	mov	r3, r0
 800344e:	4619      	mov	r1, r3
 8003450:	4620      	mov	r0, r4
 8003452:	f7fd fa9f 	bl	8000994 <__addsf3>
 8003456:	4603      	mov	r3, r0
 8003458:	490b      	ldr	r1, [pc, #44]	; (8003488 <_ZN8Odometry11ReadEncoderEv+0x100>)
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fba2 	bl	8000ba4 <__aeabi_fmul>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7fd fa92 	bl	8000994 <__addsf3>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	39d12e7e 	.word	0x39d12e7e

0800348c <_ZN8Odometry11ReadAccGyroEv>:

void Odometry::ReadAccGyro(void) {
 800348c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003490:	b08b      	sub	sp, #44	; 0x2c
 8003492:	af04      	add	r7, sp, #16
 8003494:	6078      	str	r0, [r7, #4]
//		static uint16_t dt=0;

//	int raw[6];
	float data[3];

	raw[0] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_XOUT_H,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	21c3      	movs	r1, #195	; 0xc3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe ff9c 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 80034aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ae:	fb03 f302 	mul.w	r3, r3, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fb22 	bl	8000afc <__aeabi_i2f>
 80034b8:	4603      	mov	r3, r0
 80034ba:	49ac      	ldr	r1, [pc, #688]	; (800376c <_ZN8Odometry11ReadAccGyroEv+0x2e0>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fc25 	bl	8000d0c <__aeabi_fdiv>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fa63 	bl	8000994 <__addsf3>
 80034ce:	4603      	mov	r3, r0
	raw[0] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_XOUT_H,
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fd43 	bl	8000f5c <__aeabi_f2iz>
 80034d6:	4602      	mov	r2, r0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	611a      	str	r2, [r3, #16]
	raw[1] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_YOUT_H,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	21c5      	movs	r1, #197	; 0xc5
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ff79 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 80034ea:	4603      	mov	r3, r0
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 80034f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f4:	fb03 f302 	mul.w	r3, r3, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd faff 	bl	8000afc <__aeabi_i2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	499a      	ldr	r1, [pc, #616]	; (800376c <_ZN8Odometry11ReadAccGyroEv+0x2e0>)
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fc02 	bl	8000d0c <__aeabi_fdiv>
 8003508:	4603      	mov	r3, r0
 800350a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fa40 	bl	8000994 <__addsf3>
 8003514:	4603      	mov	r3, r0
	raw[1] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_YOUT_H,
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fd20 	bl	8000f5c <__aeabi_f2iz>
 800351c:	4602      	mov	r2, r0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	615a      	str	r2, [r3, #20]
	raw[2] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	21c7      	movs	r1, #199	; 0xc7
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe ff56 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8003530:	4603      	mov	r3, r0
 8003532:	b21b      	sxth	r3, r3
 8003534:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 8003536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800353a:	fb03 f302 	mul.w	r3, r3, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fadc 	bl	8000afc <__aeabi_i2f>
 8003544:	4603      	mov	r3, r0
 8003546:	4989      	ldr	r1, [pc, #548]	; (800376c <_ZN8Odometry11ReadAccGyroEv+0x2e0>)
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fbdf 	bl	8000d0c <__aeabi_fdiv>
 800354e:	4603      	mov	r3, r0
 8003550:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fa1d 	bl	8000994 <__addsf3>
 800355a:	4603      	mov	r3, r0
	raw[2] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H,
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fcfd 	bl	8000f5c <__aeabi_f2iz>
 8003562:	4602      	mov	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
	raw[3] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_XOUT_H,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	21bb      	movs	r1, #187	; 0xbb
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ff33 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 8003576:	4603      	mov	r3, r0
 8003578:	b21b      	sxth	r3, r3
			0x0000))  / AccSensitivityScaleFactor) + 0.5f;
 800357a:	2b00      	cmp	r3, #0
 800357c:	da01      	bge.n	8003582 <_ZN8Odometry11ReadAccGyroEv+0xf6>
 800357e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003582:	12db      	asrs	r3, r3, #11
 8003584:	b21b      	sxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fab8 	bl	8000afc <__aeabi_i2f>
 800358c:	4603      	mov	r3, r0
 800358e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd f9fe 	bl	8000994 <__addsf3>
 8003598:	4603      	mov	r3, r0
	raw[3] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_XOUT_H,
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fcde 	bl	8000f5c <__aeabi_f2iz>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	61da      	str	r2, [r3, #28]
	raw[4] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_YOUT_H,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	21bd      	movs	r1, #189	; 0xbd
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ff14 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 80035b4:	4603      	mov	r3, r0
 80035b6:	b21b      	sxth	r3, r3
			0x0000))  / AccSensitivityScaleFactor) + 0.5f;
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da01      	bge.n	80035c0 <_ZN8Odometry11ReadAccGyroEv+0x134>
 80035bc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80035c0:	12db      	asrs	r3, r3, #11
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fa99 	bl	8000afc <__aeabi_i2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd f9df 	bl	8000994 <__addsf3>
 80035d6:	4603      	mov	r3, r0
	raw[4] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_YOUT_H,
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fcbf 	bl	8000f5c <__aeabi_f2iz>
 80035de:	4602      	mov	r2, r0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	621a      	str	r2, [r3, #32]
	raw[5] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_ZOUT_H,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	21bf      	movs	r1, #191	; 0xbf
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fef5 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 80035f2:	4603      	mov	r3, r0
 80035f4:	b21b      	sxth	r3, r3
			0x0000))  / AccSensitivityScaleFactor) + 0.5f;
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da01      	bge.n	80035fe <_ZN8Odometry11ReadAccGyroEv+0x172>
 80035fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80035fe:	12db      	asrs	r3, r3, #11
 8003600:	b21b      	sxth	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fa7a 	bl	8000afc <__aeabi_i2f>
 8003608:	4603      	mov	r3, r0
 800360a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd f9c0 	bl	8000994 <__addsf3>
 8003614:	4603      	mov	r3, r0
	raw[5] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_ZOUT_H,
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fca0 	bl	8000f5c <__aeabi_f2iz>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
//	int dy_raw_mdps = (((int16_t) mpu9250->WriteWord(
//	READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000)) * 1000 / SensitivityScaleFactor)
//			+ 0.5f;
	//temp = mpu9250->WriteWord(READ_FLAG | MPUREG_TEMP_OUT_H, 0x0000);

	for (int i = 0; i < 3; i++) {
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b02      	cmp	r3, #2
 800362a:	dc73      	bgt.n	8003714 <_ZN8Odometry11ReadAccGyroEv+0x288>
		biased[i] = raw[i] - movavg[i];
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	3204      	adds	r2, #4
 8003632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	310a      	adds	r1, #10
 800363c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003640:	1ad1      	subs	r1, r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	3210      	adds	r2, #16
 8003648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if (biased[i] < -ang_movband || ang_movband < biased[i]) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	3210      	adds	r2, #16
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800365a:	db06      	blt.n	800366a <_ZN8Odometry11ReadAccGyroEv+0x1de>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	3210      	adds	r2, #16
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	2bfa      	cmp	r3, #250	; 0xfa
 8003668:	dd16      	ble.n	8003698 <_ZN8Odometry11ReadAccGyroEv+0x20c>
//			yaw -= (2.0f * (float) M_PI);
//		} else if (yaw < -(float) M_PI) {
//			yaw += (2.0f * (float) M_PI);
//		}

			data[i] = biased[i] / 1000.0f;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	3210      	adds	r2, #16
 8003670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fa41 	bl	8000afc <__aeabi_i2f>
 800367a:	4603      	mov	r3, r0
 800367c:	493c      	ldr	r1, [pc, #240]	; (8003770 <_ZN8Odometry11ReadAccGyroEv+0x2e4>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fb44 	bl	8000d0c <__aeabi_fdiv>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f107 0118 	add.w	r1, r7, #24
 8003690:	440b      	add	r3, r1
 8003692:	f843 2c10 	str.w	r2, [r3, #-16]
 8003696:	e039      	b.n	800370c <_ZN8Odometry11ReadAccGyroEv+0x280>
		} else {
			data[i] = 0.0f;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f107 0218 	add.w	r2, r7, #24
 80036a0:	4413      	add	r3, r2
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f843 2c10 	str.w	r2, [r3, #-16]
			movavg[i] = (int) ((((float) movavg[i] * (1 - ang_w))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	320a      	adds	r2, #10
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fa21 	bl	8000afc <__aeabi_i2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	492d      	ldr	r1, [pc, #180]	; (8003774 <_ZN8Odometry11ReadAccGyroEv+0x2e8>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fa70 	bl	8000ba4 <__aeabi_fmul>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461c      	mov	r4, r3
					+ ((float) raw[i] * ang_w)) + 0.5f);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	3204      	adds	r2, #4
 80036ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fa12 	bl	8000afc <__aeabi_i2f>
 80036d8:	4603      	mov	r3, r0
 80036da:	4927      	ldr	r1, [pc, #156]	; (8003778 <_ZN8Odometry11ReadAccGyroEv+0x2ec>)
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fa61 	bl	8000ba4 <__aeabi_fmul>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4619      	mov	r1, r3
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7fd f954 	bl	8000994 <__addsf3>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd f94e 	bl	8000994 <__addsf3>
 80036f8:	4603      	mov	r3, r0
			movavg[i] = (int) ((((float) movavg[i] * (1 - ang_w))
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fc2e 	bl	8000f5c <__aeabi_f2iz>
 8003700:	4601      	mov	r1, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	320a      	adds	r2, #10
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 3; i++) {
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3301      	adds	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e788      	b.n	8003626 <_ZN8Odometry11ReadAccGyroEv+0x19a>
		}
	}

	MDGF.updateIMU(data[0], data[1], data[2], raw[3], raw[4], raw[5]);
 8003714:	68bc      	ldr	r4, [r7, #8]
 8003716:	68fd      	ldr	r5, [r7, #12]
 8003718:	693e      	ldr	r6, [r7, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd f9ec 	bl	8000afc <__aeabi_i2f>
 8003724:	4680      	mov	r8, r0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd f9e6 	bl	8000afc <__aeabi_i2f>
 8003730:	4681      	mov	r9, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd f9e0 	bl	8000afc <__aeabi_i2f>
 800373c:	4603      	mov	r3, r0
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	f8cd 9004 	str.w	r9, [sp, #4]
 8003744:	f8cd 8000 	str.w	r8, [sp]
 8003748:	4633      	mov	r3, r6
 800374a:	462a      	mov	r2, r5
 800374c:	4621      	mov	r1, r4
 800374e:	480b      	ldr	r0, [pc, #44]	; (800377c <_ZN8Odometry11ReadAccGyroEv+0x2f0>)
 8003750:	f7fe fea2 	bl	8002498 <_ZN8Madgwick9updateIMUEffffff>
//	dt = HAL_GetTick()-lasttime;
//	lasttime=HAL_GetTick();
	this->yaw = MDGF.getYawRadians();
 8003754:	4809      	ldr	r0, [pc, #36]	; (800377c <_ZN8Odometry11ReadAccGyroEv+0x2f0>)
 8003756:	f7ff fb69 	bl	8002e2c <_ZN8Madgwick13getYawRadiansEv>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800376a:	bf00      	nop
 800376c:	42033333 	.word	0x42033333
 8003770:	447a0000 	.word	0x447a0000
 8003774:	3f7ae148 	.word	0x3f7ae148
 8003778:	3ca3d70a 	.word	0x3ca3d70a
 800377c:	20000870 	.word	0x20000870

08003780 <_ZN8Odometry10InitializeEv>:

bool Odometry::Initialize(void) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	return this->InitGyro();
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fd2d 	bl	80031e8 <_ZN8Odometry8InitGyroEv>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN8Odometry6SampleEv>:

void Odometry::Sample(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	this->ReadEncoder();
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fdf1 	bl	8003388 <_ZN8Odometry11ReadEncoderEv>
	this->ReadAccGyro();
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fe70 	bl	800348c <_ZN8Odometry11ReadAccGyroEv>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_Z41__static_initialization_and_destruction_0ii>:

void Odometry::GetPose(float * const x, float * const y, float * const yaw) {
	*x = this->x;
	*y = this->y;
	*yaw = this->yaw;
}
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d102      	bne.n	80037d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Madgwick MDGF;
 80037ce:	4803      	ldr	r0, [pc, #12]	; (80037dc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80037d0:	f7fe fe3a 	bl	8002448 <_ZN8MadgwickC1Ev>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000870 	.word	0x20000870

080037e0 <_GLOBAL__sub_I_MDGF>:
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037e8:	2001      	movs	r0, #1
 80037ea:	f7ff ffe3 	bl	80037b4 <_Z41__static_initialization_and_destruction_0ii>
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <can_init>:
CAN_FilterTypeDef filter;
uint32_t prescaler;
enum can_bus_state bus_state;

void can_init(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    // default to 125 kbit/s
    prescaler = 48;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <can_init+0x20>)
 80037f6:	2230      	movs	r2, #48	; 0x30
 80037f8:	601a      	str	r2, [r3, #0]
    hcan.Instance = CAN1;
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <can_init+0x24>)
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <can_init+0x28>)
 80037fe:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <can_init+0x2c>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200008c0 	.word	0x200008c0
 8003814:	20000a28 	.word	0x20000a28
 8003818:	40006400 	.word	0x40006400
 800381c:	200008c4 	.word	0x200008c4

08003820 <can_set_filter>:

void can_set_filter(uint32_t id, uint32_t mask)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	b29b      	uxth	r3, r3
 8003830:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <can_set_filter+0xa4>)
 8003832:	6013      	str	r3, [r2, #0]
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <can_set_filter+0xa4>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0e1b      	lsrs	r3, r3, #24
 800383c:	4413      	add	r3, r2
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <can_set_filter+0xa4>)
 8003840:	6013      	str	r3, [r2, #0]
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <can_set_filter+0xa4>)
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800384e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003852:	4413      	add	r3, r2
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <can_set_filter+0xa4>)
 8003856:	6053      	str	r3, [r2, #4]

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	015b      	lsls	r3, r3, #5
 800385c:	b29b      	uxth	r3, r3
 800385e:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <can_set_filter+0xa4>)
 8003860:	6093      	str	r3, [r2, #8]
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <can_set_filter+0xa4>)
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	4413      	add	r3, r2
 800386c:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <can_set_filter+0xa4>)
 800386e:	6093      	str	r3, [r2, #8]
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <can_set_filter+0xa4>)
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800387c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003880:	4413      	add	r3, r2
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <can_set_filter+0xa4>)
 8003884:	60d3      	str	r3, [r2, #12]

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <can_set_filter+0xa4>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <can_set_filter+0xa4>)
 800388e:	2201      	movs	r2, #1
 8003890:	61da      	str	r2, [r3, #28]
    filter.FilterBank = 0;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <can_set_filter+0xa4>)
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <can_set_filter+0xa4>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <can_set_filter+0xa4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <can_set_filter+0xa4>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	621a      	str	r2, [r3, #32]

    if (bus_state == ON_BUS)
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <can_set_filter+0xa8>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d103      	bne.n	80038ba <can_set_filter+0x9a>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 80038b2:	4904      	ldr	r1, [pc, #16]	; (80038c4 <can_set_filter+0xa4>)
 80038b4:	4805      	ldr	r0, [pc, #20]	; (80038cc <can_set_filter+0xac>)
 80038b6:	f7fd fc4c 	bl	8001152 <HAL_CAN_ConfigFilter>
    }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000898 	.word	0x20000898
 80038c8:	200008c4 	.word	0x200008c4
 80038cc:	20000a28 	.word	0x20000a28

080038d0 <can_enable>:

void can_enable(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
    if (bus_state == OFF_BUS)
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <can_enable+0xa8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d148      	bne.n	800396e <can_enable+0x9e>
    {
        hcan.Init.Prescaler = prescaler;
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <can_enable+0xac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <can_enable+0xb0>)
 80038e2:	6053      	str	r3, [r2, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 80038e4:	4b26      	ldr	r3, [pc, #152]	; (8003980 <can_enable+0xb0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <can_enable+0xb0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <can_enable+0xb0>)
 80038f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80038f6:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <can_enable+0xb0>)
 80038fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038fe:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <can_enable+0xb0>)
 8003902:	2200      	movs	r2, #0
 8003904:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = ENABLE;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <can_enable+0xb0>)
 8003908:	2201      	movs	r2, #1
 800390a:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <can_enable+0xb0>)
 800390e:	2200      	movs	r2, #0
 8003910:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <can_enable+0xb0>)
 8003914:	2201      	movs	r2, #1
 8003916:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <can_enable+0xb0>)
 800391a:	2200      	movs	r2, #0
 800391c:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <can_enable+0xb0>)
 8003920:	2200      	movs	r2, #0
 8003922:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8003924:	4816      	ldr	r0, [pc, #88]	; (8003980 <can_enable+0xb0>)
 8003926:	f7fd fb99 	bl	800105c <HAL_CAN_Init>
        bus_state = ON_BUS;
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <can_enable+0xa8>)
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
        can_set_filter(0, 0);
 8003930:	2100      	movs	r1, #0
 8003932:	2000      	movs	r0, #0
 8003934:	f7ff ff74 	bl	8003820 <can_set_filter>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8003938:	4811      	ldr	r0, [pc, #68]	; (8003980 <can_enable+0xb0>)
 800393a:	f7fd fc76 	bl	800122a <HAL_CAN_Start>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <can_enable+0x82>
        {
          /* Start Error */
          Error_Handler();
 800394e:	f000 fc3f 	bl	80041d0 <Error_Handler>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8003952:	2102      	movs	r1, #2
 8003954:	480a      	ldr	r0, [pc, #40]	; (8003980 <can_enable+0xb0>)
 8003956:	f7fd fce0 	bl	800131a <HAL_CAN_ActivateNotification>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <can_enable+0x9e>
        {
          /* Notification Error */
          Error_Handler();
 800396a:	f000 fc31 	bl	80041d0 <Error_Handler>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS1;
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <can_enable+0xb4>)
 8003970:	2202      	movs	r2, #2
 8003972:	611a      	str	r2, [r3, #16]
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200008c4 	.word	0x200008c4
 800397c:	200008c0 	.word	0x200008c0
 8003980:	20000a28 	.word	0x20000a28
 8003984:	40010c00 	.word	0x40010c00

08003988 <can_set_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR1;
    GPIOC->BSRR = GPIO_BSRR_BR13;
}

void can_set_bitrate(enum can_bitrate bitrate)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
    if (bus_state == ON_BUS)
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <can_set_bitrate+0x9c>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d03e      	beq.n	8003a18 <can_set_bitrate+0x90>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d83c      	bhi.n	8003a1a <can_set_bitrate+0x92>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <can_set_bitrate+0x20>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039df 	.word	0x080039df
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039f7 	.word	0x080039f7
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	08003a07 	.word	0x08003a07
 80039c8:	08003a0f 	.word	0x08003a0f
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <can_set_bitrate+0xa0>)
 80039ce:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80039d2:	601a      	str	r2, [r3, #0]
            break;
 80039d4:	e021      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_20K:
            prescaler = 225;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <can_set_bitrate+0xa0>)
 80039d8:	22e1      	movs	r2, #225	; 0xe1
 80039da:	601a      	str	r2, [r3, #0]
            break;
 80039dc:	e01d      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_50K:
            prescaler = 90;
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <can_set_bitrate+0xa0>)
 80039e0:	225a      	movs	r2, #90	; 0x5a
 80039e2:	601a      	str	r2, [r3, #0]
            break;
 80039e4:	e019      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_100K:
            prescaler = 45;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <can_set_bitrate+0xa0>)
 80039e8:	222d      	movs	r2, #45	; 0x2d
 80039ea:	601a      	str	r2, [r3, #0]
            break;
 80039ec:	e015      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_125K:
            prescaler = 36;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <can_set_bitrate+0xa0>)
 80039f0:	2224      	movs	r2, #36	; 0x24
 80039f2:	601a      	str	r2, [r3, #0]
            break;
 80039f4:	e011      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_250K:
            prescaler = 18;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <can_set_bitrate+0xa0>)
 80039f8:	2212      	movs	r2, #18
 80039fa:	601a      	str	r2, [r3, #0]
            break;
 80039fc:	e00d      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_500K:
            prescaler = 4;
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <can_set_bitrate+0xa0>)
 8003a00:	2204      	movs	r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
            break;
 8003a04:	e009      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_750K:
            prescaler = 3;
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <can_set_bitrate+0xa0>)
 8003a08:	2203      	movs	r2, #3
 8003a0a:	601a      	str	r2, [r3, #0]
            break;
 8003a0c:	e005      	b.n	8003a1a <can_set_bitrate+0x92>
        case CAN_BITRATE_1000K:
            prescaler = 2;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <can_set_bitrate+0xa0>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	601a      	str	r2, [r3, #0]
            break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <can_set_bitrate+0x92>
        return;
 8003a18:	bf00      	nop
    }
}
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	200008c4 	.word	0x200008c4
 8003a28:	200008c0 	.word	0x200008c0

08003a2c <can_tx>:
        hcan.Init.Mode = CAN_MODE_NORMAL;
    }
}

uint32_t can_tx(CAN_TxHeaderTypeDef *tx_header, uint8_t (&buf)[CAN_MTU])
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    // transmit can frame
    //hcan.pTxMsg = tx_msg;
    //status = HAL_CAN_Transmit(&hcan, timeout);

    uint32_t tx_mailbox;
    status = HAL_CAN_AddTxMessage(&hcan, tx_header, buf, &tx_mailbox);
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4806      	ldr	r0, [pc, #24]	; (8003a58 <can_tx+0x2c>)
 8003a40:	f7fd fc1e 	bl	8001280 <HAL_CAN_AddTxMessage>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]

//    GPIOC->BSRR=GPIO_BSRR_BS13;
//    GPIOC->BSRR=GPIO_BSRR_BR13;

    led_on();
 8003a48:	f000 f808 	bl	8003a5c <led_on>
    return status;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000a28 	.word	0x20000a28

08003a5c <led_on>:
static uint32_t led_laston = 0;
static uint32_t led_lastoff = 0;

// Attempt to turn on status LED
void led_on(void)
{
 8003a5c:	b510      	push	{r4, lr}
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8003a5e:	4c09      	ldr	r4, [pc, #36]	; (8003a84 <led_on+0x28>)
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	b96b      	cbnz	r3, 8003a80 <led_on+0x24>
 8003a64:	f7fd fae2 	bl	800102c <HAL_GetTick>
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <led_on+0x2c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1ac0      	subs	r0, r0, r3
 8003a6e:	280a      	cmp	r0, #10
 8003a70:	d906      	bls.n	8003a80 <led_on+0x24>
	{
	    GPIOC->BSRR = GPIO_BSRR_BS13;
 8003a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <led_on+0x30>)
 8003a78:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8003a7a:	f7fd fad7 	bl	800102c <HAL_GetTick>
 8003a7e:	6020      	str	r0, [r4, #0]
	}
}
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	bf00      	nop
 8003a84:	200008cc 	.word	0x200008cc
 8003a88:	200008c8 	.word	0x200008c8
 8003a8c:	40011000 	.word	0x40011000

08003a90 <led_process>:


// Process time-based LED events
void led_process(void)
{
 8003a90:	b510      	push	{r4, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8003a92:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <led_process+0x2c>)
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	b17b      	cbz	r3, 8003ab8 <led_process+0x28>
 8003a98:	f7fd fac8 	bl	800102c <HAL_GetTick>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	1ac0      	subs	r0, r0, r3
 8003aa0:	280a      	cmp	r0, #10
 8003aa2:	d909      	bls.n	8003ab8 <led_process+0x28>
	{
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8003aa4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <led_process+0x30>)
 8003aaa:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	6023      	str	r3, [r4, #0]
		led_lastoff = HAL_GetTick();
 8003ab0:	f7fd fabc 	bl	800102c <HAL_GetTick>
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <led_process+0x34>)
 8003ab6:	6018      	str	r0, [r3, #0]
	}
}
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	200008cc 	.word	0x200008cc
 8003ac0:	40011000 	.word	0x40011000
 8003ac4:	200008c8 	.word	0x200008c8

08003ac8 <NVIC_SetPriority>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	da0c      	bge.n	8003af6 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	490d      	ldr	r1, [pc, #52]	; (8003b18 <NVIC_SetPriority+0x50>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	e00b      	b.n	8003b0e <NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <NVIC_SetPriority+0x54>)
 8003afc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8003b00:	4608      	mov	r0, r1
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	1813      	adds	r3, r2, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8003b26:	f7fd fa63 	bl	8000ff0 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8003b2a:	f000 fae3 	bl	80040f4 <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 8003b2e:	f000 fa57 	bl	8003fe0 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8003b32:	f000 f9f7 	bl	8003f24 <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 8003b36:	f000 f997 	bl	8003e68 <_ZL12MX_TIM4_Initv>
//	MX_CAN_Init(); //要らないかもだけど確認取れて無いので残しておく
	MX_SPI2_Init();
 8003b3a:	f000 f959 	bl	8003df0 <_ZL12MX_SPI2_Initv>
	MX_USART1_UART_Init(); //デバッグ用だよ
 8003b3e:	f000 faab 	bl	8004098 <_ZL19MX_USART1_UART_Initv>
	// CANを初期化する．
	can_init();
 8003b42:	f7ff fe55 	bl	80037f0 <can_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	NVIC_SetPriority(SysTick_IRQn, 1); //HAL_Delayから戻ってこなくなったので、systickの順位を上げた　二番目
 8003b46:	2101      	movs	r1, #1
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b4c:	f7ff ffbc 	bl	8003ac8 <NVIC_SetPriority>
	SystemClock_Config();
 8003b50:	f000 f8fe 	bl	8003d50 <_Z18SystemClock_Configv>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	/* USER CODE BEGIN 2 */
	SPI2->CR1 |= SPI_CR1_SPE;
 8003b54:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <main+0x148>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <main+0x148>)
 8003b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5e:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2); //タイマー割り込み用
 8003b60:	4842      	ldr	r0, [pc, #264]	; (8003c6c <main+0x14c>)
 8003b62:	f7fe f852 	bl	8001c0a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //エンコーダ用
 8003b66:	2118      	movs	r1, #24
 8003b68:	4841      	ldr	r0, [pc, #260]	; (8003c70 <main+0x150>)
 8003b6a:	f7fe f859 	bl	8001c20 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003b6e:	2118      	movs	r1, #24
 8003b70:	4840      	ldr	r0, [pc, #256]	; (8003c74 <main+0x154>)
 8003b72:	f7fe f855 	bl	8001c20 <HAL_TIM_Encoder_Start>

	//CANの通信速度を設定する
	can_set_bitrate(CAN_BITRATE_1000K);
 8003b76:	2008      	movs	r0, #8
 8003b78:	f7ff ff06 	bl	8003988 <can_set_bitrate>
//	HAL_Delay(250);
//
//	GPIOC->BSRR = GPIO_BSRR_BR13;
//	GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;

	bool r = odom->Initialize(); //ジャイロの初期化に失敗するとループに入る
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <main+0x158>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fdfd 	bl	8003780 <_ZN8Odometry10InitializeEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	70fb      	strb	r3, [r7, #3]
	if (!r) {
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f083 0301 	eor.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <main+0x94>
		while (1) {
			HAL_Delay(100);
 8003b96:	2064      	movs	r0, #100	; 0x64
 8003b98:	f7fd fa4e 	bl	8001038 <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BR9;
 8003b9c:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <main+0x15c>)
 8003b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba2:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 8003ba4:	2064      	movs	r0, #100	; 0x64
 8003ba6:	f7fd fa47 	bl	8001038 <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BS9;
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <main+0x15c>)
 8003bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb0:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 8003bb2:	e7f0      	b.n	8003b96 <main+0x76>
		}
	}

	can_enable();
 8003bb4:	f7ff fe8c 	bl	80038d0 <can_enable>

	HAL_NVIC_EnableIRQ(TIM2_IRQn); //割り込み有効化 上のodom->Initializeが終わってからでないと、初期化終わる前にジャイロの値をとってしまう 初期の角度がズレる
 8003bb8:	201c      	movs	r0, #28
 8003bba:	f7fd fc05 	bl	80013c8 <HAL_NVIC_EnableIRQ>

	CANtxinit();
 8003bbe:	f000 f893 	bl	8003ce8 <_ZL9CANtxinitv>

	static int X;
	static int Y;
	static int Yaw;
	uint32_t last_time = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - last_time >= (1000 / CAN_Freq)) {
 8003bc6:	f7fd fa31 	bl	800102c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	bf8c      	ite	hi
 8003bd4:	2301      	movhi	r3, #1
 8003bd6:	2300      	movls	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f3      	beq.n	8003bc6 <main+0xa6>
			//odom->GetPose(&X, &Y, &Yaw);
			X = odom->movavg[2];
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <main+0x158>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <main+0x160>)
 8003be6:	6013      	str	r3, [r2, #0]
			Y = odom->movavg[2]-250;
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <main+0x158>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	3bfa      	subs	r3, #250	; 0xfa
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <main+0x164>)
 8003bf2:	6013      	str	r3, [r2, #0]
			Yaw = odom->raw[2];
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <main+0x158>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <main+0x168>)
 8003bfc:	6013      	str	r3, [r2, #0]
			can_pack(tx_payload_x, (float)X);
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <main+0x160>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc ff7a 	bl	8000afc <__aeabi_i2f>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	481f      	ldr	r0, [pc, #124]	; (8003c8c <main+0x16c>)
 8003c0e:	f000 fae5 	bl	80041dc <_Z8can_packIfEvRA8_hT_>
			can_pack(tx_payload_y, (float)Y);
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <main+0x164>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc ff70 	bl	8000afc <__aeabi_i2f>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4619      	mov	r1, r3
 8003c20:	481b      	ldr	r0, [pc, #108]	; (8003c90 <main+0x170>)
 8003c22:	f000 fadb 	bl	80041dc <_Z8can_packIfEvRA8_hT_>
			can_pack(tx_payload_yaw, (float)Yaw);
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <main+0x168>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc ff66 	bl	8000afc <__aeabi_i2f>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4619      	mov	r1, r3
 8003c34:	4817      	ldr	r0, [pc, #92]	; (8003c94 <main+0x174>)
 8003c36:	f000 fad1 	bl	80041dc <_Z8can_packIfEvRA8_hT_>

			can_tx(&tx_header_x, tx_payload_x); //can pack 通して tx_payload
 8003c3a:	4914      	ldr	r1, [pc, #80]	; (8003c8c <main+0x16c>)
 8003c3c:	4816      	ldr	r0, [pc, #88]	; (8003c98 <main+0x178>)
 8003c3e:	f7ff fef5 	bl	8003a2c <can_tx>
			HAL_Delay(1);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7fd f9f8 	bl	8001038 <HAL_Delay>
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
			can_tx(&tx_header_y, tx_payload_y);
 8003c48:	4911      	ldr	r1, [pc, #68]	; (8003c90 <main+0x170>)
 8003c4a:	4814      	ldr	r0, [pc, #80]	; (8003c9c <main+0x17c>)
 8003c4c:	f7ff feee 	bl	8003a2c <can_tx>
			HAL_Delay(1);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fd f9f1 	bl	8001038 <HAL_Delay>
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
//			asm("NOP");
			can_tx(&tx_header_yaw, tx_payload_yaw);
 8003c56:	490f      	ldr	r1, [pc, #60]	; (8003c94 <main+0x174>)
 8003c58:	4811      	ldr	r0, [pc, #68]	; (8003ca0 <main+0x180>)
 8003c5a:	f7ff fee7 	bl	8003a2c <can_tx>
//			sprintf(kakudo, "%1.7f\n\r", Yaw);
//			HAL_UART_Transmit(&huart1, (uint8_t *) kakudo, 12, 1000);
//			char buf[] = "unchi";
//			HAL_UART_Transmit(&huart1, (uint8_t *) buf, sizeof(buf), 1000);

			last_time = HAL_GetTick();
 8003c5e:	f7fd f9e5 	bl	800102c <HAL_GetTick>
 8003c62:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - last_time >= (1000 / CAN_Freq)) {
 8003c64:	e7af      	b.n	8003bc6 <main+0xa6>
 8003c66:	bf00      	nop
 8003c68:	40003800 	.word	0x40003800
 8003c6c:	20000928 	.word	0x20000928
 8003c70:	20000968 	.word	0x20000968
 8003c74:	200009a8 	.word	0x200009a8
 8003c78:	20000a98 	.word	0x20000a98
 8003c7c:	40010c00 	.word	0x40010c00
 8003c80:	20000ab4 	.word	0x20000ab4
 8003c84:	20000ab8 	.word	0x20000ab8
 8003c88:	20000abc 	.word	0x20000abc
 8003c8c:	20000a9c 	.word	0x20000a9c
 8003c90:	20000aa4 	.word	0x20000aa4
 8003c94:	20000aac 	.word	0x20000aac
 8003c98:	20000a50 	.word	0x20000a50
 8003c9c:	20000a68 	.word	0x20000a68
 8003ca0:	20000a80 	.word	0x20000a80

08003ca4 <TIM2_IRQHandler>:

		/* USER CODE BEGIN 3 */
	}
}

extern "C" void TIM2_IRQHandler(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 8003ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <TIM2_IRQHandler+0x36>
		odom->Sample();
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <TIM2_IRQHandler+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fd67 	bl	8003798 <_ZN8Odometry6SampleEv>

		TIM2->SR &= ~TIM_SR_UIF;
 8003cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6113      	str	r3, [r2, #16]
	}

	led_process();
 8003cda:	f7ff fed9 	bl	8003a90 <led_process>
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000a98 	.word	0x20000a98

08003ce8 <_ZL9CANtxinitv>:

void CANtxinit(void) {
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

	tx_header_x.RTR = CAN_RTR_DATA;
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <_ZL9CANtxinitv+0x5c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
	tx_header_x.IDE = CAN_ID_STD;
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <_ZL9CANtxinitv+0x5c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
	tx_header_x.StdId = 0x205; //ID決める
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <_ZL9CANtxinitv+0x5c>)
 8003cfa:	f240 2205 	movw	r2, #517	; 0x205
 8003cfe:	601a      	str	r2, [r3, #0]
	tx_header_x.DLC = 4;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <_ZL9CANtxinitv+0x5c>)
 8003d02:	2204      	movs	r2, #4
 8003d04:	611a      	str	r2, [r3, #16]
	tx_header_y.RTR = CAN_RTR_DATA;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <_ZL9CANtxinitv+0x60>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
	tx_header_y.IDE = CAN_ID_STD;
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <_ZL9CANtxinitv+0x60>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
	tx_header_y.StdId = 0x206;
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <_ZL9CANtxinitv+0x60>)
 8003d14:	f240 2206 	movw	r2, #518	; 0x206
 8003d18:	601a      	str	r2, [r3, #0]
	tx_header_y.DLC = 4;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <_ZL9CANtxinitv+0x60>)
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	611a      	str	r2, [r3, #16]
	tx_header_yaw.RTR = CAN_RTR_DATA;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <_ZL9CANtxinitv+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
	tx_header_yaw.IDE = CAN_ID_STD;
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <_ZL9CANtxinitv+0x64>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
	tx_header_yaw.StdId = 0x207;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <_ZL9CANtxinitv+0x64>)
 8003d2e:	f240 2207 	movw	r2, #519	; 0x207
 8003d32:	601a      	str	r2, [r3, #0]
	tx_header_yaw.DLC = 4;
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <_ZL9CANtxinitv+0x64>)
 8003d36:	2204      	movs	r2, #4
 8003d38:	611a      	str	r2, [r3, #16]
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000a50 	.word	0x20000a50
 8003d48:	20000a68 	.word	0x20000a68
 8003d4c:	20000a80 	.word	0x20000a80

08003d50 <_Z18SystemClock_Configv>:
/* USER CODE END 3 */
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b090      	sub	sp, #64	; 0x40
 8003d54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003d56:	f107 0318 	add.w	r3, r7, #24
 8003d5a:	2228      	movs	r2, #40	; 0x28
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 f896 	bl	8005e90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
 8003d70:	611a      	str	r2, [r3, #16]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d80:	2301      	movs	r3, #1
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d84:	2302      	movs	r3, #2
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003d8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d94:	f107 0318 	add.w	r3, r7, #24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd fc65 	bl	8001668 <HAL_RCC_OscConfig>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8003dae:	f000 fa0f 	bl	80041d0 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003db2:	230f      	movs	r3, #15
 8003db4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db6:	2302      	movs	r3, #2
 8003db8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fe11 	bl	80019f4 <HAL_RCC_ClockConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8003de2:	f000 f9f5 	bl	80041d0 <Error_Handler>
	}
}
 8003de6:	bf00      	nop
 8003de8:	3740      	adds	r7, #64	; 0x40
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003df6:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <_ZL12MX_SPI2_Initv+0x74>)
 8003df8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e00:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e24:	2228      	movs	r2, #40	; 0x28
 8003e26:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <_ZL12MX_SPI2_Initv+0x70>)
 8003e42:	f7fd fea7 	bl	8001b94 <HAL_SPI_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 8003e56:	f000 f9bb 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200008d0 	.word	0x200008d0
 8003e64:	40003800 	.word	0x40003800

08003e68 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	; 0x30
 8003e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 f80a 	bl	8005e90 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003e86:	4a26      	ldr	r2, [pc, #152]	; (8003f20 <_ZL12MX_TIM4_Initv+0xb8>)
 8003e88:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003e8a:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xffff;
 8003e96:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4811      	ldr	r0, [pc, #68]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003ed6:	f7fd ffd1 	bl	8001e7c <HAL_TIM_Encoder_Init>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <_ZL12MX_TIM4_Initv+0x86>
		Error_Handler();
 8003eea:	f000 f971 	bl	80041d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4808      	ldr	r0, [pc, #32]	; (8003f1c <_ZL12MX_TIM4_Initv+0xb4>)
 8003efc:	f7fe f807 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 8003f00:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <_ZL12MX_TIM4_Initv+0xac>
		Error_Handler();
 8003f10:	f000 f95e 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003f14:	bf00      	nop
 8003f16:	3730      	adds	r7, #48	; 0x30
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200009a8 	.word	0x200009a8
 8003f20:	40000800 	.word	0x40000800

08003f24 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 ffac 	bl	8005e90 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f42:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <_ZL12MX_TIM3_Initv+0xb8>)
 8003f44:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f58:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f66:	2303      	movs	r3, #3
 8003f68:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003f92:	f7fd ff73 	bl	8001e7c <HAL_TIM_Encoder_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 8003fa6:	f000 f913 	bl	80041d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4808      	ldr	r0, [pc, #32]	; (8003fd8 <_ZL12MX_TIM3_Initv+0xb4>)
 8003fb8:	f7fd ffa9 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 8003fbc:	4603      	mov	r3, r0
			!= HAL_OK) {
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 8003fcc:	f000 f900 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	3730      	adds	r7, #48	; 0x30
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000968 	.word	0x20000968
 8003fdc:	40000400 	.word	0x40000400

08003fe0 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8003ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004002:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9 - 1; //512Hz
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8004006:	2208      	movs	r2, #8
 8004008:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15625-1;
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8004012:	f643 5208 	movw	r2, #15624	; 0x3d08
 8004016:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004026:	481b      	ldr	r0, [pc, #108]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8004028:	f7fd ff0e 	bl	8001e48 <HAL_TIM_Base_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <_ZL12MX_TIM2_Initv+0x60>
		Error_Handler();
 800403c:	f000 f8c8 	bl	80041d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004044:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	4619      	mov	r1, r3
 800404c:	4811      	ldr	r0, [pc, #68]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 800404e:	f7fd fe09 	bl	8001c64 <HAL_TIM_ConfigClockSource>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <_ZL12MX_TIM2_Initv+0x86>
		Error_Handler();
 8004062:	f000 f8b5 	bl	80041d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800406e:	463b      	mov	r3, r7
 8004070:	4619      	mov	r1, r3
 8004072:	4808      	ldr	r0, [pc, #32]	; (8004094 <_ZL12MX_TIM2_Initv+0xb4>)
 8004074:	f7fd ff4b 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 8004078:	4603      	mov	r3, r0
			!= HAL_OK) {
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf14      	ite	ne
 800407e:	2301      	movne	r3, #1
 8004080:	2300      	moveq	r3, #0
 8004082:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 8004088:	f000 f8a2 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000928 	.word	0x20000928

08004098 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800409c:	4b13      	ldr	r3, [pc, #76]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <_ZL19MX_USART1_UART_Initv+0x58>)
 80040a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200; //変更してもいいかな
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040be:	220c      	movs	r2, #12
 80040c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80040d0:	f7fd ffea 	bl	80020a8 <HAL_UART_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80040e4:	f000 f874 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* USER CODE END USART1_Init 2 */

}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200009e8 	.word	0x200009e8
 80040f0:	40013800 	.word	0x40013800

080040f4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80040fa:	f107 0310 	add.w	r3, r7, #16
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800410e:	f043 0310 	orr.w	r3, r3, #16
 8004112:	6193      	str	r3, [r2, #24]
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004126:	f043 0320 	orr.w	r3, r3, #32
 800412a:	6193      	str	r3, [r2, #24]
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6193      	str	r3, [r2, #24]
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 8004156:	f043 0308 	orr.w	r3, r3, #8
 800415a:	6193      	str	r3, [r2, #24]
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <_ZL12MX_GPIO_Initv+0xd0>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004168:	2200      	movs	r2, #0
 800416a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800416e:	4816      	ldr	r0, [pc, #88]	; (80041c8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004170:	f7fd fa74 	bl	800165c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8004174:	2200      	movs	r2, #0
 8004176:	f241 6107 	movw	r1, #5639	; 0x1607
 800417a:	4814      	ldr	r0, [pc, #80]	; (80041cc <_ZL12MX_GPIO_Initv+0xd8>)
 800417c:	f7fd fa6e 	bl	800165c <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12
					| GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004184:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004186:	2301      	movs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418e:	2302      	movs	r3, #2
 8004190:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	f107 0310 	add.w	r3, r7, #16
 8004196:	4619      	mov	r1, r3
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <_ZL12MX_GPIO_Initv+0xd4>)
 800419a:	f7fd f97f 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB12 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 800419e:	f241 6307 	movw	r3, #5639	; 0x1607
 80041a2:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	2302      	movs	r3, #2
 80041ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	4619      	mov	r1, r3
 80041b6:	4805      	ldr	r0, [pc, #20]	; (80041cc <_ZL12MX_GPIO_Initv+0xd8>)
 80041b8:	f7fd f970 	bl	800149c <HAL_GPIO_Init>

	//GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
	//GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
	//LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
 80041bc:	bf00      	nop
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40011000 	.word	0x40011000
 80041cc:	40010c00 	.word	0x40010c00

080041d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <_Z8can_packIfEvRA8_hT_>:
     data = _e.data;
 }

 // packs can payload
 template<typename T>
 void can_pack(uint8_t (&buf)[CAN_MTU], const T data) //第一引数に格納用の配列
 80041dc:	b490      	push	{r4, r7}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
 {
     _Encapsulator<T> _e;
     _e.data = data;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	60bb      	str	r3, [r7, #8]

     for (int i = sizeof(T); i > 0;)
 80041ea:	2304      	movs	r3, #4
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	dd17      	ble.n	8004224 <_Z8can_packIfEvRA8_hT_+0x48>
     {
         i--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
         buf[i] = _e.i & 0xff;
 80041fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80041fe:	b2d9      	uxtb	r1, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	701a      	strb	r2, [r3, #0]
         _e.i >>= 8;
 800420a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	f04f 0400 	mov.w	r4, #0
 8004216:	0a0b      	lsrs	r3, r1, #8
 8004218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800421c:	0a14      	lsrs	r4, r2, #8
 800421e:	e9c7 3402 	strd	r3, r4, [r7, #8]
     for (int i = sizeof(T); i > 0;)
 8004222:	e7e4      	b.n	80041ee <_Z8can_packIfEvRA8_hT_+0x12>
     }
 }
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bc90      	pop	{r4, r7}
 800422c:	4770      	bx	lr
	...

08004230 <_Z41__static_initialization_and_destruction_0ii>:
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10e      	bne.n	800425e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004246:	4293      	cmp	r3, r2
 8004248:	d109      	bne.n	800425e <_Z41__static_initialization_and_destruction_0ii+0x2e>
Odometry *odom = new Odometry();
 800424a:	2058      	movs	r0, #88	; 0x58
 800424c:	f000 f9cd 	bl	80045ea <_Znwj>
 8004250:	4603      	mov	r3, r0
 8004252:	461c      	mov	r4, r3
 8004254:	4620      	mov	r0, r4
 8004256:	f7fe fdfb 	bl	8002e50 <_ZN8OdometryC1Ev>
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800425c:	601c      	str	r4, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bd90      	pop	{r4, r7, pc}
 8004266:	bf00      	nop
 8004268:	20000a98 	.word	0x20000a98

0800426c <_GLOBAL__sub_I_hspi2>:
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
 8004270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004274:	2001      	movs	r0, #1
 8004276:	f7ff ffdb 	bl	8004230 <_Z41__static_initialization_and_destruction_0ii>
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_MspInit+0x3c>)
{
 800427e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	619a      	str	r2, [r3, #24]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	f002 0201 	and.w	r2, r2, #1
 800428e:	9200      	str	r2, [sp, #0]
 8004290:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004298:	61da      	str	r2, [r3, #28]
 800429a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042a6:	6853      	ldr	r3, [r2, #4]
 80042a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042b2:	b002      	add	sp, #8
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40010000 	.word	0x40010000

080042c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	2210      	movs	r2, #16
 80042c8:	2100      	movs	r1, #0
 80042ca:	a802      	add	r0, sp, #8
 80042cc:	f001 fde0 	bl	8005e90 <memset>
  if(hcan->Instance==CAN1)
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_CAN_MspInit+0x7c>)
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d12e      	bne.n	8004336 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80042d8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80042dc:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042de:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80042e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042e4:	61da      	str	r2, [r3, #28]
 80042e6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e8:	4815      	ldr	r0, [pc, #84]	; (8004340 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80042ea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80042ee:	9200      	str	r2, [sp, #0]
 80042f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE(); //GPIOBじゃ無いあたりが気になるけど、動いてるしバグが怖いのでそのままに
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	f042 0204 	orr.w	r2, r2, #4
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004308:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430a:	f7fd f8c7 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004312:	2302      	movs	r3, #2
 8004314:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004318:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431a:	a902      	add	r1, sp, #8
 800431c:	4808      	ldr	r0, [pc, #32]	; (8004340 <HAL_CAN_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800431e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004320:	f7fd f8bc 	bl	800149c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    __HAL_AFIO_REMAP_CAN1_2();
 8004324:	4a07      	ldr	r2, [pc, #28]	; (8004344 <HAL_CAN_MspInit+0x84>)
 8004326:	6853      	ldr	r3, [r2, #4]
 8004328:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800432c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6053      	str	r3, [r2, #4]
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004336:	b006      	add	sp, #24
 8004338:	bd10      	pop	{r4, pc}
 800433a:	bf00      	nop
 800433c:	40006400 	.word	0x40006400
 8004340:	40010c00 	.word	0x40010c00
 8004344:	40010000 	.word	0x40010000

08004348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434e:	2210      	movs	r2, #16
 8004350:	2100      	movs	r1, #0
 8004352:	a802      	add	r0, sp, #8
 8004354:	f001 fd9c 	bl	8005e90 <memset>
  if(hspi->Instance==SPI2)
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <HAL_SPI_MspInit+0x70>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d128      	bne.n	80043b2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004360:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8004364:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004366:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	61da      	str	r2, [r3, #28]
 800436e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	4812      	ldr	r0, [pc, #72]	; (80043bc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004372:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004376:	9200      	str	r2, [sp, #0]
 8004378:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	f042 0208 	orr.w	r2, r2, #8
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004384:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	2302      	movs	r3, #2
 8004392:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004396:	2303      	movs	r3, #3
 8004398:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	f7fd f87f 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800439e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043a2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a4:	4805      	ldr	r0, [pc, #20]	; (80043bc <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043a6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043aa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ae:	f7fd f875 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80043b2:	b006      	add	sp, #24
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	bf00      	nop
 80043b8:	40003800 	.word	0x40003800
 80043bc:	40010c00 	.word	0x40010c00

080043c0 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	2210      	movs	r2, #16
{
 80043c2:	b510      	push	{r4, lr}
 80043c4:	4604      	mov	r4, r0
 80043c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	eb0d 0002 	add.w	r0, sp, r2
 80043cc:	2100      	movs	r1, #0
 80043ce:	f001 fd5f 	bl	8005e90 <memset>
  if(htim_encoder->Instance==TIM3)
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_TIM_Encoder_MspInit+0xa4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d125      	bne.n	8004426 <HAL_TIM_Encoder_MspInit+0x66>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_TIM_Encoder_MspInit+0xa8>)
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043dc:	a904      	add	r1, sp, #16
      __HAL_RCC_TIM3_CLK_ENABLE();
 80043de:	69da      	ldr	r2, [r3, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e0:	4822      	ldr	r0, [pc, #136]	; (800446c <HAL_TIM_Encoder_MspInit+0xac>)
      __HAL_RCC_TIM3_CLK_ENABLE();
 80043e2:	f042 0202 	orr.w	r2, r2, #2
 80043e6:	61da      	str	r2, [r3, #28]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	f002 0202 	and.w	r2, r2, #2
 80043ee:	9200      	str	r2, [sp, #0]
 80043f0:	9a00      	ldr	r2, [sp, #0]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	9b01      	ldr	r3, [sp, #4]
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004404:	2330      	movs	r3, #48	; 0x30
 8004406:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004408:	2301      	movs	r3, #1
 800440a:	9306      	str	r3, [sp, #24]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440c:	f7fd f846 	bl	800149c <HAL_GPIO_Init>

      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <HAL_TIM_Encoder_MspInit+0xb0>)
 8004412:	6853      	ldr	r3, [r2, #4]
 8004414:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004418:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800441c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004420:	6053      	str	r3, [r2, #4]

  /* USER CODE END TIM4_MspInit 1 */
  }


}
 8004422:	b008      	add	sp, #32
 8004424:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM4)
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d1fa      	bne.n	8004422 <HAL_TIM_Encoder_MspInit+0x62>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_TIM_Encoder_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442e:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004430:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004432:	480e      	ldr	r0, [pc, #56]	; (800446c <HAL_TIM_Encoder_MspInit+0xac>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004434:	f042 0204 	orr.w	r2, r2, #4
 8004438:	61da      	str	r2, [r3, #28]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	f002 0204 	and.w	r2, r2, #4
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	619a      	str	r2, [r3, #24]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	9303      	str	r3, [sp, #12]
 8004454:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004456:	23c0      	movs	r3, #192	; 0xc0
 8004458:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445a:	2301      	movs	r3, #1
 800445c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445e:	f7fd f81d 	bl	800149c <HAL_GPIO_Init>
}
 8004462:	e7de      	b.n	8004422 <HAL_TIM_Encoder_MspInit+0x62>
 8004464:	40000400 	.word	0x40000400
 8004468:	40021000 	.word	0x40021000
 800446c:	40010c00 	.word	0x40010c00
 8004470:	40010000 	.word	0x40010000
 8004474:	40000800 	.word	0x40000800

08004478 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004478:	6803      	ldr	r3, [r0, #0]
{
 800447a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d110      	bne.n	80044a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004482:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004486:	69da      	ldr	r2, [r3, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004488:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800449e:	b002      	add	sp, #8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044a0:	f7fc bf5e 	b.w	8001360 <HAL_NVIC_SetPriority>
}
 80044a4:	b002      	add	sp, #8
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ae:	2210      	movs	r2, #16
 80044b0:	2100      	movs	r1, #0
 80044b2:	a802      	add	r0, sp, #8
 80044b4:	f001 fcec 	bl	8005e90 <memset>
  if(huart->Instance==USART1)
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_UART_MspInit+0x80>)
 80044bc:	429a      	cmp	r2, r3
 80044be:	d131      	bne.n	8004524 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80044c4:	699a      	ldr	r2, [r3, #24]
    PA10    ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044cc:	619a      	str	r2, [r3, #24]
 80044ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d0:	4816      	ldr	r0, [pc, #88]	; (800452c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80044d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80044d6:	9200      	str	r2, [sp, #0]
 80044d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044da:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044dc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	f042 0204 	orr.w	r2, r2, #4
 80044e2:	619a      	str	r2, [r3, #24]
 80044e4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f8:	2303      	movs	r3, #3
 80044fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fc:	f7fc ffce 	bl	800149c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004504:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004508:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450a:	a902      	add	r1, sp, #8
 800450c:	4807      	ldr	r0, [pc, #28]	; (800452c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800450e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f7fc ffc4 	bl	800149c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004514:	2025      	movs	r0, #37	; 0x25
 8004516:	4622      	mov	r2, r4
 8004518:	4621      	mov	r1, r4
 800451a:	f7fc ff21 	bl	8001360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800451e:	2025      	movs	r0, #37	; 0x25
 8004520:	f7fc ff52 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004524:	b006      	add	sp, #24
 8004526:	bd10      	pop	{r4, pc}
 8004528:	40013800 	.word	0x40013800
 800452c:	40010800 	.word	0x40010800

08004530 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004530:	4770      	bx	lr

08004532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004532:	e7fe      	b.n	8004532 <HardFault_Handler>

08004534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004534:	e7fe      	b.n	8004534 <MemManage_Handler>

08004536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004536:	e7fe      	b.n	8004536 <BusFault_Handler>

08004538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004538:	e7fe      	b.n	8004538 <UsageFault_Handler>

0800453a <SVC_Handler>:
 800453a:	4770      	bx	lr

0800453c <DebugMon_Handler>:
 800453c:	4770      	bx	lr

0800453e <PendSV_Handler>:
 800453e:	4770      	bx	lr

08004540 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004540:	f7fc bd68 	b.w	8001014 <HAL_IncTick>

08004544 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <USART1_IRQHandler+0x8>)
 8004546:	f7fd be1b 	b.w	8002180 <HAL_UART_IRQHandler>
 800454a:	bf00      	nop
 800454c:	200009e8 	.word	0x200009e8

08004550 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <SystemInit+0x40>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <SystemInit+0x44>)
 800455e:	400a      	ands	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800456c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004574:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800457c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800457e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004582:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004584:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <SystemInit+0x48>)
 800458a:	609a      	str	r2, [r3, #8]
#endif 
}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	f8ff0000 	.word	0xf8ff0000
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800459c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800459e:	e003      	b.n	80045a8 <LoopCopyDataInit>

080045a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045a6:	3104      	adds	r1, #4

080045a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045a8:	480a      	ldr	r0, [pc, #40]	; (80045d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045b0:	d3f6      	bcc.n	80045a0 <CopyDataInit>
  ldr r2, =_sbss
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80045b4:	e002      	b.n	80045bc <LoopFillZerobss>

080045b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80045b8:	f842 3b04 	str.w	r3, [r2], #4

080045bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80045be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045c0:	d3f9      	bcc.n	80045b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045c2:	f7ff ffc5 	bl	8004550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045c6:	f001 f9f9 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045ca:	f7ff faa9 	bl	8003b20 <main>
  bx lr
 80045ce:	4770      	bx	lr
  ldr r3, =_sidata
 80045d0:	08006744 	.word	0x08006744
  ldr r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80045d8:	20000854 	.word	0x20000854
  ldr r2, =_sbss
 80045dc:	20000854 	.word	0x20000854
  ldr r3, = _ebss
 80045e0:	20000b10 	.word	0x20000b10

080045e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045e4:	e7fe      	b.n	80045e4 <ADC1_2_IRQHandler>

080045e6 <_ZdlPvj>:
 80045e6:	f000 b819 	b.w	800461c <_ZdlPv>

080045ea <_Znwj>:
 80045ea:	b510      	push	{r4, lr}
 80045ec:	2800      	cmp	r0, #0
 80045ee:	bf14      	ite	ne
 80045f0:	4604      	movne	r4, r0
 80045f2:	2401      	moveq	r4, #1
 80045f4:	4620      	mov	r0, r4
 80045f6:	f001 fa05 	bl	8005a04 <malloc>
 80045fa:	b930      	cbnz	r0, 800460a <_Znwj+0x20>
 80045fc:	f000 f806 	bl	800460c <_ZSt15get_new_handlerv>
 8004600:	b908      	cbnz	r0, 8004606 <_Znwj+0x1c>
 8004602:	f001 f9cd 	bl	80059a0 <abort>
 8004606:	4780      	blx	r0
 8004608:	e7f4      	b.n	80045f4 <_Znwj+0xa>
 800460a:	bd10      	pop	{r4, pc}

0800460c <_ZSt15get_new_handlerv>:
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <_ZSt15get_new_handlerv+0xc>)
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	f3bf 8f5b 	dmb	ish
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000ac0 	.word	0x20000ac0

0800461c <_ZdlPv>:
 800461c:	f001 b9fa 	b.w	8005a14 <free>

08004620 <cosf>:
 8004620:	b507      	push	{r0, r1, r2, lr}
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <cosf+0x64>)
 8004624:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004628:	4293      	cmp	r3, r2
 800462a:	4601      	mov	r1, r0
 800462c:	dc03      	bgt.n	8004636 <cosf+0x16>
 800462e:	2100      	movs	r1, #0
 8004630:	f000 fc78 	bl	8004f24 <__kernel_cosf>
 8004634:	e004      	b.n	8004640 <cosf+0x20>
 8004636:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800463a:	db04      	blt.n	8004646 <cosf+0x26>
 800463c:	f7fc f9a8 	bl	8000990 <__aeabi_fsub>
 8004640:	b003      	add	sp, #12
 8004642:	f85d fb04 	ldr.w	pc, [sp], #4
 8004646:	4669      	mov	r1, sp
 8004648:	f000 fac0 	bl	8004bcc <__ieee754_rem_pio2f>
 800464c:	f000 0203 	and.w	r2, r0, #3
 8004650:	2a01      	cmp	r2, #1
 8004652:	d005      	beq.n	8004660 <cosf+0x40>
 8004654:	2a02      	cmp	r2, #2
 8004656:	d00a      	beq.n	800466e <cosf+0x4e>
 8004658:	b972      	cbnz	r2, 8004678 <cosf+0x58>
 800465a:	9901      	ldr	r1, [sp, #4]
 800465c:	9800      	ldr	r0, [sp, #0]
 800465e:	e7e7      	b.n	8004630 <cosf+0x10>
 8004660:	9901      	ldr	r1, [sp, #4]
 8004662:	9800      	ldr	r0, [sp, #0]
 8004664:	f000 ff7c 	bl	8005560 <__kernel_sinf>
 8004668:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800466c:	e7e8      	b.n	8004640 <cosf+0x20>
 800466e:	9901      	ldr	r1, [sp, #4]
 8004670:	9800      	ldr	r0, [sp, #0]
 8004672:	f000 fc57 	bl	8004f24 <__kernel_cosf>
 8004676:	e7f7      	b.n	8004668 <cosf+0x48>
 8004678:	2201      	movs	r2, #1
 800467a:	9901      	ldr	r1, [sp, #4]
 800467c:	9800      	ldr	r0, [sp, #0]
 800467e:	f000 ff6f 	bl	8005560 <__kernel_sinf>
 8004682:	e7dd      	b.n	8004640 <cosf+0x20>
 8004684:	3f490fd8 	.word	0x3f490fd8

08004688 <sinf>:
 8004688:	b507      	push	{r0, r1, r2, lr}
 800468a:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <sinf+0x68>)
 800468c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004690:	4293      	cmp	r3, r2
 8004692:	4601      	mov	r1, r0
 8004694:	dc04      	bgt.n	80046a0 <sinf+0x18>
 8004696:	2200      	movs	r2, #0
 8004698:	2100      	movs	r1, #0
 800469a:	f000 ff61 	bl	8005560 <__kernel_sinf>
 800469e:	e004      	b.n	80046aa <sinf+0x22>
 80046a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80046a4:	db04      	blt.n	80046b0 <sinf+0x28>
 80046a6:	f7fc f973 	bl	8000990 <__aeabi_fsub>
 80046aa:	b003      	add	sp, #12
 80046ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80046b0:	4669      	mov	r1, sp
 80046b2:	f000 fa8b 	bl	8004bcc <__ieee754_rem_pio2f>
 80046b6:	f000 0003 	and.w	r0, r0, #3
 80046ba:	2801      	cmp	r0, #1
 80046bc:	d006      	beq.n	80046cc <sinf+0x44>
 80046be:	2802      	cmp	r0, #2
 80046c0:	d009      	beq.n	80046d6 <sinf+0x4e>
 80046c2:	b980      	cbnz	r0, 80046e6 <sinf+0x5e>
 80046c4:	2201      	movs	r2, #1
 80046c6:	9901      	ldr	r1, [sp, #4]
 80046c8:	9800      	ldr	r0, [sp, #0]
 80046ca:	e7e6      	b.n	800469a <sinf+0x12>
 80046cc:	9901      	ldr	r1, [sp, #4]
 80046ce:	9800      	ldr	r0, [sp, #0]
 80046d0:	f000 fc28 	bl	8004f24 <__kernel_cosf>
 80046d4:	e7e9      	b.n	80046aa <sinf+0x22>
 80046d6:	2201      	movs	r2, #1
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	9800      	ldr	r0, [sp, #0]
 80046dc:	f000 ff40 	bl	8005560 <__kernel_sinf>
 80046e0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80046e4:	e7e1      	b.n	80046aa <sinf+0x22>
 80046e6:	9901      	ldr	r1, [sp, #4]
 80046e8:	9800      	ldr	r0, [sp, #0]
 80046ea:	f000 fc1b 	bl	8004f24 <__kernel_cosf>
 80046ee:	e7f7      	b.n	80046e0 <sinf+0x58>
 80046f0:	3f490fd8 	.word	0x3f490fd8

080046f4 <asinf>:
 80046f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f6:	b08b      	sub	sp, #44	; 0x2c
 80046f8:	4604      	mov	r4, r0
 80046fa:	f000 f895 	bl	8004828 <__ieee754_asinf>
 80046fe:	4e21      	ldr	r6, [pc, #132]	; (8004784 <asinf+0x90>)
 8004700:	4605      	mov	r5, r0
 8004702:	f996 3000 	ldrsb.w	r3, [r6]
 8004706:	3301      	adds	r3, #1
 8004708:	d038      	beq.n	800477c <asinf+0x88>
 800470a:	4621      	mov	r1, r4
 800470c:	4620      	mov	r0, r4
 800470e:	f7fc fc0f 	bl	8000f30 <__aeabi_fcmpun>
 8004712:	4607      	mov	r7, r0
 8004714:	2800      	cmp	r0, #0
 8004716:	d131      	bne.n	800477c <asinf+0x88>
 8004718:	4620      	mov	r0, r4
 800471a:	f001 f8ab 	bl	8005874 <fabsf>
 800471e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004722:	f7fc fbfb 	bl	8000f1c <__aeabi_fcmpgt>
 8004726:	b348      	cbz	r0, 800477c <asinf+0x88>
 8004728:	2301      	movs	r3, #1
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	4b16      	ldr	r3, [pc, #88]	; (8004788 <asinf+0x94>)
 800472e:	4620      	mov	r0, r4
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	9708      	str	r7, [sp, #32]
 8004734:	f7fb fe6e 	bl	8000414 <__aeabi_f2d>
 8004738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800473c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004740:	4812      	ldr	r0, [pc, #72]	; (800478c <asinf+0x98>)
 8004742:	f000 ff85 	bl	8005650 <nan>
 8004746:	f996 3000 	ldrsb.w	r3, [r6]
 800474a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d104      	bne.n	800475c <asinf+0x68>
 8004752:	f001 f92d 	bl	80059b0 <__errno>
 8004756:	2321      	movs	r3, #33	; 0x21
 8004758:	6003      	str	r3, [r0, #0]
 800475a:	e004      	b.n	8004766 <asinf+0x72>
 800475c:	4668      	mov	r0, sp
 800475e:	f000 ff75 	bl	800564c <matherr>
 8004762:	2800      	cmp	r0, #0
 8004764:	d0f5      	beq.n	8004752 <asinf+0x5e>
 8004766:	9b08      	ldr	r3, [sp, #32]
 8004768:	b11b      	cbz	r3, 8004772 <asinf+0x7e>
 800476a:	f001 f921 	bl	80059b0 <__errno>
 800476e:	9b08      	ldr	r3, [sp, #32]
 8004770:	6003      	str	r3, [r0, #0]
 8004772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004776:	f7fc f8b7 	bl	80008e8 <__aeabi_d2f>
 800477a:	4605      	mov	r5, r0
 800477c:	4628      	mov	r0, r5
 800477e:	b00b      	add	sp, #44	; 0x2c
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c
 8004788:	08006330 	.word	0x08006330
 800478c:	08006335 	.word	0x08006335

08004790 <atan2f>:
 8004790:	f000 b98c 	b.w	8004aac <__ieee754_atan2f>

08004794 <sqrtf>:
 8004794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004796:	b08b      	sub	sp, #44	; 0x2c
 8004798:	4604      	mov	r4, r0
 800479a:	f000 fb6f 	bl	8004e7c <__ieee754_sqrtf>
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <sqrtf+0x8c>)
 80047a0:	4606      	mov	r6, r0
 80047a2:	f993 5000 	ldrsb.w	r5, [r3]
 80047a6:	1c6b      	adds	r3, r5, #1
 80047a8:	d02a      	beq.n	8004800 <sqrtf+0x6c>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fc fbbf 	bl	8000f30 <__aeabi_fcmpun>
 80047b2:	4607      	mov	r7, r0
 80047b4:	bb20      	cbnz	r0, 8004800 <sqrtf+0x6c>
 80047b6:	2100      	movs	r1, #0
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7fc fb91 	bl	8000ee0 <__aeabi_fcmplt>
 80047be:	b1f8      	cbz	r0, 8004800 <sqrtf+0x6c>
 80047c0:	2301      	movs	r3, #1
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <sqrtf+0x90>)
 80047c6:	4620      	mov	r0, r4
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	9708      	str	r7, [sp, #32]
 80047cc:	f7fb fe22 	bl	8000414 <__aeabi_f2d>
 80047d0:	2200      	movs	r2, #0
 80047d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047da:	2300      	movs	r3, #0
 80047dc:	b99d      	cbnz	r5, 8004806 <sqrtf+0x72>
 80047de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047e2:	4668      	mov	r0, sp
 80047e4:	f000 ff32 	bl	800564c <matherr>
 80047e8:	b1a8      	cbz	r0, 8004816 <sqrtf+0x82>
 80047ea:	9b08      	ldr	r3, [sp, #32]
 80047ec:	b11b      	cbz	r3, 80047f6 <sqrtf+0x62>
 80047ee:	f001 f8df 	bl	80059b0 <__errno>
 80047f2:	9b08      	ldr	r3, [sp, #32]
 80047f4:	6003      	str	r3, [r0, #0]
 80047f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047fa:	f7fc f875 	bl	80008e8 <__aeabi_d2f>
 80047fe:	4606      	mov	r6, r0
 8004800:	4630      	mov	r0, r6
 8004802:	b00b      	add	sp, #44	; 0x2c
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	f7fb ff85 	bl	8000718 <__aeabi_ddiv>
 800480e:	2d02      	cmp	r5, #2
 8004810:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004814:	d1e5      	bne.n	80047e2 <sqrtf+0x4e>
 8004816:	f001 f8cb 	bl	80059b0 <__errno>
 800481a:	2321      	movs	r3, #33	; 0x21
 800481c:	6003      	str	r3, [r0, #0]
 800481e:	e7e4      	b.n	80047ea <sqrtf+0x56>
 8004820:	2000000c 	.word	0x2000000c
 8004824:	08006336 	.word	0x08006336

08004828 <__ieee754_asinf>:
 8004828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004830:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8004834:	4604      	mov	r4, r0
 8004836:	4607      	mov	r7, r0
 8004838:	d10c      	bne.n	8004854 <__ieee754_asinf+0x2c>
 800483a:	498c      	ldr	r1, [pc, #560]	; (8004a6c <__ieee754_asinf+0x244>)
 800483c:	f7fc f9b2 	bl	8000ba4 <__aeabi_fmul>
 8004840:	498b      	ldr	r1, [pc, #556]	; (8004a70 <__ieee754_asinf+0x248>)
 8004842:	4605      	mov	r5, r0
 8004844:	4620      	mov	r0, r4
 8004846:	f7fc f9ad 	bl	8000ba4 <__aeabi_fmul>
 800484a:	4601      	mov	r1, r0
 800484c:	4628      	mov	r0, r5
 800484e:	f7fc f8a1 	bl	8000994 <__addsf3>
 8004852:	e006      	b.n	8004862 <__ieee754_asinf+0x3a>
 8004854:	dd09      	ble.n	800486a <__ieee754_asinf+0x42>
 8004856:	4601      	mov	r1, r0
 8004858:	f7fc f89a 	bl	8000990 <__aeabi_fsub>
 800485c:	4601      	mov	r1, r0
 800485e:	f7fc fa55 	bl	8000d0c <__aeabi_fdiv>
 8004862:	4604      	mov	r4, r0
 8004864:	4620      	mov	r0, r4
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800486e:	da0b      	bge.n	8004888 <__ieee754_asinf+0x60>
 8004870:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8004874:	da73      	bge.n	800495e <__ieee754_asinf+0x136>
 8004876:	497f      	ldr	r1, [pc, #508]	; (8004a74 <__ieee754_asinf+0x24c>)
 8004878:	f7fc f88c 	bl	8000994 <__addsf3>
 800487c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004880:	f7fc fb4c 	bl	8000f1c <__aeabi_fcmpgt>
 8004884:	2800      	cmp	r0, #0
 8004886:	d1ed      	bne.n	8004864 <__ieee754_asinf+0x3c>
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fff3 	bl	8005874 <fabsf>
 800488e:	4601      	mov	r1, r0
 8004890:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004894:	f7fc f87c 	bl	8000990 <__aeabi_fsub>
 8004898:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800489c:	f7fc f982 	bl	8000ba4 <__aeabi_fmul>
 80048a0:	4604      	mov	r4, r0
 80048a2:	4975      	ldr	r1, [pc, #468]	; (8004a78 <__ieee754_asinf+0x250>)
 80048a4:	f7fc f97e 	bl	8000ba4 <__aeabi_fmul>
 80048a8:	4974      	ldr	r1, [pc, #464]	; (8004a7c <__ieee754_asinf+0x254>)
 80048aa:	f7fc f873 	bl	8000994 <__addsf3>
 80048ae:	4621      	mov	r1, r4
 80048b0:	f7fc f978 	bl	8000ba4 <__aeabi_fmul>
 80048b4:	4972      	ldr	r1, [pc, #456]	; (8004a80 <__ieee754_asinf+0x258>)
 80048b6:	f7fc f86b 	bl	8000990 <__aeabi_fsub>
 80048ba:	4621      	mov	r1, r4
 80048bc:	f7fc f972 	bl	8000ba4 <__aeabi_fmul>
 80048c0:	4970      	ldr	r1, [pc, #448]	; (8004a84 <__ieee754_asinf+0x25c>)
 80048c2:	f7fc f867 	bl	8000994 <__addsf3>
 80048c6:	4621      	mov	r1, r4
 80048c8:	f7fc f96c 	bl	8000ba4 <__aeabi_fmul>
 80048cc:	496e      	ldr	r1, [pc, #440]	; (8004a88 <__ieee754_asinf+0x260>)
 80048ce:	f7fc f85f 	bl	8000990 <__aeabi_fsub>
 80048d2:	4621      	mov	r1, r4
 80048d4:	f7fc f966 	bl	8000ba4 <__aeabi_fmul>
 80048d8:	496c      	ldr	r1, [pc, #432]	; (8004a8c <__ieee754_asinf+0x264>)
 80048da:	f7fc f85b 	bl	8000994 <__addsf3>
 80048de:	4621      	mov	r1, r4
 80048e0:	f7fc f960 	bl	8000ba4 <__aeabi_fmul>
 80048e4:	496a      	ldr	r1, [pc, #424]	; (8004a90 <__ieee754_asinf+0x268>)
 80048e6:	4680      	mov	r8, r0
 80048e8:	4620      	mov	r0, r4
 80048ea:	f7fc f95b 	bl	8000ba4 <__aeabi_fmul>
 80048ee:	4969      	ldr	r1, [pc, #420]	; (8004a94 <__ieee754_asinf+0x26c>)
 80048f0:	f7fc f84e 	bl	8000990 <__aeabi_fsub>
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7fc f955 	bl	8000ba4 <__aeabi_fmul>
 80048fa:	4967      	ldr	r1, [pc, #412]	; (8004a98 <__ieee754_asinf+0x270>)
 80048fc:	f7fc f84a 	bl	8000994 <__addsf3>
 8004900:	4621      	mov	r1, r4
 8004902:	f7fc f94f 	bl	8000ba4 <__aeabi_fmul>
 8004906:	4965      	ldr	r1, [pc, #404]	; (8004a9c <__ieee754_asinf+0x274>)
 8004908:	f7fc f842 	bl	8000990 <__aeabi_fsub>
 800490c:	4621      	mov	r1, r4
 800490e:	f7fc f949 	bl	8000ba4 <__aeabi_fmul>
 8004912:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004916:	f7fc f83d 	bl	8000994 <__addsf3>
 800491a:	4681      	mov	r9, r0
 800491c:	4620      	mov	r0, r4
 800491e:	f000 faad 	bl	8004e7c <__ieee754_sqrtf>
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <__ieee754_asinf+0x278>)
 8004924:	4606      	mov	r6, r0
 8004926:	429d      	cmp	r5, r3
 8004928:	dd63      	ble.n	80049f2 <__ieee754_asinf+0x1ca>
 800492a:	4649      	mov	r1, r9
 800492c:	4640      	mov	r0, r8
 800492e:	f7fc f9ed 	bl	8000d0c <__aeabi_fdiv>
 8004932:	4631      	mov	r1, r6
 8004934:	f7fc f936 	bl	8000ba4 <__aeabi_fmul>
 8004938:	4631      	mov	r1, r6
 800493a:	f7fc f82b 	bl	8000994 <__addsf3>
 800493e:	4601      	mov	r1, r0
 8004940:	f7fc f828 	bl	8000994 <__addsf3>
 8004944:	4957      	ldr	r1, [pc, #348]	; (8004aa4 <__ieee754_asinf+0x27c>)
 8004946:	f7fc f825 	bl	8000994 <__addsf3>
 800494a:	4601      	mov	r1, r0
 800494c:	4847      	ldr	r0, [pc, #284]	; (8004a6c <__ieee754_asinf+0x244>)
 800494e:	f7fc f81f 	bl	8000990 <__aeabi_fsub>
 8004952:	2f00      	cmp	r7, #0
 8004954:	4604      	mov	r4, r0
 8004956:	bfd8      	it	le
 8004958:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800495c:	e782      	b.n	8004864 <__ieee754_asinf+0x3c>
 800495e:	4601      	mov	r1, r0
 8004960:	f7fc f920 	bl	8000ba4 <__aeabi_fmul>
 8004964:	4605      	mov	r5, r0
 8004966:	4944      	ldr	r1, [pc, #272]	; (8004a78 <__ieee754_asinf+0x250>)
 8004968:	f7fc f91c 	bl	8000ba4 <__aeabi_fmul>
 800496c:	4943      	ldr	r1, [pc, #268]	; (8004a7c <__ieee754_asinf+0x254>)
 800496e:	f7fc f811 	bl	8000994 <__addsf3>
 8004972:	4629      	mov	r1, r5
 8004974:	f7fc f916 	bl	8000ba4 <__aeabi_fmul>
 8004978:	4941      	ldr	r1, [pc, #260]	; (8004a80 <__ieee754_asinf+0x258>)
 800497a:	f7fc f809 	bl	8000990 <__aeabi_fsub>
 800497e:	4629      	mov	r1, r5
 8004980:	f7fc f910 	bl	8000ba4 <__aeabi_fmul>
 8004984:	493f      	ldr	r1, [pc, #252]	; (8004a84 <__ieee754_asinf+0x25c>)
 8004986:	f7fc f805 	bl	8000994 <__addsf3>
 800498a:	4629      	mov	r1, r5
 800498c:	f7fc f90a 	bl	8000ba4 <__aeabi_fmul>
 8004990:	493d      	ldr	r1, [pc, #244]	; (8004a88 <__ieee754_asinf+0x260>)
 8004992:	f7fb fffd 	bl	8000990 <__aeabi_fsub>
 8004996:	4629      	mov	r1, r5
 8004998:	f7fc f904 	bl	8000ba4 <__aeabi_fmul>
 800499c:	493b      	ldr	r1, [pc, #236]	; (8004a8c <__ieee754_asinf+0x264>)
 800499e:	f7fb fff9 	bl	8000994 <__addsf3>
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fc f8fe 	bl	8000ba4 <__aeabi_fmul>
 80049a8:	4939      	ldr	r1, [pc, #228]	; (8004a90 <__ieee754_asinf+0x268>)
 80049aa:	4606      	mov	r6, r0
 80049ac:	4628      	mov	r0, r5
 80049ae:	f7fc f8f9 	bl	8000ba4 <__aeabi_fmul>
 80049b2:	4938      	ldr	r1, [pc, #224]	; (8004a94 <__ieee754_asinf+0x26c>)
 80049b4:	f7fb ffec 	bl	8000990 <__aeabi_fsub>
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fc f8f3 	bl	8000ba4 <__aeabi_fmul>
 80049be:	4936      	ldr	r1, [pc, #216]	; (8004a98 <__ieee754_asinf+0x270>)
 80049c0:	f7fb ffe8 	bl	8000994 <__addsf3>
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7fc f8ed 	bl	8000ba4 <__aeabi_fmul>
 80049ca:	4934      	ldr	r1, [pc, #208]	; (8004a9c <__ieee754_asinf+0x274>)
 80049cc:	f7fb ffe0 	bl	8000990 <__aeabi_fsub>
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fc f8e7 	bl	8000ba4 <__aeabi_fmul>
 80049d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049da:	f7fb ffdb 	bl	8000994 <__addsf3>
 80049de:	4601      	mov	r1, r0
 80049e0:	4630      	mov	r0, r6
 80049e2:	f7fc f993 	bl	8000d0c <__aeabi_fdiv>
 80049e6:	4621      	mov	r1, r4
 80049e8:	f7fc f8dc 	bl	8000ba4 <__aeabi_fmul>
 80049ec:	4601      	mov	r1, r0
 80049ee:	4620      	mov	r0, r4
 80049f0:	e72d      	b.n	800484e <__ieee754_asinf+0x26>
 80049f2:	4601      	mov	r1, r0
 80049f4:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 80049f8:	f7fb ffcc 	bl	8000994 <__addsf3>
 80049fc:	4649      	mov	r1, r9
 80049fe:	4682      	mov	sl, r0
 8004a00:	4640      	mov	r0, r8
 8004a02:	f7fc f983 	bl	8000d0c <__aeabi_fdiv>
 8004a06:	4601      	mov	r1, r0
 8004a08:	4650      	mov	r0, sl
 8004a0a:	f7fc f8cb 	bl	8000ba4 <__aeabi_fmul>
 8004a0e:	f025 050f 	bic.w	r5, r5, #15
 8004a12:	4680      	mov	r8, r0
 8004a14:	4629      	mov	r1, r5
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fc f8c4 	bl	8000ba4 <__aeabi_fmul>
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7fb ffb6 	bl	8000990 <__aeabi_fsub>
 8004a24:	4631      	mov	r1, r6
 8004a26:	4604      	mov	r4, r0
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7fb ffb3 	bl	8000994 <__addsf3>
 8004a2e:	4601      	mov	r1, r0
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7fc f96b 	bl	8000d0c <__aeabi_fdiv>
 8004a36:	4601      	mov	r1, r0
 8004a38:	f7fb ffac 	bl	8000994 <__addsf3>
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	480c      	ldr	r0, [pc, #48]	; (8004a70 <__ieee754_asinf+0x248>)
 8004a40:	f7fb ffa6 	bl	8000990 <__aeabi_fsub>
 8004a44:	4601      	mov	r1, r0
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7fb ffa2 	bl	8000990 <__aeabi_fsub>
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7fb ff9f 	bl	8000994 <__addsf3>
 8004a56:	4601      	mov	r1, r0
 8004a58:	4813      	ldr	r0, [pc, #76]	; (8004aa8 <__ieee754_asinf+0x280>)
 8004a5a:	f7fb ff99 	bl	8000990 <__aeabi_fsub>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7fb ff95 	bl	8000990 <__aeabi_fsub>
 8004a66:	4601      	mov	r1, r0
 8004a68:	480f      	ldr	r0, [pc, #60]	; (8004aa8 <__ieee754_asinf+0x280>)
 8004a6a:	e770      	b.n	800494e <__ieee754_asinf+0x126>
 8004a6c:	3fc90fdb 	.word	0x3fc90fdb
 8004a70:	b33bbd2e 	.word	0xb33bbd2e
 8004a74:	7149f2ca 	.word	0x7149f2ca
 8004a78:	3811ef08 	.word	0x3811ef08
 8004a7c:	3a4f7f04 	.word	0x3a4f7f04
 8004a80:	3d241146 	.word	0x3d241146
 8004a84:	3e4e0aa8 	.word	0x3e4e0aa8
 8004a88:	3ea6b090 	.word	0x3ea6b090
 8004a8c:	3e2aaaab 	.word	0x3e2aaaab
 8004a90:	3d9dc62e 	.word	0x3d9dc62e
 8004a94:	3f303361 	.word	0x3f303361
 8004a98:	4001572d 	.word	0x4001572d
 8004a9c:	4019d139 	.word	0x4019d139
 8004aa0:	3f799999 	.word	0x3f799999
 8004aa4:	333bbd2e 	.word	0x333bbd2e
 8004aa8:	3f490fdb 	.word	0x3f490fdb

08004aac <__ieee754_atan2f>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004ab2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	dc05      	bgt.n	8004ac6 <__ieee754_atan2f+0x1a>
 8004aba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004abe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004ac2:	4607      	mov	r7, r0
 8004ac4:	dd04      	ble.n	8004ad0 <__ieee754_atan2f+0x24>
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fb ff64 	bl	8000994 <__addsf3>
 8004acc:	4603      	mov	r3, r0
 8004ace:	e024      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004ad0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8004ad4:	d103      	bne.n	8004ade <__ieee754_atan2f+0x32>
 8004ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ada:	f000 bdbf 	b.w	800565c <atanf>
 8004ade:	178c      	asrs	r4, r1, #30
 8004ae0:	f004 0402 	and.w	r4, r4, #2
 8004ae4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004ae8:	b92a      	cbnz	r2, 8004af6 <__ieee754_atan2f+0x4a>
 8004aea:	2c02      	cmp	r4, #2
 8004aec:	d057      	beq.n	8004b9e <__ieee754_atan2f+0xf2>
 8004aee:	2c03      	cmp	r4, #3
 8004af0:	d113      	bne.n	8004b1a <__ieee754_atan2f+0x6e>
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <__ieee754_atan2f+0xfc>)
 8004af4:	e011      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004af6:	b91e      	cbnz	r6, 8004b00 <__ieee754_atan2f+0x54>
 8004af8:	2f00      	cmp	r7, #0
 8004afa:	da52      	bge.n	8004ba2 <__ieee754_atan2f+0xf6>
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <__ieee754_atan2f+0x100>)
 8004afe:	e00c      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b00:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004b04:	d11a      	bne.n	8004b3c <__ieee754_atan2f+0x90>
 8004b06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004b0a:	d10c      	bne.n	8004b26 <__ieee754_atan2f+0x7a>
 8004b0c:	2c02      	cmp	r4, #2
 8004b0e:	d006      	beq.n	8004b1e <__ieee754_atan2f+0x72>
 8004b10:	2c03      	cmp	r4, #3
 8004b12:	d006      	beq.n	8004b22 <__ieee754_atan2f+0x76>
 8004b14:	2c01      	cmp	r4, #1
 8004b16:	d140      	bne.n	8004b9a <__ieee754_atan2f+0xee>
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <__ieee754_atan2f+0x104>)
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1e:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <__ieee754_atan2f+0x108>)
 8004b20:	e7fb      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <__ieee754_atan2f+0x10c>)
 8004b24:	e7f9      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b26:	2c02      	cmp	r4, #2
 8004b28:	d039      	beq.n	8004b9e <__ieee754_atan2f+0xf2>
 8004b2a:	2c03      	cmp	r4, #3
 8004b2c:	d0e1      	beq.n	8004af2 <__ieee754_atan2f+0x46>
 8004b2e:	2c01      	cmp	r4, #1
 8004b30:	d102      	bne.n	8004b38 <__ieee754_atan2f+0x8c>
 8004b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b36:	e7f0      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e7ee      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b3c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004b40:	d0da      	beq.n	8004af8 <__ieee754_atan2f+0x4c>
 8004b42:	1b92      	subs	r2, r2, r6
 8004b44:	15d2      	asrs	r2, r2, #23
 8004b46:	2a3c      	cmp	r2, #60	; 0x3c
 8004b48:	dc17      	bgt.n	8004b7a <__ieee754_atan2f+0xce>
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	da01      	bge.n	8004b52 <__ieee754_atan2f+0xa6>
 8004b4e:	323c      	adds	r2, #60	; 0x3c
 8004b50:	db15      	blt.n	8004b7e <__ieee754_atan2f+0xd2>
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fc f8da 	bl	8000d0c <__aeabi_fdiv>
 8004b58:	f000 fe8c 	bl	8005874 <fabsf>
 8004b5c:	f000 fd7e 	bl	800565c <atanf>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2c01      	cmp	r4, #1
 8004b64:	d00d      	beq.n	8004b82 <__ieee754_atan2f+0xd6>
 8004b66:	2c02      	cmp	r4, #2
 8004b68:	d00e      	beq.n	8004b88 <__ieee754_atan2f+0xdc>
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d0d5      	beq.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b6e:	4913      	ldr	r1, [pc, #76]	; (8004bbc <__ieee754_atan2f+0x110>)
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb ff0f 	bl	8000994 <__addsf3>
 8004b76:	4912      	ldr	r1, [pc, #72]	; (8004bc0 <__ieee754_atan2f+0x114>)
 8004b78:	e00c      	b.n	8004b94 <__ieee754_atan2f+0xe8>
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <__ieee754_atan2f+0x118>)
 8004b7c:	e7f1      	b.n	8004b62 <__ieee754_atan2f+0xb6>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e7ef      	b.n	8004b62 <__ieee754_atan2f+0xb6>
 8004b82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b86:	e7c8      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b88:	490c      	ldr	r1, [pc, #48]	; (8004bbc <__ieee754_atan2f+0x110>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb ff02 	bl	8000994 <__addsf3>
 8004b90:	4601      	mov	r1, r0
 8004b92:	480b      	ldr	r0, [pc, #44]	; (8004bc0 <__ieee754_atan2f+0x114>)
 8004b94:	f7fb fefc 	bl	8000990 <__aeabi_fsub>
 8004b98:	e798      	b.n	8004acc <__ieee754_atan2f+0x20>
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <__ieee754_atan2f+0x11c>)
 8004b9c:	e7bd      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <__ieee754_atan2f+0x114>)
 8004ba0:	e7bb      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <__ieee754_atan2f+0x118>)
 8004ba4:	e7b9      	b.n	8004b1a <__ieee754_atan2f+0x6e>
 8004ba6:	bf00      	nop
 8004ba8:	c0490fdb 	.word	0xc0490fdb
 8004bac:	bfc90fdb 	.word	0xbfc90fdb
 8004bb0:	bf490fdb 	.word	0xbf490fdb
 8004bb4:	4016cbe4 	.word	0x4016cbe4
 8004bb8:	c016cbe4 	.word	0xc016cbe4
 8004bbc:	33bbbd2e 	.word	0x33bbbd2e
 8004bc0:	40490fdb 	.word	0x40490fdb
 8004bc4:	3fc90fdb 	.word	0x3fc90fdb
 8004bc8:	3f490fdb 	.word	0x3f490fdb

08004bcc <__ieee754_rem_pio2f>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	4a9d      	ldr	r2, [pc, #628]	; (8004e48 <__ieee754_rem_pio2f+0x27c>)
 8004bd2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004bd6:	4295      	cmp	r5, r2
 8004bd8:	b087      	sub	sp, #28
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4607      	mov	r7, r0
 8004bde:	dc04      	bgt.n	8004bea <__ieee754_rem_pio2f+0x1e>
 8004be0:	2300      	movs	r3, #0
 8004be2:	6020      	str	r0, [r4, #0]
 8004be4:	604b      	str	r3, [r1, #4]
 8004be6:	2600      	movs	r6, #0
 8004be8:	e01a      	b.n	8004c20 <__ieee754_rem_pio2f+0x54>
 8004bea:	4a98      	ldr	r2, [pc, #608]	; (8004e4c <__ieee754_rem_pio2f+0x280>)
 8004bec:	4295      	cmp	r5, r2
 8004bee:	dc4b      	bgt.n	8004c88 <__ieee754_rem_pio2f+0xbc>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f025 050f 	bic.w	r5, r5, #15
 8004bf6:	4996      	ldr	r1, [pc, #600]	; (8004e50 <__ieee754_rem_pio2f+0x284>)
 8004bf8:	4e96      	ldr	r6, [pc, #600]	; (8004e54 <__ieee754_rem_pio2f+0x288>)
 8004bfa:	dd23      	ble.n	8004c44 <__ieee754_rem_pio2f+0x78>
 8004bfc:	f7fb fec8 	bl	8000990 <__aeabi_fsub>
 8004c00:	42b5      	cmp	r5, r6
 8004c02:	4607      	mov	r7, r0
 8004c04:	d010      	beq.n	8004c28 <__ieee754_rem_pio2f+0x5c>
 8004c06:	4994      	ldr	r1, [pc, #592]	; (8004e58 <__ieee754_rem_pio2f+0x28c>)
 8004c08:	f7fb fec2 	bl	8000990 <__aeabi_fsub>
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	6020      	str	r0, [r4, #0]
 8004c10:	4638      	mov	r0, r7
 8004c12:	f7fb febd 	bl	8000990 <__aeabi_fsub>
 8004c16:	4990      	ldr	r1, [pc, #576]	; (8004e58 <__ieee754_rem_pio2f+0x28c>)
 8004c18:	f7fb feba 	bl	8000990 <__aeabi_fsub>
 8004c1c:	2601      	movs	r6, #1
 8004c1e:	6060      	str	r0, [r4, #4]
 8004c20:	4630      	mov	r0, r6
 8004c22:	b007      	add	sp, #28
 8004c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c28:	498c      	ldr	r1, [pc, #560]	; (8004e5c <__ieee754_rem_pio2f+0x290>)
 8004c2a:	f7fb feb1 	bl	8000990 <__aeabi_fsub>
 8004c2e:	498c      	ldr	r1, [pc, #560]	; (8004e60 <__ieee754_rem_pio2f+0x294>)
 8004c30:	4605      	mov	r5, r0
 8004c32:	f7fb fead 	bl	8000990 <__aeabi_fsub>
 8004c36:	4601      	mov	r1, r0
 8004c38:	6020      	str	r0, [r4, #0]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7fb fea8 	bl	8000990 <__aeabi_fsub>
 8004c40:	4987      	ldr	r1, [pc, #540]	; (8004e60 <__ieee754_rem_pio2f+0x294>)
 8004c42:	e7e9      	b.n	8004c18 <__ieee754_rem_pio2f+0x4c>
 8004c44:	f7fb fea6 	bl	8000994 <__addsf3>
 8004c48:	42b5      	cmp	r5, r6
 8004c4a:	4607      	mov	r7, r0
 8004c4c:	d00e      	beq.n	8004c6c <__ieee754_rem_pio2f+0xa0>
 8004c4e:	4982      	ldr	r1, [pc, #520]	; (8004e58 <__ieee754_rem_pio2f+0x28c>)
 8004c50:	f7fb fea0 	bl	8000994 <__addsf3>
 8004c54:	4601      	mov	r1, r0
 8004c56:	6020      	str	r0, [r4, #0]
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7fb fe99 	bl	8000990 <__aeabi_fsub>
 8004c5e:	497e      	ldr	r1, [pc, #504]	; (8004e58 <__ieee754_rem_pio2f+0x28c>)
 8004c60:	f7fb fe98 	bl	8000994 <__addsf3>
 8004c64:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004c68:	6060      	str	r0, [r4, #4]
 8004c6a:	e7d9      	b.n	8004c20 <__ieee754_rem_pio2f+0x54>
 8004c6c:	497b      	ldr	r1, [pc, #492]	; (8004e5c <__ieee754_rem_pio2f+0x290>)
 8004c6e:	f7fb fe91 	bl	8000994 <__addsf3>
 8004c72:	497b      	ldr	r1, [pc, #492]	; (8004e60 <__ieee754_rem_pio2f+0x294>)
 8004c74:	4605      	mov	r5, r0
 8004c76:	f7fb fe8d 	bl	8000994 <__addsf3>
 8004c7a:	4601      	mov	r1, r0
 8004c7c:	6020      	str	r0, [r4, #0]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f7fb fe86 	bl	8000990 <__aeabi_fsub>
 8004c84:	4976      	ldr	r1, [pc, #472]	; (8004e60 <__ieee754_rem_pio2f+0x294>)
 8004c86:	e7eb      	b.n	8004c60 <__ieee754_rem_pio2f+0x94>
 8004c88:	4a76      	ldr	r2, [pc, #472]	; (8004e64 <__ieee754_rem_pio2f+0x298>)
 8004c8a:	4295      	cmp	r5, r2
 8004c8c:	f300 808c 	bgt.w	8004da8 <__ieee754_rem_pio2f+0x1dc>
 8004c90:	f000 fdf0 	bl	8005874 <fabsf>
 8004c94:	4974      	ldr	r1, [pc, #464]	; (8004e68 <__ieee754_rem_pio2f+0x29c>)
 8004c96:	4680      	mov	r8, r0
 8004c98:	f7fb ff84 	bl	8000ba4 <__aeabi_fmul>
 8004c9c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ca0:	f7fb fe78 	bl	8000994 <__addsf3>
 8004ca4:	f7fc f95a 	bl	8000f5c <__aeabi_f2iz>
 8004ca8:	4606      	mov	r6, r0
 8004caa:	f7fb ff27 	bl	8000afc <__aeabi_i2f>
 8004cae:	4968      	ldr	r1, [pc, #416]	; (8004e50 <__ieee754_rem_pio2f+0x284>)
 8004cb0:	4682      	mov	sl, r0
 8004cb2:	f7fb ff77 	bl	8000ba4 <__aeabi_fmul>
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	4640      	mov	r0, r8
 8004cba:	f7fb fe69 	bl	8000990 <__aeabi_fsub>
 8004cbe:	4966      	ldr	r1, [pc, #408]	; (8004e58 <__ieee754_rem_pio2f+0x28c>)
 8004cc0:	4680      	mov	r8, r0
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	f7fb ff6e 	bl	8000ba4 <__aeabi_fmul>
 8004cc8:	2e1f      	cmp	r6, #31
 8004cca:	4681      	mov	r9, r0
 8004ccc:	dc0c      	bgt.n	8004ce8 <__ieee754_rem_pio2f+0x11c>
 8004cce:	4a67      	ldr	r2, [pc, #412]	; (8004e6c <__ieee754_rem_pio2f+0x2a0>)
 8004cd0:	1e71      	subs	r1, r6, #1
 8004cd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004cd6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <__ieee754_rem_pio2f+0x11c>
 8004cde:	4649      	mov	r1, r9
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f7fb fe55 	bl	8000990 <__aeabi_fsub>
 8004ce6:	e009      	b.n	8004cfc <__ieee754_rem_pio2f+0x130>
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4640      	mov	r0, r8
 8004cec:	f7fb fe50 	bl	8000990 <__aeabi_fsub>
 8004cf0:	15ed      	asrs	r5, r5, #23
 8004cf2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004cf6:	1aeb      	subs	r3, r5, r3
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	dc01      	bgt.n	8004d00 <__ieee754_rem_pio2f+0x134>
 8004cfc:	6020      	str	r0, [r4, #0]
 8004cfe:	e024      	b.n	8004d4a <__ieee754_rem_pio2f+0x17e>
 8004d00:	4956      	ldr	r1, [pc, #344]	; (8004e5c <__ieee754_rem_pio2f+0x290>)
 8004d02:	4650      	mov	r0, sl
 8004d04:	f7fb ff4e 	bl	8000ba4 <__aeabi_fmul>
 8004d08:	4681      	mov	r9, r0
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	f7fb fe3f 	bl	8000990 <__aeabi_fsub>
 8004d12:	4601      	mov	r1, r0
 8004d14:	4683      	mov	fp, r0
 8004d16:	4640      	mov	r0, r8
 8004d18:	f7fb fe3a 	bl	8000990 <__aeabi_fsub>
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fe37 	bl	8000990 <__aeabi_fsub>
 8004d22:	4680      	mov	r8, r0
 8004d24:	494e      	ldr	r1, [pc, #312]	; (8004e60 <__ieee754_rem_pio2f+0x294>)
 8004d26:	4650      	mov	r0, sl
 8004d28:	f7fb ff3c 	bl	8000ba4 <__aeabi_fmul>
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	f7fb fe2f 	bl	8000990 <__aeabi_fsub>
 8004d32:	4601      	mov	r1, r0
 8004d34:	4681      	mov	r9, r0
 8004d36:	4658      	mov	r0, fp
 8004d38:	f7fb fe2a 	bl	8000990 <__aeabi_fsub>
 8004d3c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004d40:	1aed      	subs	r5, r5, r3
 8004d42:	2d19      	cmp	r5, #25
 8004d44:	dc15      	bgt.n	8004d72 <__ieee754_rem_pio2f+0x1a6>
 8004d46:	46d8      	mov	r8, fp
 8004d48:	6020      	str	r0, [r4, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fe1e 	bl	8000990 <__aeabi_fsub>
 8004d54:	4649      	mov	r1, r9
 8004d56:	f7fb fe1b 	bl	8000990 <__aeabi_fsub>
 8004d5a:	2f00      	cmp	r7, #0
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	f6bf af5f 	bge.w	8004c20 <__ieee754_rem_pio2f+0x54>
 8004d62:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004d66:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	6060      	str	r0, [r4, #4]
 8004d6e:	4276      	negs	r6, r6
 8004d70:	e756      	b.n	8004c20 <__ieee754_rem_pio2f+0x54>
 8004d72:	493f      	ldr	r1, [pc, #252]	; (8004e70 <__ieee754_rem_pio2f+0x2a4>)
 8004d74:	4650      	mov	r0, sl
 8004d76:	f7fb ff15 	bl	8000ba4 <__aeabi_fmul>
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4658      	mov	r0, fp
 8004d80:	f7fb fe06 	bl	8000990 <__aeabi_fsub>
 8004d84:	4601      	mov	r1, r0
 8004d86:	4680      	mov	r8, r0
 8004d88:	4658      	mov	r0, fp
 8004d8a:	f7fb fe01 	bl	8000990 <__aeabi_fsub>
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fdfe 	bl	8000990 <__aeabi_fsub>
 8004d94:	4605      	mov	r5, r0
 8004d96:	4937      	ldr	r1, [pc, #220]	; (8004e74 <__ieee754_rem_pio2f+0x2a8>)
 8004d98:	4650      	mov	r0, sl
 8004d9a:	f7fb ff03 	bl	8000ba4 <__aeabi_fmul>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f7fb fdf6 	bl	8000990 <__aeabi_fsub>
 8004da4:	4681      	mov	r9, r0
 8004da6:	e79a      	b.n	8004cde <__ieee754_rem_pio2f+0x112>
 8004da8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004dac:	db05      	blt.n	8004dba <__ieee754_rem_pio2f+0x1ee>
 8004dae:	4601      	mov	r1, r0
 8004db0:	f7fb fdee 	bl	8000990 <__aeabi_fsub>
 8004db4:	6060      	str	r0, [r4, #4]
 8004db6:	6020      	str	r0, [r4, #0]
 8004db8:	e715      	b.n	8004be6 <__ieee754_rem_pio2f+0x1a>
 8004dba:	15ee      	asrs	r6, r5, #23
 8004dbc:	3e86      	subs	r6, #134	; 0x86
 8004dbe:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f7fc f8ca 	bl	8000f5c <__aeabi_f2iz>
 8004dc8:	f7fb fe98 	bl	8000afc <__aeabi_i2f>
 8004dcc:	4601      	mov	r1, r0
 8004dce:	9003      	str	r0, [sp, #12]
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7fb fddd 	bl	8000990 <__aeabi_fsub>
 8004dd6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004dda:	f7fb fee3 	bl	8000ba4 <__aeabi_fmul>
 8004dde:	4680      	mov	r8, r0
 8004de0:	f7fc f8bc 	bl	8000f5c <__aeabi_f2iz>
 8004de4:	f7fb fe8a 	bl	8000afc <__aeabi_i2f>
 8004de8:	4601      	mov	r1, r0
 8004dea:	9004      	str	r0, [sp, #16]
 8004dec:	4605      	mov	r5, r0
 8004dee:	4640      	mov	r0, r8
 8004df0:	f7fb fdce 	bl	8000990 <__aeabi_fsub>
 8004df4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004df8:	f7fb fed4 	bl	8000ba4 <__aeabi_fmul>
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	9005      	str	r0, [sp, #20]
 8004e00:	f7fc f864 	bl	8000ecc <__aeabi_fcmpeq>
 8004e04:	b1e8      	cbz	r0, 8004e42 <__ieee754_rem_pio2f+0x276>
 8004e06:	2100      	movs	r1, #0
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7fc f85f 	bl	8000ecc <__aeabi_fcmpeq>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2302      	moveq	r3, #2
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <__ieee754_rem_pio2f+0x2ac>)
 8004e18:	4621      	mov	r1, r4
 8004e1a:	9201      	str	r2, [sp, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	a803      	add	r0, sp, #12
 8004e20:	9200      	str	r2, [sp, #0]
 8004e22:	4632      	mov	r2, r6
 8004e24:	f000 f8fe 	bl	8005024 <__kernel_rem_pio2f>
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	f6bf aef8 	bge.w	8004c20 <__ieee754_rem_pio2f+0x54>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	6063      	str	r3, [r4, #4]
 8004e40:	e795      	b.n	8004d6e <__ieee754_rem_pio2f+0x1a2>
 8004e42:	2303      	movs	r3, #3
 8004e44:	e7e7      	b.n	8004e16 <__ieee754_rem_pio2f+0x24a>
 8004e46:	bf00      	nop
 8004e48:	3f490fd8 	.word	0x3f490fd8
 8004e4c:	4016cbe3 	.word	0x4016cbe3
 8004e50:	3fc90f80 	.word	0x3fc90f80
 8004e54:	3fc90fd0 	.word	0x3fc90fd0
 8004e58:	37354443 	.word	0x37354443
 8004e5c:	37354400 	.word	0x37354400
 8004e60:	2e85a308 	.word	0x2e85a308
 8004e64:	43490f80 	.word	0x43490f80
 8004e68:	3f22f984 	.word	0x3f22f984
 8004e6c:	0800633c 	.word	0x0800633c
 8004e70:	2e85a300 	.word	0x2e85a300
 8004e74:	248d3132 	.word	0x248d3132
 8004e78:	080063bc 	.word	0x080063bc

08004e7c <__ieee754_sqrtf>:
 8004e7c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004e80:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4603      	mov	r3, r0
 8004e88:	4604      	mov	r4, r0
 8004e8a:	d309      	bcc.n	8004ea0 <__ieee754_sqrtf+0x24>
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	f7fb fe89 	bl	8000ba4 <__aeabi_fmul>
 8004e92:	4601      	mov	r1, r0
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fb fd7d 	bl	8000994 <__addsf3>
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d0fb      	beq.n	8004e9c <__ieee754_sqrtf+0x20>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	da06      	bge.n	8004eb6 <__ieee754_sqrtf+0x3a>
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	f7fb fd71 	bl	8000990 <__aeabi_fsub>
 8004eae:	4601      	mov	r1, r0
 8004eb0:	f7fb ff2c 	bl	8000d0c <__aeabi_fdiv>
 8004eb4:	e7f1      	b.n	8004e9a <__ieee754_sqrtf+0x1e>
 8004eb6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004eba:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8004ebe:	d32e      	bcc.n	8004f1e <__ieee754_sqrtf+0xa2>
 8004ec0:	3c7f      	subs	r4, #127	; 0x7f
 8004ec2:	07e2      	lsls	r2, r4, #31
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	ea4f 0164 	mov.w	r1, r4, asr #1
 8004ecc:	4616      	mov	r6, r2
 8004ece:	f04f 0419 	mov.w	r4, #25
 8004ed2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004ed6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ede:	bf48      	it	mi
 8004ee0:	005b      	lslmi	r3, r3, #1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	1835      	adds	r5, r6, r0
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	bfde      	ittt	le
 8004eea:	182e      	addle	r6, r5, r0
 8004eec:	1b5b      	suble	r3, r3, r5
 8004eee:	1812      	addle	r2, r2, r0
 8004ef0:	3c01      	subs	r4, #1
 8004ef2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ef6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8004efa:	d1f3      	bne.n	8004ee4 <__ieee754_sqrtf+0x68>
 8004efc:	b113      	cbz	r3, 8004f04 <__ieee754_sqrtf+0x88>
 8004efe:	3201      	adds	r2, #1
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	1054      	asrs	r4, r2, #1
 8004f06:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8004f0a:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8004f0e:	e7c5      	b.n	8004e9c <__ieee754_sqrtf+0x20>
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	3201      	adds	r2, #1
 8004f14:	0219      	lsls	r1, r3, #8
 8004f16:	d5fb      	bpl.n	8004f10 <__ieee754_sqrtf+0x94>
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	1aa4      	subs	r4, r4, r2
 8004f1c:	e7d0      	b.n	8004ec0 <__ieee754_sqrtf+0x44>
 8004f1e:	2200      	movs	r2, #0
 8004f20:	e7f8      	b.n	8004f14 <__ieee754_sqrtf+0x98>
	...

08004f24 <__kernel_cosf>:
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004f2c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004f30:	4606      	mov	r6, r0
 8004f32:	4688      	mov	r8, r1
 8004f34:	da03      	bge.n	8004f3e <__kernel_cosf+0x1a>
 8004f36:	f7fc f811 	bl	8000f5c <__aeabi_f2iz>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d05c      	beq.n	8004ff8 <__kernel_cosf+0xd4>
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4630      	mov	r0, r6
 8004f42:	f7fb fe2f 	bl	8000ba4 <__aeabi_fmul>
 8004f46:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	f7fb fe2a 	bl	8000ba4 <__aeabi_fmul>
 8004f50:	492b      	ldr	r1, [pc, #172]	; (8005000 <__kernel_cosf+0xdc>)
 8004f52:	4607      	mov	r7, r0
 8004f54:	4628      	mov	r0, r5
 8004f56:	f7fb fe25 	bl	8000ba4 <__aeabi_fmul>
 8004f5a:	492a      	ldr	r1, [pc, #168]	; (8005004 <__kernel_cosf+0xe0>)
 8004f5c:	f7fb fd1a 	bl	8000994 <__addsf3>
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb fe1f 	bl	8000ba4 <__aeabi_fmul>
 8004f66:	4928      	ldr	r1, [pc, #160]	; (8005008 <__kernel_cosf+0xe4>)
 8004f68:	f7fb fd12 	bl	8000990 <__aeabi_fsub>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb fe19 	bl	8000ba4 <__aeabi_fmul>
 8004f72:	4926      	ldr	r1, [pc, #152]	; (800500c <__kernel_cosf+0xe8>)
 8004f74:	f7fb fd0e 	bl	8000994 <__addsf3>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb fe13 	bl	8000ba4 <__aeabi_fmul>
 8004f7e:	4924      	ldr	r1, [pc, #144]	; (8005010 <__kernel_cosf+0xec>)
 8004f80:	f7fb fd06 	bl	8000990 <__aeabi_fsub>
 8004f84:	4629      	mov	r1, r5
 8004f86:	f7fb fe0d 	bl	8000ba4 <__aeabi_fmul>
 8004f8a:	4922      	ldr	r1, [pc, #136]	; (8005014 <__kernel_cosf+0xf0>)
 8004f8c:	f7fb fd02 	bl	8000994 <__addsf3>
 8004f90:	4629      	mov	r1, r5
 8004f92:	f7fb fe07 	bl	8000ba4 <__aeabi_fmul>
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7fb fe04 	bl	8000ba4 <__aeabi_fmul>
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7fb fdff 	bl	8000ba4 <__aeabi_fmul>
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f7fb fcf1 	bl	8000990 <__aeabi_fsub>
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <__kernel_cosf+0xf4>)
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	dc0a      	bgt.n	8004fcc <__kernel_cosf+0xa8>
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7fb fce9 	bl	8000990 <__aeabi_fsub>
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004fc4:	f7fb fce4 	bl	8000990 <__aeabi_fsub>
 8004fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <__kernel_cosf+0xf8>)
 8004fce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	bfcc      	ite	gt
 8004fd6:	4c12      	ldrgt	r4, [pc, #72]	; (8005020 <__kernel_cosf+0xfc>)
 8004fd8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f7fb fcd7 	bl	8000990 <__aeabi_fsub>
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f7fb fcd2 	bl	8000990 <__aeabi_fsub>
 8004fec:	4629      	mov	r1, r5
 8004fee:	f7fb fccf 	bl	8000990 <__aeabi_fsub>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	e7e5      	b.n	8004fc4 <__kernel_cosf+0xa0>
 8004ff8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004ffc:	e7e4      	b.n	8004fc8 <__kernel_cosf+0xa4>
 8004ffe:	bf00      	nop
 8005000:	ad47d74e 	.word	0xad47d74e
 8005004:	310f74f6 	.word	0x310f74f6
 8005008:	3493f27c 	.word	0x3493f27c
 800500c:	37d00d01 	.word	0x37d00d01
 8005010:	3ab60b61 	.word	0x3ab60b61
 8005014:	3d2aaaab 	.word	0x3d2aaaab
 8005018:	3e999999 	.word	0x3e999999
 800501c:	3f480000 	.word	0x3f480000
 8005020:	3e900000 	.word	0x3e900000

08005024 <__kernel_rem_pio2f>:
 8005024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005028:	b0d9      	sub	sp, #356	; 0x164
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	9101      	str	r1, [sp, #4]
 800502e:	4bc3      	ldr	r3, [pc, #780]	; (800533c <__kernel_rem_pio2f+0x318>)
 8005030:	9962      	ldr	r1, [sp, #392]	; 0x188
 8005032:	1ed4      	subs	r4, r2, #3
 8005034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005038:	2500      	movs	r5, #0
 800503a:	9302      	str	r3, [sp, #8]
 800503c:	9b04      	ldr	r3, [sp, #16]
 800503e:	f04f 0a00 	mov.w	sl, #0
 8005042:	3b01      	subs	r3, #1
 8005044:	9303      	str	r3, [sp, #12]
 8005046:	2308      	movs	r3, #8
 8005048:	fb94 f4f3 	sdiv	r4, r4, r3
 800504c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005050:	1c66      	adds	r6, r4, #1
 8005052:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8005056:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800505a:	eb03 0802 	add.w	r8, r3, r2
 800505e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8005060:	1aa7      	subs	r7, r4, r2
 8005062:	9005      	str	r0, [sp, #20]
 8005064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005068:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800506c:	4545      	cmp	r5, r8
 800506e:	dd7f      	ble.n	8005170 <__kernel_rem_pio2f+0x14c>
 8005070:	f04f 0800 	mov.w	r8, #0
 8005074:	f04f 0a00 	mov.w	sl, #0
 8005078:	f06f 0b03 	mvn.w	fp, #3
 800507c:	9b04      	ldr	r3, [sp, #16]
 800507e:	aa1c      	add	r2, sp, #112	; 0x70
 8005080:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005084:	ab44      	add	r3, sp, #272	; 0x110
 8005086:	9a02      	ldr	r2, [sp, #8]
 8005088:	4590      	cmp	r8, r2
 800508a:	f340 8097 	ble.w	80051bc <__kernel_rem_pio2f+0x198>
 800508e:	4613      	mov	r3, r2
 8005090:	aa08      	add	r2, sp, #32
 8005092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005096:	9307      	str	r3, [sp, #28]
 8005098:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800509a:	9f02      	ldr	r7, [sp, #8]
 800509c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050a0:	9306      	str	r3, [sp, #24]
 80050a2:	46ba      	mov	sl, r7
 80050a4:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80050a8:	ab58      	add	r3, sp, #352	; 0x160
 80050aa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80050ae:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80050b2:	ad07      	add	r5, sp, #28
 80050b4:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80050b8:	f1ba 0f00 	cmp.w	sl, #0
 80050bc:	f300 8081 	bgt.w	80051c2 <__kernel_rem_pio2f+0x19e>
 80050c0:	4631      	mov	r1, r6
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 fc1a 	bl	80058fc <scalbnf>
 80050c8:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80050cc:	4604      	mov	r4, r0
 80050ce:	f7fb fd69 	bl	8000ba4 <__aeabi_fmul>
 80050d2:	f000 fbd3 	bl	800587c <floorf>
 80050d6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80050da:	f7fb fd63 	bl	8000ba4 <__aeabi_fmul>
 80050de:	4601      	mov	r1, r0
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7fb fc55 	bl	8000990 <__aeabi_fsub>
 80050e6:	4604      	mov	r4, r0
 80050e8:	f7fb ff38 	bl	8000f5c <__aeabi_f2iz>
 80050ec:	4681      	mov	r9, r0
 80050ee:	f7fb fd05 	bl	8000afc <__aeabi_i2f>
 80050f2:	4601      	mov	r1, r0
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7fb fc4b 	bl	8000990 <__aeabi_fsub>
 80050fa:	2e00      	cmp	r6, #0
 80050fc:	4604      	mov	r4, r0
 80050fe:	dd7e      	ble.n	80051fe <__kernel_rem_pio2f+0x1da>
 8005100:	1e7b      	subs	r3, r7, #1
 8005102:	aa08      	add	r2, sp, #32
 8005104:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005108:	f1c6 0208 	rsb	r2, r6, #8
 800510c:	fa45 f002 	asr.w	r0, r5, r2
 8005110:	4481      	add	r9, r0
 8005112:	4090      	lsls	r0, r2
 8005114:	1a2d      	subs	r5, r5, r0
 8005116:	aa08      	add	r2, sp, #32
 8005118:	f1c6 0007 	rsb	r0, r6, #7
 800511c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8005120:	4105      	asrs	r5, r0
 8005122:	2d00      	cmp	r5, #0
 8005124:	dd79      	ble.n	800521a <__kernel_rem_pio2f+0x1f6>
 8005126:	2200      	movs	r2, #0
 8005128:	4690      	mov	r8, r2
 800512a:	f109 0901 	add.w	r9, r9, #1
 800512e:	4297      	cmp	r7, r2
 8005130:	f300 80ae 	bgt.w	8005290 <__kernel_rem_pio2f+0x26c>
 8005134:	2e00      	cmp	r6, #0
 8005136:	dd05      	ble.n	8005144 <__kernel_rem_pio2f+0x120>
 8005138:	2e01      	cmp	r6, #1
 800513a:	f000 80c0 	beq.w	80052be <__kernel_rem_pio2f+0x29a>
 800513e:	2e02      	cmp	r6, #2
 8005140:	f000 80c7 	beq.w	80052d2 <__kernel_rem_pio2f+0x2ae>
 8005144:	2d02      	cmp	r5, #2
 8005146:	d168      	bne.n	800521a <__kernel_rem_pio2f+0x1f6>
 8005148:	4621      	mov	r1, r4
 800514a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800514e:	f7fb fc1f 	bl	8000990 <__aeabi_fsub>
 8005152:	4604      	mov	r4, r0
 8005154:	f1b8 0f00 	cmp.w	r8, #0
 8005158:	d05f      	beq.n	800521a <__kernel_rem_pio2f+0x1f6>
 800515a:	4631      	mov	r1, r6
 800515c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005160:	f000 fbcc 	bl	80058fc <scalbnf>
 8005164:	4601      	mov	r1, r0
 8005166:	4620      	mov	r0, r4
 8005168:	f7fb fc12 	bl	8000990 <__aeabi_fsub>
 800516c:	4604      	mov	r4, r0
 800516e:	e054      	b.n	800521a <__kernel_rem_pio2f+0x1f6>
 8005170:	42ef      	cmn	r7, r5
 8005172:	d407      	bmi.n	8005184 <__kernel_rem_pio2f+0x160>
 8005174:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005178:	f7fb fcc0 	bl	8000afc <__aeabi_i2f>
 800517c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8005180:	3501      	adds	r5, #1
 8005182:	e773      	b.n	800506c <__kernel_rem_pio2f+0x48>
 8005184:	4650      	mov	r0, sl
 8005186:	e7f9      	b.n	800517c <__kernel_rem_pio2f+0x158>
 8005188:	fb0b 5207 	mla	r2, fp, r7, r5
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	9b05      	ldr	r3, [sp, #20]
 8005190:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005194:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8005198:	f7fb fd04 	bl	8000ba4 <__aeabi_fmul>
 800519c:	4601      	mov	r1, r0
 800519e:	4648      	mov	r0, r9
 80051a0:	f7fb fbf8 	bl	8000994 <__addsf3>
 80051a4:	4681      	mov	r9, r0
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	3701      	adds	r7, #1
 80051aa:	9a03      	ldr	r2, [sp, #12]
 80051ac:	4297      	cmp	r7, r2
 80051ae:	ddeb      	ble.n	8005188 <__kernel_rem_pio2f+0x164>
 80051b0:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 80051b4:	3504      	adds	r5, #4
 80051b6:	f108 0801 	add.w	r8, r8, #1
 80051ba:	e764      	b.n	8005086 <__kernel_rem_pio2f+0x62>
 80051bc:	46d1      	mov	r9, sl
 80051be:	2700      	movs	r7, #0
 80051c0:	e7f3      	b.n	80051aa <__kernel_rem_pio2f+0x186>
 80051c2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7fb fcec 	bl	8000ba4 <__aeabi_fmul>
 80051cc:	f7fb fec6 	bl	8000f5c <__aeabi_f2iz>
 80051d0:	f7fb fc94 	bl	8000afc <__aeabi_i2f>
 80051d4:	4641      	mov	r1, r8
 80051d6:	4683      	mov	fp, r0
 80051d8:	f7fb fce4 	bl	8000ba4 <__aeabi_fmul>
 80051dc:	4601      	mov	r1, r0
 80051de:	4620      	mov	r0, r4
 80051e0:	f7fb fbd6 	bl	8000990 <__aeabi_fsub>
 80051e4:	f7fb feba 	bl	8000f5c <__aeabi_f2iz>
 80051e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051ec:	f845 0f04 	str.w	r0, [r5, #4]!
 80051f0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80051f4:	4658      	mov	r0, fp
 80051f6:	f7fb fbcd 	bl	8000994 <__addsf3>
 80051fa:	4604      	mov	r4, r0
 80051fc:	e75c      	b.n	80050b8 <__kernel_rem_pio2f+0x94>
 80051fe:	d105      	bne.n	800520c <__kernel_rem_pio2f+0x1e8>
 8005200:	1e7b      	subs	r3, r7, #1
 8005202:	aa08      	add	r2, sp, #32
 8005204:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005208:	122d      	asrs	r5, r5, #8
 800520a:	e78a      	b.n	8005122 <__kernel_rem_pio2f+0xfe>
 800520c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005210:	f7fb fe7a 	bl	8000f08 <__aeabi_fcmpge>
 8005214:	2800      	cmp	r0, #0
 8005216:	d139      	bne.n	800528c <__kernel_rem_pio2f+0x268>
 8005218:	4605      	mov	r5, r0
 800521a:	2100      	movs	r1, #0
 800521c:	4620      	mov	r0, r4
 800521e:	f7fb fe55 	bl	8000ecc <__aeabi_fcmpeq>
 8005222:	2800      	cmp	r0, #0
 8005224:	f000 80a0 	beq.w	8005368 <__kernel_rem_pio2f+0x344>
 8005228:	1e7c      	subs	r4, r7, #1
 800522a:	4623      	mov	r3, r4
 800522c:	2200      	movs	r2, #0
 800522e:	9902      	ldr	r1, [sp, #8]
 8005230:	428b      	cmp	r3, r1
 8005232:	da55      	bge.n	80052e0 <__kernel_rem_pio2f+0x2bc>
 8005234:	2a00      	cmp	r2, #0
 8005236:	d07e      	beq.n	8005336 <__kernel_rem_pio2f+0x312>
 8005238:	ab08      	add	r3, sp, #32
 800523a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800523e:	3e08      	subs	r6, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 808f 	beq.w	8005364 <__kernel_rem_pio2f+0x340>
 8005246:	4631      	mov	r1, r6
 8005248:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800524c:	f000 fb56 	bl	80058fc <scalbnf>
 8005250:	46a0      	mov	r8, r4
 8005252:	4682      	mov	sl, r0
 8005254:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8005258:	af44      	add	r7, sp, #272	; 0x110
 800525a:	f1b8 0f00 	cmp.w	r8, #0
 800525e:	f280 80b5 	bge.w	80053cc <__kernel_rem_pio2f+0x3a8>
 8005262:	f04f 0a00 	mov.w	sl, #0
 8005266:	2300      	movs	r3, #0
 8005268:	00a6      	lsls	r6, r4, #2
 800526a:	4a35      	ldr	r2, [pc, #212]	; (8005340 <__kernel_rem_pio2f+0x31c>)
 800526c:	4437      	add	r7, r6
 800526e:	eba4 010a 	sub.w	r1, r4, sl
 8005272:	2900      	cmp	r1, #0
 8005274:	f280 80db 	bge.w	800542e <__kernel_rem_pio2f+0x40a>
 8005278:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800527a:	2b03      	cmp	r3, #3
 800527c:	f200 80ff 	bhi.w	800547e <__kernel_rem_pio2f+0x45a>
 8005280:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005284:	01200102 	.word	0x01200102
 8005288:	00d90120 	.word	0x00d90120
 800528c:	2502      	movs	r5, #2
 800528e:	e74a      	b.n	8005126 <__kernel_rem_pio2f+0x102>
 8005290:	ab08      	add	r3, sp, #32
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	f1b8 0f00 	cmp.w	r8, #0
 800529a:	d109      	bne.n	80052b0 <__kernel_rem_pio2f+0x28c>
 800529c:	b12b      	cbz	r3, 80052aa <__kernel_rem_pio2f+0x286>
 800529e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80052a2:	a908      	add	r1, sp, #32
 80052a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80052a8:	2301      	movs	r3, #1
 80052aa:	3201      	adds	r2, #1
 80052ac:	4698      	mov	r8, r3
 80052ae:	e73e      	b.n	800512e <__kernel_rem_pio2f+0x10a>
 80052b0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80052b4:	a908      	add	r1, sp, #32
 80052b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80052ba:	4643      	mov	r3, r8
 80052bc:	e7f5      	b.n	80052aa <__kernel_rem_pio2f+0x286>
 80052be:	1e7a      	subs	r2, r7, #1
 80052c0:	ab08      	add	r3, sp, #32
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ca:	a908      	add	r1, sp, #32
 80052cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80052d0:	e738      	b.n	8005144 <__kernel_rem_pio2f+0x120>
 80052d2:	1e7a      	subs	r2, r7, #1
 80052d4:	ab08      	add	r3, sp, #32
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052de:	e7f4      	b.n	80052ca <__kernel_rem_pio2f+0x2a6>
 80052e0:	a908      	add	r1, sp, #32
 80052e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	430a      	orrs	r2, r1
 80052ea:	e7a0      	b.n	800522e <__kernel_rem_pio2f+0x20a>
 80052ec:	3301      	adds	r3, #1
 80052ee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d0fa      	beq.n	80052ec <__kernel_rem_pio2f+0x2c8>
 80052f6:	f06f 0803 	mvn.w	r8, #3
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	1c7d      	adds	r5, r7, #1
 80052fe:	18bc      	adds	r4, r7, r2
 8005300:	aa1c      	add	r2, sp, #112	; 0x70
 8005302:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005306:	441f      	add	r7, r3
 8005308:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800530c:	42af      	cmp	r7, r5
 800530e:	f6ff aec8 	blt.w	80050a2 <__kernel_rem_pio2f+0x7e>
 8005312:	9b06      	ldr	r3, [sp, #24]
 8005314:	f04f 0a00 	mov.w	sl, #0
 8005318:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800531c:	f7fb fbee 	bl	8000afc <__aeabi_i2f>
 8005320:	f04f 0b00 	mov.w	fp, #0
 8005324:	6020      	str	r0, [r4, #0]
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	459a      	cmp	sl, r3
 800532a:	dd0b      	ble.n	8005344 <__kernel_rem_pio2f+0x320>
 800532c:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8005330:	3404      	adds	r4, #4
 8005332:	3501      	adds	r5, #1
 8005334:	e7ea      	b.n	800530c <__kernel_rem_pio2f+0x2e8>
 8005336:	9a07      	ldr	r2, [sp, #28]
 8005338:	2301      	movs	r3, #1
 800533a:	e7d8      	b.n	80052ee <__kernel_rem_pio2f+0x2ca>
 800533c:	08006700 	.word	0x08006700
 8005340:	080066d4 	.word	0x080066d4
 8005344:	fb08 f30a 	mul.w	r3, r8, sl
 8005348:	9a05      	ldr	r2, [sp, #20]
 800534a:	58e0      	ldr	r0, [r4, r3]
 800534c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8005350:	f7fb fc28 	bl	8000ba4 <__aeabi_fmul>
 8005354:	4601      	mov	r1, r0
 8005356:	4658      	mov	r0, fp
 8005358:	f7fb fb1c 	bl	8000994 <__addsf3>
 800535c:	f10a 0a01 	add.w	sl, sl, #1
 8005360:	4683      	mov	fp, r0
 8005362:	e7e0      	b.n	8005326 <__kernel_rem_pio2f+0x302>
 8005364:	3c01      	subs	r4, #1
 8005366:	e767      	b.n	8005238 <__kernel_rem_pio2f+0x214>
 8005368:	4271      	negs	r1, r6
 800536a:	4620      	mov	r0, r4
 800536c:	f000 fac6 	bl	80058fc <scalbnf>
 8005370:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005374:	4604      	mov	r4, r0
 8005376:	f7fb fdc7 	bl	8000f08 <__aeabi_fcmpge>
 800537a:	b1f8      	cbz	r0, 80053bc <__kernel_rem_pio2f+0x398>
 800537c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005380:	4620      	mov	r0, r4
 8005382:	f7fb fc0f 	bl	8000ba4 <__aeabi_fmul>
 8005386:	f7fb fde9 	bl	8000f5c <__aeabi_f2iz>
 800538a:	f7fb fbb7 	bl	8000afc <__aeabi_i2f>
 800538e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005392:	4680      	mov	r8, r0
 8005394:	f7fb fc06 	bl	8000ba4 <__aeabi_fmul>
 8005398:	4601      	mov	r1, r0
 800539a:	4620      	mov	r0, r4
 800539c:	f7fb faf8 	bl	8000990 <__aeabi_fsub>
 80053a0:	f7fb fddc 	bl	8000f5c <__aeabi_f2iz>
 80053a4:	ab08      	add	r3, sp, #32
 80053a6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7fb fdd6 	bl	8000f5c <__aeabi_f2iz>
 80053b0:	1c7c      	adds	r4, r7, #1
 80053b2:	ab08      	add	r3, sp, #32
 80053b4:	3608      	adds	r6, #8
 80053b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80053ba:	e744      	b.n	8005246 <__kernel_rem_pio2f+0x222>
 80053bc:	4620      	mov	r0, r4
 80053be:	f7fb fdcd 	bl	8000f5c <__aeabi_f2iz>
 80053c2:	ab08      	add	r3, sp, #32
 80053c4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80053c8:	463c      	mov	r4, r7
 80053ca:	e73c      	b.n	8005246 <__kernel_rem_pio2f+0x222>
 80053cc:	ab08      	add	r3, sp, #32
 80053ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80053d2:	f7fb fb93 	bl	8000afc <__aeabi_i2f>
 80053d6:	4651      	mov	r1, sl
 80053d8:	f7fb fbe4 	bl	8000ba4 <__aeabi_fmul>
 80053dc:	4631      	mov	r1, r6
 80053de:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 80053e2:	4650      	mov	r0, sl
 80053e4:	f7fb fbde 	bl	8000ba4 <__aeabi_fmul>
 80053e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80053ec:	4682      	mov	sl, r0
 80053ee:	e734      	b.n	800525a <__kernel_rem_pio2f+0x236>
 80053f0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 80053f4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	9203      	str	r2, [sp, #12]
 80053fc:	f7fb fbd2 	bl	8000ba4 <__aeabi_fmul>
 8005400:	4601      	mov	r1, r0
 8005402:	4658      	mov	r0, fp
 8005404:	f7fb fac6 	bl	8000994 <__addsf3>
 8005408:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800540c:	4683      	mov	fp, r0
 800540e:	f108 0801 	add.w	r8, r8, #1
 8005412:	9902      	ldr	r1, [sp, #8]
 8005414:	4588      	cmp	r8, r1
 8005416:	dc01      	bgt.n	800541c <__kernel_rem_pio2f+0x3f8>
 8005418:	45c2      	cmp	sl, r8
 800541a:	dae9      	bge.n	80053f0 <__kernel_rem_pio2f+0x3cc>
 800541c:	a958      	add	r1, sp, #352	; 0x160
 800541e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005422:	f841 bca0 	str.w	fp, [r1, #-160]
 8005426:	f10a 0a01 	add.w	sl, sl, #1
 800542a:	3f04      	subs	r7, #4
 800542c:	e71f      	b.n	800526e <__kernel_rem_pio2f+0x24a>
 800542e:	469b      	mov	fp, r3
 8005430:	f04f 0800 	mov.w	r8, #0
 8005434:	e7ed      	b.n	8005412 <__kernel_rem_pio2f+0x3ee>
 8005436:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800543a:	4456      	add	r6, sl
 800543c:	4637      	mov	r7, r6
 800543e:	46a0      	mov	r8, r4
 8005440:	f1b8 0f00 	cmp.w	r8, #0
 8005444:	dc4a      	bgt.n	80054dc <__kernel_rem_pio2f+0x4b8>
 8005446:	4627      	mov	r7, r4
 8005448:	2f01      	cmp	r7, #1
 800544a:	dc60      	bgt.n	800550e <__kernel_rem_pio2f+0x4ea>
 800544c:	2000      	movs	r0, #0
 800544e:	2c01      	cmp	r4, #1
 8005450:	dc74      	bgt.n	800553c <__kernel_rem_pio2f+0x518>
 8005452:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8005454:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005456:	2d00      	cmp	r5, #0
 8005458:	d176      	bne.n	8005548 <__kernel_rem_pio2f+0x524>
 800545a:	9901      	ldr	r1, [sp, #4]
 800545c:	600a      	str	r2, [r1, #0]
 800545e:	460a      	mov	r2, r1
 8005460:	604b      	str	r3, [r1, #4]
 8005462:	6090      	str	r0, [r2, #8]
 8005464:	e00b      	b.n	800547e <__kernel_rem_pio2f+0x45a>
 8005466:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800546a:	f7fb fa93 	bl	8000994 <__addsf3>
 800546e:	3c01      	subs	r4, #1
 8005470:	2c00      	cmp	r4, #0
 8005472:	daf8      	bge.n	8005466 <__kernel_rem_pio2f+0x442>
 8005474:	b10d      	cbz	r5, 800547a <__kernel_rem_pio2f+0x456>
 8005476:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	6018      	str	r0, [r3, #0]
 800547e:	f009 0007 	and.w	r0, r9, #7
 8005482:	b059      	add	sp, #356	; 0x164
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	2000      	movs	r0, #0
 800548a:	ae30      	add	r6, sp, #192	; 0xc0
 800548c:	e7f0      	b.n	8005470 <__kernel_rem_pio2f+0x44c>
 800548e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005492:	f7fb fa7f 	bl	8000994 <__addsf3>
 8005496:	3e01      	subs	r6, #1
 8005498:	2e00      	cmp	r6, #0
 800549a:	daf8      	bge.n	800548e <__kernel_rem_pio2f+0x46a>
 800549c:	b1b5      	cbz	r5, 80054cc <__kernel_rem_pio2f+0x4a8>
 800549e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80054a2:	9a01      	ldr	r2, [sp, #4]
 80054a4:	af58      	add	r7, sp, #352	; 0x160
 80054a6:	4601      	mov	r1, r0
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80054ae:	f7fb fa6f 	bl	8000990 <__aeabi_fsub>
 80054b2:	2601      	movs	r6, #1
 80054b4:	42b4      	cmp	r4, r6
 80054b6:	da0b      	bge.n	80054d0 <__kernel_rem_pio2f+0x4ac>
 80054b8:	b10d      	cbz	r5, 80054be <__kernel_rem_pio2f+0x49a>
 80054ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	6058      	str	r0, [r3, #4]
 80054c2:	e7dc      	b.n	800547e <__kernel_rem_pio2f+0x45a>
 80054c4:	4626      	mov	r6, r4
 80054c6:	2000      	movs	r0, #0
 80054c8:	af30      	add	r7, sp, #192	; 0xc0
 80054ca:	e7e5      	b.n	8005498 <__kernel_rem_pio2f+0x474>
 80054cc:	4603      	mov	r3, r0
 80054ce:	e7e8      	b.n	80054a2 <__kernel_rem_pio2f+0x47e>
 80054d0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80054d4:	f7fb fa5e 	bl	8000994 <__addsf3>
 80054d8:	3601      	adds	r6, #1
 80054da:	e7eb      	b.n	80054b4 <__kernel_rem_pio2f+0x490>
 80054dc:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 80054e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	9303      	str	r3, [sp, #12]
 80054ec:	9202      	str	r2, [sp, #8]
 80054ee:	f7fb fa51 	bl	8000994 <__addsf3>
 80054f2:	9a02      	ldr	r2, [sp, #8]
 80054f4:	4601      	mov	r1, r0
 80054f6:	4683      	mov	fp, r0
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fb fa49 	bl	8000990 <__aeabi_fsub>
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	4619      	mov	r1, r3
 8005502:	f7fb fa47 	bl	8000994 <__addsf3>
 8005506:	f8c7 b000 	str.w	fp, [r7]
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	e798      	b.n	8005440 <__kernel_rem_pio2f+0x41c>
 800550e:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8005512:	3f01      	subs	r7, #1
 8005514:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8005518:	4618      	mov	r0, r3
 800551a:	4659      	mov	r1, fp
 800551c:	9302      	str	r3, [sp, #8]
 800551e:	f7fb fa39 	bl	8000994 <__addsf3>
 8005522:	9b02      	ldr	r3, [sp, #8]
 8005524:	4601      	mov	r1, r0
 8005526:	4680      	mov	r8, r0
 8005528:	4618      	mov	r0, r3
 800552a:	f7fb fa31 	bl	8000990 <__aeabi_fsub>
 800552e:	4659      	mov	r1, fp
 8005530:	f7fb fa30 	bl	8000994 <__addsf3>
 8005534:	f8c6 8000 	str.w	r8, [r6]
 8005538:	6070      	str	r0, [r6, #4]
 800553a:	e785      	b.n	8005448 <__kernel_rem_pio2f+0x424>
 800553c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8005540:	f7fb fa28 	bl	8000994 <__addsf3>
 8005544:	3c01      	subs	r4, #1
 8005546:	e782      	b.n	800544e <__kernel_rem_pio2f+0x42a>
 8005548:	9901      	ldr	r1, [sp, #4]
 800554a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800554e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005552:	600a      	str	r2, [r1, #0]
 8005554:	604b      	str	r3, [r1, #4]
 8005556:	460a      	mov	r2, r1
 8005558:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800555c:	e781      	b.n	8005462 <__kernel_rem_pio2f+0x43e>
 800555e:	bf00      	nop

08005560 <__kernel_sinf>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005568:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800556c:	4604      	mov	r4, r0
 800556e:	460f      	mov	r7, r1
 8005570:	4691      	mov	r9, r2
 8005572:	da03      	bge.n	800557c <__kernel_sinf+0x1c>
 8005574:	f7fb fcf2 	bl	8000f5c <__aeabi_f2iz>
 8005578:	2800      	cmp	r0, #0
 800557a:	d035      	beq.n	80055e8 <__kernel_sinf+0x88>
 800557c:	4621      	mov	r1, r4
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb fb10 	bl	8000ba4 <__aeabi_fmul>
 8005584:	4605      	mov	r5, r0
 8005586:	4601      	mov	r1, r0
 8005588:	4620      	mov	r0, r4
 800558a:	f7fb fb0b 	bl	8000ba4 <__aeabi_fmul>
 800558e:	4929      	ldr	r1, [pc, #164]	; (8005634 <__kernel_sinf+0xd4>)
 8005590:	4606      	mov	r6, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f7fb fb06 	bl	8000ba4 <__aeabi_fmul>
 8005598:	4927      	ldr	r1, [pc, #156]	; (8005638 <__kernel_sinf+0xd8>)
 800559a:	f7fb f9f9 	bl	8000990 <__aeabi_fsub>
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fb fb00 	bl	8000ba4 <__aeabi_fmul>
 80055a4:	4925      	ldr	r1, [pc, #148]	; (800563c <__kernel_sinf+0xdc>)
 80055a6:	f7fb f9f5 	bl	8000994 <__addsf3>
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fb fafa 	bl	8000ba4 <__aeabi_fmul>
 80055b0:	4923      	ldr	r1, [pc, #140]	; (8005640 <__kernel_sinf+0xe0>)
 80055b2:	f7fb f9ed 	bl	8000990 <__aeabi_fsub>
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb faf4 	bl	8000ba4 <__aeabi_fmul>
 80055bc:	4921      	ldr	r1, [pc, #132]	; (8005644 <__kernel_sinf+0xe4>)
 80055be:	f7fb f9e9 	bl	8000994 <__addsf3>
 80055c2:	4680      	mov	r8, r0
 80055c4:	f1b9 0f00 	cmp.w	r9, #0
 80055c8:	d111      	bne.n	80055ee <__kernel_sinf+0x8e>
 80055ca:	4601      	mov	r1, r0
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7fb fae9 	bl	8000ba4 <__aeabi_fmul>
 80055d2:	491d      	ldr	r1, [pc, #116]	; (8005648 <__kernel_sinf+0xe8>)
 80055d4:	f7fb f9dc 	bl	8000990 <__aeabi_fsub>
 80055d8:	4631      	mov	r1, r6
 80055da:	f7fb fae3 	bl	8000ba4 <__aeabi_fmul>
 80055de:	4601      	mov	r1, r0
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7fb f9d7 	bl	8000994 <__addsf3>
 80055e6:	4604      	mov	r4, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80055f2:	4638      	mov	r0, r7
 80055f4:	f7fb fad6 	bl	8000ba4 <__aeabi_fmul>
 80055f8:	4641      	mov	r1, r8
 80055fa:	4681      	mov	r9, r0
 80055fc:	4630      	mov	r0, r6
 80055fe:	f7fb fad1 	bl	8000ba4 <__aeabi_fmul>
 8005602:	4601      	mov	r1, r0
 8005604:	4648      	mov	r0, r9
 8005606:	f7fb f9c3 	bl	8000990 <__aeabi_fsub>
 800560a:	4629      	mov	r1, r5
 800560c:	f7fb faca 	bl	8000ba4 <__aeabi_fmul>
 8005610:	4639      	mov	r1, r7
 8005612:	f7fb f9bd 	bl	8000990 <__aeabi_fsub>
 8005616:	490c      	ldr	r1, [pc, #48]	; (8005648 <__kernel_sinf+0xe8>)
 8005618:	4605      	mov	r5, r0
 800561a:	4630      	mov	r0, r6
 800561c:	f7fb fac2 	bl	8000ba4 <__aeabi_fmul>
 8005620:	4601      	mov	r1, r0
 8005622:	4628      	mov	r0, r5
 8005624:	f7fb f9b6 	bl	8000994 <__addsf3>
 8005628:	4601      	mov	r1, r0
 800562a:	4620      	mov	r0, r4
 800562c:	f7fb f9b0 	bl	8000990 <__aeabi_fsub>
 8005630:	e7d9      	b.n	80055e6 <__kernel_sinf+0x86>
 8005632:	bf00      	nop
 8005634:	2f2ec9d3 	.word	0x2f2ec9d3
 8005638:	32d72f34 	.word	0x32d72f34
 800563c:	3638ef1b 	.word	0x3638ef1b
 8005640:	39500d01 	.word	0x39500d01
 8005644:	3c088889 	.word	0x3c088889
 8005648:	3e2aaaab 	.word	0x3e2aaaab

0800564c <matherr>:
 800564c:	2000      	movs	r0, #0
 800564e:	4770      	bx	lr

08005650 <nan>:
 8005650:	2000      	movs	r0, #0
 8005652:	4901      	ldr	r1, [pc, #4]	; (8005658 <nan+0x8>)
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	7ff80000 	.word	0x7ff80000

0800565c <atanf>:
 800565c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005660:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005664:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005668:	4604      	mov	r4, r0
 800566a:	4607      	mov	r7, r0
 800566c:	db0e      	blt.n	800568c <atanf+0x30>
 800566e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005672:	dd04      	ble.n	800567e <atanf+0x22>
 8005674:	4601      	mov	r1, r0
 8005676:	f7fb f98d 	bl	8000994 <__addsf3>
 800567a:	4604      	mov	r4, r0
 800567c:	e003      	b.n	8005686 <atanf+0x2a>
 800567e:	2800      	cmp	r0, #0
 8005680:	f340 80cd 	ble.w	800581e <atanf+0x1c2>
 8005684:	4c67      	ldr	r4, [pc, #412]	; (8005824 <atanf+0x1c8>)
 8005686:	4620      	mov	r0, r4
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800568c:	4b66      	ldr	r3, [pc, #408]	; (8005828 <atanf+0x1cc>)
 800568e:	429d      	cmp	r5, r3
 8005690:	dc0e      	bgt.n	80056b0 <atanf+0x54>
 8005692:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005696:	da08      	bge.n	80056aa <atanf+0x4e>
 8005698:	4964      	ldr	r1, [pc, #400]	; (800582c <atanf+0x1d0>)
 800569a:	f7fb f97b 	bl	8000994 <__addsf3>
 800569e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80056a2:	f7fb fc3b 	bl	8000f1c <__aeabi_fcmpgt>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d1ed      	bne.n	8005686 <atanf+0x2a>
 80056aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80056ae:	e01c      	b.n	80056ea <atanf+0x8e>
 80056b0:	f000 f8e0 	bl	8005874 <fabsf>
 80056b4:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <atanf+0x1d4>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	429d      	cmp	r5, r3
 80056ba:	dc7c      	bgt.n	80057b6 <atanf+0x15a>
 80056bc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80056c0:	429d      	cmp	r5, r3
 80056c2:	dc67      	bgt.n	8005794 <atanf+0x138>
 80056c4:	4601      	mov	r1, r0
 80056c6:	f7fb f965 	bl	8000994 <__addsf3>
 80056ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80056ce:	f7fb f95f 	bl	8000990 <__aeabi_fsub>
 80056d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056d6:	4605      	mov	r5, r0
 80056d8:	4620      	mov	r0, r4
 80056da:	f7fb f95b 	bl	8000994 <__addsf3>
 80056de:	4601      	mov	r1, r0
 80056e0:	4628      	mov	r0, r5
 80056e2:	f7fb fb13 	bl	8000d0c <__aeabi_fdiv>
 80056e6:	2600      	movs	r6, #0
 80056e8:	4604      	mov	r4, r0
 80056ea:	4621      	mov	r1, r4
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fb fa59 	bl	8000ba4 <__aeabi_fmul>
 80056f2:	4601      	mov	r1, r0
 80056f4:	4680      	mov	r8, r0
 80056f6:	f7fb fa55 	bl	8000ba4 <__aeabi_fmul>
 80056fa:	4605      	mov	r5, r0
 80056fc:	494d      	ldr	r1, [pc, #308]	; (8005834 <atanf+0x1d8>)
 80056fe:	f7fb fa51 	bl	8000ba4 <__aeabi_fmul>
 8005702:	494d      	ldr	r1, [pc, #308]	; (8005838 <atanf+0x1dc>)
 8005704:	f7fb f946 	bl	8000994 <__addsf3>
 8005708:	4629      	mov	r1, r5
 800570a:	f7fb fa4b 	bl	8000ba4 <__aeabi_fmul>
 800570e:	494b      	ldr	r1, [pc, #300]	; (800583c <atanf+0x1e0>)
 8005710:	f7fb f940 	bl	8000994 <__addsf3>
 8005714:	4629      	mov	r1, r5
 8005716:	f7fb fa45 	bl	8000ba4 <__aeabi_fmul>
 800571a:	4949      	ldr	r1, [pc, #292]	; (8005840 <atanf+0x1e4>)
 800571c:	f7fb f93a 	bl	8000994 <__addsf3>
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb fa3f 	bl	8000ba4 <__aeabi_fmul>
 8005726:	4947      	ldr	r1, [pc, #284]	; (8005844 <atanf+0x1e8>)
 8005728:	f7fb f934 	bl	8000994 <__addsf3>
 800572c:	4629      	mov	r1, r5
 800572e:	f7fb fa39 	bl	8000ba4 <__aeabi_fmul>
 8005732:	4945      	ldr	r1, [pc, #276]	; (8005848 <atanf+0x1ec>)
 8005734:	f7fb f92e 	bl	8000994 <__addsf3>
 8005738:	4641      	mov	r1, r8
 800573a:	f7fb fa33 	bl	8000ba4 <__aeabi_fmul>
 800573e:	4943      	ldr	r1, [pc, #268]	; (800584c <atanf+0x1f0>)
 8005740:	4680      	mov	r8, r0
 8005742:	4628      	mov	r0, r5
 8005744:	f7fb fa2e 	bl	8000ba4 <__aeabi_fmul>
 8005748:	4941      	ldr	r1, [pc, #260]	; (8005850 <atanf+0x1f4>)
 800574a:	f7fb f921 	bl	8000990 <__aeabi_fsub>
 800574e:	4629      	mov	r1, r5
 8005750:	f7fb fa28 	bl	8000ba4 <__aeabi_fmul>
 8005754:	493f      	ldr	r1, [pc, #252]	; (8005854 <atanf+0x1f8>)
 8005756:	f7fb f91b 	bl	8000990 <__aeabi_fsub>
 800575a:	4629      	mov	r1, r5
 800575c:	f7fb fa22 	bl	8000ba4 <__aeabi_fmul>
 8005760:	493d      	ldr	r1, [pc, #244]	; (8005858 <atanf+0x1fc>)
 8005762:	f7fb f915 	bl	8000990 <__aeabi_fsub>
 8005766:	4629      	mov	r1, r5
 8005768:	f7fb fa1c 	bl	8000ba4 <__aeabi_fmul>
 800576c:	493b      	ldr	r1, [pc, #236]	; (800585c <atanf+0x200>)
 800576e:	f7fb f90f 	bl	8000990 <__aeabi_fsub>
 8005772:	4629      	mov	r1, r5
 8005774:	f7fb fa16 	bl	8000ba4 <__aeabi_fmul>
 8005778:	4601      	mov	r1, r0
 800577a:	4640      	mov	r0, r8
 800577c:	f7fb f90a 	bl	8000994 <__addsf3>
 8005780:	4621      	mov	r1, r4
 8005782:	f7fb fa0f 	bl	8000ba4 <__aeabi_fmul>
 8005786:	1c73      	adds	r3, r6, #1
 8005788:	4601      	mov	r1, r0
 800578a:	d133      	bne.n	80057f4 <atanf+0x198>
 800578c:	4620      	mov	r0, r4
 800578e:	f7fb f8ff 	bl	8000990 <__aeabi_fsub>
 8005792:	e772      	b.n	800567a <atanf+0x1e>
 8005794:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005798:	f7fb f8fa 	bl	8000990 <__aeabi_fsub>
 800579c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80057a0:	4605      	mov	r5, r0
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7fb f8f6 	bl	8000994 <__addsf3>
 80057a8:	4601      	mov	r1, r0
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7fb faae 	bl	8000d0c <__aeabi_fdiv>
 80057b0:	2601      	movs	r6, #1
 80057b2:	4604      	mov	r4, r0
 80057b4:	e799      	b.n	80056ea <atanf+0x8e>
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <atanf+0x204>)
 80057b8:	429d      	cmp	r5, r3
 80057ba:	dc14      	bgt.n	80057e6 <atanf+0x18a>
 80057bc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80057c0:	f7fb f8e6 	bl	8000990 <__aeabi_fsub>
 80057c4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80057c8:	4605      	mov	r5, r0
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7fb f9ea 	bl	8000ba4 <__aeabi_fmul>
 80057d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80057d4:	f7fb f8de 	bl	8000994 <__addsf3>
 80057d8:	4601      	mov	r1, r0
 80057da:	4628      	mov	r0, r5
 80057dc:	f7fb fa96 	bl	8000d0c <__aeabi_fdiv>
 80057e0:	2602      	movs	r6, #2
 80057e2:	4604      	mov	r4, r0
 80057e4:	e781      	b.n	80056ea <atanf+0x8e>
 80057e6:	4601      	mov	r1, r0
 80057e8:	481e      	ldr	r0, [pc, #120]	; (8005864 <atanf+0x208>)
 80057ea:	f7fb fa8f 	bl	8000d0c <__aeabi_fdiv>
 80057ee:	2603      	movs	r6, #3
 80057f0:	4604      	mov	r4, r0
 80057f2:	e77a      	b.n	80056ea <atanf+0x8e>
 80057f4:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <atanf+0x20c>)
 80057f6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80057fa:	f7fb f8c9 	bl	8000990 <__aeabi_fsub>
 80057fe:	4621      	mov	r1, r4
 8005800:	f7fb f8c6 	bl	8000990 <__aeabi_fsub>
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <atanf+0x210>)
 8005806:	4601      	mov	r1, r0
 8005808:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800580c:	f7fb f8c0 	bl	8000990 <__aeabi_fsub>
 8005810:	2f00      	cmp	r7, #0
 8005812:	4604      	mov	r4, r0
 8005814:	f6bf af37 	bge.w	8005686 <atanf+0x2a>
 8005818:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800581c:	e733      	b.n	8005686 <atanf+0x2a>
 800581e:	4c14      	ldr	r4, [pc, #80]	; (8005870 <atanf+0x214>)
 8005820:	e731      	b.n	8005686 <atanf+0x2a>
 8005822:	bf00      	nop
 8005824:	3fc90fdb 	.word	0x3fc90fdb
 8005828:	3edfffff 	.word	0x3edfffff
 800582c:	7149f2ca 	.word	0x7149f2ca
 8005830:	3f97ffff 	.word	0x3f97ffff
 8005834:	3c8569d7 	.word	0x3c8569d7
 8005838:	3d4bda59 	.word	0x3d4bda59
 800583c:	3d886b35 	.word	0x3d886b35
 8005840:	3dba2e6e 	.word	0x3dba2e6e
 8005844:	3e124925 	.word	0x3e124925
 8005848:	3eaaaaab 	.word	0x3eaaaaab
 800584c:	bd15a221 	.word	0xbd15a221
 8005850:	3d6ef16b 	.word	0x3d6ef16b
 8005854:	3d9d8795 	.word	0x3d9d8795
 8005858:	3de38e38 	.word	0x3de38e38
 800585c:	3e4ccccd 	.word	0x3e4ccccd
 8005860:	401bffff 	.word	0x401bffff
 8005864:	bf800000 	.word	0xbf800000
 8005868:	0800671c 	.word	0x0800671c
 800586c:	0800670c 	.word	0x0800670c
 8005870:	bfc90fdb 	.word	0xbfc90fdb

08005874 <fabsf>:
 8005874:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005878:	4770      	bx	lr
	...

0800587c <floorf>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005882:	0df5      	lsrs	r5, r6, #23
 8005884:	3d7f      	subs	r5, #127	; 0x7f
 8005886:	2d16      	cmp	r5, #22
 8005888:	4601      	mov	r1, r0
 800588a:	4604      	mov	r4, r0
 800588c:	dc26      	bgt.n	80058dc <floorf+0x60>
 800588e:	2d00      	cmp	r5, #0
 8005890:	da0e      	bge.n	80058b0 <floorf+0x34>
 8005892:	4917      	ldr	r1, [pc, #92]	; (80058f0 <floorf+0x74>)
 8005894:	f7fb f87e 	bl	8000994 <__addsf3>
 8005898:	2100      	movs	r1, #0
 800589a:	f7fb fb3f 	bl	8000f1c <__aeabi_fcmpgt>
 800589e:	b128      	cbz	r0, 80058ac <floorf+0x30>
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	da23      	bge.n	80058ec <floorf+0x70>
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <floorf+0x78>)
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	bf18      	it	ne
 80058aa:	461c      	movne	r4, r3
 80058ac:	4621      	mov	r1, r4
 80058ae:	e01b      	b.n	80058e8 <floorf+0x6c>
 80058b0:	4e11      	ldr	r6, [pc, #68]	; (80058f8 <floorf+0x7c>)
 80058b2:	412e      	asrs	r6, r5
 80058b4:	4230      	tst	r0, r6
 80058b6:	d017      	beq.n	80058e8 <floorf+0x6c>
 80058b8:	490d      	ldr	r1, [pc, #52]	; (80058f0 <floorf+0x74>)
 80058ba:	f7fb f86b 	bl	8000994 <__addsf3>
 80058be:	2100      	movs	r1, #0
 80058c0:	f7fb fb2c 	bl	8000f1c <__aeabi_fcmpgt>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0f1      	beq.n	80058ac <floorf+0x30>
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	bfbe      	ittt	lt
 80058cc:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80058d0:	fa43 f505 	asrlt.w	r5, r3, r5
 80058d4:	1964      	addlt	r4, r4, r5
 80058d6:	ea24 0406 	bic.w	r4, r4, r6
 80058da:	e7e7      	b.n	80058ac <floorf+0x30>
 80058dc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80058e0:	d302      	bcc.n	80058e8 <floorf+0x6c>
 80058e2:	f7fb f857 	bl	8000994 <__addsf3>
 80058e6:	4601      	mov	r1, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	2400      	movs	r4, #0
 80058ee:	e7dd      	b.n	80058ac <floorf+0x30>
 80058f0:	7149f2ca 	.word	0x7149f2ca
 80058f4:	bf800000 	.word	0xbf800000
 80058f8:	007fffff 	.word	0x007fffff

080058fc <scalbnf>:
 80058fc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8005900:	b510      	push	{r4, lr}
 8005902:	4602      	mov	r2, r0
 8005904:	460c      	mov	r4, r1
 8005906:	4601      	mov	r1, r0
 8005908:	d027      	beq.n	800595a <scalbnf+0x5e>
 800590a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800590e:	d303      	bcc.n	8005918 <scalbnf+0x1c>
 8005910:	f7fb f840 	bl	8000994 <__addsf3>
 8005914:	4602      	mov	r2, r0
 8005916:	e020      	b.n	800595a <scalbnf+0x5e>
 8005918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800591c:	d215      	bcs.n	800594a <scalbnf+0x4e>
 800591e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8005922:	f7fb f93f 	bl	8000ba4 <__aeabi_fmul>
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <scalbnf+0x8c>)
 8005928:	4602      	mov	r2, r0
 800592a:	429c      	cmp	r4, r3
 800592c:	db22      	blt.n	8005974 <scalbnf+0x78>
 800592e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005932:	3b19      	subs	r3, #25
 8005934:	4423      	add	r3, r4
 8005936:	2bfe      	cmp	r3, #254	; 0xfe
 8005938:	dd09      	ble.n	800594e <scalbnf+0x52>
 800593a:	4611      	mov	r1, r2
 800593c:	4813      	ldr	r0, [pc, #76]	; (800598c <scalbnf+0x90>)
 800593e:	f000 f829 	bl	8005994 <copysignf>
 8005942:	4912      	ldr	r1, [pc, #72]	; (800598c <scalbnf+0x90>)
 8005944:	f7fb f92e 	bl	8000ba4 <__aeabi_fmul>
 8005948:	e7e4      	b.n	8005914 <scalbnf+0x18>
 800594a:	0ddb      	lsrs	r3, r3, #23
 800594c:	e7f2      	b.n	8005934 <scalbnf+0x38>
 800594e:	2b00      	cmp	r3, #0
 8005950:	dd05      	ble.n	800595e <scalbnf+0x62>
 8005952:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8005956:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800595a:	4610      	mov	r0, r2
 800595c:	bd10      	pop	{r4, pc}
 800595e:	f113 0f16 	cmn.w	r3, #22
 8005962:	da09      	bge.n	8005978 <scalbnf+0x7c>
 8005964:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005968:	429c      	cmp	r4, r3
 800596a:	4611      	mov	r1, r2
 800596c:	dce6      	bgt.n	800593c <scalbnf+0x40>
 800596e:	4808      	ldr	r0, [pc, #32]	; (8005990 <scalbnf+0x94>)
 8005970:	f000 f810 	bl	8005994 <copysignf>
 8005974:	4906      	ldr	r1, [pc, #24]	; (8005990 <scalbnf+0x94>)
 8005976:	e7e5      	b.n	8005944 <scalbnf+0x48>
 8005978:	3319      	adds	r3, #25
 800597a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800597e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8005982:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8005986:	e7dd      	b.n	8005944 <scalbnf+0x48>
 8005988:	ffff3cb0 	.word	0xffff3cb0
 800598c:	7149f2ca 	.word	0x7149f2ca
 8005990:	0da24260 	.word	0x0da24260

08005994 <copysignf>:
 8005994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005998:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800599c:	4308      	orrs	r0, r1
 800599e:	4770      	bx	lr

080059a0 <abort>:
 80059a0:	b508      	push	{r3, lr}
 80059a2:	2006      	movs	r0, #6
 80059a4:	f000 fac2 	bl	8005f2c <raise>
 80059a8:	2001      	movs	r0, #1
 80059aa:	f000 fc93 	bl	80062d4 <_exit>
	...

080059b0 <__errno>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <__errno+0x8>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000010 	.word	0x20000010

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	2500      	movs	r5, #0
 80059c0:	4e0c      	ldr	r6, [pc, #48]	; (80059f4 <__libc_init_array+0x38>)
 80059c2:	4c0d      	ldr	r4, [pc, #52]	; (80059f8 <__libc_init_array+0x3c>)
 80059c4:	1ba4      	subs	r4, r4, r6
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	42a5      	cmp	r5, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	f000 fc84 	bl	80062d8 <_init>
 80059d0:	2500      	movs	r5, #0
 80059d2:	4e0a      	ldr	r6, [pc, #40]	; (80059fc <__libc_init_array+0x40>)
 80059d4:	4c0a      	ldr	r4, [pc, #40]	; (8005a00 <__libc_init_array+0x44>)
 80059d6:	1ba4      	subs	r4, r4, r6
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	42a5      	cmp	r5, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059e4:	4798      	blx	r3
 80059e6:	3501      	adds	r5, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ee:	4798      	blx	r3
 80059f0:	3501      	adds	r5, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	08006730 	.word	0x08006730
 80059f8:	08006730 	.word	0x08006730
 80059fc:	08006730 	.word	0x08006730
 8005a00:	08006740 	.word	0x08006740

08005a04 <malloc>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <malloc+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 b80b 	b.w	8005a24 <_malloc_r>
 8005a0e:	bf00      	nop
 8005a10:	20000010 	.word	0x20000010

08005a14 <free>:
 8005a14:	4b02      	ldr	r3, [pc, #8]	; (8005a20 <free+0xc>)
 8005a16:	4601      	mov	r1, r0
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	f000 bb29 	b.w	8006070 <_free_r>
 8005a1e:	bf00      	nop
 8005a20:	20000010 	.word	0x20000010

08005a24 <_malloc_r>:
 8005a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	f101 050b 	add.w	r5, r1, #11
 8005a2c:	2d16      	cmp	r5, #22
 8005a2e:	4606      	mov	r6, r0
 8005a30:	d906      	bls.n	8005a40 <_malloc_r+0x1c>
 8005a32:	f035 0507 	bics.w	r5, r5, #7
 8005a36:	d504      	bpl.n	8005a42 <_malloc_r+0x1e>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	6033      	str	r3, [r6, #0]
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	e1a8      	b.n	8005d92 <_malloc_r+0x36e>
 8005a40:	2510      	movs	r5, #16
 8005a42:	428d      	cmp	r5, r1
 8005a44:	d3f8      	bcc.n	8005a38 <_malloc_r+0x14>
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 fa2a 	bl	8005ea0 <__malloc_lock>
 8005a4c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005a50:	4fc0      	ldr	r7, [pc, #768]	; (8005d54 <_malloc_r+0x330>)
 8005a52:	d238      	bcs.n	8005ac6 <_malloc_r+0xa2>
 8005a54:	f105 0208 	add.w	r2, r5, #8
 8005a58:	443a      	add	r2, r7
 8005a5a:	6854      	ldr	r4, [r2, #4]
 8005a5c:	f1a2 0108 	sub.w	r1, r2, #8
 8005a60:	428c      	cmp	r4, r1
 8005a62:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8005a66:	d102      	bne.n	8005a6e <_malloc_r+0x4a>
 8005a68:	68d4      	ldr	r4, [r2, #12]
 8005a6a:	42a2      	cmp	r2, r4
 8005a6c:	d010      	beq.n	8005a90 <_malloc_r+0x6c>
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005a74:	f023 0303 	bic.w	r3, r3, #3
 8005a78:	60ca      	str	r2, [r1, #12]
 8005a7a:	4423      	add	r3, r4
 8005a7c:	6091      	str	r1, [r2, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	4630      	mov	r0, r6
 8005a88:	f000 fa10 	bl	8005eac <__malloc_unlock>
 8005a8c:	3408      	adds	r4, #8
 8005a8e:	e180      	b.n	8005d92 <_malloc_r+0x36e>
 8005a90:	3302      	adds	r3, #2
 8005a92:	4ab1      	ldr	r2, [pc, #708]	; (8005d58 <_malloc_r+0x334>)
 8005a94:	693c      	ldr	r4, [r7, #16]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4294      	cmp	r4, r2
 8005a9a:	d075      	beq.n	8005b88 <_malloc_r+0x164>
 8005a9c:	6860      	ldr	r0, [r4, #4]
 8005a9e:	f020 0c03 	bic.w	ip, r0, #3
 8005aa2:	ebac 0005 	sub.w	r0, ip, r5
 8005aa6:	280f      	cmp	r0, #15
 8005aa8:	dd48      	ble.n	8005b3c <_malloc_r+0x118>
 8005aaa:	1963      	adds	r3, r4, r5
 8005aac:	f045 0501 	orr.w	r5, r5, #1
 8005ab0:	6065      	str	r5, [r4, #4]
 8005ab2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8005ab6:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8005aba:	f040 0201 	orr.w	r2, r0, #1
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	f844 000c 	str.w	r0, [r4, ip]
 8005ac4:	e7df      	b.n	8005a86 <_malloc_r+0x62>
 8005ac6:	0a6b      	lsrs	r3, r5, #9
 8005ac8:	d02a      	beq.n	8005b20 <_malloc_r+0xfc>
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d812      	bhi.n	8005af4 <_malloc_r+0xd0>
 8005ace:	09ab      	lsrs	r3, r5, #6
 8005ad0:	3338      	adds	r3, #56	; 0x38
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005ad8:	6854      	ldr	r4, [r2, #4]
 8005ada:	f1a2 0c08 	sub.w	ip, r2, #8
 8005ade:	4564      	cmp	r4, ip
 8005ae0:	d006      	beq.n	8005af0 <_malloc_r+0xcc>
 8005ae2:	6862      	ldr	r2, [r4, #4]
 8005ae4:	f022 0203 	bic.w	r2, r2, #3
 8005ae8:	1b50      	subs	r0, r2, r5
 8005aea:	280f      	cmp	r0, #15
 8005aec:	dd1c      	ble.n	8005b28 <_malloc_r+0x104>
 8005aee:	3b01      	subs	r3, #1
 8005af0:	3301      	adds	r3, #1
 8005af2:	e7ce      	b.n	8005a92 <_malloc_r+0x6e>
 8005af4:	2b14      	cmp	r3, #20
 8005af6:	d801      	bhi.n	8005afc <_malloc_r+0xd8>
 8005af8:	335b      	adds	r3, #91	; 0x5b
 8005afa:	e7ea      	b.n	8005ad2 <_malloc_r+0xae>
 8005afc:	2b54      	cmp	r3, #84	; 0x54
 8005afe:	d802      	bhi.n	8005b06 <_malloc_r+0xe2>
 8005b00:	0b2b      	lsrs	r3, r5, #12
 8005b02:	336e      	adds	r3, #110	; 0x6e
 8005b04:	e7e5      	b.n	8005ad2 <_malloc_r+0xae>
 8005b06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005b0a:	d802      	bhi.n	8005b12 <_malloc_r+0xee>
 8005b0c:	0beb      	lsrs	r3, r5, #15
 8005b0e:	3377      	adds	r3, #119	; 0x77
 8005b10:	e7df      	b.n	8005ad2 <_malloc_r+0xae>
 8005b12:	f240 5254 	movw	r2, #1364	; 0x554
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d804      	bhi.n	8005b24 <_malloc_r+0x100>
 8005b1a:	0cab      	lsrs	r3, r5, #18
 8005b1c:	337c      	adds	r3, #124	; 0x7c
 8005b1e:	e7d8      	b.n	8005ad2 <_malloc_r+0xae>
 8005b20:	233f      	movs	r3, #63	; 0x3f
 8005b22:	e7d6      	b.n	8005ad2 <_malloc_r+0xae>
 8005b24:	237e      	movs	r3, #126	; 0x7e
 8005b26:	e7d4      	b.n	8005ad2 <_malloc_r+0xae>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	68e1      	ldr	r1, [r4, #12]
 8005b2c:	db04      	blt.n	8005b38 <_malloc_r+0x114>
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	60d9      	str	r1, [r3, #12]
 8005b32:	608b      	str	r3, [r1, #8]
 8005b34:	18a3      	adds	r3, r4, r2
 8005b36:	e7a2      	b.n	8005a7e <_malloc_r+0x5a>
 8005b38:	460c      	mov	r4, r1
 8005b3a:	e7d0      	b.n	8005ade <_malloc_r+0xba>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8005b42:	db07      	blt.n	8005b54 <_malloc_r+0x130>
 8005b44:	44a4      	add	ip, r4
 8005b46:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8cc 3004 	str.w	r3, [ip, #4]
 8005b52:	e798      	b.n	8005a86 <_malloc_r+0x62>
 8005b54:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f080 8099 	bcs.w	8005c90 <_malloc_r+0x26c>
 8005b5e:	2201      	movs	r2, #1
 8005b60:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005b64:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8005b68:	fa02 f20e 	lsl.w	r2, r2, lr
 8005b6c:	4310      	orrs	r0, r2
 8005b6e:	f10c 0c01 	add.w	ip, ip, #1
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8005b78:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8005b7c:	3a08      	subs	r2, #8
 8005b7e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8005b82:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8005b86:	60c4      	str	r4, [r0, #12]
 8005b88:	2001      	movs	r0, #1
 8005b8a:	109a      	asrs	r2, r3, #2
 8005b8c:	fa00 f202 	lsl.w	r2, r0, r2
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4290      	cmp	r0, r2
 8005b94:	d326      	bcc.n	8005be4 <_malloc_r+0x1c0>
 8005b96:	4210      	tst	r0, r2
 8005b98:	d106      	bne.n	8005ba8 <_malloc_r+0x184>
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	4210      	tst	r0, r2
 8005ba2:	f103 0304 	add.w	r3, r3, #4
 8005ba6:	d0fa      	beq.n	8005b9e <_malloc_r+0x17a>
 8005ba8:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8005bac:	46e1      	mov	r9, ip
 8005bae:	4698      	mov	r8, r3
 8005bb0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005bb4:	454c      	cmp	r4, r9
 8005bb6:	f040 80af 	bne.w	8005d18 <_malloc_r+0x2f4>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	f018 0f03 	tst.w	r8, #3
 8005bc2:	f109 0908 	add.w	r9, r9, #8
 8005bc6:	d1f3      	bne.n	8005bb0 <_malloc_r+0x18c>
 8005bc8:	0798      	lsls	r0, r3, #30
 8005bca:	f040 80e8 	bne.w	8005d9e <_malloc_r+0x37a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	ea23 0302 	bic.w	r3, r3, r2
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	0052      	lsls	r2, r2, #1
 8005bda:	4290      	cmp	r0, r2
 8005bdc:	d302      	bcc.n	8005be4 <_malloc_r+0x1c0>
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	f040 80eb 	bne.w	8005dba <_malloc_r+0x396>
 8005be4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8005be8:	f8da 4004 	ldr.w	r4, [sl, #4]
 8005bec:	f024 0203 	bic.w	r2, r4, #3
 8005bf0:	42aa      	cmp	r2, r5
 8005bf2:	d303      	bcc.n	8005bfc <_malloc_r+0x1d8>
 8005bf4:	1b53      	subs	r3, r2, r5
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	f300 813f 	bgt.w	8005e7a <_malloc_r+0x456>
 8005bfc:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <_malloc_r+0x338>)
 8005bfe:	2008      	movs	r0, #8
 8005c00:	681c      	ldr	r4, [r3, #0]
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	f000 f9ae 	bl	8005f64 <sysconf>
 8005c08:	4b55      	ldr	r3, [pc, #340]	; (8005d60 <_malloc_r+0x33c>)
 8005c0a:	3410      	adds	r4, #16
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	442c      	add	r4, r5
 8005c10:	3101      	adds	r1, #1
 8005c12:	bf1f      	itttt	ne
 8005c14:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8005c18:	1824      	addne	r4, r4, r0
 8005c1a:	4241      	negne	r1, r0
 8005c1c:	400c      	andne	r4, r1
 8005c1e:	9a00      	ldr	r2, [sp, #0]
 8005c20:	4680      	mov	r8, r0
 8005c22:	4621      	mov	r1, r4
 8005c24:	4630      	mov	r0, r6
 8005c26:	e9cd 2300 	strd	r2, r3, [sp]
 8005c2a:	f000 f945 	bl	8005eb8 <_sbrk_r>
 8005c2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005c32:	4683      	mov	fp, r0
 8005c34:	f000 80fa 	beq.w	8005e2c <_malloc_r+0x408>
 8005c38:	9a00      	ldr	r2, [sp, #0]
 8005c3a:	9b01      	ldr	r3, [sp, #4]
 8005c3c:	eb0a 0102 	add.w	r1, sl, r2
 8005c40:	4281      	cmp	r1, r0
 8005c42:	d902      	bls.n	8005c4a <_malloc_r+0x226>
 8005c44:	45ba      	cmp	sl, r7
 8005c46:	f040 80f1 	bne.w	8005e2c <_malloc_r+0x408>
 8005c4a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005d6c <_malloc_r+0x348>
 8005c4e:	4559      	cmp	r1, fp
 8005c50:	f8d9 0000 	ldr.w	r0, [r9]
 8005c54:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8005c58:	eb00 0e04 	add.w	lr, r0, r4
 8005c5c:	f8c9 e000 	str.w	lr, [r9]
 8005c60:	f040 80ad 	bne.w	8005dbe <_malloc_r+0x39a>
 8005c64:	ea11 0f0c 	tst.w	r1, ip
 8005c68:	f040 80a9 	bne.w	8005dbe <_malloc_r+0x39a>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4414      	add	r4, r2
 8005c70:	f044 0401 	orr.w	r4, r4, #1
 8005c74:	605c      	str	r4, [r3, #4]
 8005c76:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <_malloc_r+0x340>)
 8005c78:	f8d9 3000 	ldr.w	r3, [r9]
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	428b      	cmp	r3, r1
 8005c80:	bf88      	it	hi
 8005c82:	6013      	strhi	r3, [r2, #0]
 8005c84:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <_malloc_r+0x344>)
 8005c86:	6811      	ldr	r1, [r2, #0]
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf88      	it	hi
 8005c8c:	6013      	strhi	r3, [r2, #0]
 8005c8e:	e0cd      	b.n	8005e2c <_malloc_r+0x408>
 8005c90:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8005c94:	2a04      	cmp	r2, #4
 8005c96:	d818      	bhi.n	8005cca <_malloc_r+0x2a6>
 8005c98:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8005c9c:	3238      	adds	r2, #56	; 0x38
 8005c9e:	f102 0e01 	add.w	lr, r2, #1
 8005ca2:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8005ca6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8005caa:	45f0      	cmp	r8, lr
 8005cac:	d12b      	bne.n	8005d06 <_malloc_r+0x2e2>
 8005cae:	f04f 0c01 	mov.w	ip, #1
 8005cb2:	1092      	asrs	r2, r2, #2
 8005cb4:	fa0c f202 	lsl.w	r2, ip, r2
 8005cb8:	4310      	orrs	r0, r2
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8005cc0:	f8c8 4008 	str.w	r4, [r8, #8]
 8005cc4:	f8ce 400c 	str.w	r4, [lr, #12]
 8005cc8:	e75e      	b.n	8005b88 <_malloc_r+0x164>
 8005cca:	2a14      	cmp	r2, #20
 8005ccc:	d801      	bhi.n	8005cd2 <_malloc_r+0x2ae>
 8005cce:	325b      	adds	r2, #91	; 0x5b
 8005cd0:	e7e5      	b.n	8005c9e <_malloc_r+0x27a>
 8005cd2:	2a54      	cmp	r2, #84	; 0x54
 8005cd4:	d803      	bhi.n	8005cde <_malloc_r+0x2ba>
 8005cd6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8005cda:	326e      	adds	r2, #110	; 0x6e
 8005cdc:	e7df      	b.n	8005c9e <_malloc_r+0x27a>
 8005cde:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ce2:	d803      	bhi.n	8005cec <_malloc_r+0x2c8>
 8005ce4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005ce8:	3277      	adds	r2, #119	; 0x77
 8005cea:	e7d8      	b.n	8005c9e <_malloc_r+0x27a>
 8005cec:	f240 5e54 	movw	lr, #1364	; 0x554
 8005cf0:	4572      	cmp	r2, lr
 8005cf2:	bf9a      	itte	ls
 8005cf4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8005cf8:	327c      	addls	r2, #124	; 0x7c
 8005cfa:	227e      	movhi	r2, #126	; 0x7e
 8005cfc:	e7cf      	b.n	8005c9e <_malloc_r+0x27a>
 8005cfe:	f8de e008 	ldr.w	lr, [lr, #8]
 8005d02:	45f0      	cmp	r8, lr
 8005d04:	d005      	beq.n	8005d12 <_malloc_r+0x2ee>
 8005d06:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005d0a:	f022 0203 	bic.w	r2, r2, #3
 8005d0e:	4562      	cmp	r2, ip
 8005d10:	d8f5      	bhi.n	8005cfe <_malloc_r+0x2da>
 8005d12:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005d16:	e7d1      	b.n	8005cbc <_malloc_r+0x298>
 8005d18:	6860      	ldr	r0, [r4, #4]
 8005d1a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005d1e:	f020 0003 	bic.w	r0, r0, #3
 8005d22:	eba0 0a05 	sub.w	sl, r0, r5
 8005d26:	f1ba 0f0f 	cmp.w	sl, #15
 8005d2a:	dd21      	ble.n	8005d70 <_malloc_r+0x34c>
 8005d2c:	68a2      	ldr	r2, [r4, #8]
 8005d2e:	1963      	adds	r3, r4, r5
 8005d30:	f045 0501 	orr.w	r5, r5, #1
 8005d34:	6065      	str	r5, [r4, #4]
 8005d36:	f8c2 e00c 	str.w	lr, [r2, #12]
 8005d3a:	f8ce 2008 	str.w	r2, [lr, #8]
 8005d3e:	f04a 0201 	orr.w	r2, sl, #1
 8005d42:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8005d46:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	f844 a000 	str.w	sl, [r4, r0]
 8005d50:	e699      	b.n	8005a86 <_malloc_r+0x62>
 8005d52:	bf00      	nop
 8005d54:	20000440 	.word	0x20000440
 8005d58:	20000448 	.word	0x20000448
 8005d5c:	20000af4 	.word	0x20000af4
 8005d60:	20000848 	.word	0x20000848
 8005d64:	20000aec 	.word	0x20000aec
 8005d68:	20000af0 	.word	0x20000af0
 8005d6c:	20000ac4 	.word	0x20000ac4
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	db11      	blt.n	8005d9a <_malloc_r+0x376>
 8005d76:	4420      	add	r0, r4
 8005d78:	6843      	ldr	r3, [r0, #4]
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6043      	str	r3, [r0, #4]
 8005d80:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8005d84:	4630      	mov	r0, r6
 8005d86:	f8c3 e00c 	str.w	lr, [r3, #12]
 8005d8a:	f8ce 3008 	str.w	r3, [lr, #8]
 8005d8e:	f000 f88d 	bl	8005eac <__malloc_unlock>
 8005d92:	4620      	mov	r0, r4
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	4674      	mov	r4, lr
 8005d9c:	e70a      	b.n	8005bb4 <_malloc_r+0x190>
 8005d9e:	f1ac 0008 	sub.w	r0, ip, #8
 8005da2:	f8dc c000 	ldr.w	ip, [ip]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4584      	cmp	ip, r0
 8005daa:	f43f af0d 	beq.w	8005bc8 <_malloc_r+0x1a4>
 8005dae:	e712      	b.n	8005bd6 <_malloc_r+0x1b2>
 8005db0:	3304      	adds	r3, #4
 8005db2:	0052      	lsls	r2, r2, #1
 8005db4:	4210      	tst	r0, r2
 8005db6:	d0fb      	beq.n	8005db0 <_malloc_r+0x38c>
 8005db8:	e6f6      	b.n	8005ba8 <_malloc_r+0x184>
 8005dba:	4643      	mov	r3, r8
 8005dbc:	e7fa      	b.n	8005db4 <_malloc_r+0x390>
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	9200      	str	r2, [sp, #0]
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	bf1b      	ittet	ne
 8005dc6:	ebab 0101 	subne.w	r1, fp, r1
 8005dca:	4471      	addne	r1, lr
 8005dcc:	f8c3 b000 	streq.w	fp, [r3]
 8005dd0:	f8c9 1000 	strne.w	r1, [r9]
 8005dd4:	f01b 0307 	ands.w	r3, fp, #7
 8005dd8:	bf1c      	itt	ne
 8005dda:	f1c3 0308 	rsbne	r3, r3, #8
 8005dde:	449b      	addne	fp, r3
 8005de0:	445c      	add	r4, fp
 8005de2:	4498      	add	r8, r3
 8005de4:	ea04 030c 	and.w	r3, r4, ip
 8005de8:	eba8 0803 	sub.w	r8, r8, r3
 8005dec:	4641      	mov	r1, r8
 8005dee:	4630      	mov	r0, r6
 8005df0:	f000 f862 	bl	8005eb8 <_sbrk_r>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	bf04      	itt	eq
 8005df8:	4658      	moveq	r0, fp
 8005dfa:	f04f 0800 	moveq.w	r8, #0
 8005dfe:	f8d9 3000 	ldr.w	r3, [r9]
 8005e02:	eba0 000b 	sub.w	r0, r0, fp
 8005e06:	4440      	add	r0, r8
 8005e08:	4443      	add	r3, r8
 8005e0a:	f040 0001 	orr.w	r0, r0, #1
 8005e0e:	45ba      	cmp	sl, r7
 8005e10:	f8c7 b008 	str.w	fp, [r7, #8]
 8005e14:	9a00      	ldr	r2, [sp, #0]
 8005e16:	f8c9 3000 	str.w	r3, [r9]
 8005e1a:	f8cb 0004 	str.w	r0, [fp, #4]
 8005e1e:	f43f af2a 	beq.w	8005c76 <_malloc_r+0x252>
 8005e22:	2a0f      	cmp	r2, #15
 8005e24:	d810      	bhi.n	8005e48 <_malloc_r+0x424>
 8005e26:	2301      	movs	r3, #1
 8005e28:	f8cb 3004 	str.w	r3, [fp, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	f022 0203 	bic.w	r2, r2, #3
 8005e34:	42aa      	cmp	r2, r5
 8005e36:	eba2 0305 	sub.w	r3, r2, r5
 8005e3a:	d301      	bcc.n	8005e40 <_malloc_r+0x41c>
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	dc1c      	bgt.n	8005e7a <_malloc_r+0x456>
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 f833 	bl	8005eac <__malloc_unlock>
 8005e46:	e5f9      	b.n	8005a3c <_malloc_r+0x18>
 8005e48:	f1a2 040c 	sub.w	r4, r2, #12
 8005e4c:	2205      	movs	r2, #5
 8005e4e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005e52:	f024 0407 	bic.w	r4, r4, #7
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	4323      	orrs	r3, r4
 8005e5c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005e60:	2c0f      	cmp	r4, #15
 8005e62:	eb0a 0304 	add.w	r3, sl, r4
 8005e66:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8005e6a:	f67f af04 	bls.w	8005c76 <_malloc_r+0x252>
 8005e6e:	f10a 0108 	add.w	r1, sl, #8
 8005e72:	4630      	mov	r0, r6
 8005e74:	f000 f8fc 	bl	8006070 <_free_r>
 8005e78:	e6fd      	b.n	8005c76 <_malloc_r+0x252>
 8005e7a:	68bc      	ldr	r4, [r7, #8]
 8005e7c:	f045 0201 	orr.w	r2, r5, #1
 8005e80:	f043 0301 	orr.w	r3, r3, #1
 8005e84:	4425      	add	r5, r4
 8005e86:	6062      	str	r2, [r4, #4]
 8005e88:	60bd      	str	r5, [r7, #8]
 8005e8a:	606b      	str	r3, [r5, #4]
 8005e8c:	e5fb      	b.n	8005a86 <_malloc_r+0x62>
 8005e8e:	bf00      	nop

08005e90 <memset>:
 8005e90:	4603      	mov	r3, r0
 8005e92:	4402      	add	r2, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <__malloc_lock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__malloc_lock+0x8>)
 8005ea2:	f000 b9a1 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	20000b04 	.word	0x20000b04

08005eac <__malloc_unlock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__malloc_unlock+0x8>)
 8005eae:	f000 b99c 	b.w	80061ea <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	20000b04 	.word	0x20000b04

08005eb8 <_sbrk_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4c05      	ldr	r4, [pc, #20]	; (8005ed4 <_sbrk_r+0x1c>)
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	f000 f9f8 	bl	80062b8 <_sbrk>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_sbrk_r+0x1a>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_sbrk_r+0x1a>
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000b0c 	.word	0x20000b0c

08005ed8 <_raise_r>:
 8005ed8:	291f      	cmp	r1, #31
 8005eda:	b538      	push	{r3, r4, r5, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	d904      	bls.n	8005eec <_raise_r+0x14>
 8005ee2:	2316      	movs	r3, #22
 8005ee4:	6003      	str	r3, [r0, #0]
 8005ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8005ef0:	b112      	cbz	r2, 8005ef8 <_raise_r+0x20>
 8005ef2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef6:	b94b      	cbnz	r3, 8005f0c <_raise_r+0x34>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 f831 	bl	8005f60 <_getpid_r>
 8005efe:	462a      	mov	r2, r5
 8005f00:	4601      	mov	r1, r0
 8005f02:	4620      	mov	r0, r4
 8005f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f08:	f000 b818 	b.w	8005f3c <_kill_r>
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d00a      	beq.n	8005f26 <_raise_r+0x4e>
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	d103      	bne.n	8005f1c <_raise_r+0x44>
 8005f14:	2316      	movs	r3, #22
 8005f16:	6003      	str	r3, [r0, #0]
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7e6      	b.n	8005eea <_raise_r+0x12>
 8005f1c:	2400      	movs	r4, #0
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f24:	4798      	blx	r3
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7df      	b.n	8005eea <_raise_r+0x12>
	...

08005f2c <raise>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <raise+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f7ff bfd1 	b.w	8005ed8 <_raise_r>
 8005f36:	bf00      	nop
 8005f38:	20000010 	.word	0x20000010

08005f3c <_kill_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4c06      	ldr	r4, [pc, #24]	; (8005f5c <_kill_r+0x20>)
 8005f42:	4605      	mov	r5, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	f000 f9ad 	bl	80062a8 <_kill>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_kill_r+0x1c>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_kill_r+0x1c>
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000b0c 	.word	0x20000b0c

08005f60 <_getpid_r>:
 8005f60:	f000 b99a 	b.w	8006298 <_getpid>

08005f64 <sysconf>:
 8005f64:	2808      	cmp	r0, #8
 8005f66:	b508      	push	{r3, lr}
 8005f68:	d006      	beq.n	8005f78 <sysconf+0x14>
 8005f6a:	f7ff fd21 	bl	80059b0 <__errno>
 8005f6e:	2316      	movs	r3, #22
 8005f70:	6003      	str	r3, [r0, #0]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f76:	bd08      	pop	{r3, pc}
 8005f78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f7c:	e7fb      	b.n	8005f76 <sysconf+0x12>
	...

08005f80 <register_fini>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <register_fini+0xc>)
 8005f82:	b113      	cbz	r3, 8005f8a <register_fini+0xa>
 8005f84:	4802      	ldr	r0, [pc, #8]	; (8005f90 <register_fini+0x10>)
 8005f86:	f000 b805 	b.w	8005f94 <atexit>
 8005f8a:	4770      	bx	lr
 8005f8c:	00000000 	.word	0x00000000
 8005f90:	08005fa1 	.word	0x08005fa1

08005f94 <atexit>:
 8005f94:	2300      	movs	r3, #0
 8005f96:	4601      	mov	r1, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 b926 	b.w	80061ec <__register_exitproc>

08005fa0 <__libc_fini_array>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d07      	ldr	r5, [pc, #28]	; (8005fc0 <__libc_fini_array+0x20>)
 8005fa4:	4c07      	ldr	r4, [pc, #28]	; (8005fc4 <__libc_fini_array+0x24>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	b91c      	cbnz	r4, 8005fb4 <__libc_fini_array+0x14>
 8005fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fb0:	f000 b998 	b.w	80062e4 <_fini>
 8005fb4:	3c01      	subs	r4, #1
 8005fb6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005fba:	4798      	blx	r3
 8005fbc:	e7f5      	b.n	8005faa <__libc_fini_array+0xa>
 8005fbe:	bf00      	nop
 8005fc0:	08006740 	.word	0x08006740
 8005fc4:	08006744 	.word	0x08006744

08005fc8 <_malloc_trim_r>:
 8005fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fcc:	4605      	mov	r5, r0
 8005fce:	2008      	movs	r0, #8
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	f7ff ffc7 	bl	8005f64 <sysconf>
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4f22      	ldr	r7, [pc, #136]	; (8006064 <_malloc_trim_r+0x9c>)
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f7ff ff60 	bl	8005ea0 <__malloc_lock>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	685e      	ldr	r6, [r3, #4]
 8005fe4:	f026 0603 	bic.w	r6, r6, #3
 8005fe8:	1b34      	subs	r4, r6, r4
 8005fea:	3c11      	subs	r4, #17
 8005fec:	4444      	add	r4, r8
 8005fee:	fbb4 f4f8 	udiv	r4, r4, r8
 8005ff2:	3c01      	subs	r4, #1
 8005ff4:	fb08 f404 	mul.w	r4, r8, r4
 8005ff8:	45a0      	cmp	r8, r4
 8005ffa:	dd05      	ble.n	8006008 <_malloc_trim_r+0x40>
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f7ff ff55 	bl	8005eac <__malloc_unlock>
 8006002:	2000      	movs	r0, #0
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006008:	2100      	movs	r1, #0
 800600a:	4628      	mov	r0, r5
 800600c:	f7ff ff54 	bl	8005eb8 <_sbrk_r>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4433      	add	r3, r6
 8006014:	4298      	cmp	r0, r3
 8006016:	d1f1      	bne.n	8005ffc <_malloc_trim_r+0x34>
 8006018:	4261      	negs	r1, r4
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff ff4c 	bl	8005eb8 <_sbrk_r>
 8006020:	3001      	adds	r0, #1
 8006022:	d110      	bne.n	8006046 <_malloc_trim_r+0x7e>
 8006024:	2100      	movs	r1, #0
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff ff46 	bl	8005eb8 <_sbrk_r>
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	1a83      	subs	r3, r0, r2
 8006030:	2b0f      	cmp	r3, #15
 8006032:	dde3      	ble.n	8005ffc <_malloc_trim_r+0x34>
 8006034:	490c      	ldr	r1, [pc, #48]	; (8006068 <_malloc_trim_r+0xa0>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6809      	ldr	r1, [r1, #0]
 800603c:	6053      	str	r3, [r2, #4]
 800603e:	1a40      	subs	r0, r0, r1
 8006040:	490a      	ldr	r1, [pc, #40]	; (800606c <_malloc_trim_r+0xa4>)
 8006042:	6008      	str	r0, [r1, #0]
 8006044:	e7da      	b.n	8005ffc <_malloc_trim_r+0x34>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4a08      	ldr	r2, [pc, #32]	; (800606c <_malloc_trim_r+0xa4>)
 800604a:	1b36      	subs	r6, r6, r4
 800604c:	f046 0601 	orr.w	r6, r6, #1
 8006050:	605e      	str	r6, [r3, #4]
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	4628      	mov	r0, r5
 8006056:	1b1c      	subs	r4, r3, r4
 8006058:	6014      	str	r4, [r2, #0]
 800605a:	f7ff ff27 	bl	8005eac <__malloc_unlock>
 800605e:	2001      	movs	r0, #1
 8006060:	e7d0      	b.n	8006004 <_malloc_trim_r+0x3c>
 8006062:	bf00      	nop
 8006064:	20000440 	.word	0x20000440
 8006068:	20000848 	.word	0x20000848
 800606c:	20000ac4 	.word	0x20000ac4

08006070 <_free_r>:
 8006070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	4688      	mov	r8, r1
 8006078:	2900      	cmp	r1, #0
 800607a:	f000 80ab 	beq.w	80061d4 <_free_r+0x164>
 800607e:	f7ff ff0f 	bl	8005ea0 <__malloc_lock>
 8006082:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006086:	4d54      	ldr	r5, [pc, #336]	; (80061d8 <_free_r+0x168>)
 8006088:	f022 0001 	bic.w	r0, r2, #1
 800608c:	f1a8 0308 	sub.w	r3, r8, #8
 8006090:	181f      	adds	r7, r3, r0
 8006092:	68a9      	ldr	r1, [r5, #8]
 8006094:	687e      	ldr	r6, [r7, #4]
 8006096:	42b9      	cmp	r1, r7
 8006098:	f026 0603 	bic.w	r6, r6, #3
 800609c:	f002 0201 	and.w	r2, r2, #1
 80060a0:	d11b      	bne.n	80060da <_free_r+0x6a>
 80060a2:	4430      	add	r0, r6
 80060a4:	b93a      	cbnz	r2, 80060b6 <_free_r+0x46>
 80060a6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	4410      	add	r0, r2
 80060ae:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80060b2:	60ca      	str	r2, [r1, #12]
 80060b4:	6091      	str	r1, [r2, #8]
 80060b6:	f040 0201 	orr.w	r2, r0, #1
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	60ab      	str	r3, [r5, #8]
 80060be:	4b47      	ldr	r3, [pc, #284]	; (80061dc <_free_r+0x16c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4283      	cmp	r3, r0
 80060c4:	d804      	bhi.n	80060d0 <_free_r+0x60>
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <_free_r+0x170>)
 80060c8:	4620      	mov	r0, r4
 80060ca:	6819      	ldr	r1, [r3, #0]
 80060cc:	f7ff ff7c 	bl	8005fc8 <_malloc_trim_r>
 80060d0:	4620      	mov	r0, r4
 80060d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060d6:	f7ff bee9 	b.w	8005eac <__malloc_unlock>
 80060da:	607e      	str	r6, [r7, #4]
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d139      	bne.n	8006154 <_free_r+0xe4>
 80060e0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80060e4:	f105 0c08 	add.w	ip, r5, #8
 80060e8:	1a5b      	subs	r3, r3, r1
 80060ea:	4408      	add	r0, r1
 80060ec:	6899      	ldr	r1, [r3, #8]
 80060ee:	4561      	cmp	r1, ip
 80060f0:	d032      	beq.n	8006158 <_free_r+0xe8>
 80060f2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80060f6:	f8c1 c00c 	str.w	ip, [r1, #12]
 80060fa:	f8cc 1008 	str.w	r1, [ip, #8]
 80060fe:	19b9      	adds	r1, r7, r6
 8006100:	6849      	ldr	r1, [r1, #4]
 8006102:	07c9      	lsls	r1, r1, #31
 8006104:	d40a      	bmi.n	800611c <_free_r+0xac>
 8006106:	4430      	add	r0, r6
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	bb3a      	cbnz	r2, 800615c <_free_r+0xec>
 800610c:	4e35      	ldr	r6, [pc, #212]	; (80061e4 <_free_r+0x174>)
 800610e:	42b1      	cmp	r1, r6
 8006110:	d124      	bne.n	800615c <_free_r+0xec>
 8006112:	2201      	movs	r2, #1
 8006114:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8006118:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800611c:	f040 0101 	orr.w	r1, r0, #1
 8006120:	6059      	str	r1, [r3, #4]
 8006122:	5018      	str	r0, [r3, r0]
 8006124:	2a00      	cmp	r2, #0
 8006126:	d1d3      	bne.n	80060d0 <_free_r+0x60>
 8006128:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800612c:	d21a      	bcs.n	8006164 <_free_r+0xf4>
 800612e:	2201      	movs	r2, #1
 8006130:	08c0      	lsrs	r0, r0, #3
 8006132:	1081      	asrs	r1, r0, #2
 8006134:	408a      	lsls	r2, r1
 8006136:	6869      	ldr	r1, [r5, #4]
 8006138:	3001      	adds	r0, #1
 800613a:	430a      	orrs	r2, r1
 800613c:	606a      	str	r2, [r5, #4]
 800613e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006142:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006146:	3a08      	subs	r2, #8
 8006148:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800614c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006150:	60cb      	str	r3, [r1, #12]
 8006152:	e7bd      	b.n	80060d0 <_free_r+0x60>
 8006154:	2200      	movs	r2, #0
 8006156:	e7d2      	b.n	80060fe <_free_r+0x8e>
 8006158:	2201      	movs	r2, #1
 800615a:	e7d0      	b.n	80060fe <_free_r+0x8e>
 800615c:	68fe      	ldr	r6, [r7, #12]
 800615e:	60ce      	str	r6, [r1, #12]
 8006160:	60b1      	str	r1, [r6, #8]
 8006162:	e7db      	b.n	800611c <_free_r+0xac>
 8006164:	0a42      	lsrs	r2, r0, #9
 8006166:	2a04      	cmp	r2, #4
 8006168:	d813      	bhi.n	8006192 <_free_r+0x122>
 800616a:	0982      	lsrs	r2, r0, #6
 800616c:	3238      	adds	r2, #56	; 0x38
 800616e:	1c51      	adds	r1, r2, #1
 8006170:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006174:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006178:	428e      	cmp	r6, r1
 800617a:	d124      	bne.n	80061c6 <_free_r+0x156>
 800617c:	2001      	movs	r0, #1
 800617e:	1092      	asrs	r2, r2, #2
 8006180:	fa00 f202 	lsl.w	r2, r0, r2
 8006184:	6868      	ldr	r0, [r5, #4]
 8006186:	4302      	orrs	r2, r0
 8006188:	606a      	str	r2, [r5, #4]
 800618a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800618e:	60b3      	str	r3, [r6, #8]
 8006190:	e7de      	b.n	8006150 <_free_r+0xe0>
 8006192:	2a14      	cmp	r2, #20
 8006194:	d801      	bhi.n	800619a <_free_r+0x12a>
 8006196:	325b      	adds	r2, #91	; 0x5b
 8006198:	e7e9      	b.n	800616e <_free_r+0xfe>
 800619a:	2a54      	cmp	r2, #84	; 0x54
 800619c:	d802      	bhi.n	80061a4 <_free_r+0x134>
 800619e:	0b02      	lsrs	r2, r0, #12
 80061a0:	326e      	adds	r2, #110	; 0x6e
 80061a2:	e7e4      	b.n	800616e <_free_r+0xfe>
 80061a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80061a8:	d802      	bhi.n	80061b0 <_free_r+0x140>
 80061aa:	0bc2      	lsrs	r2, r0, #15
 80061ac:	3277      	adds	r2, #119	; 0x77
 80061ae:	e7de      	b.n	800616e <_free_r+0xfe>
 80061b0:	f240 5154 	movw	r1, #1364	; 0x554
 80061b4:	428a      	cmp	r2, r1
 80061b6:	bf9a      	itte	ls
 80061b8:	0c82      	lsrls	r2, r0, #18
 80061ba:	327c      	addls	r2, #124	; 0x7c
 80061bc:	227e      	movhi	r2, #126	; 0x7e
 80061be:	e7d6      	b.n	800616e <_free_r+0xfe>
 80061c0:	6889      	ldr	r1, [r1, #8]
 80061c2:	428e      	cmp	r6, r1
 80061c4:	d004      	beq.n	80061d0 <_free_r+0x160>
 80061c6:	684a      	ldr	r2, [r1, #4]
 80061c8:	f022 0203 	bic.w	r2, r2, #3
 80061cc:	4282      	cmp	r2, r0
 80061ce:	d8f7      	bhi.n	80061c0 <_free_r+0x150>
 80061d0:	68ce      	ldr	r6, [r1, #12]
 80061d2:	e7da      	b.n	800618a <_free_r+0x11a>
 80061d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d8:	20000440 	.word	0x20000440
 80061dc:	2000084c 	.word	0x2000084c
 80061e0:	20000af4 	.word	0x20000af4
 80061e4:	20000448 	.word	0x20000448

080061e8 <__retarget_lock_acquire_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_release_recursive>:
 80061ea:	4770      	bx	lr

080061ec <__register_exitproc>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	4c26      	ldr	r4, [pc, #152]	; (800628c <__register_exitproc+0xa0>)
 80061f2:	4606      	mov	r6, r0
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	4698      	mov	r8, r3
 80061f8:	460f      	mov	r7, r1
 80061fa:	4691      	mov	r9, r2
 80061fc:	f7ff fff4 	bl	80061e8 <__retarget_lock_acquire_recursive>
 8006200:	4b23      	ldr	r3, [pc, #140]	; (8006290 <__register_exitproc+0xa4>)
 8006202:	681d      	ldr	r5, [r3, #0]
 8006204:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8006208:	b918      	cbnz	r0, 8006212 <__register_exitproc+0x26>
 800620a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800620e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006212:	6843      	ldr	r3, [r0, #4]
 8006214:	2b1f      	cmp	r3, #31
 8006216:	dd19      	ble.n	800624c <__register_exitproc+0x60>
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <__register_exitproc+0xa8>)
 800621a:	b933      	cbnz	r3, 800622a <__register_exitproc+0x3e>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	f7ff ffe4 	bl	80061ea <__retarget_lock_release_recursive>
 8006222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800622e:	f7ff fbe9 	bl	8005a04 <malloc>
 8006232:	2800      	cmp	r0, #0
 8006234:	d0f2      	beq.n	800621c <__register_exitproc+0x30>
 8006236:	2200      	movs	r2, #0
 8006238:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800623c:	6042      	str	r2, [r0, #4]
 800623e:	6003      	str	r3, [r0, #0]
 8006240:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006244:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8006248:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800624c:	6843      	ldr	r3, [r0, #4]
 800624e:	b19e      	cbz	r6, 8006278 <__register_exitproc+0x8c>
 8006250:	2201      	movs	r2, #1
 8006252:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8006256:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800625a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800625e:	409a      	lsls	r2, r3
 8006260:	4311      	orrs	r1, r2
 8006262:	2e02      	cmp	r6, #2
 8006264:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8006268:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800626c:	bf02      	ittt	eq
 800626e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8006272:	430a      	orreq	r2, r1
 8006274:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	3302      	adds	r3, #2
 800627c:	6042      	str	r2, [r0, #4]
 800627e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f7ff ffb1 	bl	80061ea <__retarget_lock_release_recursive>
 8006288:	2000      	movs	r0, #0
 800628a:	e7cc      	b.n	8006226 <__register_exitproc+0x3a>
 800628c:	20000850 	.word	0x20000850
 8006290:	0800672c 	.word	0x0800672c
 8006294:	08005a05 	.word	0x08005a05

08006298 <_getpid>:
 8006298:	2258      	movs	r2, #88	; 0x58
 800629a:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <_getpid+0xc>)
 800629c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	4770      	bx	lr
 80062a4:	20000b0c 	.word	0x20000b0c

080062a8 <_kill>:
 80062a8:	2258      	movs	r2, #88	; 0x58
 80062aa:	4b02      	ldr	r3, [pc, #8]	; (80062b4 <_kill+0xc>)
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	4770      	bx	lr
 80062b4:	20000b0c 	.word	0x20000b0c

080062b8 <_sbrk>:
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <_sbrk+0x14>)
 80062ba:	4602      	mov	r2, r0
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	b909      	cbnz	r1, 80062c4 <_sbrk+0xc>
 80062c0:	4903      	ldr	r1, [pc, #12]	; (80062d0 <_sbrk+0x18>)
 80062c2:	6019      	str	r1, [r3, #0]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	4402      	add	r2, r0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	4770      	bx	lr
 80062cc:	20000af8 	.word	0x20000af8
 80062d0:	20000b10 	.word	0x20000b10

080062d4 <_exit>:
 80062d4:	e7fe      	b.n	80062d4 <_exit>
	...

080062d8 <_init>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr

080062e4 <_fini>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr
