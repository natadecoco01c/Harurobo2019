
odom_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08009440  08009440  00019440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009c0  20000000  08009b0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002bc  200009c0  0800a4cc  000209c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c7c  0800a4cc  00020c7c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fe01  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000042f0  00000000  00000000  000407ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006b83  00000000  00000000  00044ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b98  00000000  00000000  0004b660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de0  00000000  00000000  0004c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001b52f  00000000  00000000  0004cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d1ed  00000000  00000000  00068507  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00081612  00000000  00000000  000756f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000f6d06  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003710  00000000  00000000  000f6d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  000fa494  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  000fa4d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009c0 	.word	0x200009c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009428 	.word	0x08009428

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009c4 	.word	0x200009c4
 800014c:	08009428 	.word	0x08009428

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_uldivmod>:
 8001148:	b953      	cbnz	r3, 8001160 <__aeabi_uldivmod+0x18>
 800114a:	b94a      	cbnz	r2, 8001160 <__aeabi_uldivmod+0x18>
 800114c:	2900      	cmp	r1, #0
 800114e:	bf08      	it	eq
 8001150:	2800      	cmpeq	r0, #0
 8001152:	bf1c      	itt	ne
 8001154:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001158:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800115c:	f000 b974 	b.w	8001448 <__aeabi_idiv0>
 8001160:	f1ad 0c08 	sub.w	ip, sp, #8
 8001164:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001168:	f000 f806 	bl	8001178 <__udivmoddi4>
 800116c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001174:	b004      	add	sp, #16
 8001176:	4770      	bx	lr

08001178 <__udivmoddi4>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	468c      	mov	ip, r1
 800117e:	4604      	mov	r4, r0
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d14b      	bne.n	800121e <__udivmoddi4+0xa6>
 8001186:	428a      	cmp	r2, r1
 8001188:	4615      	mov	r5, r2
 800118a:	d967      	bls.n	800125c <__udivmoddi4+0xe4>
 800118c:	fab2 f282 	clz	r2, r2
 8001190:	b14a      	cbz	r2, 80011a6 <__udivmoddi4+0x2e>
 8001192:	f1c2 0720 	rsb	r7, r2, #32
 8001196:	fa01 f302 	lsl.w	r3, r1, r2
 800119a:	fa20 f707 	lsr.w	r7, r0, r7
 800119e:	4095      	lsls	r5, r2
 80011a0:	ea47 0c03 	orr.w	ip, r7, r3
 80011a4:	4094      	lsls	r4, r2
 80011a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011aa:	fbbc f7fe 	udiv	r7, ip, lr
 80011ae:	fa1f f885 	uxth.w	r8, r5
 80011b2:	fb0e c317 	mls	r3, lr, r7, ip
 80011b6:	fb07 f908 	mul.w	r9, r7, r8
 80011ba:	0c21      	lsrs	r1, r4, #16
 80011bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011c0:	4599      	cmp	r9, r3
 80011c2:	d909      	bls.n	80011d8 <__udivmoddi4+0x60>
 80011c4:	18eb      	adds	r3, r5, r3
 80011c6:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80011ca:	f080 811c 	bcs.w	8001406 <__udivmoddi4+0x28e>
 80011ce:	4599      	cmp	r9, r3
 80011d0:	f240 8119 	bls.w	8001406 <__udivmoddi4+0x28e>
 80011d4:	3f02      	subs	r7, #2
 80011d6:	442b      	add	r3, r5
 80011d8:	eba3 0309 	sub.w	r3, r3, r9
 80011dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80011e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80011e4:	fb00 f108 	mul.w	r1, r0, r8
 80011e8:	b2a4      	uxth	r4, r4
 80011ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ee:	42a1      	cmp	r1, r4
 80011f0:	d909      	bls.n	8001206 <__udivmoddi4+0x8e>
 80011f2:	192c      	adds	r4, r5, r4
 80011f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011f8:	f080 8107 	bcs.w	800140a <__udivmoddi4+0x292>
 80011fc:	42a1      	cmp	r1, r4
 80011fe:	f240 8104 	bls.w	800140a <__udivmoddi4+0x292>
 8001202:	3802      	subs	r0, #2
 8001204:	442c      	add	r4, r5
 8001206:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800120a:	2700      	movs	r7, #0
 800120c:	1a64      	subs	r4, r4, r1
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa0>
 8001210:	2300      	movs	r3, #0
 8001212:	40d4      	lsrs	r4, r2
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	4639      	mov	r1, r7
 800121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121e:	428b      	cmp	r3, r1
 8001220:	d909      	bls.n	8001236 <__udivmoddi4+0xbe>
 8001222:	2e00      	cmp	r6, #0
 8001224:	f000 80ec 	beq.w	8001400 <__udivmoddi4+0x288>
 8001228:	2700      	movs	r7, #0
 800122a:	e9c6 0100 	strd	r0, r1, [r6]
 800122e:	4638      	mov	r0, r7
 8001230:	4639      	mov	r1, r7
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001236:	fab3 f783 	clz	r7, r3
 800123a:	2f00      	cmp	r7, #0
 800123c:	d148      	bne.n	80012d0 <__udivmoddi4+0x158>
 800123e:	428b      	cmp	r3, r1
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xd0>
 8001242:	4282      	cmp	r2, r0
 8001244:	f200 80fb 	bhi.w	800143e <__udivmoddi4+0x2c6>
 8001248:	1a84      	subs	r4, r0, r2
 800124a:	eb61 0303 	sbc.w	r3, r1, r3
 800124e:	2001      	movs	r0, #1
 8001250:	469c      	mov	ip, r3
 8001252:	2e00      	cmp	r6, #0
 8001254:	d0e0      	beq.n	8001218 <__udivmoddi4+0xa0>
 8001256:	e9c6 4c00 	strd	r4, ip, [r6]
 800125a:	e7dd      	b.n	8001218 <__udivmoddi4+0xa0>
 800125c:	b902      	cbnz	r2, 8001260 <__udivmoddi4+0xe8>
 800125e:	deff      	udf	#255	; 0xff
 8001260:	fab2 f282 	clz	r2, r2
 8001264:	2a00      	cmp	r2, #0
 8001266:	f040 808f 	bne.w	8001388 <__udivmoddi4+0x210>
 800126a:	2701      	movs	r7, #1
 800126c:	1b49      	subs	r1, r1, r5
 800126e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001272:	fa1f f985 	uxth.w	r9, r5
 8001276:	fbb1 fef8 	udiv	lr, r1, r8
 800127a:	fb08 111e 	mls	r1, r8, lr, r1
 800127e:	fb09 f00e 	mul.w	r0, r9, lr
 8001282:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001286:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800128a:	4298      	cmp	r0, r3
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0x126>
 800128e:	18eb      	adds	r3, r5, r3
 8001290:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0x124>
 8001296:	4298      	cmp	r0, r3
 8001298:	f200 80cd 	bhi.w	8001436 <__udivmoddi4+0x2be>
 800129c:	468e      	mov	lr, r1
 800129e:	1a1b      	subs	r3, r3, r0
 80012a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012a4:	fb08 3310 	mls	r3, r8, r0, r3
 80012a8:	fb09 f900 	mul.w	r9, r9, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012b2:	45a1      	cmp	r9, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x14e>
 80012b6:	192c      	adds	r4, r5, r4
 80012b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x14c>
 80012be:	45a1      	cmp	r9, r4
 80012c0:	f200 80b6 	bhi.w	8001430 <__udivmoddi4+0x2b8>
 80012c4:	4618      	mov	r0, r3
 80012c6:	eba4 0409 	sub.w	r4, r4, r9
 80012ca:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x96>
 80012d0:	f1c7 0520 	rsb	r5, r7, #32
 80012d4:	40bb      	lsls	r3, r7
 80012d6:	fa22 fc05 	lsr.w	ip, r2, r5
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa21 f405 	lsr.w	r4, r1, r5
 80012e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012e6:	fbb4 f9fe 	udiv	r9, r4, lr
 80012ea:	fa1f f88c 	uxth.w	r8, ip
 80012ee:	fb0e 4419 	mls	r4, lr, r9, r4
 80012f2:	fa20 f305 	lsr.w	r3, r0, r5
 80012f6:	40b9      	lsls	r1, r7
 80012f8:	fb09 fa08 	mul.w	sl, r9, r8
 80012fc:	4319      	orrs	r1, r3
 80012fe:	0c0b      	lsrs	r3, r1, #16
 8001300:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001304:	45a2      	cmp	sl, r4
 8001306:	fa02 f207 	lsl.w	r2, r2, r7
 800130a:	fa00 f307 	lsl.w	r3, r0, r7
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b0>
 8001310:	eb1c 0404 	adds.w	r4, ip, r4
 8001314:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2b4>
 800131c:	45a2      	cmp	sl, r4
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2b4>
 8001322:	f1a9 0902 	sub.w	r9, r9, #2
 8001326:	4464      	add	r4, ip
 8001328:	eba4 040a 	sub.w	r4, r4, sl
 800132c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001330:	fb0e 4410 	mls	r4, lr, r0, r4
 8001334:	fb00 fa08 	mul.w	sl, r0, r8
 8001338:	b289      	uxth	r1, r1
 800133a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800133e:	45a2      	cmp	sl, r4
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x1dc>
 8001342:	eb1c 0404 	adds.w	r4, ip, r4
 8001346:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800134a:	d26b      	bcs.n	8001424 <__udivmoddi4+0x2ac>
 800134c:	45a2      	cmp	sl, r4
 800134e:	d969      	bls.n	8001424 <__udivmoddi4+0x2ac>
 8001350:	3802      	subs	r0, #2
 8001352:	4464      	add	r4, ip
 8001354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001358:	fba0 8902 	umull	r8, r9, r0, r2
 800135c:	eba4 040a 	sub.w	r4, r4, sl
 8001360:	454c      	cmp	r4, r9
 8001362:	4641      	mov	r1, r8
 8001364:	46ce      	mov	lr, r9
 8001366:	d354      	bcc.n	8001412 <__udivmoddi4+0x29a>
 8001368:	d051      	beq.n	800140e <__udivmoddi4+0x296>
 800136a:	2e00      	cmp	r6, #0
 800136c:	d069      	beq.n	8001442 <__udivmoddi4+0x2ca>
 800136e:	1a5a      	subs	r2, r3, r1
 8001370:	eb64 040e 	sbc.w	r4, r4, lr
 8001374:	fa04 f505 	lsl.w	r5, r4, r5
 8001378:	fa22 f307 	lsr.w	r3, r2, r7
 800137c:	40fc      	lsrs	r4, r7
 800137e:	431d      	orrs	r5, r3
 8001380:	e9c6 5400 	strd	r5, r4, [r6]
 8001384:	2700      	movs	r7, #0
 8001386:	e747      	b.n	8001218 <__udivmoddi4+0xa0>
 8001388:	4095      	lsls	r5, r2
 800138a:	f1c2 0320 	rsb	r3, r2, #32
 800138e:	fa21 f003 	lsr.w	r0, r1, r3
 8001392:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001396:	fbb0 f7f8 	udiv	r7, r0, r8
 800139a:	fa1f f985 	uxth.w	r9, r5
 800139e:	fb08 0017 	mls	r0, r8, r7, r0
 80013a2:	fa24 f303 	lsr.w	r3, r4, r3
 80013a6:	4091      	lsls	r1, r2
 80013a8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ac:	430b      	orrs	r3, r1
 80013ae:	0c19      	lsrs	r1, r3, #16
 80013b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013b4:	458c      	cmp	ip, r1
 80013b6:	fa04 f402 	lsl.w	r4, r4, r2
 80013ba:	d907      	bls.n	80013cc <__udivmoddi4+0x254>
 80013bc:	1869      	adds	r1, r5, r1
 80013be:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80013c2:	d231      	bcs.n	8001428 <__udivmoddi4+0x2b0>
 80013c4:	458c      	cmp	ip, r1
 80013c6:	d92f      	bls.n	8001428 <__udivmoddi4+0x2b0>
 80013c8:	3f02      	subs	r7, #2
 80013ca:	4429      	add	r1, r5
 80013cc:	eba1 010c 	sub.w	r1, r1, ip
 80013d0:	fbb1 f0f8 	udiv	r0, r1, r8
 80013d4:	fb08 1c10 	mls	ip, r8, r0, r1
 80013d8:	fb00 fe09 	mul.w	lr, r0, r9
 80013dc:	b299      	uxth	r1, r3
 80013de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e2:	458e      	cmp	lr, r1
 80013e4:	d907      	bls.n	80013f6 <__udivmoddi4+0x27e>
 80013e6:	1869      	adds	r1, r5, r1
 80013e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80013ec:	d218      	bcs.n	8001420 <__udivmoddi4+0x2a8>
 80013ee:	458e      	cmp	lr, r1
 80013f0:	d916      	bls.n	8001420 <__udivmoddi4+0x2a8>
 80013f2:	3802      	subs	r0, #2
 80013f4:	4429      	add	r1, r5
 80013f6:	eba1 010e 	sub.w	r1, r1, lr
 80013fa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80013fe:	e73a      	b.n	8001276 <__udivmoddi4+0xfe>
 8001400:	4637      	mov	r7, r6
 8001402:	4630      	mov	r0, r6
 8001404:	e708      	b.n	8001218 <__udivmoddi4+0xa0>
 8001406:	460f      	mov	r7, r1
 8001408:	e6e6      	b.n	80011d8 <__udivmoddi4+0x60>
 800140a:	4618      	mov	r0, r3
 800140c:	e6fb      	b.n	8001206 <__udivmoddi4+0x8e>
 800140e:	4543      	cmp	r3, r8
 8001410:	d2ab      	bcs.n	800136a <__udivmoddi4+0x1f2>
 8001412:	ebb8 0102 	subs.w	r1, r8, r2
 8001416:	eb69 020c 	sbc.w	r2, r9, ip
 800141a:	3801      	subs	r0, #1
 800141c:	4696      	mov	lr, r2
 800141e:	e7a4      	b.n	800136a <__udivmoddi4+0x1f2>
 8001420:	4618      	mov	r0, r3
 8001422:	e7e8      	b.n	80013f6 <__udivmoddi4+0x27e>
 8001424:	4608      	mov	r0, r1
 8001426:	e795      	b.n	8001354 <__udivmoddi4+0x1dc>
 8001428:	4607      	mov	r7, r0
 800142a:	e7cf      	b.n	80013cc <__udivmoddi4+0x254>
 800142c:	4681      	mov	r9, r0
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b0>
 8001430:	3802      	subs	r0, #2
 8001432:	442c      	add	r4, r5
 8001434:	e747      	b.n	80012c6 <__udivmoddi4+0x14e>
 8001436:	f1ae 0e02 	sub.w	lr, lr, #2
 800143a:	442b      	add	r3, r5
 800143c:	e72f      	b.n	800129e <__udivmoddi4+0x126>
 800143e:	4638      	mov	r0, r7
 8001440:	e707      	b.n	8001252 <__udivmoddi4+0xda>
 8001442:	4637      	mov	r7, r6
 8001444:	e6e8      	b.n	8001218 <__udivmoddi4+0xa0>
 8001446:	bf00      	nop

08001448 <__aeabi_idiv0>:
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_InitTick+0x3c>)
{
 8001450:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001452:	7818      	ldrb	r0, [r3, #0]
 8001454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001458:	fbb3 f3f0 	udiv	r3, r3, r0
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_InitTick+0x40>)
 800145e:	6810      	ldr	r0, [r2, #0]
 8001460:	fbb0 f0f3 	udiv	r0, r0, r3
 8001464:	f000 fa0e 	bl	8001884 <HAL_SYSTICK_Config>
 8001468:	4604      	mov	r4, r0
 800146a:	b958      	cbnz	r0, 8001484 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	2d0f      	cmp	r5, #15
 800146e:	d809      	bhi.n	8001484 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	4602      	mov	r2, r0
 8001472:	4629      	mov	r1, r5
 8001474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001478:	f000 f9c4 	bl	8001804 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4620      	mov	r0, r4
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_InitTick+0x44>)
 8001480:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001482:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
 8001486:	e7fc      	b.n	8001482 <HAL_InitTick+0x36>
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x20>)
{
 8001496:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	f000 f99d 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ffd0 	bl	800144c <HAL_InitTick>
  HAL_MspInit();
 80014ac:	f003 f986 	bl	80047bc <HAL_MspInit>
}
 80014b0:	2000      	movs	r0, #0
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <HAL_IncTick+0x10>)
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_IncTick+0x14>)
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	440b      	add	r3, r1
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000c68 	.word	0x20000c68
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014d0:	4b01      	ldr	r3, [pc, #4]	; (80014d8 <HAL_GetTick+0x8>)
 80014d2:	6818      	ldr	r0, [r3, #0]
}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000c68 	.word	0x20000c68

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff fff6 	bl	80014d0 <HAL_GetTick>
 80014e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014e8:	bf1e      	ittt	ne
 80014ea:	4b04      	ldrne	r3, [pc, #16]	; (80014fc <HAL_Delay+0x20>)
 80014ec:	781b      	ldrbne	r3, [r3, #0]
 80014ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	1b40      	subs	r0, r0, r5
 80014f6:	42a0      	cmp	r0, r4
 80014f8:	d3fa      	bcc.n	80014f0 <HAL_Delay+0x14>
  {
  }
}
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001500:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001502:	4604      	mov	r4, r0
 8001504:	2800      	cmp	r0, #0
 8001506:	d06e      	beq.n	80015e6 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001508:	f890 3020 	ldrb.w	r3, [r0, #32]
 800150c:	b90b      	cbnz	r3, 8001512 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800150e:	f003 f977 	bl	8004800 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001512:	6822      	ldr	r2, [r4, #0]
 8001514:	6813      	ldr	r3, [r2, #0]
 8001516:	f023 0302 	bic.w	r3, r3, #2
 800151a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800151c:	f7ff ffd8 	bl	80014d0 <HAL_GetTick>
 8001520:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	0791      	lsls	r1, r2, #30
 8001528:	d451      	bmi.n	80015ce <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001532:	f7ff ffcd 	bl	80014d0 <HAL_GetTick>
 8001536:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	07d2      	lsls	r2, r2, #31
 800153e:	d554      	bpl.n	80015ea <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001540:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001542:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001544:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	bf0c      	ite	eq
 800154a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800154e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001552:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001554:	7e62      	ldrb	r2, [r4, #25]
 8001556:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	bf0c      	ite	eq
 800155c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001560:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001564:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001566:	7ea2      	ldrb	r2, [r4, #26]
 8001568:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	bf0c      	ite	eq
 800156e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001572:	f022 0220 	bicne.w	r2, r2, #32
 8001576:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001578:	7ee2      	ldrb	r2, [r4, #27]
 800157a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	bf0c      	ite	eq
 8001580:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001584:	f042 0210 	orrne.w	r2, r2, #16
 8001588:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800158a:	7f22      	ldrb	r2, [r4, #28]
 800158c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	bf0c      	ite	eq
 8001592:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001596:	f022 0208 	bicne.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800159c:	7f62      	ldrb	r2, [r4, #29]
 800159e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	bf0c      	ite	eq
 80015a4:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a8:	f022 0204 	bicne.w	r2, r2, #4
 80015ac:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015ae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	6921      	ldr	r1, [r4, #16]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	6961      	ldr	r1, [r4, #20]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	6861      	ldr	r1, [r4, #4]
 80015be:	3901      	subs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015c4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015c6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80015c8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ce:	f7ff ff7f 	bl	80014d0 <HAL_GetTick>
 80015d2:	1b40      	subs	r0, r0, r5
 80015d4:	280a      	cmp	r0, #10
 80015d6:	d9a4      	bls.n	8001522 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015de:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e0:	2305      	movs	r3, #5
 80015e2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
 80015e8:	e7f0      	b.n	80015cc <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ea:	f7ff ff71 	bl	80014d0 <HAL_GetTick>
 80015ee:	1b40      	subs	r0, r0, r5
 80015f0:	280a      	cmp	r0, #10
 80015f2:	d9a1      	bls.n	8001538 <HAL_CAN_Init+0x38>
 80015f4:	e7f0      	b.n	80015d8 <HAL_CAN_Init+0xd8>

080015f6 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f6:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80015fa:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80015fc:	3b01      	subs	r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d85f      	bhi.n	80016c2 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001602:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001604:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001606:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001612:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001614:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001618:	f002 001f 	and.w	r0, r2, #31
 800161c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001620:	43c4      	mvns	r4, r0
 8001622:	4025      	ands	r5, r4
 8001624:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001628:	69cd      	ldr	r5, [r1, #28]
 800162a:	bb85      	cbnz	r5, 800168e <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800162c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001630:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001632:	4025      	ands	r5, r4
 8001634:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001638:	888d      	ldrh	r5, [r1, #4]
 800163a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800163e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001642:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001646:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001648:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800164a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800164e:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001652:	698a      	ldr	r2, [r1, #24]
 8001654:	bb6a      	cbnz	r2, 80016b2 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001656:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800165a:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800165c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001660:	690a      	ldr	r2, [r1, #16]
 8001662:	bb52      	cbnz	r2, 80016ba <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001664:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001668:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800166a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800166e:	6a0a      	ldr	r2, [r1, #32]
 8001670:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001672:	bf02      	ittt	eq
 8001674:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8001678:	4310      	orreq	r0, r2
 800167a:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 800167e:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001680:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800168c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800168e:	2d01      	cmp	r5, #1
 8001690:	d1df      	bne.n	8001652 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001692:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001696:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001698:	4305      	orrs	r5, r0
 800169a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800169e:	888d      	ldrh	r5, [r1, #4]
 80016a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a8:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ac:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016ae:	898d      	ldrh	r5, [r1, #12]
 80016b0:	e7cb      	b.n	800164a <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016b6:	4302      	orrs	r2, r0
 80016b8:	e7d0      	b.n	800165c <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016be:	4302      	orrs	r2, r0
 80016c0:	e7d3      	b.n	800166a <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
 80016cc:	e7de      	b.n	800168c <HAL_CAN_ConfigFilter+0x96>

080016ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016d0:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80016d4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d11f      	bne.n	800171a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016da:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016dc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016de:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ea:	f7ff fef1 	bl	80014d0 <HAL_GetTick>
 80016ee:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	6858      	ldr	r0, [r3, #4]
 80016f4:	f010 0001 	ands.w	r0, r0, #1
 80016f8:	d101      	bne.n	80016fe <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fa:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80016fc:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016fe:	f7ff fee7 	bl	80014d0 <HAL_GetTick>
 8001702:	1b40      	subs	r0, r0, r5
 8001704:	280a      	cmp	r0, #10
 8001706:	d9f3      	bls.n	80016f0 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001710:	2305      	movs	r3, #5
 8001712:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	e7f0      	b.n	80016fc <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800171a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800171c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001720:	6243      	str	r3, [r0, #36]	; 0x24
 8001722:	e7f8      	b.n	8001716 <HAL_CAN_Start+0x48>

08001724 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001726:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800172a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800172c:	3d01      	subs	r5, #1
 800172e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001730:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001732:	d840      	bhi.n	80017b6 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001734:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001738:	d039      	beq.n	80017ae <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800173a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800173e:	2c03      	cmp	r4, #3
 8001740:	f04f 0501 	mov.w	r5, #1
 8001744:	d105      	bne.n	8001752 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001746:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	e027      	b.n	80017a2 <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001752:	40a5      	lsls	r5, r4
 8001754:	601d      	str	r5, [r3, #0]
 8001756:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800175a:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 800175e:	bb08      	cbnz	r0, 80017a4 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001760:	6808      	ldr	r0, [r1, #0]
 8001762:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800176a:	6908      	ldr	r0, [r1, #16]
 800176c:	0124      	lsls	r4, r4, #4
 800176e:	1933      	adds	r3, r6, r4
 8001770:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 8001774:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001776:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001778:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 800177a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800177c:	bf02      	ittt	eq
 800177e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001782:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001786:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800178a:	6851      	ldr	r1, [r2, #4]
 800178c:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001796:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a4:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80017a6:	4338      	orrs	r0, r7
 80017a8:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80017ac:	e7db      	b.n	8001766 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	e7ca      	b.n	800174c <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	e7c6      	b.n	800174c <HAL_CAN_AddTxMessage+0x28>

080017be <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80017be:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c2:	3b01      	subs	r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d805      	bhi.n	80017d4 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017c8:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80017ca:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017cc:	6953      	ldr	r3, [r2, #20]
 80017ce:	4319      	orrs	r1, r3
 80017d0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80017d2:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
  }
}
 80017de:	4770      	bx	lr

080017e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017e2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80017fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b570      	push	{r4, r5, r6, lr}
 8001808:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001812:	f1c4 0507 	rsb	r5, r4, #7
 8001816:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001818:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	bf28      	it	cs
 800181e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001820:	2b06      	cmp	r3, #6
 8001822:	bf98      	it	ls
 8001824:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001826:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	bf88      	it	hi
 800182c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182e:	ea21 0303 	bic.w	r3, r1, r3
 8001832:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	fa06 f404 	lsl.w	r4, r6, r4
 8001838:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 800183c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	bfa8      	it	ge
 8001844:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001848:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	bfb8      	it	lt
 800184e:	4a06      	ldrlt	r2, [pc, #24]	; (8001868 <HAL_NVIC_SetPriority+0x64>)
 8001850:	b2db      	uxtb	r3, r3
 8001852:	bfb5      	itete	lt
 8001854:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	e000ed14 	.word	0xe000ed14

0800186c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800186c:	2301      	movs	r3, #1
 800186e:	0942      	lsrs	r2, r0, #5
 8001870:	f000 001f 	and.w	r0, r0, #31
 8001874:	fa03 f000 	lsl.w	r0, r3, r0
 8001878:	4b01      	ldr	r3, [pc, #4]	; (8001880 <HAL_NVIC_EnableIRQ+0x14>)
 800187a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	3801      	subs	r0, #1
 8001886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800188a:	d20a      	bcs.n	80018a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80018b4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d003      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	2304      	movs	r3, #4
 80018bc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80018be:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80018c0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c2:	6803      	ldr	r3, [r0, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f022 020e 	bic.w	r2, r2, #14
 80018ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018d4:	4a18      	ldr	r2, [pc, #96]	; (8001938 <HAL_DMA_Abort_IT+0x88>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01f      	beq.n	800191a <HAL_DMA_Abort_IT+0x6a>
 80018da:	3214      	adds	r2, #20
 80018dc:	4293      	cmp	r3, r2
 80018de:	d01e      	beq.n	800191e <HAL_DMA_Abort_IT+0x6e>
 80018e0:	3214      	adds	r2, #20
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01d      	beq.n	8001922 <HAL_DMA_Abort_IT+0x72>
 80018e6:	3214      	adds	r2, #20
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d01d      	beq.n	8001928 <HAL_DMA_Abort_IT+0x78>
 80018ec:	3214      	adds	r2, #20
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_Abort_IT+0x7e>
 80018f2:	3214      	adds	r2, #20
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf0c      	ite	eq
 80018f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80018fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001902:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001904:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	2301      	movs	r3, #1
 8001908:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800190c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800190e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001912:	b17b      	cbz	r3, 8001934 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001914:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001916:	4620      	mov	r0, r4
 8001918:	e7d2      	b.n	80018c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800191a:	2301      	movs	r3, #1
 800191c:	e7f0      	b.n	8001900 <HAL_DMA_Abort_IT+0x50>
 800191e:	2310      	movs	r3, #16
 8001920:	e7ee      	b.n	8001900 <HAL_DMA_Abort_IT+0x50>
 8001922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001926:	e7eb      	b.n	8001900 <HAL_DMA_Abort_IT+0x50>
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	e7e8      	b.n	8001900 <HAL_DMA_Abort_IT+0x50>
 800192e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001932:	e7e5      	b.n	8001900 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	4618      	mov	r0, r3
 8001936:	e7c3      	b.n	80018c0 <HAL_DMA_Abort_IT+0x10>
 8001938:	40020008 	.word	0x40020008
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001944:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001946:	4616      	mov	r6, r2
 8001948:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001af0 <HAL_GPIO_Init+0x1b0>
 800194e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001af4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001952:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001958:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001960:	45a0      	cmp	r8, r4
 8001962:	d17e      	bne.n	8001a62 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001964:	684d      	ldr	r5, [r1, #4]
 8001966:	2d12      	cmp	r5, #18
 8001968:	f000 80ae 	beq.w	8001ac8 <HAL_GPIO_Init+0x188>
 800196c:	f200 8087 	bhi.w	8001a7e <HAL_GPIO_Init+0x13e>
 8001970:	2d02      	cmp	r5, #2
 8001972:	f000 80a6 	beq.w	8001ac2 <HAL_GPIO_Init+0x182>
 8001976:	d87b      	bhi.n	8001a70 <HAL_GPIO_Init+0x130>
 8001978:	2d00      	cmp	r5, #0
 800197a:	f000 808d 	beq.w	8001a98 <HAL_GPIO_Init+0x158>
 800197e:	2d01      	cmp	r5, #1
 8001980:	f000 809d 	beq.w	8001abe <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001984:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001988:	2cff      	cmp	r4, #255	; 0xff
 800198a:	bf93      	iteet	ls
 800198c:	4682      	movls	sl, r0
 800198e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001992:	3d08      	subhi	r5, #8
 8001994:	f8d0 b000 	ldrls.w	fp, [r0]
 8001998:	bf92      	itee	ls
 800199a:	00b5      	lslls	r5, r6, #2
 800199c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80019a0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a2:	fa09 f805 	lsl.w	r8, r9, r5
 80019a6:	ea2b 0808 	bic.w	r8, fp, r8
 80019aa:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ae:	bf88      	it	hi
 80019b0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b4:	ea48 0505 	orr.w	r5, r8, r5
 80019b8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019bc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80019c0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80019c4:	d04d      	beq.n	8001a62 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4f47      	ldr	r7, [pc, #284]	; (8001ae4 <HAL_GPIO_Init+0x1a4>)
 80019c8:	f026 0803 	bic.w	r8, r6, #3
 80019cc:	69bd      	ldr	r5, [r7, #24]
 80019ce:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80019d2:	f045 0501 	orr.w	r5, r5, #1
 80019d6:	61bd      	str	r5, [r7, #24]
 80019d8:	69bd      	ldr	r5, [r7, #24]
 80019da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80019de:	f005 0501 	and.w	r5, r5, #1
 80019e2:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019e4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80019ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019f2:	fa09 f90b 	lsl.w	r9, r9, fp
 80019f6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	4d3b      	ldr	r5, [pc, #236]	; (8001ae8 <HAL_GPIO_Init+0x1a8>)
 80019fc:	42a8      	cmp	r0, r5
 80019fe:	d068      	beq.n	8001ad2 <HAL_GPIO_Init+0x192>
 8001a00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a04:	42a8      	cmp	r0, r5
 8001a06:	d066      	beq.n	8001ad6 <HAL_GPIO_Init+0x196>
 8001a08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0c:	42a8      	cmp	r0, r5
 8001a0e:	d064      	beq.n	8001ada <HAL_GPIO_Init+0x19a>
 8001a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a14:	42a8      	cmp	r0, r5
 8001a16:	bf0c      	ite	eq
 8001a18:	2503      	moveq	r5, #3
 8001a1a:	2504      	movne	r5, #4
 8001a1c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001a20:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001a24:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a28:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2e:	bf14      	ite	ne
 8001a30:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a32:	43a5      	biceq	r5, r4
 8001a34:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a36:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3c:	bf14      	ite	ne
 8001a3e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a40:	43a5      	biceq	r5, r4
 8001a42:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a44:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a46:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4a:	bf14      	ite	ne
 8001a4c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4e:	43a5      	biceq	r5, r4
 8001a50:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a52:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a58:	bf14      	ite	ne
 8001a5a:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5c:	ea25 0404 	biceq.w	r4, r5, r4
 8001a60:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	3601      	adds	r6, #1
 8001a64:	2e10      	cmp	r6, #16
 8001a66:	f47f af74 	bne.w	8001952 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001a70:	2d03      	cmp	r5, #3
 8001a72:	d022      	beq.n	8001aba <HAL_GPIO_Init+0x17a>
 8001a74:	2d11      	cmp	r5, #17
 8001a76:	d185      	bne.n	8001984 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a78:	68ca      	ldr	r2, [r1, #12]
 8001a7a:	3204      	adds	r2, #4
          break;
 8001a7c:	e782      	b.n	8001984 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a7e:	4f1b      	ldr	r7, [pc, #108]	; (8001aec <HAL_GPIO_Init+0x1ac>)
 8001a80:	42bd      	cmp	r5, r7
 8001a82:	d009      	beq.n	8001a98 <HAL_GPIO_Init+0x158>
 8001a84:	d812      	bhi.n	8001aac <HAL_GPIO_Init+0x16c>
 8001a86:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001af8 <HAL_GPIO_Init+0x1b8>
 8001a8a:	454d      	cmp	r5, r9
 8001a8c:	d004      	beq.n	8001a98 <HAL_GPIO_Init+0x158>
 8001a8e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a92:	454d      	cmp	r5, r9
 8001a94:	f47f af76 	bne.w	8001984 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a98:	688a      	ldr	r2, [r1, #8]
 8001a9a:	b1c2      	cbz	r2, 8001ace <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a9c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001a9e:	bf0c      	ite	eq
 8001aa0:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001aa4:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	e76b      	b.n	8001984 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001aac:	4565      	cmp	r5, ip
 8001aae:	d0f3      	beq.n	8001a98 <HAL_GPIO_Init+0x158>
 8001ab0:	4575      	cmp	r5, lr
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_GPIO_Init+0x158>
 8001ab4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001afc <HAL_GPIO_Init+0x1bc>
 8001ab8:	e7eb      	b.n	8001a92 <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aba:	2200      	movs	r2, #0
 8001abc:	e762      	b.n	8001984 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001abe:	68ca      	ldr	r2, [r1, #12]
          break;
 8001ac0:	e760      	b.n	8001984 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac2:	68ca      	ldr	r2, [r1, #12]
 8001ac4:	3208      	adds	r2, #8
          break;
 8001ac6:	e75d      	b.n	8001984 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac8:	68ca      	ldr	r2, [r1, #12]
 8001aca:	320c      	adds	r2, #12
          break;
 8001acc:	e75a      	b.n	8001984 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2204      	movs	r2, #4
 8001ad0:	e758      	b.n	8001984 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	e7a2      	b.n	8001a1c <HAL_GPIO_Init+0xdc>
 8001ad6:	2501      	movs	r5, #1
 8001ad8:	e7a0      	b.n	8001a1c <HAL_GPIO_Init+0xdc>
 8001ada:	2502      	movs	r5, #2
 8001adc:	e79e      	b.n	8001a1c <HAL_GPIO_Init+0xdc>
 8001ade:	bf00      	nop
 8001ae0:	40010400 	.word	0x40010400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10110000 	.word	0x10110000
 8001afc:	10220000 	.word	0x10220000

08001b00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	b10a      	cbz	r2, 8001b06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b02:	6101      	str	r1, [r0, #16]
  }
}
 8001b04:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	0409      	lsls	r1, r1, #16
 8001b08:	e7fb      	b.n	8001b02 <HAL_GPIO_WritePin+0x2>
	...

08001b0c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0c:	6803      	ldr	r3, [r0, #0]
{
 8001b0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	07db      	lsls	r3, r3, #31
{
 8001b14:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	d410      	bmi.n	8001b3a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	079f      	lsls	r7, r3, #30
 8001b1c:	d45e      	bmi.n	8001bdc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	0719      	lsls	r1, r3, #28
 8001b22:	f100 8095 	bmi.w	8001c50 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	075a      	lsls	r2, r3, #29
 8001b2a:	f100 80bf 	bmi.w	8001cac <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	69ea      	ldr	r2, [r5, #28]
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	f040 812d 	bne.w	8001d90 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001b36:	2000      	movs	r0, #0
 8001b38:	e014      	b.n	8001b64 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b3a:	4c90      	ldr	r4, [pc, #576]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d007      	beq.n	8001b56 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
 8001b50:	6863      	ldr	r3, [r4, #4]
 8001b52:	03de      	lsls	r6, r3, #15
 8001b54:	d509      	bpl.n	8001b6a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	039c      	lsls	r4, r3, #14
 8001b5a:	d5dd      	bpl.n	8001b18 <HAL_RCC_OscConfig+0xc>
 8001b5c:	686b      	ldr	r3, [r5, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1da      	bne.n	8001b18 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001b62:	2001      	movs	r0, #1
}
 8001b64:	b002      	add	sp, #8
 8001b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	686b      	ldr	r3, [r5, #4]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d110      	bne.n	8001b94 <HAL_RCC_OscConfig+0x88>
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fca9 	bl	80014d0 <HAL_GetTick>
 8001b7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	0398      	lsls	r0, r3, #14
 8001b84:	d4c8      	bmi.n	8001b18 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b86:	f7ff fca3 	bl	80014d0 <HAL_GetTick>
 8001b8a:	1b80      	subs	r0, r0, r6
 8001b8c:	2864      	cmp	r0, #100	; 0x64
 8001b8e:	d9f7      	bls.n	8001b80 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
 8001b92:	e7e7      	b.n	8001b64 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	b99b      	cbnz	r3, 8001bbe <HAL_RCC_OscConfig+0xb2>
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6023      	str	r3, [r4, #0]
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fc93 	bl	80014d0 <HAL_GetTick>
 8001baa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	0399      	lsls	r1, r3, #14
 8001bb0:	d5b2      	bpl.n	8001b18 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fc8d 	bl	80014d0 <HAL_GetTick>
 8001bb6:	1b80      	subs	r0, r0, r6
 8001bb8:	2864      	cmp	r0, #100	; 0x64
 8001bba:	d9f7      	bls.n	8001bac <HAL_RCC_OscConfig+0xa0>
 8001bbc:	e7e8      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	d103      	bne.n	8001bce <HAL_RCC_OscConfig+0xc2>
 8001bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bca:	6023      	str	r3, [r4, #0]
 8001bcc:	e7d1      	b.n	8001b72 <HAL_RCC_OscConfig+0x66>
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6023      	str	r3, [r4, #0]
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	e7cd      	b.n	8001b78 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bdc:	4c67      	ldr	r4, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	f013 0f0c 	tst.w	r3, #12
 8001be4:	d007      	beq.n	8001bf6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001be6:	6863      	ldr	r3, [r4, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d110      	bne.n	8001c12 <HAL_RCC_OscConfig+0x106>
 8001bf0:	6863      	ldr	r3, [r4, #4]
 8001bf2:	03da      	lsls	r2, r3, #15
 8001bf4:	d40d      	bmi.n	8001c12 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	079b      	lsls	r3, r3, #30
 8001bfa:	d502      	bpl.n	8001c02 <HAL_RCC_OscConfig+0xf6>
 8001bfc:	692b      	ldr	r3, [r5, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d1af      	bne.n	8001b62 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	696a      	ldr	r2, [r5, #20]
 8001c06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c0e:	6023      	str	r3, [r4, #0]
 8001c10:	e785      	b.n	8001b1e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c12:	692a      	ldr	r2, [r5, #16]
 8001c14:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c16:	b16a      	cbz	r2, 8001c34 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc58 	bl	80014d0 <HAL_GetTick>
 8001c20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	079f      	lsls	r7, r3, #30
 8001c26:	d4ec      	bmi.n	8001c02 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc52 	bl	80014d0 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9f7      	bls.n	8001c22 <HAL_RCC_OscConfig+0x116>
 8001c32:	e7ad      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001c34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c36:	f7ff fc4b 	bl	80014d0 <HAL_GetTick>
 8001c3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	0798      	lsls	r0, r3, #30
 8001c40:	f57f af6d 	bpl.w	8001b1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc44 	bl	80014d0 <HAL_GetTick>
 8001c48:	1b80      	subs	r0, r0, r6
 8001c4a:	2802      	cmp	r0, #2
 8001c4c:	d9f6      	bls.n	8001c3c <HAL_RCC_OscConfig+0x130>
 8001c4e:	e79f      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c50:	69aa      	ldr	r2, [r5, #24]
 8001c52:	4c4a      	ldr	r4, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001c56:	b1da      	cbz	r2, 8001c90 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fc38 	bl	80014d0 <HAL_GetTick>
 8001c60:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c64:	079b      	lsls	r3, r3, #30
 8001c66:	d50d      	bpl.n	8001c84 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c68:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c74:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001c76:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	9201      	str	r2, [sp, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_RCC_OscConfig+0x16a>
 8001c82:	e750      	b.n	8001b26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc24 	bl	80014d0 <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	d9e9      	bls.n	8001c62 <HAL_RCC_OscConfig+0x156>
 8001c8e:	e77f      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001c90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c92:	f7ff fc1d 	bl	80014d0 <HAL_GetTick>
 8001c96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c9a:	079f      	lsls	r7, r3, #30
 8001c9c:	f57f af43 	bpl.w	8001b26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc16 	bl	80014d0 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	2802      	cmp	r0, #2
 8001ca8:	d9f6      	bls.n	8001c98 <HAL_RCC_OscConfig+0x18c>
 8001caa:	e771      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cac:	4c33      	ldr	r4, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cae:	69e3      	ldr	r3, [r4, #28]
 8001cb0:	00d8      	lsls	r0, r3, #3
 8001cb2:	d424      	bmi.n	8001cfe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001cb4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	69e3      	ldr	r3, [r4, #28]
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61e3      	str	r3, [r4, #28]
 8001cbe:	69e3      	ldr	r3, [r4, #28]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4e30      	ldr	r6, [pc, #192]	; (8001d8c <HAL_RCC_OscConfig+0x280>)
 8001cca:	6833      	ldr	r3, [r6, #0]
 8001ccc:	05d9      	lsls	r1, r3, #23
 8001cce:	d518      	bpl.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	68eb      	ldr	r3, [r5, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d126      	bne.n	8001d24 <HAL_RCC_OscConfig+0x218>
 8001cd6:	6a23      	ldr	r3, [r4, #32]
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cde:	f7ff fbf7 	bl	80014d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ce6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	6a23      	ldr	r3, [r4, #32]
 8001cea:	079b      	lsls	r3, r3, #30
 8001cec:	d53f      	bpl.n	8001d6e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001cee:	2f00      	cmp	r7, #0
 8001cf0:	f43f af1d 	beq.w	8001b2e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	69e3      	ldr	r3, [r4, #28]
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	61e3      	str	r3, [r4, #28]
 8001cfc:	e717      	b.n	8001b2e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2700      	movs	r7, #0
 8001d00:	e7e2      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fbe1 	bl	80014d0 <HAL_GetTick>
 8001d0e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	6833      	ldr	r3, [r6, #0]
 8001d12:	05da      	lsls	r2, r3, #23
 8001d14:	d4dc      	bmi.n	8001cd0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7ff fbdb 	bl	80014d0 <HAL_GetTick>
 8001d1a:	eba0 0008 	sub.w	r0, r0, r8
 8001d1e:	2864      	cmp	r0, #100	; 0x64
 8001d20:	d9f6      	bls.n	8001d10 <HAL_RCC_OscConfig+0x204>
 8001d22:	e735      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	b9ab      	cbnz	r3, 8001d52 <HAL_RCC_OscConfig+0x246>
 8001d26:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6223      	str	r3, [r4, #32]
 8001d32:	6a23      	ldr	r3, [r4, #32]
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fbc9 	bl	80014d0 <HAL_GetTick>
 8001d3e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	6a23      	ldr	r3, [r4, #32]
 8001d42:	0798      	lsls	r0, r3, #30
 8001d44:	d5d3      	bpl.n	8001cee <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fbc3 	bl	80014d0 <HAL_GetTick>
 8001d4a:	1b80      	subs	r0, r0, r6
 8001d4c:	4540      	cmp	r0, r8
 8001d4e:	d9f7      	bls.n	8001d40 <HAL_RCC_OscConfig+0x234>
 8001d50:	e71e      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	6a23      	ldr	r3, [r4, #32]
 8001d56:	d103      	bne.n	8001d60 <HAL_RCC_OscConfig+0x254>
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6223      	str	r3, [r4, #32]
 8001d5e:	e7ba      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1ca>
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6223      	str	r3, [r4, #32]
 8001d66:	6a23      	ldr	r3, [r4, #32]
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	e7b6      	b.n	8001cdc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff fbaf 	bl	80014d0 <HAL_GetTick>
 8001d72:	eba0 0008 	sub.w	r0, r0, r8
 8001d76:	42b0      	cmp	r0, r6
 8001d78:	d9b6      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1dc>
 8001d7a:	e709      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	42420000 	.word	0x42420000
 8001d84:	42420480 	.word	0x42420480
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4c22      	ldr	r4, [pc, #136]	; (8001e1c <HAL_RCC_OscConfig+0x310>)
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	f43f aee2 	beq.w	8001b62 <HAL_RCC_OscConfig+0x56>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	4e1f      	ldr	r6, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001da4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	d12b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb92 	bl	80014d0 <HAL_GetTick>
 8001dac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	0199      	lsls	r1, r3, #6
 8001db2:	d41f      	bmi.n	8001df4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db4:	6a2b      	ldr	r3, [r5, #32]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dbc:	6862      	ldr	r2, [r4, #4]
 8001dbe:	68a9      	ldr	r1, [r5, #8]
 8001dc0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001dca:	6862      	ldr	r2, [r4, #4]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb79 	bl	80014d0 <HAL_GetTick>
 8001dde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	019a      	lsls	r2, r3, #6
 8001de4:	f53f aea7 	bmi.w	8001b36 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fb72 	bl	80014d0 <HAL_GetTick>
 8001dec:	1b40      	subs	r0, r0, r5
 8001dee:	2802      	cmp	r0, #2
 8001df0:	d9f6      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2d4>
 8001df2:	e6cd      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fb6c 	bl	80014d0 <HAL_GetTick>
 8001df8:	1bc0      	subs	r0, r0, r7
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9d7      	bls.n	8001dae <HAL_RCC_OscConfig+0x2a2>
 8001dfe:	e6c7      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001e00:	f7ff fb66 	bl	80014d0 <HAL_GetTick>
 8001e04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	f57f ae94 	bpl.w	8001b36 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fb5f 	bl	80014d0 <HAL_GetTick>
 8001e12:	1b40      	subs	r0, r0, r5
 8001e14:	2802      	cmp	r0, #2
 8001e16:	d9f6      	bls.n	8001e06 <HAL_RCC_OscConfig+0x2fa>
 8001e18:	e6ba      	b.n	8001b90 <HAL_RCC_OscConfig+0x84>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	42420060 	.word	0x42420060

08001e24 <HAL_RCC_GetSysClockFreq>:
{
 8001e24:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001e28:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e2a:	ac02      	add	r4, sp, #8
 8001e2c:	f103 0510 	add.w	r5, r3, #16
 8001e30:	4622      	mov	r2, r4
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	3308      	adds	r3, #8
 8001e38:	c203      	stmia	r2!, {r0, r1}
 8001e3a:	42ab      	cmp	r3, r5
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	d1f7      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e40:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e46:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001e4a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	f003 020c 	and.w	r2, r3, #12
 8001e50:	2a08      	cmp	r2, #8
 8001e52:	d117      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e54:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001e58:	a806      	add	r0, sp, #24
 8001e5a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e5c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e5e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e62:	d50c      	bpl.n	8001e7e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e64:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e68:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6e:	aa06      	add	r2, sp, #24
 8001e70:	4413      	add	r3, r2
 8001e72:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e76:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001e7a:	b007      	add	sp, #28
 8001e7c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x70>)
 8001e80:	4350      	muls	r0, r2
 8001e82:	e7fa      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001e86:	e7f8      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x56>
 8001e88:	08009440 	.word	0x08009440
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	003d0900 	.word	0x003d0900

08001e98 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x150>)
{
 8001e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e9e:	6813      	ldr	r3, [r2, #0]
{
 8001ea0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	428b      	cmp	r3, r1
{
 8001ea8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eaa:	d328      	bcc.n	8001efe <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	6829      	ldr	r1, [r5, #0]
 8001eae:	078c      	lsls	r4, r1, #30
 8001eb0:	d432      	bmi.n	8001f18 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	07ca      	lsls	r2, r1, #31
 8001eb4:	d445      	bmi.n	8001f42 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_RCC_ClockConfig+0x150>)
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	42b3      	cmp	r3, r6
 8001ec0:	d87f      	bhi.n	8001fc2 <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec2:	682a      	ldr	r2, [r5, #0]
 8001ec4:	4c49      	ldr	r4, [pc, #292]	; (8001fec <HAL_RCC_ClockConfig+0x154>)
 8001ec6:	f012 0f04 	tst.w	r2, #4
 8001eca:	f040 8085 	bne.w	8001fd8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	0713      	lsls	r3, r2, #28
 8001ed0:	d506      	bpl.n	8001ee0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed2:	6863      	ldr	r3, [r4, #4]
 8001ed4:	692a      	ldr	r2, [r5, #16]
 8001ed6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001eda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ede:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee0:	f7ff ffa0 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001ee4:	6863      	ldr	r3, [r4, #4]
 8001ee6:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <HAL_RCC_ClockConfig+0x158>)
 8001ee8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <HAL_RCC_ClockConfig+0x15c>)
 8001ef2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff faa9 	bl	800144c <HAL_InitTick>
  return HAL_OK;
 8001efa:	2000      	movs	r0, #0
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f023 0307 	bic.w	r3, r3, #7
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	428b      	cmp	r3, r1
 8001f10:	d0cc      	beq.n	8001eac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
}
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1e:	bf1e      	ittt	ne
 8001f20:	685a      	ldrne	r2, [r3, #4]
 8001f22:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001f26:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2a:	bf42      	ittt	mi
 8001f2c:	685a      	ldrmi	r2, [r3, #4]
 8001f2e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001f32:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	68a8      	ldr	r0, [r5, #8]
 8001f38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e7b7      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	686a      	ldr	r2, [r5, #4]
 8001f44:	4c29      	ldr	r4, [pc, #164]	; (8001fec <HAL_RCC_ClockConfig+0x154>)
 8001f46:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f48:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	d11b      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	d0df      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001f60:	f7ff fab6 	bl	80014d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f64:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f66:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d113      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6c:	6863      	ldr	r3, [r4, #4]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d09f      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7ff faab 	bl	80014d0 <HAL_GetTick>
 8001f7a:	1bc0      	subs	r0, r0, r7
 8001f7c:	4540      	cmp	r0, r8
 8001f7e:	d9f5      	bls.n	8001f6c <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001f80:	2003      	movs	r0, #3
 8001f82:	e7c7      	b.n	8001f14 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f84:	2a02      	cmp	r2, #2
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f8c:	e7e0      	b.n	8001f50 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	f013 0f02 	tst.w	r3, #2
 8001f92:	e7dd      	b.n	8001f50 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d10f      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d089      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7ff fa95 	bl	80014d0 <HAL_GetTick>
 8001fa6:	1bc0      	subs	r0, r0, r7
 8001fa8:	4540      	cmp	r0, r8
 8001faa:	d9f5      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x100>
 8001fac:	e7e8      	b.n	8001f80 <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7ff fa8f 	bl	80014d0 <HAL_GetTick>
 8001fb2:	1bc0      	subs	r0, r0, r7
 8001fb4:	4540      	cmp	r0, r8
 8001fb6:	d8e3      	bhi.n	8001f80 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	f013 0f0c 	tst.w	r3, #12
 8001fbe:	d1f6      	bne.n	8001fae <HAL_RCC_ClockConfig+0x116>
 8001fc0:	e779      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f023 0307 	bic.w	r3, r3, #7
 8001fc8:	4333      	orrs	r3, r6
 8001fca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	42b3      	cmp	r3, r6
 8001fd4:	d19d      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x7a>
 8001fd6:	e774      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	6863      	ldr	r3, [r4, #4]
 8001fda:	68e9      	ldr	r1, [r5, #12]
 8001fdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	e773      	b.n	8001ece <HAL_RCC_ClockConfig+0x36>
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08009470 	.word	0x08009470
 8001ff4:	20000008 	.word	0x20000008

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002006:	6810      	ldr	r0, [r2, #0]
}    
 8002008:	40d8      	lsrs	r0, r3
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	08009480 	.word	0x08009480
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_RCC_GetPCLK2Freq+0x14>)
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x18>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002026:	6810      	ldr	r0, [r2, #0]
} 
 8002028:	40d8      	lsrs	r0, r3
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000
 8002030:	08009480 	.word	0x08009480
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002038:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800203a:	4604      	mov	r4, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d034      	beq.n	80020aa <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002044:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002048:	b90b      	cbnz	r3, 800204e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800204a:	f002 fc1d 	bl	8004888 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800204e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002050:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002052:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002056:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002058:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800205a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002060:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002064:	4303      	orrs	r3, r0
 8002066:	68e0      	ldr	r0, [r4, #12]
 8002068:	4303      	orrs	r3, r0
 800206a:	6920      	ldr	r0, [r4, #16]
 800206c:	4303      	orrs	r3, r0
 800206e:	6960      	ldr	r0, [r4, #20]
 8002070:	4303      	orrs	r3, r0
 8002072:	69e0      	ldr	r0, [r4, #28]
 8002074:	4303      	orrs	r3, r0
 8002076:	6a20      	ldr	r0, [r4, #32]
 8002078:	4303      	orrs	r3, r0
 800207a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800207c:	4303      	orrs	r3, r0
 800207e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002082:	4303      	orrs	r3, r0
 8002084:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002086:	0c12      	lsrs	r2, r2, #16
 8002088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208a:	f002 0204 	and.w	r2, r2, #4
 800208e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002092:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002094:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002096:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002098:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800209a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800209e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80020a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80020a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 80020a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020aa:	2001      	movs	r0, #1
 80020ac:	e7fc      	b.n	80020a8 <HAL_SPI_Init+0x70>

080020ae <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ae:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80020b0:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c4:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80020c6:	b189      	cbz	r1, 80020ec <HAL_TIM_Encoder_Start+0x28>
 80020c8:	2904      	cmp	r1, #4
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	f022 0210 	bic.w	r2, r2, #16
 80020e2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	f042 0210 	orr.w	r2, r2, #16
 80020ea:	e006      	b.n	80020fa <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 80020fc:	681a      	ldr	r2, [r3, #0]
}
 80020fe:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002108:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800210c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800210e:	2b01      	cmp	r3, #1
 8002110:	f04f 0302 	mov.w	r3, #2
 8002114:	d01c      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x48>
 8002116:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800211c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800211e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002122:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002124:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002128:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800212c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800212e:	680a      	ldr	r2, [r1, #0]
 8002130:	2a40      	cmp	r2, #64	; 0x40
 8002132:	d079      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x120>
 8002134:	d819      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x62>
 8002136:	2a10      	cmp	r2, #16
 8002138:	f000 8093 	beq.w	8002262 <HAL_TIM_ConfigClockSource+0x15a>
 800213c:	d80a      	bhi.n	8002154 <HAL_TIM_ConfigClockSource+0x4c>
 800213e:	2a00      	cmp	r2, #0
 8002140:	f000 8089 	beq.w	8002256 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002144:	2301      	movs	r3, #1
 8002146:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800214a:	2300      	movs	r3, #0
 800214c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002150:	4618      	mov	r0, r3
}
 8002152:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002154:	2a20      	cmp	r2, #32
 8002156:	f000 808a 	beq.w	800226e <HAL_TIM_ConfigClockSource+0x166>
 800215a:	2a30      	cmp	r2, #48	; 0x30
 800215c:	d1f2      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 800215e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002164:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002168:	e036      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800216a:	2a70      	cmp	r2, #112	; 0x70
 800216c:	d036      	beq.n	80021dc <HAL_TIM_ConfigClockSource+0xd4>
 800216e:	d81b      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0xa0>
 8002170:	2a50      	cmp	r2, #80	; 0x50
 8002172:	d042      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xf2>
 8002174:	2a60      	cmp	r2, #96	; 0x60
 8002176:	d1e5      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002178:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800217a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800217c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002180:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002182:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002184:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002186:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002188:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800218c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002190:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002194:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002198:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800219a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800219c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800219e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021a2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80021a6:	e017      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80021a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021ac:	d011      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xca>
 80021ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021b2:	d1c7      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b4:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80021b8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ba:	68c9      	ldr	r1, [r1, #12]
 80021bc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021be:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021c6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021c8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021d0:	e002      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	e7b3      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 80021dc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021de:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80021e2:	68c9      	ldr	r1, [r1, #12]
 80021e4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021ee:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80021f0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021f2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80021f8:	e7ee      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fa:	684c      	ldr	r4, [r1, #4]
 80021fc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021fe:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002200:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002202:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002206:	f025 0501 	bic.w	r5, r5, #1
 800220a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800220e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002210:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002214:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800221c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002222:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002226:	e7d7      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002228:	684c      	ldr	r4, [r1, #4]
 800222a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800222c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800222e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002230:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002234:	f025 0501 	bic.w	r5, r5, #1
 8002238:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800223a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800223c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800223e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002242:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002248:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800224a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800224c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002250:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002254:	e7c0      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002256:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002258:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800225c:	f042 0207 	orr.w	r2, r2, #7
 8002260:	e7ba      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002262:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002264:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002268:	f042 0217 	orr.w	r2, r2, #23
 800226c:	e7b4      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800226e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002270:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002274:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002278:	e7ae      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0xd0>
	...

0800227c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800227e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002280:	4290      	cmp	r0, r2
 8002282:	d00a      	beq.n	800229a <TIM_Base_SetConfig+0x1e>
 8002284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0x1e>
 800228a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800228e:	4290      	cmp	r0, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0x1e>
 8002292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002296:	4290      	cmp	r0, r2
 8002298:	d115      	bne.n	80022c6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800229a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80022a0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <TIM_Base_SetConfig+0x6c>)
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d00a      	beq.n	80022be <TIM_Base_SetConfig+0x42>
 80022a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0x42>
 80022ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022b2:	4290      	cmp	r0, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0x42>
 80022b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022ba:	4290      	cmp	r0, r2
 80022bc:	d103      	bne.n	80022c6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80022c6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80022c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80022cc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80022ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	688b      	ldr	r3, [r1, #8]
 80022d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80022d4:	680b      	ldr	r3, [r1, #0]
 80022d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <TIM_Base_SetConfig+0x6c>)
 80022da:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80022dc:	bf04      	itt	eq
 80022de:	690b      	ldreq	r3, [r1, #16]
 80022e0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80022e2:	2301      	movs	r3, #1
 80022e4:	6143      	str	r3, [r0, #20]
}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00

080022ec <HAL_TIM_Base_Init>:
{
 80022ec:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022ee:	4604      	mov	r4, r0
 80022f0:	b1a0      	cbz	r0, 800231c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022fa:	b91b      	cbnz	r3, 8002304 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002300:	f002 fb5a 	bl	80049b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002304:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002306:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230c:	1d21      	adds	r1, r4, #4
 800230e:	f7ff ffb5 	bl	800227c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002312:	2301      	movs	r3, #1
  return HAL_OK;
 8002314:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002316:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800231a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e7fc      	b.n	800231a <HAL_TIM_Base_Init+0x2e>

08002320 <HAL_TIM_Encoder_Init>:
{
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002322:	460c      	mov	r4, r1
  if(htim == NULL)
 8002324:	4605      	mov	r5, r0
 8002326:	2800      	cmp	r0, #0
 8002328:	d041      	beq.n	80023ae <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 800232a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800232e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002332:	b91b      	cbnz	r3, 800233c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002334:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002338:	f002 fae2 	bl	8004900 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800233c:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 800233e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002340:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002344:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002348:	6883      	ldr	r3, [r0, #8]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002350:	f7ff ff94 	bl	800227c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002354:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002356:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002358:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800235a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800235c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800235e:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002360:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002362:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002366:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800236a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800236e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002370:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002374:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002376:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800237e:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002380:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002382:	430b      	orrs	r3, r1
 8002384:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002386:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800238a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800238e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002390:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002392:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002396:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002398:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800239a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800239e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023a0:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80023a2:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80023a4:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80023a8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
 80023ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80023ae:	2001      	movs	r0, #1
 80023b0:	e7fc      	b.n	80023ac <HAL_TIM_Encoder_Init+0x8c>

080023b2 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80023b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80023b6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f04f 0302 	mov.w	r3, #2
 80023be:	d018      	beq.n	80023f2 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023c4:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80023c6:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023c8:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023ca:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80023cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023d0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4322      	orrs	r2, r4
 80023d6:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023de:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ec:	2300      	movs	r3, #0
 80023ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80023f2:	4618      	mov	r0, r3

  return HAL_OK;
}
 80023f4:	bd10      	pop	{r4, pc}

080023f6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f6:	6803      	ldr	r3, [r0, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002408:	2320      	movs	r3, #32
 800240a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800240e:	4770      	bx	lr

08002410 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002414:	4680      	mov	r8, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002416:	6803      	ldr	r3, [r0, #0]
 8002418:	68c1      	ldr	r1, [r0, #12]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	2419      	movs	r4, #25
 800241e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002426:	6882      	ldr	r2, [r0, #8]
 8002428:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 800242a:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800242c:	4302      	orrs	r2, r0
 800242e:	f8d8 0014 	ldr.w	r0, [r8, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002432:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002436:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800243a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8002446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800244a:	430a      	orrs	r2, r1
 800244c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800244e:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <UART_SetConfig+0x138>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d147      	bne.n	80024e4 <UART_SetConfig+0xd4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002454:	f7ff fde0 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002458:	fb04 f300 	mul.w	r3, r4, r0
 800245c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8002460:	2764      	movs	r7, #100	; 0x64
 8002462:	00b6      	lsls	r6, r6, #2
 8002464:	fbb3 f3f6 	udiv	r3, r3, r6
 8002468:	fbb3 f3f7 	udiv	r3, r3, r7
 800246c:	011e      	lsls	r6, r3, #4
 800246e:	f7ff fdd3 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002472:	4360      	muls	r0, r4
 8002474:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fbb0 f5f3 	udiv	r5, r0, r3
 800247e:	f7ff fdcb 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002482:	4360      	muls	r0, r4
 8002484:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002492:	fb07 5313 	mls	r3, r7, r3, r5
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	3332      	adds	r3, #50	; 0x32
 800249a:	fbb3 f3f7 	udiv	r3, r3, r7
 800249e:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 80024a2:	f7ff fdb9 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 80024a6:	4360      	muls	r0, r4
 80024a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	fbb0 f9f2 	udiv	r9, r0, r2
 80024b2:	f7ff fdb1 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024b6:	4360      	muls	r0, r4
 80024b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80024bc:	f8d8 2000 	ldr.w	r2, [r8]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80024ca:	fb07 9313 	mls	r3, r7, r3, r9
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	3332      	adds	r3, #50	; 0x32
 80024d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	432b      	orrs	r3, r5
 80024dc:	4433      	add	r3, r6
 80024de:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80024e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024e4:	f7ff fd88 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 80024e8:	fb04 f300 	mul.w	r3, r4, r0
 80024ec:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80024f0:	2764      	movs	r7, #100	; 0x64
 80024f2:	00b6      	lsls	r6, r6, #2
 80024f4:	fbb3 f3f6 	udiv	r3, r3, r6
 80024f8:	fbb3 f3f7 	udiv	r3, r3, r7
 80024fc:	011e      	lsls	r6, r3, #4
 80024fe:	f7ff fd7b 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002502:	4360      	muls	r0, r4
 8002504:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fbb0 f5f3 	udiv	r5, r0, r3
 800250e:	f7ff fd73 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002512:	4360      	muls	r0, r4
 8002514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002522:	fb07 5313 	mls	r3, r7, r3, r5
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	3332      	adds	r3, #50	; 0x32
 800252a:	fbb3 f3f7 	udiv	r3, r3, r7
 800252e:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8002532:	f7ff fd61 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002536:	4360      	muls	r0, r4
 8002538:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	fbb0 f9f2 	udiv	r9, r0, r2
 8002542:	f7ff fd59 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002546:	e7b6      	b.n	80024b6 <UART_SetConfig+0xa6>
 8002548:	40013800 	.word	0x40013800

0800254c <HAL_UART_Init>:
{
 800254c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	b340      	cbz	r0, 80025a4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800255c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002560:	f002 fa42 	bl	80049e8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002564:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002566:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002568:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800256c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800256e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002574:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002576:	f7ff ff4b 	bl	8002410 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800258c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002594:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002596:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800259a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800259e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80025a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
 80025a6:	e7fc      	b.n	80025a2 <HAL_UART_Init+0x56>

080025a8 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80025a8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d118      	bne.n	80025e2 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 80025b0:	b1a9      	cbz	r1, 80025de <HAL_UART_Transmit_IT+0x36>
 80025b2:	b1a2      	cbz	r2, 80025de <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 80025b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d012      	beq.n	80025e2 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 80025bc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 80025be:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c2:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 80025c4:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025c6:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ca:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025ce:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80025d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d8:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80025da:	4618      	mov	r0, r3
 80025dc:	4770      	bx	lr
      return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
 80025e0:	4770      	bx	lr
    return HAL_BUSY;
 80025e2:	2002      	movs	r0, #2
}
 80025e4:	4770      	bx	lr

080025e6 <HAL_UART_TxCpltCallback>:
 80025e6:	4770      	bx	lr

080025e8 <HAL_UART_RxCpltCallback>:
 80025e8:	4770      	bx	lr

080025ea <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80025ea:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80025ee:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80025f0:	2b22      	cmp	r3, #34	; 0x22
 80025f2:	d133      	bne.n	800265c <UART_Receive_IT+0x72>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025f4:	6881      	ldr	r1, [r0, #8]
 80025f6:	6904      	ldr	r4, [r0, #16]
 80025f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025fe:	6802      	ldr	r2, [r0, #0]
 8002600:	d123      	bne.n	800264a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002602:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002604:	b9ec      	cbnz	r4, 8002642 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800260a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800260e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002610:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002612:	3c01      	subs	r4, #1
 8002614:	b2a4      	uxth	r4, r4
 8002616:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002618:	b98c      	cbnz	r4, 800263e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800261a:	6803      	ldr	r3, [r0, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	f022 0220 	bic.w	r2, r2, #32
 8002622:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002634:	2320      	movs	r3, #32
 8002636:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800263a:	f7ff ffd5 	bl	80025e8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800263e:	2000      	movs	r0, #0
 8002640:	e00d      	b.n	800265e <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f823 2b01 	strh.w	r2, [r3], #1
 8002648:	e7e1      	b.n	800260e <UART_Receive_IT+0x24>
 800264a:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800264c:	6852      	ldr	r2, [r2, #4]
 800264e:	6281      	str	r1, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002650:	b90c      	cbnz	r4, 8002656 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e7dc      	b.n	8002610 <UART_Receive_IT+0x26>
 8002656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800265a:	e7fa      	b.n	8002652 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800265c:	2002      	movs	r0, #2
}
 800265e:	bd10      	pop	{r4, pc}

08002660 <HAL_UART_ErrorCallback>:
 8002660:	4770      	bx	lr
	...

08002664 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002664:	6803      	ldr	r3, [r0, #0]
{
 8002666:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002668:	681a      	ldr	r2, [r3, #0]
{
 800266a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 800266c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800266e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002670:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002672:	d107      	bne.n	8002684 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002674:	0696      	lsls	r6, r2, #26
 8002676:	d558      	bpl.n	800272a <HAL_UART_IRQHandler+0xc6>
 8002678:	068d      	lsls	r5, r1, #26
 800267a:	d556      	bpl.n	800272a <HAL_UART_IRQHandler+0xc6>
}
 800267c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002680:	f7ff bfb3 	b.w	80025ea <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002684:	f015 0501 	ands.w	r5, r5, #1
 8002688:	d102      	bne.n	8002690 <HAL_UART_IRQHandler+0x2c>
 800268a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800268e:	d04c      	beq.n	800272a <HAL_UART_IRQHandler+0xc6>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002690:	07d3      	lsls	r3, r2, #31
 8002692:	d505      	bpl.n	80026a0 <HAL_UART_IRQHandler+0x3c>
 8002694:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002696:	bf42      	ittt	mi
 8002698:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800269a:	f043 0301 	orrmi.w	r3, r3, #1
 800269e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a0:	0750      	lsls	r0, r2, #29
 80026a2:	d504      	bpl.n	80026ae <HAL_UART_IRQHandler+0x4a>
 80026a4:	b11d      	cbz	r5, 80026ae <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ae:	0793      	lsls	r3, r2, #30
 80026b0:	d504      	bpl.n	80026bc <HAL_UART_IRQHandler+0x58>
 80026b2:	b11d      	cbz	r5, 80026bc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026bc:	0716      	lsls	r6, r2, #28
 80026be:	d504      	bpl.n	80026ca <HAL_UART_IRQHandler+0x66>
 80026c0:	b11d      	cbz	r5, 80026ca <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026cc:	b343      	cbz	r3, 8002720 <HAL_UART_IRQHandler+0xbc>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ce:	0695      	lsls	r5, r2, #26
 80026d0:	d504      	bpl.n	80026dc <HAL_UART_IRQHandler+0x78>
 80026d2:	0688      	lsls	r0, r1, #26
 80026d4:	d502      	bpl.n	80026dc <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff ff87 	bl	80025ea <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026dc:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80026de:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026e0:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026e4:	0711      	lsls	r1, r2, #28
 80026e6:	d402      	bmi.n	80026ee <HAL_UART_IRQHandler+0x8a>
 80026e8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80026ec:	d019      	beq.n	8002722 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 80026ee:	f7ff fe82 	bl	80023f6 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	0652      	lsls	r2, r2, #25
 80026f8:	d50f      	bpl.n	800271a <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fa:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80026fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002702:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002704:	b148      	cbz	r0, 800271a <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_UART_IRQHandler+0x13c>)
 8002708:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270a:	f7ff f8d1 	bl	80018b0 <HAL_DMA_Abort_IT>
 800270e:	b138      	cbz	r0, 8002720 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002710:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002716:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002718:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff ffa0 	bl	8002660 <HAL_UART_ErrorCallback>
}
 8002720:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002722:	f7ff ff9d 	bl	8002660 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002728:	e7fa      	b.n	8002720 <HAL_UART_IRQHandler+0xbc>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800272a:	0616      	lsls	r6, r2, #24
 800272c:	d528      	bpl.n	8002780 <HAL_UART_IRQHandler+0x11c>
 800272e:	060d      	lsls	r5, r1, #24
 8002730:	d526      	bpl.n	8002780 <HAL_UART_IRQHandler+0x11c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002732:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002736:	2a21      	cmp	r2, #33	; 0x21
 8002738:	d1f2      	bne.n	8002720 <HAL_UART_IRQHandler+0xbc>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800273a:	68a1      	ldr	r1, [r4, #8]
 800273c:	6a22      	ldr	r2, [r4, #32]
 800273e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002742:	d118      	bne.n	8002776 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002744:	8811      	ldrh	r1, [r2, #0]
 8002746:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800274a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800274c:	6921      	ldr	r1, [r4, #16]
 800274e:	b981      	cbnz	r1, 8002772 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8002750:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002752:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002754:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002756:	3a01      	subs	r2, #1
 8002758:	b292      	uxth	r2, r2
 800275a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800275c:	2a00      	cmp	r2, #0
 800275e:	d1df      	bne.n	8002720 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002766:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e7d6      	b.n	8002720 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8002772:	3201      	adds	r2, #1
 8002774:	e7ed      	b.n	8002752 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002776:	1c51      	adds	r1, r2, #1
 8002778:	6221      	str	r1, [r4, #32]
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e7e9      	b.n	8002754 <HAL_UART_IRQHandler+0xf0>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002780:	0650      	lsls	r0, r2, #25
 8002782:	d5cd      	bpl.n	8002720 <HAL_UART_IRQHandler+0xbc>
 8002784:	064a      	lsls	r2, r1, #25
 8002786:	d5cb      	bpl.n	8002720 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002788:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800278a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800278c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002790:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002792:	2320      	movs	r3, #32
 8002794:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002798:	f7ff ff25 	bl	80025e6 <HAL_UART_TxCpltCallback>
 800279c:	e7c0      	b.n	8002720 <HAL_UART_IRQHandler+0xbc>
 800279e:	bf00      	nop
 80027a0:	080027a5 	.word	0x080027a5

080027a4 <UART_DMAAbortOnError>:
{
 80027a4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80027a6:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80027aa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027ac:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80027ae:	f7ff ff57 	bl	8002660 <HAL_UART_ErrorCallback>
}
 80027b2:	bd08      	pop	{r3, pc}

080027b4 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>:
#include "MPU9250.h"
//#include "Global.h"
//#include "Timer.h"
//#include <exception>

MPU9250::MPU9250(SPI_TypeDef * const spi, GPIO_TypeDef * const ss_gpio, const uint32_t ss_pin)
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
	: _spi(spi), _ss_gpio(ss_gpio), _ss_pin(ss_pin)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	609a      	str	r2, [r3, #8]
{
	this->_gyroZ_bias = 0.0;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <_ZNK7MPU92509_spiWriteEh>:

uint8_t MPU9250::_spiWrite(const uint8_t data) const
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
	while(!(_spi->SR & SPI_SR_TXE)) ;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d000      	beq.n	800280e <_ZNK7MPU92509_spiWriteEh+0x26>
 800280c:	e7f2      	b.n	80027f4 <_ZNK7MPU92509_spiWriteEh+0xc>
	_spi->DR = data;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	60da      	str	r2, [r3, #12]
	while(!(_spi->SR & SPI_SR_RXNE)) ;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d000      	beq.n	8002830 <_ZNK7MPU92509_spiWriteEh+0x48>
 800282e:	e7f2      	b.n	8002816 <_ZNK7MPU92509_spiWriteEh+0x2e>
	return (uint8_t)_spi->DR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	b2db      	uxtb	r3, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <_ZNK7MPU925014_spiChipSelectEv>:

void MPU9250::_spiChipSelect(void) const
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = (_ss_pin << 16);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0412      	lsls	r2, r2, #16
 8002854:	611a      	str	r2, [r3, #16]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <_ZNK7MPU925016_spiChipDeselectEv>:

void MPU9250::_spiChipDeselect(void) const
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = _ss_pin;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	611a      	str	r2, [r3, #16]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_ZNK7MPU92509WriteByteEhh>:

uint8_t MPU9250::WriteByte(const uint8_t addr, const uint8_t data) const
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
 8002888:	4613      	mov	r3, r2
 800288a:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t result = 0x00;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]

	_spiChipSelect();
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffd6 	bl	8002842 <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa4 	bl	80027e8 <_ZNK7MPU92509_spiWriteEh>

	result = _spiWrite(data);
 80028a0:	78bb      	ldrb	r3, [r7, #2]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff9f 	bl	80027e8 <_ZNK7MPU92509_spiWriteEh>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]

	_spiChipDeselect();
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffd6 	bl	8002860 <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	b2db      	uxtb	r3, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZNK7MPU92509WriteWordEht>:

uint16_t MPU9250::WriteWord(const uint8_t addr, const uint16_t data) const
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
 80028cc:	4613      	mov	r3, r2
 80028ce:	803b      	strh	r3, [r7, #0]
	volatile uint16_t result = 0x00;
 80028d0:	2300      	movs	r3, #0
 80028d2:	81fb      	strh	r3, [r7, #14]

	_spiChipSelect();
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffb4 	bl	8002842 <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff82 	bl	80027e8 <_ZNK7MPU92509_spiWriteEh>

	result = (uint16_t)(_spiWrite((uint8_t)((data >> 8) & 0xff)) << 8);
 80028e4:	883b      	ldrh	r3, [r7, #0]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff7a 	bl	80027e8 <_ZNK7MPU92509_spiWriteEh>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	81fb      	strh	r3, [r7, #14]

	result = (uint16_t)(result | _spiWrite((uint8_t)(data & 0xff)));
 80028fe:	883b      	ldrh	r3, [r7, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff6f 	bl	80027e8 <_ZNK7MPU92509_spiWriteEh>
 800290a:	4603      	mov	r3, r0
 800290c:	b29a      	uxth	r2, r3
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	b29b      	uxth	r3, r3
 8002912:	4313      	orrs	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	81fb      	strh	r3, [r7, #14]

	_spiChipDeselect();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffa1 	bl	8002860 <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	b29b      	uxth	r3, r3
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <_ZN8MadgwickC1Ev+0x4c>)
 8002938:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002940:	605a      	str	r2, [r3, #4]
	q1 = 0.0f;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
	q2 = 0.0f;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
	q3 = 0.0f;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
	invSampleFreq = 1.0f / sampleFreqDef;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f04f 526c 	mov.w	r2, #989855744	; 0x3b000000
 8002960:	615a      	str	r2, [r3, #20]
	anglesComputed = 0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	3dcccccd 	.word	0x3dcccccd

0800297c <_ZN8Madgwick9updateIMUEffffff>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay,
		float az) {
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b09b      	sub	sp, #108	; 0x6c
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 800298a:	4967      	ldr	r1, [pc, #412]	; (8002b28 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 800298c:	68b8      	ldr	r0, [r7, #8]
 800298e:	f7fe f9d9 	bl	8000d44 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	60bb      	str	r3, [r7, #8]
	gy *= 0.0174533f;
 8002996:	4964      	ldr	r1, [pc, #400]	; (8002b28 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7fe f9d3 	bl	8000d44 <__aeabi_fmul>
 800299e:	4603      	mov	r3, r0
 80029a0:	607b      	str	r3, [r7, #4]
	gz *= 0.0174533f;
 80029a2:	4961      	ldr	r1, [pc, #388]	; (8002b28 <_ZN8Madgwick9updateIMUEffffff+0x1ac>)
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f7fe f9cd 	bl	8000d44 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	603b      	str	r3, [r7, #0]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe f9c3 	bl	8000d44 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	461c      	mov	r4, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f9bb 	bl	8000d44 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7fe f8ac 	bl	8000b30 <__aeabi_fsub>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe f9ae 	bl	8000d44 <__aeabi_fmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4619      	mov	r1, r3
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7fe f89f 	bl	8000b30 <__aeabi_fsub>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f9a3 	bl	8000d44 <__aeabi_fmul>
 80029fe:	4603      	mov	r3, r0
 8002a00:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f99b 	bl	8000d44 <__aeabi_fmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461c      	mov	r4, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f993 	bl	8000d44 <__aeabi_fmul>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fe f886 	bl	8000b34 <__addsf3>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f986 	bl	8000d44 <__aeabi_fmul>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7fe f877 	bl	8000b30 <__aeabi_fsub>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f97b 	bl	8000d44 <__aeabi_fmul>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f973 	bl	8000d44 <__aeabi_fmul>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461c      	mov	r4, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe f96b 	bl	8000d44 <__aeabi_fmul>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7fe f85c 	bl	8000b30 <__aeabi_fsub>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f95e 	bl	8000d44 <__aeabi_fmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7fe f851 	bl	8000b34 <__addsf3>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f953 	bl	8000d44 <__aeabi_fmul>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f94b 	bl	8000d44 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f943 	bl	8000d44 <__aeabi_fmul>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7fe f836 	bl	8000b34 <__addsf3>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461c      	mov	r4, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe f936 	bl	8000d44 <__aeabi_fmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe f827 	bl	8000b30 <__aeabi_fsub>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f92b 	bl	8000d44 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002af8:	f7fe fab8 	bl	800106c <__aeabi_fcmpeq>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b08:	f7fe fab0 	bl	800106c <__aeabi_fcmpeq>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b1a:	f7fe faa7 	bl	800106c <__aeabi_fcmpeq>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 8231 	bne.w	8002f88 <_ZN8Madgwick9updateIMUEffffff+0x60c>
 8002b26:	e001      	b.n	8002b2c <_ZN8Madgwick9updateIMUEffffff+0x1b0>
 8002b28:	3c8efa39 	.word	0x3c8efa39

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002b2c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b2e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b30:	f7fe f908 	bl	8000d44 <__aeabi_fmul>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461c      	mov	r4, r3
 8002b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b3a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b3c:	f7fe f902 	bl	8000d44 <__aeabi_fmul>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fd fff5 	bl	8000b34 <__addsf3>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461c      	mov	r4, r3
 8002b4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002b52:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b56:	f7fe f8f5 	bl	8000d44 <__aeabi_fmul>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fd ffe8 	bl	8000b34 <__addsf3>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fabc 	bl	80030e4 <_ZN8Madgwick7invSqrtEf>
 8002b6c:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 8002b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002b72:	f7fe f8e7 	bl	8000d44 <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	67bb      	str	r3, [r7, #120]	; 0x78
		ay *= recipNorm;
 8002b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b7c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b7e:	f7fe f8e1 	bl	8000d44 <__aeabi_fmul>
 8002b82:	4603      	mov	r3, r0
 8002b84:	67fb      	str	r3, [r7, #124]	; 0x7c
		az *= recipNorm;
 8002b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b88:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b8c:	f7fe f8da 	bl	8000d44 <__aeabi_fmul>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd ffc9 	bl	8000b34 <__addsf3>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd ffc1 	bl	8000b34 <__addsf3>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd ffb9 	bl	8000b34 <__addsf3>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd ffb1 	bl	8000b34 <__addsf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f8b0 	bl	8000d44 <__aeabi_fmul>
 8002be4:	4603      	mov	r3, r0
 8002be6:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f8a7 	bl	8000d44 <__aeabi_fmul>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f89e 	bl	8000d44 <__aeabi_fmul>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe f895 	bl	8000d44 <__aeabi_fmul>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f88c 	bl	8000d44 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7fe f882 	bl	8000d44 <__aeabi_fmul>
 8002c40:	4603      	mov	r3, r0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7fe f878 	bl	8000d44 <__aeabi_fmul>
 8002c54:	4603      	mov	r3, r0
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7fe f86e 	bl	8000d44 <__aeabi_fmul>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f7fe f864 	bl	8000d44 <__aeabi_fmul>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c84:	f7fe f85e 	bl	8000d44 <__aeabi_fmul>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461c      	mov	r4, r3
 8002c8c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002c8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c90:	f7fe f858 	bl	8000d44 <__aeabi_fmul>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4619      	mov	r1, r3
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7fd ff4b 	bl	8000b34 <__addsf3>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ca6:	f7fe f84d 	bl	8000d44 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7fd ff40 	bl	8000b34 <__addsf3>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cbc:	f7fe f842 	bl	8000d44 <__aeabi_fmul>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7fd ff33 	bl	8000b30 <__aeabi_fsub>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cd2:	f7fe f837 	bl	8000d44 <__aeabi_fmul>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002cdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cde:	f7fe f831 	bl	8000d44 <__aeabi_fmul>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7fd ff22 	bl	8000b30 <__aeabi_fsub>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461c      	mov	r4, r3
 8002cf0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf6:	f7fe f825 	bl	8000d44 <__aeabi_fmul>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f7fe f81d 	bl	8000d44 <__aeabi_fmul>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7fd ff10 	bl	8000b34 <__addsf3>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461c      	mov	r4, r3
 8002d18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d1c:	f7fe f812 	bl	8000d44 <__aeabi_fmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4619      	mov	r1, r3
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7fd ff03 	bl	8000b30 <__aeabi_fsub>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fefe 	bl	8000b30 <__aeabi_fsub>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461c      	mov	r4, r3
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d3c:	f7fe f802 	bl	8000d44 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7fd fef5 	bl	8000b34 <__addsf3>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d52:	f7fd fff7 	bl	8000d44 <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd feea 	bl	8000b34 <__addsf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461c      	mov	r4, r3
 8002d64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002d68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d6a:	f7fd ffeb 	bl	8000d44 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8002d70:	4619      	mov	r1, r3
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7fd fede 	bl	8000b34 <__addsf3>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8002d7c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d82:	f7fd ffdf 	bl	8000d44 <__aeabi_fmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7fd ffd7 	bl	8000d44 <__aeabi_fmul>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461c      	mov	r4, r3
 8002d9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002d9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d9e:	f7fd ffd1 	bl	8000d44 <__aeabi_fmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7fd fec4 	bl	8000b34 <__addsf3>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461c      	mov	r4, r3
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002db4:	f7fd ffc6 	bl	8000d44 <__aeabi_fmul>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7fd feb9 	bl	8000b34 <__addsf3>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461c      	mov	r4, r3
 8002dc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002dca:	f7fd ffbb 	bl	8000d44 <__aeabi_fmul>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7fd feac 	bl	8000b30 <__aeabi_fsub>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fea7 	bl	8000b30 <__aeabi_fsub>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461c      	mov	r4, r3
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dea:	f7fd ffab 	bl	8000d44 <__aeabi_fmul>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7fd fe9e 	bl	8000b34 <__addsf3>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f7fd ffa0 	bl	8000d44 <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd fe93 	bl	8000b34 <__addsf3>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002e16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e18:	f7fd ff94 	bl	8000d44 <__aeabi_fmul>
 8002e1c:	4603      	mov	r3, r0
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4620      	mov	r0, r4
 8002e22:	f7fd fe87 	bl	8000b34 <__addsf3>
 8002e26:	4603      	mov	r3, r0
 8002e28:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002e2a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e30:	f7fd ff88 	bl	8000d44 <__aeabi_fmul>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7fd ff80 	bl	8000d44 <__aeabi_fmul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461c      	mov	r4, r3
 8002e48:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002e4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e4c:	f7fd ff7a 	bl	8000d44 <__aeabi_fmul>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fd fe6b 	bl	8000b30 <__aeabi_fsub>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461c      	mov	r4, r3
 8002e5e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e64:	f7fd ff6e 	bl	8000d44 <__aeabi_fmul>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7fd ff66 	bl	8000d44 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7fd fe59 	bl	8000b34 <__addsf3>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461c      	mov	r4, r3
 8002e86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e8a:	f7fd ff5b 	bl	8000d44 <__aeabi_fmul>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4619      	mov	r1, r3
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7fd fe4c 	bl	8000b30 <__aeabi_fsub>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	613b      	str	r3, [r7, #16]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002e9c:	69f9      	ldr	r1, [r7, #28]
 8002e9e:	69f8      	ldr	r0, [r7, #28]
 8002ea0:	f7fd ff50 	bl	8000d44 <__aeabi_fmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	f7fd ff4a 	bl	8000d44 <__aeabi_fmul>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f7fd fe3d 	bl	8000b34 <__addsf3>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f7fd ff3f 	bl	8000d44 <__aeabi_fmul>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7fd fe32 	bl	8000b34 <__addsf3>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461c      	mov	r4, r3
 8002ed4:	6939      	ldr	r1, [r7, #16]
 8002ed6:	6938      	ldr	r0, [r7, #16]
 8002ed8:	f7fd ff34 	bl	8000d44 <__aeabi_fmul>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7fd fe27 	bl	8000b34 <__addsf3>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f8fb 	bl	80030e4 <_ZN8Madgwick7invSqrtEf>
 8002eee:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ef2:	69f8      	ldr	r0, [r7, #28]
 8002ef4:	f7fd ff26 	bl	8000d44 <__aeabi_fmul>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002efe:	69b8      	ldr	r0, [r7, #24]
 8002f00:	f7fd ff20 	bl	8000d44 <__aeabi_fmul>
 8002f04:	4603      	mov	r3, r0
 8002f06:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7fd ff1a 	bl	8000d44 <__aeabi_fmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f16:	6938      	ldr	r0, [r7, #16]
 8002f18:	f7fd ff14 	bl	8000d44 <__aeabi_fmul>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd ff0c 	bl	8000d44 <__aeabi_fmul>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002f32:	f7fd fdfd 	bl	8000b30 <__aeabi_fsub>
 8002f36:	4603      	mov	r3, r0
 8002f38:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd feff 	bl	8000d44 <__aeabi_fmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002f4c:	f7fd fdf0 	bl	8000b30 <__aeabi_fsub>
 8002f50:	4603      	mov	r3, r0
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fef2 	bl	8000d44 <__aeabi_fmul>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4619      	mov	r1, r3
 8002f64:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f66:	f7fd fde3 	bl	8000b30 <__aeabi_fsub>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6939      	ldr	r1, [r7, #16]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fee5 	bl	8000d44 <__aeabi_fmul>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f80:	f7fd fdd6 	bl	8000b30 <__aeabi_fsub>
 8002f84:	4603      	mov	r3, r0
 8002f86:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685c      	ldr	r4, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fed6 	bl	8000d44 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7fd fdc9 	bl	8000b34 <__addsf3>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
	q1 += qDot2 * invSampleFreq;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689c      	ldr	r4, [r3, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fec5 	bl	8000d44 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7fd fdb8 	bl	8000b34 <__addsf3>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
	q2 += qDot3 * invSampleFreq;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68dc      	ldr	r4, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd feb4 	bl	8000d44 <__aeabi_fmul>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7fd fda7 	bl	8000b34 <__addsf3>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	60da      	str	r2, [r3, #12]
	q3 += qDot4 * invSampleFreq;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691c      	ldr	r4, [r3, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fea3 	bl	8000d44 <__aeabi_fmul>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4619      	mov	r1, r3
 8003002:	4620      	mov	r0, r4
 8003004:	f7fd fd96 	bl	8000b34 <__addsf3>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	611a      	str	r2, [r3, #16]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7fd fe92 	bl	8000d44 <__aeabi_fmul>
 8003020:	4603      	mov	r3, r0
 8003022:	461c      	mov	r4, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fd fe88 	bl	8000d44 <__aeabi_fmul>
 8003034:	4603      	mov	r3, r0
 8003036:	4619      	mov	r1, r3
 8003038:	4620      	mov	r0, r4
 800303a:	f7fd fd7b 	bl	8000b34 <__addsf3>
 800303e:	4603      	mov	r3, r0
 8003040:	461c      	mov	r4, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7fd fe79 	bl	8000d44 <__aeabi_fmul>
 8003052:	4603      	mov	r3, r0
 8003054:	4619      	mov	r1, r3
 8003056:	4620      	mov	r0, r4
 8003058:	f7fd fd6c 	bl	8000b34 <__addsf3>
 800305c:	4603      	mov	r3, r0
 800305e:	461c      	mov	r4, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7fd fe6a 	bl	8000d44 <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	4619      	mov	r1, r3
 8003074:	4620      	mov	r0, r4
 8003076:	f7fd fd5d 	bl	8000b34 <__addsf3>
 800307a:	4603      	mov	r3, r0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f831 	bl	80030e4 <_ZN8Madgwick7invSqrtEf>
 8003082:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fe5a 	bl	8000d44 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	605a      	str	r2, [r3, #4]
	q1 *= recipNorm;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fe50 	bl	8000d44 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]
	q2 *= recipNorm;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fe46 	bl	8000d44 <__aeabi_fmul>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	60da      	str	r2, [r3, #12]
	q3 *= recipNorm;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fe3c 	bl	8000d44 <__aeabi_fmul>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80030dc:	bf00      	nop
 80030de:	376c      	adds	r7, #108	; 0x6c
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80030ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fe27 	bl	8000d44 <__aeabi_fmul>
 80030f6:	4603      	mov	r3, r0
 80030f8:	617b      	str	r3, [r7, #20]
	float y = x;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	105a      	asrs	r2, r3, #1
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <_ZN8Madgwick7invSqrtEf+0xac>)
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6979      	ldr	r1, [r7, #20]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fe11 	bl	8000d44 <__aeabi_fmul>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7fd fe0a 	bl	8000d44 <__aeabi_fmul>
 8003130:	4603      	mov	r3, r0
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8003138:	f7fd fcfa 	bl	8000b30 <__aeabi_fsub>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7fd fdfd 	bl	8000d44 <__aeabi_fmul>
 800314a:	4603      	mov	r3, r0
 800314c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6979      	ldr	r1, [r7, #20]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fdf6 	bl	8000d44 <__aeabi_fmul>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fd fdef 	bl	8000d44 <__aeabi_fmul>
 8003166:	4603      	mov	r3, r0
 8003168:	4619      	mov	r1, r3
 800316a:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800316e:	f7fd fcdf 	bl	8000b30 <__aeabi_fsub>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fd fde2 	bl	8000d44 <__aeabi_fmul>
 8003180:	4603      	mov	r3, r0
 8003182:	613b      	str	r3, [r7, #16]
	return y;
 8003184:	693b      	ldr	r3, [r7, #16]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	5f3759df 	.word	0x5f3759df

08003194 <_ZN8Madgwick13computeAnglesEv>:

//-------------------------------------------------------------------------------------------

void Madgwick::computeAngles() {
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	roll = atan2f(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f7fd fdcc 	bl	8000d44 <__aeabi_fmul>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461c      	mov	r4, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fd fdc2 	bl	8000d44 <__aeabi_fmul>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7fd fcb5 	bl	8000b34 <__addsf3>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461c      	mov	r4, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7fd fdb3 	bl	8000d44 <__aeabi_fmul>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80031e6:	f7fd fca3 	bl	8000b30 <__aeabi_fsub>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461d      	mov	r5, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7fd fda3 	bl	8000d44 <__aeabi_fmul>
 80031fe:	4603      	mov	r3, r0
 8003200:	4619      	mov	r1, r3
 8003202:	4628      	mov	r0, r5
 8003204:	f7fd fc94 	bl	8000b30 <__aeabi_fsub>
 8003208:	4603      	mov	r3, r0
 800320a:	4619      	mov	r1, r3
 800320c:	4620      	mov	r0, r4
 800320e:	f001 fd5d 	bl	8004ccc <atan2f>
 8003212:	4602      	mov	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
	pitch = asinf(-2.0f * (q1 * q3 - q0 * q2));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f7fd fd8e 	bl	8000d44 <__aeabi_fmul>
 8003228:	4603      	mov	r3, r0
 800322a:	461c      	mov	r4, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7fd fd84 	bl	8000d44 <__aeabi_fmul>
 800323c:	4603      	mov	r3, r0
 800323e:	4619      	mov	r1, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f7fd fc75 	bl	8000b30 <__aeabi_fsub>
 8003246:	4603      	mov	r3, r0
 8003248:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fd79 	bl	8000d44 <__aeabi_fmul>
 8003252:	4603      	mov	r3, r0
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fceb 	bl	8004c30 <asinf>
 800325a:	4602      	mov	r2, r0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	61da      	str	r2, [r3, #28]
	yaw = atan2f(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7fd fd6a 	bl	8000d44 <__aeabi_fmul>
 8003270:	4603      	mov	r3, r0
 8003272:	461c      	mov	r4, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7fd fd60 	bl	8000d44 <__aeabi_fmul>
 8003284:	4603      	mov	r3, r0
 8003286:	4619      	mov	r1, r3
 8003288:	4620      	mov	r0, r4
 800328a:	f7fd fc53 	bl	8000b34 <__addsf3>
 800328e:	4603      	mov	r3, r0
 8003290:	461c      	mov	r4, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fd fd51 	bl	8000d44 <__aeabi_fmul>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4619      	mov	r1, r3
 80032a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80032aa:	f7fd fc41 	bl	8000b30 <__aeabi_fsub>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461d      	mov	r5, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f7fd fd41 	bl	8000d44 <__aeabi_fmul>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4619      	mov	r1, r3
 80032c6:	4628      	mov	r0, r5
 80032c8:	f7fd fc32 	bl	8000b30 <__aeabi_fsub>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4619      	mov	r1, r3
 80032d0:	4620      	mov	r0, r4
 80032d2:	f001 fcfb 	bl	8004ccc <atan2f>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	621a      	str	r2, [r3, #32]
	anglesComputed = 1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}

080032ec <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80032fc:	f7fd fdd6 	bl	8000eac <__aeabi_fdiv>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	615a      	str	r2, [r3, #20]
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZN8Madgwick13getYawRadiansEv>:
    }
    float getPitchRadians() {
        if (!anglesComputed) computeAngles();
        return pitch;
    }
    float getYawRadians() {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
        if (!anglesComputed) computeAngles();
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <_ZN8Madgwick13getYawRadiansEv+0x18>
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff36 	bl	8003194 <_ZN8Madgwick13computeAnglesEv>
        return yaw;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
    }
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZN8OdometryC1Ev>:

#include <cmath>

Madgwick MDGF;

Odometry::Odometry(void) {
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]

	this->x = 0.0f;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
	this->y = 0.0f;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
	this->yaw = 0.0f;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	609a      	str	r2, [r3, #8]

	//this->mpu9250 = new MPU9250(SPI_MPU9250, GPIOC, GPIO_PIN_0);
	this->mpu9250 = new MPU9250(SPI_MPU9250, GPIO_MPU9250, PIN_MPU9250);
 800335a:	2010      	movs	r0, #16
 800335c:	f001 fbe3 	bl	8004b26 <_Znwj>
 8003360:	4603      	mov	r3, r0
 8003362:	461c      	mov	r4, r3
 8003364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <_ZN8OdometryC1Ev+0x4c>)
 800336a:	4906      	ldr	r1, [pc, #24]	; (8003384 <_ZN8OdometryC1Ev+0x50>)
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff fa21 	bl	80027b4 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60dc      	str	r4, [r3, #12]
}
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	40010c00 	.word	0x40010c00
 8003384:	40003800 	.word	0x40003800

08003388 <_ZNK8Odometry7GetBiasEPfS0_>:

void Odometry::GetBias(float * const avg, float * const stdev) const {
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b09b      	sub	sp, #108	; 0x6c
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
	static constexpr int NumOfTrial = 256;

	float _avg[6] = { };
 8003394:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	615a      	str	r2, [r3, #20]
	float _stdev[6] = { };
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	615a      	str	r2, [r3, #20]

	for (int i = 0; i < NumOfTrial; i++) {
 80033b8:	2300      	movs	r3, #0
 80033ba:	667b      	str	r3, [r7, #100]	; 0x64
 80033bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033be:	2bff      	cmp	r3, #255	; 0xff
 80033c0:	f300 80ee 	bgt.w	80035a0 <_ZNK8Odometry7GetBiasEPfS0_+0x218>
		float reading[6] = { };
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
 80033d4:	615a      	str	r2, [r3, #20]
		reading[0] = (int16_t) mpu9250->WriteWord(
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	21c3      	movs	r1, #195	; 0xc3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fa6e 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_XOUT_H, 0x0000) * 1000.0f
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fc57 	bl	8000c9c <__aeabi_i2f>
 80033ee:	4603      	mov	r3, r0
 80033f0:	49b3      	ldr	r1, [pc, #716]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fca6 	bl	8000d44 <__aeabi_fmul>
 80033f8:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 80033fa:	49b2      	ldr	r1, [pc, #712]	; (80036c4 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fd55 	bl	8000eac <__aeabi_fdiv>
 8003402:	4603      	mov	r3, r0
		reading[0] = (int16_t) mpu9250->WriteWord(
 8003404:	617b      	str	r3, [r7, #20]
		reading[1] = (int16_t) mpu9250->WriteWord(
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	21c5      	movs	r1, #197	; 0xc5
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fa56 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003414:	4603      	mov	r3, r0
 8003416:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_YOUT_H, 0x0000) * 1000.0f
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fc3f 	bl	8000c9c <__aeabi_i2f>
 800341e:	4603      	mov	r3, r0
 8003420:	49a7      	ldr	r1, [pc, #668]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fc8e 	bl	8000d44 <__aeabi_fmul>
 8003428:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 800342a:	49a6      	ldr	r1, [pc, #664]	; (80036c4 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fd3d 	bl	8000eac <__aeabi_fdiv>
 8003432:	4603      	mov	r3, r0
		reading[1] = (int16_t) mpu9250->WriteWord(
 8003434:	61bb      	str	r3, [r7, #24]
		reading[2] = (int16_t) mpu9250->WriteWord(
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	21c7      	movs	r1, #199	; 0xc7
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fa3e 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003444:	4603      	mov	r3, r0
 8003446:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000) * 1000.0f
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fc27 	bl	8000c9c <__aeabi_i2f>
 800344e:	4603      	mov	r3, r0
 8003450:	499b      	ldr	r1, [pc, #620]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fc76 	bl	8000d44 <__aeabi_fmul>
 8003458:	4603      	mov	r3, r0
				/ GyroSensitivityScaleFactor;
 800345a:	499a      	ldr	r1, [pc, #616]	; (80036c4 <_ZNK8Odometry7GetBiasEPfS0_+0x33c>)
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fd25 	bl	8000eac <__aeabi_fdiv>
 8003462:	4603      	mov	r3, r0
		reading[2] = (int16_t) mpu9250->WriteWord(
 8003464:	61fb      	str	r3, [r7, #28]
		reading[3] = (int16_t) mpu9250->WriteWord(
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	21bb      	movs	r1, #187	; 0xbb
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fa26 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003474:	4603      	mov	r3, r0
 8003476:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_XOUT_H, 0x0000) * 1000.0f
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fc0f 	bl	8000c9c <__aeabi_i2f>
 800347e:	4603      	mov	r3, r0
 8003480:	498f      	ldr	r1, [pc, #572]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc5e 	bl	8000d44 <__aeabi_fmul>
 8003488:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 800348a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fd0c 	bl	8000eac <__aeabi_fdiv>
 8003494:	4603      	mov	r3, r0
		reading[3] = (int16_t) mpu9250->WriteWord(
 8003496:	623b      	str	r3, [r7, #32]
		reading[4] = (int16_t) mpu9250->WriteWord(
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	21bd      	movs	r1, #189	; 0xbd
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fa0d 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 80034a6:	4603      	mov	r3, r0
 80034a8:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_YOUT_H, 0x0000) * 1000.0f
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fbf6 	bl	8000c9c <__aeabi_i2f>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4983      	ldr	r1, [pc, #524]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fc45 	bl	8000d44 <__aeabi_fmul>
 80034ba:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 80034bc:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fcf3 	bl	8000eac <__aeabi_fdiv>
 80034c6:	4603      	mov	r3, r0
		reading[4] = (int16_t) mpu9250->WriteWord(
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
		reading[5] = (int16_t) mpu9250->WriteWord(
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	21bf      	movs	r1, #191	; 0xbf
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f9f4 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 80034d8:	4603      	mov	r3, r0
 80034da:	b21b      	sxth	r3, r3
		READ_FLAG | MPUREG_ACCEL_ZOUT_H, 0x0000) * 1000.0f
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fbdd 	bl	8000c9c <__aeabi_i2f>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4976      	ldr	r1, [pc, #472]	; (80036c0 <_ZNK8Odometry7GetBiasEPfS0_+0x338>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fc2c 	bl	8000d44 <__aeabi_fmul>
 80034ec:	4603      	mov	r3, r0
				/ AccSensitivityScaleFactor;
 80034ee:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fcda 	bl	8000eac <__aeabi_fdiv>
 80034f8:	4603      	mov	r3, r0
		reading[5] = (int16_t) mpu9250->WriteWord(
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int j = 0; j < 6; j++) {
 80034fc:	2300      	movs	r3, #0
 80034fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003502:	2b05      	cmp	r3, #5
 8003504:	dc45      	bgt.n	8003592 <_ZNK8Odometry7GetBiasEPfS0_+0x20a>
			_avg[j] += reading[j];
 8003506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800350e:	4413      	add	r3, r2
 8003510:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800351c:	440b      	add	r3, r1
 800351e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7fd fb05 	bl	8000b34 <__addsf3>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003536:	440b      	add	r3, r1
 8003538:	f843 2c24 	str.w	r2, [r3, #-36]
			_stdev[j] += reading[j] * reading[j];
 800353c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003544:	4413      	add	r3, r2
 8003546:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 800354a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003552:	4413      	add	r3, r2
 8003554:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003560:	440b      	add	r3, r1
 8003562:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f7fd fbeb 	bl	8000d44 <__aeabi_fmul>
 800356e:	4603      	mov	r3, r0
 8003570:	4619      	mov	r1, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f7fd fade 	bl	8000b34 <__addsf3>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003584:	440b      	add	r3, r1
 8003586:	f843 2c3c 	str.w	r2, [r3, #-60]
		for (int j = 0; j < 6; j++) {
 800358a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358c:	3301      	adds	r3, #1
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
 8003590:	e7b6      	b.n	8003500 <_ZNK8Odometry7GetBiasEPfS0_+0x178>
		}
		//Timer::sleep(5);
		HAL_Delay(4); //６つ分やるとすごい時間になるので短く 5->1
 8003592:	2004      	movs	r0, #4
 8003594:	f7fd ffa2 	bl	80014dc <HAL_Delay>
	for (int i = 0; i < NumOfTrial; i++) {
 8003598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800359a:	3301      	adds	r3, #1
 800359c:	667b      	str	r3, [r7, #100]	; 0x64
 800359e:	e70d      	b.n	80033bc <_ZNK8Odometry7GetBiasEPfS0_+0x34>
	}

	for (int k = 0; k < 6; k++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	f300 8085 	bgt.w	80036b6 <_ZNK8Odometry7GetBiasEPfS0_+0x32e>
		_avg[k] /= NumOfTrial;
 80035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035b4:	4413      	add	r3, r2
 80035b6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80035ba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fc74 	bl	8000eac <__aeabi_fdiv>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80035d0:	440b      	add	r3, r1
 80035d2:	f843 2c24 	str.w	r2, [r3, #-36]

		_stdev[k] -= NumOfTrial * _avg[k] * _avg[k];
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035de:	4413      	add	r3, r2
 80035e0:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 80035e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035ec:	4413      	add	r3, r2
 80035ee:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80035f2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fba4 	bl	8000d44 <__aeabi_fmul>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003608:	440b      	add	r3, r1
 800360a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fd fb97 	bl	8000d44 <__aeabi_fmul>
 8003616:	4603      	mov	r3, r0
 8003618:	4619      	mov	r1, r3
 800361a:	4620      	mov	r0, r4
 800361c:	f7fd fa88 	bl	8000b30 <__aeabi_fsub>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800362c:	440b      	add	r3, r1
 800362e:	f843 2c3c 	str.w	r2, [r3, #-60]
		_stdev[k] /= NumOfTrial - 1;
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800363a:	4413      	add	r3, r2
 800363c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003640:	4921      	ldr	r1, [pc, #132]	; (80036c8 <_ZNK8Odometry7GetBiasEPfS0_+0x340>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fc32 	bl	8000eac <__aeabi_fdiv>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003654:	440b      	add	r3, r1
 8003656:	f843 2c3c 	str.w	r2, [r3, #-60]
		_stdev[k] = sqrtf(_stdev[k]);
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003662:	4413      	add	r3, r2
 8003664:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fb31 	bl	8004cd0 <sqrtf>
 800366e:	4602      	mov	r2, r0
 8003670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003678:	440b      	add	r3, r1
 800367a:	f843 2c3c 	str.w	r2, [r3, #-60]

		avg[k] = _avg[k];
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	441a      	add	r2, r3
 8003686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800368e:	440b      	add	r3, r1
 8003690:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003694:	6013      	str	r3, [r2, #0]
		stdev[k] = _stdev[k];
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	441a      	add	r2, r3
 800369e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80036a6:	440b      	add	r3, r1
 80036a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80036ac:	6013      	str	r3, [r2, #0]
	for (int k = 0; k < 6; k++) {
 80036ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b0:	3301      	adds	r3, #1
 80036b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b4:	e776      	b.n	80035a4 <_ZNK8Odometry7GetBiasEPfS0_+0x21c>
	}
}
 80036b6:	bf00      	nop
 80036b8:	376c      	adds	r7, #108	; 0x6c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}
 80036be:	bf00      	nop
 80036c0:	447a0000 	.word	0x447a0000
 80036c4:	42033333 	.word	0x42033333
 80036c8:	437f0000 	.word	0x437f0000

080036cc <_ZN8Odometry8InitGyroEv>:

bool Odometry::InitGyro(void) {
 80036cc:	b5b0      	push	{r4, r5, r7, lr}
 80036ce:	b090      	sub	sp, #64	; 0x40
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	uint8_t whoami = mpu9250->WriteByte(READ_FLAG | MPUREG_WHOAMI, 0x00);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	21f5      	movs	r1, #245	; 0xf5
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f8cd 	bl	800287c <_ZNK7MPU92509WriteByteEhh>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	if (whoami != 0x71) {
 80036e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80036ec:	2b71      	cmp	r3, #113	; 0x71
 80036ee:	d007      	beq.n	8003700 <_ZN8Odometry8InitGyroEv+0x34>
		delete mpu9250;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2110      	movs	r1, #16
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fa13 	bl	8004b22 <_ZdlPvj>
		return false;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e0ab      	b.n	8003858 <_ZN8Odometry8InitGyroEv+0x18c>
	}

	// get stable time source
	mpu9250->WriteByte(MPUREG_PWR_MGMT_1, 0x03); // Set clock source to be PLL with z-axis gyroscope reference, bits 2:0 = 011
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2203      	movs	r2, #3
 8003706:	216b      	movs	r1, #107	; 0x6b
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f8b7 	bl	800287c <_ZNK7MPU92509WriteByteEhh>
	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 4000 and 250 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 000; this sets the sample rate at 8 kHz for both
	// Maximum delay is 0.97 ms which is just over a 1 kHz maximum rate
	//mpu9250->WriteByte(MPUREG_CONFIG, 0x00);
	mpu9250->WriteByte(MPUREG_CONFIG, 0x03);	//1khz
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2203      	movs	r2, #3
 8003714:	211a      	movs	r1, #26
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f8b0 	bl	800287c <_ZNK7MPU92509WriteByteEhh>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x07);  // Use a 1 kHz rate; the same rate set in CONFIG above
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x00); //1khzでサンプリング
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	2119      	movs	r1, #25
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f8a9 	bl	800287c <_ZNK7MPU92509WriteByteEhh>

	mpu9250->WriteByte(MPUREG_GYRO_CONFIG, BITS_FS_1000DPS);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2210      	movs	r2, #16
 8003730:	211b      	movs	r1, #27
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8a2 	bl	800287c <_ZNK7MPU92509WriteByteEhh>
	mpu9250->WriteByte(MPUREG_ACCEL_CONFIG, 0b11000);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2218      	movs	r2, #24
 800373e:	211c      	movs	r1, #28
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff f89b 	bl	800287c <_ZNK7MPU92509WriteByteEhh>

	//Timer::sleep(100);
	HAL_Delay(100);
 8003746:	2064      	movs	r0, #100	; 0x64
 8003748:	f7fd fec8 	bl	80014dc <HAL_Delay>

	float avg[6] = { };
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	615a      	str	r2, [r3, #20]
	float stdev[6] = { 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0 };
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <_ZN8Odometry8InitGyroEv+0x194>)
 8003760:	f107 0408 	add.w	r4, r7, #8
 8003764:	461d      	mov	r5, r3
 8003766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800376a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800376e:	e884 0003 	stmia.w	r4, {r0, r1}

	for (int i = 0; i < 10; i++) {
 8003772:	2300      	movs	r3, #0
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	2b09      	cmp	r3, #9
 800377a:	dc6c      	bgt.n	8003856 <_ZN8Odometry8InitGyroEv+0x18a>
		this->GetBias(avg, stdev);
 800377c:	f107 0208 	add.w	r2, r7, #8
 8003780:	f107 0320 	add.w	r3, r7, #32
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fdfe 	bl	8003388 <_ZNK8Odometry7GetBiasEPfS0_>

		if (stdev[0] < 700 && stdev[1] < 700 && stdev[2] < 700 && stdev[3] < 700
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4935      	ldr	r1, [pc, #212]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fc75 	bl	8001080 <__aeabi_fcmplt>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d058      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4931      	ldr	r1, [pc, #196]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fc6d 	bl	8001080 <__aeabi_fcmplt>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d050      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	492d      	ldr	r1, [pc, #180]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fc65 	bl	8001080 <__aeabi_fcmplt>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d048      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4929      	ldr	r1, [pc, #164]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fc5d 	bl	8001080 <__aeabi_fcmplt>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d040      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
				&& stdev[4] < 700 && stdev[5] < 700) {
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4925      	ldr	r1, [pc, #148]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fc55 	bl	8001080 <__aeabi_fcmplt>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d038      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4921      	ldr	r1, [pc, #132]	; (8003864 <_ZN8Odometry8InitGyroEv+0x198>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fc4d 	bl	8001080 <__aeabi_fcmplt>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d030      	beq.n	800384e <_ZN8Odometry8InitGyroEv+0x182>
			movavg[0] = (int32_t) avg[0];
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fc84 	bl	80010fc <__aeabi_f2iz>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]
			movavg[1] = (int32_t) avg[1];
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fc7d 	bl	80010fc <__aeabi_f2iz>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	615a      	str	r2, [r3, #20]
			movavg[2] = (int32_t) avg[2];
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fc76 	bl	80010fc <__aeabi_f2iz>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	619a      	str	r2, [r3, #24]
			movavg[3] = (int32_t) avg[3];
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fc6f 	bl	80010fc <__aeabi_f2iz>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	61da      	str	r2, [r3, #28]
			movavg[4] = (int32_t) avg[4];
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fc68 	bl	80010fc <__aeabi_f2iz>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]
			movavg[5] = (int32_t) avg[5];
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fc61 	bl	80010fc <__aeabi_f2iz>
 800383a:	4602      	mov	r2, r0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

			MDGF.begin(this->SamplingFrequency);
 8003840:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003844:	4808      	ldr	r0, [pc, #32]	; (8003868 <_ZN8Odometry8InitGyroEv+0x19c>)
 8003846:	f7ff fd51 	bl	80032ec <_ZN8Madgwick5beginEf>

			return true;
 800384a:	2301      	movs	r3, #1
 800384c:	e004      	b.n	8003858 <_ZN8Odometry8InitGyroEv+0x18c>
	for (int i = 0; i < 10; i++) {
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	3301      	adds	r3, #1
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e78f      	b.n	8003776 <_ZN8Odometry8InitGyroEv+0xaa>
		}
	}

	// gyro unit is not in desirable state (not stabilized)
	return false;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3740      	adds	r7, #64	; 0x40
 800385c:	46bd      	mov	sp, r7
 800385e:	bdb0      	pop	{r4, r5, r7, pc}
 8003860:	08009450 	.word	0x08009450
 8003864:	442f0000 	.word	0x442f0000
 8003868:	200009dc 	.word	0x200009dc

0800386c <_ZN8Odometry11ReadEncoderEv>:

void Odometry::ReadEncoder(void) {
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	volatile int16_t _p1 = static_cast<int16_t>(TIM3->CNT);
 8003874:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <_ZN8Odometry11ReadEncoderEv+0xf8>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b21b      	sxth	r3, r3
 800387a:	817b      	strh	r3, [r7, #10]
	TIM3->CNT = 0;
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <_ZN8Odometry11ReadEncoderEv+0xf8>)
 800387e:	2200      	movs	r2, #0
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

	volatile int16_t _p2 = (-1)*static_cast<int16_t>(TIM4->CNT);
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b29b      	uxth	r3, r3
 8003888:	425b      	negs	r3, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	b21b      	sxth	r3, r3
 800388e:	813b      	strh	r3, [r7, #8]
	TIM4->CNT = 0;
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

	// just a simple rotation matrix
	// translate encoder rates to velocity on x-y plane
	float _yaw = yaw; //- ((float) M_PI / 4.0f); //いじるとしたらこの辺　ジャイロの付け方に依る
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]
	float _cos = cosf(_yaw);
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f001 f95d 	bl	8004b5c <cosf>
 80038a2:	6138      	str	r0, [r7, #16]
	float _sin = sinf(_yaw);
 80038a4:	6978      	ldr	r0, [r7, #20]
 80038a6:	f001 f98d 	bl	8004bc4 <sinf>
 80038aa:	60f8      	str	r0, [r7, #12]

	x += ((_p1 * _cos) - (_p2 * _sin)) * MPerPulse;
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd f9f3 	bl	8000c9c <__aeabi_i2f>
 80038b6:	4603      	mov	r3, r0
 80038b8:	6939      	ldr	r1, [r7, #16]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fa42 	bl	8000d44 <__aeabi_fmul>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461c      	mov	r4, r3
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd f9e7 	bl	8000c9c <__aeabi_i2f>
 80038ce:	4603      	mov	r3, r0
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fa36 	bl	8000d44 <__aeabi_fmul>
 80038d8:	4603      	mov	r3, r0
 80038da:	4619      	mov	r1, r3
 80038dc:	4620      	mov	r0, r4
 80038de:	f7fd f927 	bl	8000b30 <__aeabi_fsub>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4921      	ldr	r1, [pc, #132]	; (800396c <_ZN8Odometry11ReadEncoderEv+0x100>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fa2c 	bl	8000d44 <__aeabi_fmul>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7fd f91c 	bl	8000b34 <__addsf3>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
	y += ((_p1 * _sin) + (_p2 * _cos)) * MPerPulse;
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	b21b      	sxth	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd f9c7 	bl	8000c9c <__aeabi_i2f>
 800390e:	4603      	mov	r3, r0
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fa16 	bl	8000d44 <__aeabi_fmul>
 8003918:	4603      	mov	r3, r0
 800391a:	461c      	mov	r4, r3
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	b21b      	sxth	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd f9bb 	bl	8000c9c <__aeabi_i2f>
 8003926:	4603      	mov	r3, r0
 8003928:	6939      	ldr	r1, [r7, #16]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fa0a 	bl	8000d44 <__aeabi_fmul>
 8003930:	4603      	mov	r3, r0
 8003932:	4619      	mov	r1, r3
 8003934:	4620      	mov	r0, r4
 8003936:	f7fd f8fd 	bl	8000b34 <__addsf3>
 800393a:	4603      	mov	r3, r0
 800393c:	490b      	ldr	r1, [pc, #44]	; (800396c <_ZN8Odometry11ReadEncoderEv+0x100>)
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fa00 	bl	8000d44 <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7fd f8f0 	bl	8000b34 <__addsf3>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	39d12e7e 	.word	0x39d12e7e

08003970 <_ZN8Odometry11ReadAccGyroEv>:

void Odometry::ReadAccGyro(void) {
 8003970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003974:	b091      	sub	sp, #68	; 0x44
 8003976:	af04      	add	r7, sp, #16
 8003978:	6078      	str	r0, [r7, #4]
	float data[3];

//	static uint32_t lasttime=0;
//	static uint16_t dt=0;

	raw[0] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_XOUT_H,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	21c3      	movs	r1, #195	; 0xc3
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff9c 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003988:	4603      	mov	r3, r0
 800398a:	b21b      	sxth	r3, r3
 800398c:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 800398e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003992:	fb03 f302 	mul.w	r3, r3, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f980 	bl	8000c9c <__aeabi_i2f>
 800399c:	4603      	mov	r3, r0
 800399e:	49af      	ldr	r1, [pc, #700]	; (8003c5c <_ZN8Odometry11ReadAccGyroEv+0x2ec>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd fa83 	bl	8000eac <__aeabi_fdiv>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd f8c1 	bl	8000b34 <__addsf3>
 80039b2:	4603      	mov	r3, r0
	raw[0] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_XOUT_H,
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fba1 	bl	80010fc <__aeabi_f2iz>
 80039ba:	4603      	mov	r3, r0
 80039bc:	617b      	str	r3, [r7, #20]
	raw[1] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_YOUT_H,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	21c5      	movs	r1, #197	; 0xc5
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ff7a 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b21b      	sxth	r3, r3
 80039d0:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 80039d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d6:	fb03 f302 	mul.w	r3, r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd f95e 	bl	8000c9c <__aeabi_i2f>
 80039e0:	4603      	mov	r3, r0
 80039e2:	499e      	ldr	r1, [pc, #632]	; (8003c5c <_ZN8Odometry11ReadAccGyroEv+0x2ec>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fa61 	bl	8000eac <__aeabi_fdiv>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd f89f 	bl	8000b34 <__addsf3>
 80039f6:	4603      	mov	r3, r0
	raw[1] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_YOUT_H,
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd fb7f 	bl	80010fc <__aeabi_f2iz>
 80039fe:	4603      	mov	r3, r0
 8003a00:	61bb      	str	r3, [r7, #24]
	raw[2] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	21c7      	movs	r1, #199	; 0xc7
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe ff58 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003a10:	4603      	mov	r3, r0
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	461a      	mov	r2, r3
			0x0000)) * 1000 / GyroSensitivityScaleFactor) + 0.5f;
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	fb03 f302 	mul.w	r3, r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd f93c 	bl	8000c9c <__aeabi_i2f>
 8003a24:	4603      	mov	r3, r0
 8003a26:	498d      	ldr	r1, [pc, #564]	; (8003c5c <_ZN8Odometry11ReadAccGyroEv+0x2ec>)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fa3f 	bl	8000eac <__aeabi_fdiv>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd f87d 	bl	8000b34 <__addsf3>
 8003a3a:	4603      	mov	r3, r0
	raw[2] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H,
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fb5d 	bl	80010fc <__aeabi_f2iz>
 8003a42:	4603      	mov	r3, r0
 8003a44:	61fb      	str	r3, [r7, #28]
	raw[3] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_XOUT_H,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	21bb      	movs	r1, #187	; 0xbb
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe ff36 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003a54:	4603      	mov	r3, r0
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	461a      	mov	r2, r3
			0x0000)) * 1000 / AccSensitivityScaleFactor) + 0.5f;
 8003a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a5e:	fb03 f302 	mul.w	r3, r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da01      	bge.n	8003a6a <_ZN8Odometry11ReadAccGyroEv+0xfa>
 8003a66:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003a6a:	12db      	asrs	r3, r3, #11
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fd f915 	bl	8000c9c <__aeabi_i2f>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd f85b 	bl	8000b34 <__addsf3>
 8003a7e:	4603      	mov	r3, r0
	raw[3] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_XOUT_H,
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fb3b 	bl	80010fc <__aeabi_f2iz>
 8003a86:	4603      	mov	r3, r0
 8003a88:	623b      	str	r3, [r7, #32]
	raw[4] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_YOUT_H,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	21bd      	movs	r1, #189	; 0xbd
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe ff14 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	461a      	mov	r2, r3
			0x0000)) * 1000 / AccSensitivityScaleFactor) + 0.5f;
 8003a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa2:	fb03 f302 	mul.w	r3, r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da01      	bge.n	8003aae <_ZN8Odometry11ReadAccGyroEv+0x13e>
 8003aaa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003aae:	12db      	asrs	r3, r3, #11
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd f8f3 	bl	8000c9c <__aeabi_i2f>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd f839 	bl	8000b34 <__addsf3>
 8003ac2:	4603      	mov	r3, r0
	raw[4] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_YOUT_H,
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fb19 	bl	80010fc <__aeabi_f2iz>
 8003aca:	4603      	mov	r3, r0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
	raw[5] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_ZOUT_H,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	21bf      	movs	r1, #191	; 0xbf
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fef2 	bl	80028c0 <_ZNK7MPU92509WriteWordEht>
 8003adc:	4603      	mov	r3, r0
 8003ade:	b21b      	sxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
			0x0000)) * 1000 / AccSensitivityScaleFactor) + 0.5f;
 8003ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae6:	fb03 f302 	mul.w	r3, r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da01      	bge.n	8003af2 <_ZN8Odometry11ReadAccGyroEv+0x182>
 8003aee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003af2:	12db      	asrs	r3, r3, #11
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f8d1 	bl	8000c9c <__aeabi_i2f>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd f817 	bl	8000b34 <__addsf3>
 8003b06:	4603      	mov	r3, r0
	raw[5] = (((int16_t) mpu9250->WriteWord(READ_FLAG | MPUREG_ACCEL_ZOUT_H,
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd faf7 	bl	80010fc <__aeabi_f2iz>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
//	int dy_raw_mdps = (((int16_t) mpu9250->WriteWord(
//	READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000)) * 1000 / SensitivityScaleFactor)
//			+ 0.5f;
	//temp = mpu9250->WriteWord(READ_FLAG | MPUREG_TEMP_OUT_H, 0x0000);

	for (int i = 0; i < 3; i++) {
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	dc77      	bgt.n	8003c0c <_ZN8Odometry11ReadAccGyroEv+0x29c>
		biased[i] = raw[i] - movavg[i];
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b24:	4413      	add	r3, r2
 8003b26:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2e:	3104      	adds	r1, #4
 8003b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b34:	1ad1      	subs	r1, r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3a:	320a      	adds	r2, #10
 8003b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if (biased[i] < -ang_movband || ang_movband < biased[i]) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b44:	320a      	adds	r2, #10
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8003b4e:	db06      	blt.n	8003b5e <_ZN8Odometry11ReadAccGyroEv+0x1ee>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b54:	320a      	adds	r2, #10
 8003b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5a:	2bfa      	cmp	r3, #250	; 0xfa
 8003b5c:	dd16      	ble.n	8003b8c <_ZN8Odometry11ReadAccGyroEv+0x21c>
//			yaw -= (2.0f * (float) M_PI);
//		} else if (yaw < -(float) M_PI) {
//			yaw += (2.0f * (float) M_PI);
//		}

			data[i] = biased[i] / 1000.0f;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b62:	320a      	adds	r2, #10
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd f897 	bl	8000c9c <__aeabi_i2f>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	493b      	ldr	r1, [pc, #236]	; (8003c60 <_ZN8Odometry11ReadAccGyroEv+0x2f0>)
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd f99a 	bl	8000eac <__aeabi_fdiv>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b84:	440b      	add	r3, r1
 8003b86:	f843 2c28 	str.w	r2, [r3, #-40]
 8003b8a:	e03b      	b.n	8003c04 <_ZN8Odometry11ReadAccGyroEv+0x294>
		} else {
			data[i] = 0.0f;
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b94:	4413      	add	r3, r2
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f843 2c28 	str.w	r2, [r3, #-40]
			movavg[i] = (int) ((((float) movavg[i] * (1 - ang_w))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba2:	3204      	adds	r2, #4
 8003ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fd f877 	bl	8000c9c <__aeabi_i2f>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	492c      	ldr	r1, [pc, #176]	; (8003c64 <_ZN8Odometry11ReadAccGyroEv+0x2f4>)
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd f8c6 	bl	8000d44 <__aeabi_fmul>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461c      	mov	r4, r3
					+ ((float) raw[i] * ang_w)) + 0.5f);
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f866 	bl	8000c9c <__aeabi_i2f>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <_ZN8Odometry11ReadAccGyroEv+0x2f8>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd f8b5 	bl	8000d44 <__aeabi_fmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fc ffa8 	bl	8000b34 <__addsf3>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc ffa2 	bl	8000b34 <__addsf3>
 8003bf0:	4603      	mov	r3, r0
			movavg[i] = (int) ((((float) movavg[i] * (1 - ang_w))
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fa82 	bl	80010fc <__aeabi_f2iz>
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	3204      	adds	r2, #4
 8003c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 3; i++) {
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	3301      	adds	r3, #1
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	e784      	b.n	8003b16 <_ZN8Odometry11ReadAccGyroEv+0x1a6>
		}
	}

	MDGF.updateIMU(data[0], data[1], data[2], raw[3], raw[4], raw[5]);
 8003c0c:	68bc      	ldr	r4, [r7, #8]
 8003c0e:	68fd      	ldr	r5, [r7, #12]
 8003c10:	693e      	ldr	r6, [r7, #16]
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd f841 	bl	8000c9c <__aeabi_i2f>
 8003c1a:	4680      	mov	r8, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd f83c 	bl	8000c9c <__aeabi_i2f>
 8003c24:	4681      	mov	r9, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd f837 	bl	8000c9c <__aeabi_i2f>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c36:	f8cd 8000 	str.w	r8, [sp]
 8003c3a:	4633      	mov	r3, r6
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	4621      	mov	r1, r4
 8003c40:	480a      	ldr	r0, [pc, #40]	; (8003c6c <_ZN8Odometry11ReadAccGyroEv+0x2fc>)
 8003c42:	f7fe fe9b 	bl	800297c <_ZN8Madgwick9updateIMUEffffff>
//	dt = HAL_GetTick()-lasttime;
//	lasttime=HAL_GetTick();
	this->yaw = MDGF.getYawRadians();
 8003c46:	4809      	ldr	r0, [pc, #36]	; (8003c6c <_ZN8Odometry11ReadAccGyroEv+0x2fc>)
 8003c48:	f7ff fb62 	bl	8003310 <_ZN8Madgwick13getYawRadiansEv>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	3734      	adds	r7, #52	; 0x34
 8003c56:	46bd      	mov	sp, r7
 8003c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c5c:	42033333 	.word	0x42033333
 8003c60:	447a0000 	.word	0x447a0000
 8003c64:	3f7d70a4 	.word	0x3f7d70a4
 8003c68:	3c23d70a 	.word	0x3c23d70a
 8003c6c:	200009dc 	.word	0x200009dc

08003c70 <_ZN8Odometry10InitializeEv>:

bool Odometry::Initialize(void) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	return this->InitGyro();
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fd27 	bl	80036cc <_ZN8Odometry8InitGyroEv>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN8Odometry6SampleEv>:

void Odometry::Sample(void) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	this->ReadEncoder();
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fdeb 	bl	800386c <_ZN8Odometry11ReadEncoderEv>
	this->ReadAccGyro();
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fe6a 	bl	8003970 <_ZN8Odometry11ReadAccGyroEv>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_ZN8Odometry7GetPoseEPfS0_S0_>:
	this->x = x;
	this->y = y;
	this->yaw = yaw;
}

void Odometry::GetPose(float * const x, float * const y, float * const yaw) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	*x = this->x;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	601a      	str	r2, [r3, #0]
	*y = this->y;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	601a      	str	r2, [r3, #0]
	*yaw = this->yaw;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <_Z41__static_initialization_and_destruction_0ii>:
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d102      	bne.n	8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Madgwick MDGF;
 8003cee:	4803      	ldr	r0, [pc, #12]	; (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003cf0:	f7fe fe1c 	bl	800292c <_ZN8MadgwickC1Ev>
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200009dc 	.word	0x200009dc

08003d00 <_GLOBAL__sub_I_MDGF>:
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f7ff ffe3 	bl	8003cd4 <_Z41__static_initialization_and_destruction_0ii>
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <can_init>:
CAN_FilterTypeDef filter;
uint32_t prescaler;
enum can_bus_state bus_state;

void can_init(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
    // default to 125 kbit/s
    prescaler = 48;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <can_init+0x20>)
 8003d16:	2230      	movs	r2, #48	; 0x30
 8003d18:	601a      	str	r2, [r3, #0]
    hcan.Instance = CAN1;
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <can_init+0x24>)
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <can_init+0x28>)
 8003d1e:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <can_init+0x2c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000a2c 	.word	0x20000a2c
 8003d34:	20000b94 	.word	0x20000b94
 8003d38:	40006400 	.word	0x40006400
 8003d3c:	20000a30 	.word	0x20000a30

08003d40 <can_set_filter>:

void can_set_filter(uint32_t id, uint32_t mask)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	015b      	lsls	r3, r3, #5
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <can_set_filter+0xa4>)
 8003d52:	6013      	str	r3, [r2, #0]
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <can_set_filter+0xa4>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	0e1b      	lsrs	r3, r3, #24
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <can_set_filter+0xa4>)
 8003d60:	6013      	str	r3, [r2, #0]
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <can_set_filter+0xa4>)
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d72:	4413      	add	r3, r2
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <can_set_filter+0xa4>)
 8003d76:	6053      	str	r3, [r2, #4]

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <can_set_filter+0xa4>)
 8003d80:	6093      	str	r3, [r2, #8]
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <can_set_filter+0xa4>)
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <can_set_filter+0xa4>)
 8003d8e:	6093      	str	r3, [r2, #8]
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <can_set_filter+0xa4>)
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da0:	4413      	add	r3, r2
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <can_set_filter+0xa4>)
 8003da4:	60d3      	str	r3, [r2, #12]

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <can_set_filter+0xa4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <can_set_filter+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	61da      	str	r2, [r3, #28]
    filter.FilterBank = 0;
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <can_set_filter+0xa4>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <can_set_filter+0xa4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <can_set_filter+0xa4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <can_set_filter+0xa4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	621a      	str	r2, [r3, #32]

    if (bus_state == ON_BUS)
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <can_set_filter+0xa8>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d103      	bne.n	8003dda <can_set_filter+0x9a>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 8003dd2:	4904      	ldr	r1, [pc, #16]	; (8003de4 <can_set_filter+0xa4>)
 8003dd4:	4805      	ldr	r0, [pc, #20]	; (8003dec <can_set_filter+0xac>)
 8003dd6:	f7fd fc0e 	bl	80015f6 <HAL_CAN_ConfigFilter>
    }
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000a04 	.word	0x20000a04
 8003de8:	20000a30 	.word	0x20000a30
 8003dec:	20000b94 	.word	0x20000b94

08003df0 <can_enable>:

void can_enable(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    if (bus_state == OFF_BUS)
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <can_enable+0xa8>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d148      	bne.n	8003e8e <can_enable+0x9e>
    {
        hcan.Init.Prescaler = prescaler;
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <can_enable+0xac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <can_enable+0xb0>)
 8003e02:	6053      	str	r3, [r2, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8003e04:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <can_enable+0xb0>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003e0a:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <can_enable+0xb0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003e10:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <can_enable+0xb0>)
 8003e12:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003e16:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <can_enable+0xb0>)
 8003e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e1e:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <can_enable+0xb0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = ENABLE;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <can_enable+0xb0>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <can_enable+0xb0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <can_enable+0xb0>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <can_enable+0xb0>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <can_enable+0xb0>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8003e44:	4816      	ldr	r0, [pc, #88]	; (8003ea0 <can_enable+0xb0>)
 8003e46:	f7fd fb5b 	bl	8001500 <HAL_CAN_Init>
        bus_state = ON_BUS;
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <can_enable+0xa8>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
        can_set_filter(0, 0);
 8003e50:	2100      	movs	r1, #0
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7ff ff74 	bl	8003d40 <can_set_filter>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8003e58:	4811      	ldr	r0, [pc, #68]	; (8003ea0 <can_enable+0xb0>)
 8003e5a:	f7fd fc38 	bl	80016ce <HAL_CAN_Start>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <can_enable+0x82>
        {
          /* Start Error */
          Error_Handler();
 8003e6e:	f000 fc4f 	bl	8004710 <Error_Handler>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8003e72:	2102      	movs	r1, #2
 8003e74:	480a      	ldr	r0, [pc, #40]	; (8003ea0 <can_enable+0xb0>)
 8003e76:	f7fd fca2 	bl	80017be <HAL_CAN_ActivateNotification>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <can_enable+0x9e>
        {
          /* Notification Error */
          Error_Handler();
 8003e8a:	f000 fc41 	bl	8004710 <Error_Handler>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS1;
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <can_enable+0xb4>)
 8003e90:	2202      	movs	r2, #2
 8003e92:	611a      	str	r2, [r3, #16]
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000a30 	.word	0x20000a30
 8003e9c:	20000a2c 	.word	0x20000a2c
 8003ea0:	20000b94 	.word	0x20000b94
 8003ea4:	40010c00 	.word	0x40010c00

08003ea8 <can_set_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR1;
    GPIOC->BSRR = GPIO_BSRR_BR13;
}

void can_set_bitrate(enum can_bitrate bitrate)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
    if (bus_state == ON_BUS)
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <can_set_bitrate+0x9c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d03e      	beq.n	8003f38 <can_set_bitrate+0x90>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d83c      	bhi.n	8003f3a <can_set_bitrate+0x92>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <can_set_bitrate+0x20>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003eff 	.word	0x08003eff
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f17 	.word	0x08003f17
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f27 	.word	0x08003f27
 8003ee8:	08003f2f 	.word	0x08003f2f
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <can_set_bitrate+0xa0>)
 8003eee:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003ef2:	601a      	str	r2, [r3, #0]
            break;
 8003ef4:	e021      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_20K:
            prescaler = 225;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <can_set_bitrate+0xa0>)
 8003ef8:	22e1      	movs	r2, #225	; 0xe1
 8003efa:	601a      	str	r2, [r3, #0]
            break;
 8003efc:	e01d      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_50K:
            prescaler = 90;
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f00:	225a      	movs	r2, #90	; 0x5a
 8003f02:	601a      	str	r2, [r3, #0]
            break;
 8003f04:	e019      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_100K:
            prescaler = 45;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f08:	222d      	movs	r2, #45	; 0x2d
 8003f0a:	601a      	str	r2, [r3, #0]
            break;
 8003f0c:	e015      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_125K:
            prescaler = 36;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f10:	2224      	movs	r2, #36	; 0x24
 8003f12:	601a      	str	r2, [r3, #0]
            break;
 8003f14:	e011      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_250K:
            prescaler = 18;
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f18:	2212      	movs	r2, #18
 8003f1a:	601a      	str	r2, [r3, #0]
            break;
 8003f1c:	e00d      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_500K:
            prescaler = 4;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f20:	2204      	movs	r2, #4
 8003f22:	601a      	str	r2, [r3, #0]
            break;
 8003f24:	e009      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_750K:
            prescaler = 3;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f28:	2203      	movs	r2, #3
 8003f2a:	601a      	str	r2, [r3, #0]
            break;
 8003f2c:	e005      	b.n	8003f3a <can_set_bitrate+0x92>
        case CAN_BITRATE_1000K:
            prescaler = 2;
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <can_set_bitrate+0xa0>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
            break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <can_set_bitrate+0x92>
        return;
 8003f38:	bf00      	nop
    }
}
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000a30 	.word	0x20000a30
 8003f48:	20000a2c 	.word	0x20000a2c

08003f4c <can_tx>:
        hcan.Init.Mode = CAN_MODE_NORMAL;
    }
}

uint32_t can_tx(CAN_TxHeaderTypeDef *tx_header, uint8_t (&buf)[CAN_MTU])
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
    // transmit can frame
    //hcan.pTxMsg = tx_msg;
    //status = HAL_CAN_Transmit(&hcan, timeout);

    uint32_t tx_mailbox;
    status = HAL_CAN_AddTxMessage(&hcan, tx_header, buf, &tx_mailbox);
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4806      	ldr	r0, [pc, #24]	; (8003f78 <can_tx+0x2c>)
 8003f60:	f7fd fbe0 	bl	8001724 <HAL_CAN_AddTxMessage>
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]

//    GPIOC->BSRR=GPIO_BSRR_BS13;
//    GPIOC->BSRR=GPIO_BSRR_BR13;

    led_on();
 8003f68:	f000 f808 	bl	8003f7c <led_on>
    return status;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000b94 	.word	0x20000b94

08003f7c <led_on>:
static uint32_t led_laston = 0;
static uint32_t led_lastoff = 0;

// Attempt to turn on status LED
void led_on(void)
{
 8003f7c:	b510      	push	{r4, lr}
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8003f7e:	4c09      	ldr	r4, [pc, #36]	; (8003fa4 <led_on+0x28>)
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	b96b      	cbnz	r3, 8003fa0 <led_on+0x24>
 8003f84:	f7fd faa4 	bl	80014d0 <HAL_GetTick>
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <led_on+0x2c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1ac0      	subs	r0, r0, r3
 8003f8e:	280a      	cmp	r0, #10
 8003f90:	d906      	bls.n	8003fa0 <led_on+0x24>
	{
	    GPIOC->BSRR = GPIO_BSRR_BS13;
 8003f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <led_on+0x30>)
 8003f98:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8003f9a:	f7fd fa99 	bl	80014d0 <HAL_GetTick>
 8003f9e:	6020      	str	r0, [r4, #0]
	}
}
 8003fa0:	bd10      	pop	{r4, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000a38 	.word	0x20000a38
 8003fa8:	20000a34 	.word	0x20000a34
 8003fac:	40011000 	.word	0x40011000

08003fb0 <led_process>:


// Process time-based LED events
void led_process(void)
{
 8003fb0:	b510      	push	{r4, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8003fb2:	4c0a      	ldr	r4, [pc, #40]	; (8003fdc <led_process+0x2c>)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b17b      	cbz	r3, 8003fd8 <led_process+0x28>
 8003fb8:	f7fd fa8a 	bl	80014d0 <HAL_GetTick>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	1ac0      	subs	r0, r0, r3
 8003fc0:	280a      	cmp	r0, #10
 8003fc2:	d909      	bls.n	8003fd8 <led_process+0x28>
	{
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8003fc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <led_process+0x30>)
 8003fca:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6023      	str	r3, [r4, #0]
		led_lastoff = HAL_GetTick();
 8003fd0:	f7fd fa7e 	bl	80014d0 <HAL_GetTick>
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <led_process+0x34>)
 8003fd6:	6018      	str	r0, [r3, #0]
	}
}
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000a38 	.word	0x20000a38
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	20000a34 	.word	0x20000a34

08003fe8 <NVIC_SetPriority>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da0c      	bge.n	8004016 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	490d      	ldr	r1, [pc, #52]	; (8004038 <NVIC_SetPriority+0x50>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	e00b      	b.n	800402e <NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <NVIC_SetPriority+0x54>)
 800401c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8004020:	4608      	mov	r0, r1
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	b2d9      	uxtb	r1, r3
 8004026:	1813      	adds	r3, r2, r0
 8004028:	460a      	mov	r2, r1
 800402a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	e000e100 	.word	0xe000e100

08004040 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8004046:	f7fd fa25 	bl	8001494 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 800404a:	f000 faf3 	bl	8004634 <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 800404e:	f000 fa67 	bl	8004520 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8004052:	f000 fa07 	bl	8004464 <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 8004056:	f000 f9a7 	bl	80043a8 <_ZL12MX_TIM4_Initv>
//	MX_CAN_Init(); //要らないかもだけど確認取れて無いので残しておく
	MX_SPI2_Init();
 800405a:	f000 f969 	bl	8004330 <_ZL12MX_SPI2_Initv>
	MX_USART2_UART_Init(); //デバッグ用だよ
 800405e:	f000 fabb 	bl	80045d8 <_ZL19MX_USART2_UART_Initv>
	// CANを初期化する．
	can_init();
 8004062:	f7ff fe55 	bl	8003d10 <can_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	NVIC_SetPriority(SysTick_IRQn, 1); //HAL_Delayから戻ってこなくなったので、systickの順位を上げた　二番目
 8004066:	2101      	movs	r1, #1
 8004068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800406c:	f7ff ffbc 	bl	8003fe8 <NVIC_SetPriority>
	SystemClock_Config();
 8004070:	f000 f90e 	bl	8004290 <_Z18SystemClock_Configv>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	/* USER CODE BEGIN 2 */
	SPI2->CR1 |= SPI_CR1_SPE;
 8004074:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <main+0x160>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <main+0x160>)
 800407a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407e:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2); //タイマー割り込み用
 8004080:	4848      	ldr	r0, [pc, #288]	; (80041a4 <main+0x164>)
 8004082:	f7fe f814 	bl	80020ae <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //エンコーダ用
 8004086:	2118      	movs	r1, #24
 8004088:	4847      	ldr	r0, [pc, #284]	; (80041a8 <main+0x168>)
 800408a:	f7fe f81b 	bl	80020c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800408e:	2118      	movs	r1, #24
 8004090:	4846      	ldr	r0, [pc, #280]	; (80041ac <main+0x16c>)
 8004092:	f7fe f817 	bl	80020c4 <HAL_TIM_Encoder_Start>

	//CANの通信速度を設定する
	can_set_bitrate(CAN_BITRATE_1000K);
 8004096:	2008      	movs	r0, #8
 8004098:	f7ff ff06 	bl	8003ea8 <can_set_bitrate>
//	HAL_Delay(250);
//
//	GPIOC->BSRR = GPIO_BSRR_BR13;
//	GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;

	bool r = odom->Initialize(); //ジャイロの初期化に失敗するとループに入る
 800409c:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <main+0x170>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fde5 	bl	8003c70 <_ZN8Odometry10InitializeEv>
 80040a6:	4603      	mov	r3, r0
 80040a8:	72fb      	strb	r3, [r7, #11]
	if (!r) {
 80040aa:	7afb      	ldrb	r3, [r7, #11]
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <main+0x94>
		while (1) {
			HAL_Delay(100);
 80040b6:	2064      	movs	r0, #100	; 0x64
 80040b8:	f7fd fa10 	bl	80014dc <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BR9;
 80040bc:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <main+0x174>)
 80040be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c2:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 80040c4:	2064      	movs	r0, #100	; 0x64
 80040c6:	f7fd fa09 	bl	80014dc <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BS9;
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <main+0x174>)
 80040cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d0:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 80040d2:	e7f0      	b.n	80040b6 <main+0x76>
		}
	}

	can_enable();
 80040d4:	f7ff fe8c 	bl	8003df0 <can_enable>

	HAL_NVIC_EnableIRQ(TIM2_IRQn); //割り込み有効化 上のodom->Initializeが終わってからでないと、初期化終わる前にジャイロの値をとってしまう 初期の角度がズレる
 80040d8:	201c      	movs	r0, #28
 80040da:	f7fd fbc7 	bl	800186c <HAL_NVIC_EnableIRQ>

	CANtxinit();
 80040de:	f000 f8a3 	bl	8004228 <_ZL9CANtxinitv>

	static float X;
	static float Y;
	static float Yaw;
	uint32_t last_time = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - last_time >= (1000 / CAN_Freq)) {
 80040e6:	f7fd f9f3 	bl	80014d0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	bf8c      	ite	hi
 80040f4:	2301      	movhi	r3, #1
 80040f6:	2300      	movls	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f3      	beq.n	80040e6 <main+0xa6>
			odom->GetPose(&X, &Y, &Yaw);
 80040fe:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <main+0x170>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <main+0x178>)
 8004104:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <main+0x17c>)
 8004106:	492e      	ldr	r1, [pc, #184]	; (80041c0 <main+0x180>)
 8004108:	f7ff fdcc 	bl	8003ca4 <_ZN8Odometry7GetPoseEPfS0_S0_>
			can_pack(tx_payload_x, X);
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <main+0x180>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	482c      	ldr	r0, [pc, #176]	; (80041c4 <main+0x184>)
 8004114:	f000 fb02 	bl	800471c <_Z8can_packIfEvRA8_hT_>
			can_pack(tx_payload_y, Y);
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <main+0x17c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	482a      	ldr	r0, [pc, #168]	; (80041c8 <main+0x188>)
 8004120:	f000 fafc 	bl	800471c <_Z8can_packIfEvRA8_hT_>
			can_pack(tx_payload_yaw, Yaw);
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <main+0x178>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	4828      	ldr	r0, [pc, #160]	; (80041cc <main+0x18c>)
 800412c:	f000 faf6 	bl	800471c <_Z8can_packIfEvRA8_hT_>

			can_tx(&tx_header_x, tx_payload_x); //can pack 通して tx_payload
 8004130:	4924      	ldr	r1, [pc, #144]	; (80041c4 <main+0x184>)
 8004132:	4827      	ldr	r0, [pc, #156]	; (80041d0 <main+0x190>)
 8004134:	f7ff ff0a 	bl	8003f4c <can_tx>
			asm("NOP");
 8004138:	bf00      	nop
			asm("NOP");
 800413a:	bf00      	nop
			asm("NOP");
 800413c:	bf00      	nop
			asm("NOP");
 800413e:	bf00      	nop
			asm("NOP");
 8004140:	bf00      	nop
			asm("NOP");
 8004142:	bf00      	nop
			asm("NOP");
 8004144:	bf00      	nop
			asm("NOP");
 8004146:	bf00      	nop
			asm("NOP");
 8004148:	bf00      	nop
			asm("NOP");
 800414a:	bf00      	nop
			can_tx(&tx_header_y, tx_payload_y);
 800414c:	491e      	ldr	r1, [pc, #120]	; (80041c8 <main+0x188>)
 800414e:	4821      	ldr	r0, [pc, #132]	; (80041d4 <main+0x194>)
 8004150:	f7ff fefc 	bl	8003f4c <can_tx>
			asm("NOP");
 8004154:	bf00      	nop
			asm("NOP");
 8004156:	bf00      	nop
			asm("NOP");
 8004158:	bf00      	nop
			asm("NOP");
 800415a:	bf00      	nop
			asm("NOP");
 800415c:	bf00      	nop
			asm("NOP");
 800415e:	bf00      	nop
			asm("NOP");
 8004160:	bf00      	nop
			asm("NOP");
 8004162:	bf00      	nop
			asm("NOP");
 8004164:	bf00      	nop
			asm("NOP");
 8004166:	bf00      	nop
			can_tx(&tx_header_yaw, tx_payload_yaw);
 8004168:	4918      	ldr	r1, [pc, #96]	; (80041cc <main+0x18c>)
 800416a:	481b      	ldr	r0, [pc, #108]	; (80041d8 <main+0x198>)
 800416c:	f7ff feee 	bl	8003f4c <can_tx>

			// UART使ったデバッグ用に残しておく
			char kakudo[7];
			sprintf(kakudo, "%1.2f\n\r", Yaw);
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <main+0x178>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc f957 	bl	8000428 <__aeabi_f2d>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	1d38      	adds	r0, r7, #4
 8004180:	461a      	mov	r2, r3
 8004182:	4623      	mov	r3, r4
 8004184:	4915      	ldr	r1, [pc, #84]	; (80041dc <main+0x19c>)
 8004186:	f002 f98b 	bl	80064a0 <sprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *) kakudo, 7);
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	2207      	movs	r2, #7
 800418e:	4619      	mov	r1, r3
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <main+0x1a0>)
 8004192:	f7fe fa09 	bl	80025a8 <HAL_UART_Transmit_IT>

			last_time = HAL_GetTick();
 8004196:	f7fd f99b 	bl	80014d0 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 800419c:	e7a3      	b.n	80040e6 <main+0xa6>
 800419e:	bf00      	nop
 80041a0:	40003800 	.word	0x40003800
 80041a4:	20000a94 	.word	0x20000a94
 80041a8:	20000ad4 	.word	0x20000ad4
 80041ac:	20000b14 	.word	0x20000b14
 80041b0:	20000c04 	.word	0x20000c04
 80041b4:	40010c00 	.word	0x40010c00
 80041b8:	20000c28 	.word	0x20000c28
 80041bc:	20000c24 	.word	0x20000c24
 80041c0:	20000c20 	.word	0x20000c20
 80041c4:	20000c08 	.word	0x20000c08
 80041c8:	20000c10 	.word	0x20000c10
 80041cc:	20000c18 	.word	0x20000c18
 80041d0:	20000bbc 	.word	0x20000bbc
 80041d4:	20000bd4 	.word	0x20000bd4
 80041d8:	20000bec 	.word	0x20000bec
 80041dc:	08009468 	.word	0x08009468
 80041e0:	20000b54 	.word	0x20000b54

080041e4 <TIM2_IRQHandler>:
}

extern "C" void TIM2_IRQHandler(void) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 80041e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <TIM2_IRQHandler+0x36>
		odom->Sample();
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <TIM2_IRQHandler+0x40>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fd3f 	bl	8003c88 <_ZN8Odometry6SampleEv>

		TIM2->SR &= ~TIM_SR_UIF;
 800420a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6113      	str	r3, [r2, #16]
	}

	led_process();
 800421a:	f7ff fec9 	bl	8003fb0 <led_process>
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000c04 	.word	0x20000c04

08004228 <_ZL9CANtxinitv>:

void CANtxinit(void) {
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0

	tx_header_x.RTR = CAN_RTR_DATA;
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <_ZL9CANtxinitv+0x5c>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
	tx_header_x.IDE = CAN_ID_STD;
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <_ZL9CANtxinitv+0x5c>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
	tx_header_x.StdId = 0x205; //ID決める
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <_ZL9CANtxinitv+0x5c>)
 800423a:	f240 2205 	movw	r2, #517	; 0x205
 800423e:	601a      	str	r2, [r3, #0]
	tx_header_x.DLC = 4;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <_ZL9CANtxinitv+0x5c>)
 8004242:	2204      	movs	r2, #4
 8004244:	611a      	str	r2, [r3, #16]
	tx_header_y.RTR = CAN_RTR_DATA;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <_ZL9CANtxinitv+0x60>)
 8004248:	2200      	movs	r2, #0
 800424a:	60da      	str	r2, [r3, #12]
	tx_header_y.IDE = CAN_ID_STD;
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <_ZL9CANtxinitv+0x60>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
	tx_header_y.StdId = 0x206;
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <_ZL9CANtxinitv+0x60>)
 8004254:	f240 2206 	movw	r2, #518	; 0x206
 8004258:	601a      	str	r2, [r3, #0]
	tx_header_y.DLC = 4;
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <_ZL9CANtxinitv+0x60>)
 800425c:	2204      	movs	r2, #4
 800425e:	611a      	str	r2, [r3, #16]
	tx_header_yaw.RTR = CAN_RTR_DATA;
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <_ZL9CANtxinitv+0x64>)
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
	tx_header_yaw.IDE = CAN_ID_STD;
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <_ZL9CANtxinitv+0x64>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
	tx_header_yaw.StdId = 0x207;
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <_ZL9CANtxinitv+0x64>)
 800426e:	f240 2207 	movw	r2, #519	; 0x207
 8004272:	601a      	str	r2, [r3, #0]
	tx_header_yaw.DLC = 4;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <_ZL9CANtxinitv+0x64>)
 8004276:	2204      	movs	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000bbc 	.word	0x20000bbc
 8004288:	20000bd4 	.word	0x20000bd4
 800428c:	20000bec 	.word	0x20000bec

08004290 <_Z18SystemClock_Configv>:
/* USER CODE END 3 */
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b090      	sub	sp, #64	; 0x40
 8004294:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004296:	f107 0318 	add.w	r3, r7, #24
 800429a:	2228      	movs	r2, #40	; 0x28
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f002 f894 	bl	80063cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80042a4:	1d3b      	adds	r3, r7, #4
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	611a      	str	r2, [r3, #16]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042bc:	2300      	movs	r3, #0
 80042be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042c0:	2301      	movs	r3, #1
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042c4:	2302      	movs	r3, #2
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80042d4:	f107 0318 	add.w	r3, r7, #24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fd fc17 	bl	8001b0c <HAL_RCC_OscConfig>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 80042ee:	f000 fa0f 	bl	8004710 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80042f2:	230f      	movs	r3, #15
 80042f4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f6:	2302      	movs	r3, #2
 80042f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004302:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fdc3 	bl	8001e98 <HAL_RCC_ClockConfig>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8004322:	f000 f9f5 	bl	8004710 <Error_Handler>
	}
}
 8004326:	bf00      	nop
 8004328:	3740      	adds	r7, #64	; 0x40
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <_ZL12MX_SPI2_Initv+0x74>)
 8004338:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 800433c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004340:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 800435c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004360:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004364:	2228      	movs	r2, #40	; 0x28
 8004366:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 800436a:	2200      	movs	r2, #0
 800436c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004370:	2200      	movs	r2, #0
 8004372:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 800437c:	2207      	movs	r2, #7
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8004380:	4807      	ldr	r0, [pc, #28]	; (80043a0 <_ZL12MX_SPI2_Initv+0x70>)
 8004382:	f7fd fe59 	bl	8002038 <HAL_SPI_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 8004396:	f000 f9bb 	bl	8004710 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000a3c 	.word	0x20000a3c
 80043a4:	40003800 	.word	0x40003800

080043a8 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f002 f808 	bl	80063cc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043c6:	4a26      	ldr	r2, [pc, #152]	; (8004460 <_ZL12MX_TIM4_Initv+0xb8>)
 80043c8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d0:	4b22      	ldr	r3, [pc, #136]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xffff;
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043dc:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043de:	4b1f      	ldr	r3, [pc, #124]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043ea:	2303      	movs	r3, #3
 80043ec:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004402:	2301      	movs	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	4619      	mov	r1, r3
 8004414:	4811      	ldr	r0, [pc, #68]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 8004416:	f7fd ff83 	bl	8002320 <HAL_TIM_Encoder_Init>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <_ZL12MX_TIM4_Initv+0x86>
		Error_Handler();
 800442a:	f000 f971 	bl	8004710 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4808      	ldr	r0, [pc, #32]	; (800445c <_ZL12MX_TIM4_Initv+0xb4>)
 800443c:	f7fd ffb9 	bl	80023b2 <HAL_TIMEx_MasterConfigSynchronization>
 8004440:	4603      	mov	r3, r0
			!= HAL_OK) {
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <_ZL12MX_TIM4_Initv+0xac>
		Error_Handler();
 8004450:	f000 f95e 	bl	8004710 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004454:	bf00      	nop
 8004456:	3730      	adds	r7, #48	; 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000b14 	.word	0x20000b14
 8004460:	40000800 	.word	0x40000800

08004464 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800446a:	f107 030c 	add.w	r3, r7, #12
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 ffaa 	bl	80063cc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 8004482:	4a26      	ldr	r2, [pc, #152]	; (800451c <_ZL12MX_TIM3_Initv+0xb8>)
 8004484:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 8004492:	4b21      	ldr	r3, [pc, #132]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 8004494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004498:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800449a:	4b1f      	ldr	r3, [pc, #124]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 800449c:	2200      	movs	r2, #0
 800449e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80044a6:	2303      	movs	r3, #3
 80044a8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044be:	2301      	movs	r3, #1
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	4619      	mov	r1, r3
 80044d0:	4811      	ldr	r0, [pc, #68]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 80044d2:	f7fd ff25 	bl	8002320 <HAL_TIM_Encoder_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 80044e6:	f000 f913 	bl	8004710 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4808      	ldr	r0, [pc, #32]	; (8004518 <_ZL12MX_TIM3_Initv+0xb4>)
 80044f8:	f7fd ff5b 	bl	80023b2 <HAL_TIMEx_MasterConfigSynchronization>
 80044fc:	4603      	mov	r3, r0
			!= HAL_OK) {
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 800450c:	f000 f900 	bl	8004710 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8004510:	bf00      	nop
 8004512:	3730      	adds	r7, #48	; 0x30
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000ad4 	.word	0x20000ad4
 800451c:	40000400 	.word	0x40000400

08004520 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004534:	463b      	mov	r3, r7
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800453e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004542:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9 - 1; //512Hz
 8004544:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004546:	2208      	movs	r2, #8
 8004548:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15625-1;
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004552:	f643 5208 	movw	r2, #15624	; 0x3d08
 8004556:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800455a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004566:	481b      	ldr	r0, [pc, #108]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 8004568:	f7fd fec0 	bl	80022ec <HAL_TIM_Base_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <_ZL12MX_TIM2_Initv+0x60>
		Error_Handler();
 800457c:	f000 f8c8 	bl	8004710 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004584:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	4619      	mov	r1, r3
 800458c:	4811      	ldr	r0, [pc, #68]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 800458e:	f7fd fdbb 	bl	8002108 <HAL_TIM_ConfigClockSource>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <_ZL12MX_TIM2_Initv+0x86>
		Error_Handler();
 80045a2:	f000 f8b5 	bl	8004710 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80045ae:	463b      	mov	r3, r7
 80045b0:	4619      	mov	r1, r3
 80045b2:	4808      	ldr	r0, [pc, #32]	; (80045d4 <_ZL12MX_TIM2_Initv+0xb4>)
 80045b4:	f7fd fefd 	bl	80023b2 <HAL_TIMEx_MasterConfigSynchronization>
 80045b8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 80045c8:	f000 f8a2 	bl	8004710 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80045cc:	bf00      	nop
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000a94 	.word	0x20000a94

080045d8 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <_ZL19MX_USART2_UART_Initv+0x58>)
 80045e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200; //変更してもいいかな
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 80045fe:	220c      	movs	r2, #12
 8004600:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 800460a:	2200      	movs	r2, #0
 800460c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <_ZL19MX_USART2_UART_Initv+0x54>)
 8004610:	f7fd ff9c 	bl	800254c <HAL_UART_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8004624:	f000 f874 	bl	8004710 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	/* USER CODE END USART2_Init 2 */

}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000b54 	.word	0x20000b54
 8004630:	40004400 	.word	0x40004400

08004634 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800463a:	f107 0310 	add.w	r3, r7, #16
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004648:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4a2d      	ldr	r2, [pc, #180]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800464e:	f043 0310 	orr.w	r3, r3, #16
 8004652:	6193      	str	r3, [r2, #24]
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8004660:	4b28      	ldr	r3, [pc, #160]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	6193      	str	r3, [r2, #24]
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004678:	4b22      	ldr	r3, [pc, #136]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	4a21      	ldr	r2, [pc, #132]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800467e:	f043 0304 	orr.w	r3, r3, #4
 8004682:	6193      	str	r3, [r2, #24]
 8004684:	4b1f      	ldr	r3, [pc, #124]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004690:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 8004696:	f043 0308 	orr.w	r3, r3, #8
 800469a:	6193      	str	r3, [r2, #24]
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <_ZL12MX_GPIO_Initv+0xd0>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80046a8:	2200      	movs	r2, #0
 80046aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046ae:	4816      	ldr	r0, [pc, #88]	; (8004708 <_ZL12MX_GPIO_Initv+0xd4>)
 80046b0:	f7fd fa26 	bl	8001b00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80046b4:	2200      	movs	r2, #0
 80046b6:	f241 6107 	movw	r1, #5639	; 0x1607
 80046ba:	4814      	ldr	r0, [pc, #80]	; (800470c <_ZL12MX_GPIO_Initv+0xd8>)
 80046bc:	f7fd fa20 	bl	8001b00 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12
					| GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80046c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046c6:	2301      	movs	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ce:	2302      	movs	r3, #2
 80046d0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	4619      	mov	r1, r3
 80046d8:	480b      	ldr	r0, [pc, #44]	; (8004708 <_ZL12MX_GPIO_Initv+0xd4>)
 80046da:	f7fd f931 	bl	8001940 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB12 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 80046de:	f241 6307 	movw	r3, #5639	; 0x1607
 80046e2:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e4:	2301      	movs	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ec:	2302      	movs	r3, #2
 80046ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	4619      	mov	r1, r3
 80046f6:	4805      	ldr	r0, [pc, #20]	; (800470c <_ZL12MX_GPIO_Initv+0xd8>)
 80046f8:	f7fd f922 	bl	8001940 <HAL_GPIO_Init>

	//GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
	//GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
	//LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
 80046fc:	bf00      	nop
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	40011000 	.word	0x40011000
 800470c:	40010c00 	.word	0x40010c00

08004710 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <_Z8can_packIfEvRA8_hT_>:
     data = _e.data;
 }

 // packs can payload
 template<typename T>
 void can_pack(uint8_t (&buf)[CAN_MTU], const T data) //第一引数に格納用の配列
 800471c:	b490      	push	{r4, r7}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
 {
     _Encapsulator<T> _e;
     _e.data = data;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	60bb      	str	r3, [r7, #8]

     for (int i = sizeof(T); i > 0;)
 800472a:	2304      	movs	r3, #4
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dd17      	ble.n	8004764 <_Z8can_packIfEvRA8_hT_+0x48>
     {
         i--;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
         buf[i] = _e.i & 0xff;
 800473a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800473e:	b2d9      	uxtb	r1, r3
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	4413      	add	r3, r2
 8004746:	460a      	mov	r2, r1
 8004748:	701a      	strb	r2, [r3, #0]
         _e.i >>= 8;
 800474a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	f04f 0400 	mov.w	r4, #0
 8004756:	0a0b      	lsrs	r3, r1, #8
 8004758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800475c:	0a14      	lsrs	r4, r2, #8
 800475e:	e9c7 3402 	strd	r3, r4, [r7, #8]
     for (int i = sizeof(T); i > 0;)
 8004762:	e7e4      	b.n	800472e <_Z8can_packIfEvRA8_hT_+0x12>
     }
 }
 8004764:	bf00      	nop
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bc90      	pop	{r4, r7}
 800476c:	4770      	bx	lr
	...

08004770 <_Z41__static_initialization_and_destruction_0ii>:
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d10e      	bne.n	800479e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004786:	4293      	cmp	r3, r2
 8004788:	d109      	bne.n	800479e <_Z41__static_initialization_and_destruction_0ii+0x2e>
Odometry *odom = new Odometry();
 800478a:	2040      	movs	r0, #64	; 0x40
 800478c:	f000 f9cb 	bl	8004b26 <_Znwj>
 8004790:	4603      	mov	r3, r0
 8004792:	461c      	mov	r4, r3
 8004794:	4620      	mov	r0, r4
 8004796:	f7fe fdcd 	bl	8003334 <_ZN8OdometryC1Ev>
 800479a:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800479c:	601c      	str	r4, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd90      	pop	{r4, r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000c04 	.word	0x20000c04

080047ac <_GLOBAL__sub_I_hspi2>:
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7ff ffdb 	bl	8004770 <_Z41__static_initialization_and_destruction_0ii>
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <HAL_MspInit+0x3c>)
{
 80047be:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	619a      	str	r2, [r3, #24]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	f002 0201 	and.w	r2, r2, #1
 80047ce:	9200      	str	r2, [sp, #0]
 80047d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047d8:	61da      	str	r2, [r3, #28]
 80047da:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047dc:	4a07      	ldr	r2, [pc, #28]	; (80047fc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047e6:	6853      	ldr	r3, [r2, #4]
 80047e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80047ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047f2:	b002      	add	sp, #8
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40010000 	.word	0x40010000

08004800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004800:	b510      	push	{r4, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004806:	2210      	movs	r2, #16
 8004808:	2100      	movs	r1, #0
 800480a:	a802      	add	r0, sp, #8
 800480c:	f001 fdde 	bl	80063cc <memset>
  if(hcan->Instance==CAN1)
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_CAN_MspInit+0x7c>)
 8004814:	429a      	cmp	r2, r3
 8004816:	d12e      	bne.n	8004876 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004818:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800481c:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004820:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004824:	61da      	str	r2, [r3, #28]
 8004826:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	4815      	ldr	r0, [pc, #84]	; (8004880 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800482a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800482e:	9200      	str	r2, [sp, #0]
 8004830:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE(); //GPIOBじゃ無いあたりが気になるけど、動いてるしバグが怖いのでそのままに
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	f042 0204 	orr.w	r2, r2, #4
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004848:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484a:	f7fd f879 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004852:	2302      	movs	r3, #2
 8004854:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004858:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485a:	a902      	add	r1, sp, #8
 800485c:	4808      	ldr	r0, [pc, #32]	; (8004880 <HAL_CAN_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800485e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	f7fd f86e 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    __HAL_AFIO_REMAP_CAN1_2();
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <HAL_CAN_MspInit+0x84>)
 8004866:	6853      	ldr	r3, [r2, #4]
 8004868:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800486c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004874:	6053      	str	r3, [r2, #4]
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004876:	b006      	add	sp, #24
 8004878:	bd10      	pop	{r4, pc}
 800487a:	bf00      	nop
 800487c:	40006400 	.word	0x40006400
 8004880:	40010c00 	.word	0x40010c00
 8004884:	40010000 	.word	0x40010000

08004888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488e:	2210      	movs	r2, #16
 8004890:	2100      	movs	r1, #0
 8004892:	a802      	add	r0, sp, #8
 8004894:	f001 fd9a 	bl	80063cc <memset>
  if(hspi->Instance==SPI2)
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_SPI_MspInit+0x70>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d128      	bne.n	80048f2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048a0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80048a4:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ac:	61da      	str	r2, [r3, #28]
 80048ae:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b0:	4812      	ldr	r0, [pc, #72]	; (80048fc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80048b6:	9200      	str	r2, [sp, #0]
 80048b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ba:	699a      	ldr	r2, [r3, #24]
 80048bc:	f042 0208 	orr.w	r2, r2, #8
 80048c0:	619a      	str	r2, [r3, #24]
 80048c2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048d6:	2303      	movs	r3, #3
 80048d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f7fd f831 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048e2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e4:	4805      	ldr	r0, [pc, #20]	; (80048fc <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048e6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	f7fd f827 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048f2:	b006      	add	sp, #24
 80048f4:	bd10      	pop	{r4, pc}
 80048f6:	bf00      	nop
 80048f8:	40003800 	.word	0x40003800
 80048fc:	40010c00 	.word	0x40010c00

08004900 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	2210      	movs	r2, #16
{
 8004902:	b510      	push	{r4, lr}
 8004904:	4604      	mov	r4, r0
 8004906:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	eb0d 0002 	add.w	r0, sp, r2
 800490c:	2100      	movs	r1, #0
 800490e:	f001 fd5d 	bl	80063cc <memset>
  if(htim_encoder->Instance==TIM3)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_TIM_Encoder_MspInit+0xa4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <HAL_TIM_Encoder_MspInit+0x66>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 800491a:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_TIM_Encoder_MspInit+0xa8>)
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491c:	a904      	add	r1, sp, #16
      __HAL_RCC_TIM3_CLK_ENABLE();
 800491e:	69da      	ldr	r2, [r3, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004920:	4822      	ldr	r0, [pc, #136]	; (80049ac <HAL_TIM_Encoder_MspInit+0xac>)
      __HAL_RCC_TIM3_CLK_ENABLE();
 8004922:	f042 0202 	orr.w	r2, r2, #2
 8004926:	61da      	str	r2, [r3, #28]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	f002 0202 	and.w	r2, r2, #2
 800492e:	9200      	str	r2, [sp, #0]
 8004930:	9a00      	ldr	r2, [sp, #0]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	f042 0208 	orr.w	r2, r2, #8
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	9b01      	ldr	r3, [sp, #4]
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004948:	2301      	movs	r3, #1
 800494a:	9306      	str	r3, [sp, #24]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	f7fc fff8 	bl	8001940 <HAL_GPIO_Init>

      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004950:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8004952:	6853      	ldr	r3, [r2, #4]
 8004954:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004958:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800495c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004960:	6053      	str	r3, [r2, #4]

  /* USER CODE END TIM4_MspInit 1 */
  }


}
 8004962:	b008      	add	sp, #32
 8004964:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM4)
 8004966:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d1fa      	bne.n	8004962 <HAL_TIM_Encoder_MspInit+0x62>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <HAL_TIM_Encoder_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496e:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004970:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004972:	480e      	ldr	r0, [pc, #56]	; (80049ac <HAL_TIM_Encoder_MspInit+0xac>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004974:	f042 0204 	orr.w	r2, r2, #4
 8004978:	61da      	str	r2, [r3, #28]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	f002 0204 	and.w	r2, r2, #4
 8004980:	9202      	str	r2, [sp, #8]
 8004982:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004996:	23c0      	movs	r3, #192	; 0xc0
 8004998:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499a:	2301      	movs	r3, #1
 800499c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800499e:	f7fc ffcf 	bl	8001940 <HAL_GPIO_Init>
}
 80049a2:	e7de      	b.n	8004962 <HAL_TIM_Encoder_MspInit+0x62>
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40010c00 	.word	0x40010c00
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000800 	.word	0x40000800

080049b8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80049b8:	6803      	ldr	r3, [r0, #0]
{
 80049ba:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d110      	bne.n	80049e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80049c6:	69da      	ldr	r2, [r3, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049c8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049d0:	2200      	movs	r2, #0
 80049d2:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80049de:	b002      	add	sp, #8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049e0:	f7fc bf10 	b.w	8001804 <HAL_NVIC_SetPriority>
}
 80049e4:	b002      	add	sp, #8
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4604      	mov	r4, r0
 80049ec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ee:	2210      	movs	r2, #16
 80049f0:	2100      	movs	r1, #0
 80049f2:	a802      	add	r0, sp, #8
 80049f4:	f001 fcea 	bl	80063cc <memset>
  if(huart->Instance==USART2)
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_UART_MspInit+0x7c>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d12f      	bne.n	8004a60 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a00:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004a04:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a06:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a0c:	61da      	str	r2, [r3, #28]
 8004a0e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a10:	4815      	ldr	r0, [pc, #84]	; (8004a68 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a12:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004a16:	9200      	str	r2, [sp, #0]
 8004a18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a1c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1e:	f042 0204 	orr.w	r2, r2, #4
 8004a22:	619a      	str	r2, [r3, #24]
 8004a24:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a26:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a36:	2303      	movs	r3, #3
 8004a38:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a3a:	f7fc ff81 	bl	8001940 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a3e:	2308      	movs	r3, #8
 8004a40:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a44:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a46:	a902      	add	r1, sp, #8
 8004a48:	4807      	ldr	r0, [pc, #28]	; (8004a68 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a4a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4c:	f7fc ff78 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a50:	2026      	movs	r0, #38	; 0x26
 8004a52:	4622      	mov	r2, r4
 8004a54:	4621      	mov	r1, r4
 8004a56:	f7fc fed5 	bl	8001804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a5a:	2026      	movs	r0, #38	; 0x26
 8004a5c:	f7fc ff06 	bl	800186c <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a60:	b006      	add	sp, #24
 8004a62:	bd10      	pop	{r4, pc}
 8004a64:	40004400 	.word	0x40004400
 8004a68:	40010800 	.word	0x40010800

08004a6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a6c:	4770      	bx	lr

08004a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a6e:	e7fe      	b.n	8004a6e <HardFault_Handler>

08004a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a70:	e7fe      	b.n	8004a70 <MemManage_Handler>

08004a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a72:	e7fe      	b.n	8004a72 <BusFault_Handler>

08004a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a74:	e7fe      	b.n	8004a74 <UsageFault_Handler>

08004a76 <SVC_Handler>:
 8004a76:	4770      	bx	lr

08004a78 <DebugMon_Handler>:
 8004a78:	4770      	bx	lr

08004a7a <PendSV_Handler>:
 8004a7a:	4770      	bx	lr

08004a7c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a7c:	f7fc bd1c 	b.w	80014b8 <HAL_IncTick>

08004a80 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <USART2_IRQHandler+0x8>)
 8004a82:	f7fd bdef 	b.w	8002664 <HAL_UART_IRQHandler>
 8004a86:	bf00      	nop
 8004a88:	20000b54 	.word	0x20000b54

08004a8c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <SystemInit+0x40>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <SystemInit+0x44>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004aa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004aba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004abe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <SystemInit+0x48>)
 8004ac6:	609a      	str	r2, [r3, #8]
#endif 
}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	f8ff0000 	.word	0xf8ff0000
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004ad8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004ada:	e003      	b.n	8004ae4 <LoopCopyDataInit>

08004adc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004ade:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004ae0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004ae2:	3104      	adds	r1, #4

08004ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004ae4:	480a      	ldr	r0, [pc, #40]	; (8004b10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ae8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004aea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004aec:	d3f6      	bcc.n	8004adc <CopyDataInit>
  ldr r2, =_sbss
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004af0:	e002      	b.n	8004af8 <LoopFillZerobss>

08004af2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004af2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004af4:	f842 3b04 	str.w	r3, [r2], #4

08004af8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004afa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004afc:	d3f9      	bcc.n	8004af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004afe:	f7ff ffc5 	bl	8004a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b02:	f001 f9f9 	bl	8005ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b06:	f7ff fa9b 	bl	8004040 <main>
  bx lr
 8004b0a:	4770      	bx	lr
  ldr r3, =_sidata
 8004b0c:	08009b0c 	.word	0x08009b0c
  ldr r0, =_sdata
 8004b10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b14:	200009c0 	.word	0x200009c0
  ldr r2, =_sbss
 8004b18:	200009c0 	.word	0x200009c0
  ldr r3, = _ebss
 8004b1c:	20000c7c 	.word	0x20000c7c

08004b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b20:	e7fe      	b.n	8004b20 <ADC1_2_IRQHandler>

08004b22 <_ZdlPvj>:
 8004b22:	f000 b819 	b.w	8004b58 <_ZdlPv>

08004b26 <_Znwj>:
 8004b26:	b510      	push	{r4, lr}
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	4604      	movne	r4, r0
 8004b2e:	2401      	moveq	r4, #1
 8004b30:	4620      	mov	r0, r4
 8004b32:	f001 fa05 	bl	8005f40 <malloc>
 8004b36:	b930      	cbnz	r0, 8004b46 <_Znwj+0x20>
 8004b38:	f000 f806 	bl	8004b48 <_ZSt15get_new_handlerv>
 8004b3c:	b908      	cbnz	r0, 8004b42 <_Znwj+0x1c>
 8004b3e:	f001 f9cd 	bl	8005edc <abort>
 8004b42:	4780      	blx	r0
 8004b44:	e7f4      	b.n	8004b30 <_Znwj+0xa>
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <_ZSt15get_new_handlerv>:
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <_ZSt15get_new_handlerv+0xc>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	f3bf 8f5b 	dmb	ish
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000c2c 	.word	0x20000c2c

08004b58 <_ZdlPv>:
 8004b58:	f001 b9fa 	b.w	8005f50 <free>

08004b5c <cosf>:
 8004b5c:	b507      	push	{r0, r1, r2, lr}
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <cosf+0x64>)
 8004b60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004b64:	4293      	cmp	r3, r2
 8004b66:	4601      	mov	r1, r0
 8004b68:	dc03      	bgt.n	8004b72 <cosf+0x16>
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f000 fc78 	bl	8005460 <__kernel_cosf>
 8004b70:	e004      	b.n	8004b7c <cosf+0x20>
 8004b72:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004b76:	db04      	blt.n	8004b82 <cosf+0x26>
 8004b78:	f7fb ffda 	bl	8000b30 <__aeabi_fsub>
 8004b7c:	b003      	add	sp, #12
 8004b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b82:	4669      	mov	r1, sp
 8004b84:	f000 fac0 	bl	8005108 <__ieee754_rem_pio2f>
 8004b88:	f000 0203 	and.w	r2, r0, #3
 8004b8c:	2a01      	cmp	r2, #1
 8004b8e:	d005      	beq.n	8004b9c <cosf+0x40>
 8004b90:	2a02      	cmp	r2, #2
 8004b92:	d00a      	beq.n	8004baa <cosf+0x4e>
 8004b94:	b972      	cbnz	r2, 8004bb4 <cosf+0x58>
 8004b96:	9901      	ldr	r1, [sp, #4]
 8004b98:	9800      	ldr	r0, [sp, #0]
 8004b9a:	e7e7      	b.n	8004b6c <cosf+0x10>
 8004b9c:	9901      	ldr	r1, [sp, #4]
 8004b9e:	9800      	ldr	r0, [sp, #0]
 8004ba0:	f000 ff7c 	bl	8005a9c <__kernel_sinf>
 8004ba4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004ba8:	e7e8      	b.n	8004b7c <cosf+0x20>
 8004baa:	9901      	ldr	r1, [sp, #4]
 8004bac:	9800      	ldr	r0, [sp, #0]
 8004bae:	f000 fc57 	bl	8005460 <__kernel_cosf>
 8004bb2:	e7f7      	b.n	8004ba4 <cosf+0x48>
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	9901      	ldr	r1, [sp, #4]
 8004bb8:	9800      	ldr	r0, [sp, #0]
 8004bba:	f000 ff6f 	bl	8005a9c <__kernel_sinf>
 8004bbe:	e7dd      	b.n	8004b7c <cosf+0x20>
 8004bc0:	3f490fd8 	.word	0x3f490fd8

08004bc4 <sinf>:
 8004bc4:	b507      	push	{r0, r1, r2, lr}
 8004bc6:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <sinf+0x68>)
 8004bc8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	4601      	mov	r1, r0
 8004bd0:	dc04      	bgt.n	8004bdc <sinf+0x18>
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f000 ff61 	bl	8005a9c <__kernel_sinf>
 8004bda:	e004      	b.n	8004be6 <sinf+0x22>
 8004bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004be0:	db04      	blt.n	8004bec <sinf+0x28>
 8004be2:	f7fb ffa5 	bl	8000b30 <__aeabi_fsub>
 8004be6:	b003      	add	sp, #12
 8004be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bec:	4669      	mov	r1, sp
 8004bee:	f000 fa8b 	bl	8005108 <__ieee754_rem_pio2f>
 8004bf2:	f000 0003 	and.w	r0, r0, #3
 8004bf6:	2801      	cmp	r0, #1
 8004bf8:	d006      	beq.n	8004c08 <sinf+0x44>
 8004bfa:	2802      	cmp	r0, #2
 8004bfc:	d009      	beq.n	8004c12 <sinf+0x4e>
 8004bfe:	b980      	cbnz	r0, 8004c22 <sinf+0x5e>
 8004c00:	2201      	movs	r2, #1
 8004c02:	9901      	ldr	r1, [sp, #4]
 8004c04:	9800      	ldr	r0, [sp, #0]
 8004c06:	e7e6      	b.n	8004bd6 <sinf+0x12>
 8004c08:	9901      	ldr	r1, [sp, #4]
 8004c0a:	9800      	ldr	r0, [sp, #0]
 8004c0c:	f000 fc28 	bl	8005460 <__kernel_cosf>
 8004c10:	e7e9      	b.n	8004be6 <sinf+0x22>
 8004c12:	2201      	movs	r2, #1
 8004c14:	9901      	ldr	r1, [sp, #4]
 8004c16:	9800      	ldr	r0, [sp, #0]
 8004c18:	f000 ff40 	bl	8005a9c <__kernel_sinf>
 8004c1c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004c20:	e7e1      	b.n	8004be6 <sinf+0x22>
 8004c22:	9901      	ldr	r1, [sp, #4]
 8004c24:	9800      	ldr	r0, [sp, #0]
 8004c26:	f000 fc1b 	bl	8005460 <__kernel_cosf>
 8004c2a:	e7f7      	b.n	8004c1c <sinf+0x58>
 8004c2c:	3f490fd8 	.word	0x3f490fd8

08004c30 <asinf>:
 8004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c32:	b08b      	sub	sp, #44	; 0x2c
 8004c34:	4604      	mov	r4, r0
 8004c36:	f000 f895 	bl	8004d64 <__ieee754_asinf>
 8004c3a:	4e21      	ldr	r6, [pc, #132]	; (8004cc0 <asinf+0x90>)
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	f996 3000 	ldrsb.w	r3, [r6]
 8004c42:	3301      	adds	r3, #1
 8004c44:	d038      	beq.n	8004cb8 <asinf+0x88>
 8004c46:	4621      	mov	r1, r4
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fc fa41 	bl	80010d0 <__aeabi_fcmpun>
 8004c4e:	4607      	mov	r7, r0
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d131      	bne.n	8004cb8 <asinf+0x88>
 8004c54:	4620      	mov	r0, r4
 8004c56:	f001 f8ab 	bl	8005db0 <fabsf>
 8004c5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004c5e:	f7fc fa2d 	bl	80010bc <__aeabi_fcmpgt>
 8004c62:	b348      	cbz	r0, 8004cb8 <asinf+0x88>
 8004c64:	2301      	movs	r3, #1
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <asinf+0x94>)
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	9708      	str	r7, [sp, #32]
 8004c70:	f7fb fbda 	bl	8000428 <__aeabi_f2d>
 8004c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c7c:	4812      	ldr	r0, [pc, #72]	; (8004cc8 <asinf+0x98>)
 8004c7e:	f000 ff85 	bl	8005b8c <nan>
 8004c82:	f996 3000 	ldrsb.w	r3, [r6]
 8004c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d104      	bne.n	8004c98 <asinf+0x68>
 8004c8e:	f001 f92d 	bl	8005eec <__errno>
 8004c92:	2321      	movs	r3, #33	; 0x21
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e004      	b.n	8004ca2 <asinf+0x72>
 8004c98:	4668      	mov	r0, sp
 8004c9a:	f000 ff75 	bl	8005b88 <matherr>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0f5      	beq.n	8004c8e <asinf+0x5e>
 8004ca2:	9b08      	ldr	r3, [sp, #32]
 8004ca4:	b11b      	cbz	r3, 8004cae <asinf+0x7e>
 8004ca6:	f001 f921 	bl	8005eec <__errno>
 8004caa:	9b08      	ldr	r3, [sp, #32]
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb2:	f7fb fee9 	bl	8000a88 <__aeabi_d2f>
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4628      	mov	r0, r5
 8004cba:	b00b      	add	sp, #44	; 0x2c
 8004cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000000c 	.word	0x2000000c
 8004cc4:	08009488 	.word	0x08009488
 8004cc8:	080099ed 	.word	0x080099ed

08004ccc <atan2f>:
 8004ccc:	f000 b98c 	b.w	8004fe8 <__ieee754_atan2f>

08004cd0 <sqrtf>:
 8004cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd2:	b08b      	sub	sp, #44	; 0x2c
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	f000 fb6f 	bl	80053b8 <__ieee754_sqrtf>
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <sqrtf+0x8c>)
 8004cdc:	4606      	mov	r6, r0
 8004cde:	f993 5000 	ldrsb.w	r5, [r3]
 8004ce2:	1c6b      	adds	r3, r5, #1
 8004ce4:	d02a      	beq.n	8004d3c <sqrtf+0x6c>
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fc f9f1 	bl	80010d0 <__aeabi_fcmpun>
 8004cee:	4607      	mov	r7, r0
 8004cf0:	bb20      	cbnz	r0, 8004d3c <sqrtf+0x6c>
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7fc f9c3 	bl	8001080 <__aeabi_fcmplt>
 8004cfa:	b1f8      	cbz	r0, 8004d3c <sqrtf+0x6c>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <sqrtf+0x90>)
 8004d02:	4620      	mov	r0, r4
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9708      	str	r7, [sp, #32]
 8004d08:	f7fb fb8e 	bl	8000428 <__aeabi_f2d>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d16:	2300      	movs	r3, #0
 8004d18:	b99d      	cbnz	r5, 8004d42 <sqrtf+0x72>
 8004d1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d1e:	4668      	mov	r0, sp
 8004d20:	f000 ff32 	bl	8005b88 <matherr>
 8004d24:	b1a8      	cbz	r0, 8004d52 <sqrtf+0x82>
 8004d26:	9b08      	ldr	r3, [sp, #32]
 8004d28:	b11b      	cbz	r3, 8004d32 <sqrtf+0x62>
 8004d2a:	f001 f8df 	bl	8005eec <__errno>
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	6003      	str	r3, [r0, #0]
 8004d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d36:	f7fb fea7 	bl	8000a88 <__aeabi_d2f>
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	b00b      	add	sp, #44	; 0x2c
 8004d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d42:	4610      	mov	r0, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7fb fcf1 	bl	800072c <__aeabi_ddiv>
 8004d4a:	2d02      	cmp	r5, #2
 8004d4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d50:	d1e5      	bne.n	8004d1e <sqrtf+0x4e>
 8004d52:	f001 f8cb 	bl	8005eec <__errno>
 8004d56:	2321      	movs	r3, #33	; 0x21
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7e4      	b.n	8004d26 <sqrtf+0x56>
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	0800948e 	.word	0x0800948e

08004d64 <__ieee754_asinf>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004d6c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8004d70:	4604      	mov	r4, r0
 8004d72:	4607      	mov	r7, r0
 8004d74:	d10c      	bne.n	8004d90 <__ieee754_asinf+0x2c>
 8004d76:	498c      	ldr	r1, [pc, #560]	; (8004fa8 <__ieee754_asinf+0x244>)
 8004d78:	f7fb ffe4 	bl	8000d44 <__aeabi_fmul>
 8004d7c:	498b      	ldr	r1, [pc, #556]	; (8004fac <__ieee754_asinf+0x248>)
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7fb ffdf 	bl	8000d44 <__aeabi_fmul>
 8004d86:	4601      	mov	r1, r0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7fb fed3 	bl	8000b34 <__addsf3>
 8004d8e:	e006      	b.n	8004d9e <__ieee754_asinf+0x3a>
 8004d90:	dd09      	ble.n	8004da6 <__ieee754_asinf+0x42>
 8004d92:	4601      	mov	r1, r0
 8004d94:	f7fb fecc 	bl	8000b30 <__aeabi_fsub>
 8004d98:	4601      	mov	r1, r0
 8004d9a:	f7fc f887 	bl	8000eac <__aeabi_fdiv>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4620      	mov	r0, r4
 8004da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004daa:	da0b      	bge.n	8004dc4 <__ieee754_asinf+0x60>
 8004dac:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8004db0:	da73      	bge.n	8004e9a <__ieee754_asinf+0x136>
 8004db2:	497f      	ldr	r1, [pc, #508]	; (8004fb0 <__ieee754_asinf+0x24c>)
 8004db4:	f7fb febe 	bl	8000b34 <__addsf3>
 8004db8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004dbc:	f7fc f97e 	bl	80010bc <__aeabi_fcmpgt>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d1ed      	bne.n	8004da0 <__ieee754_asinf+0x3c>
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fff3 	bl	8005db0 <fabsf>
 8004dca:	4601      	mov	r1, r0
 8004dcc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004dd0:	f7fb feae 	bl	8000b30 <__aeabi_fsub>
 8004dd4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dd8:	f7fb ffb4 	bl	8000d44 <__aeabi_fmul>
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4975      	ldr	r1, [pc, #468]	; (8004fb4 <__ieee754_asinf+0x250>)
 8004de0:	f7fb ffb0 	bl	8000d44 <__aeabi_fmul>
 8004de4:	4974      	ldr	r1, [pc, #464]	; (8004fb8 <__ieee754_asinf+0x254>)
 8004de6:	f7fb fea5 	bl	8000b34 <__addsf3>
 8004dea:	4621      	mov	r1, r4
 8004dec:	f7fb ffaa 	bl	8000d44 <__aeabi_fmul>
 8004df0:	4972      	ldr	r1, [pc, #456]	; (8004fbc <__ieee754_asinf+0x258>)
 8004df2:	f7fb fe9d 	bl	8000b30 <__aeabi_fsub>
 8004df6:	4621      	mov	r1, r4
 8004df8:	f7fb ffa4 	bl	8000d44 <__aeabi_fmul>
 8004dfc:	4970      	ldr	r1, [pc, #448]	; (8004fc0 <__ieee754_asinf+0x25c>)
 8004dfe:	f7fb fe99 	bl	8000b34 <__addsf3>
 8004e02:	4621      	mov	r1, r4
 8004e04:	f7fb ff9e 	bl	8000d44 <__aeabi_fmul>
 8004e08:	496e      	ldr	r1, [pc, #440]	; (8004fc4 <__ieee754_asinf+0x260>)
 8004e0a:	f7fb fe91 	bl	8000b30 <__aeabi_fsub>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	f7fb ff98 	bl	8000d44 <__aeabi_fmul>
 8004e14:	496c      	ldr	r1, [pc, #432]	; (8004fc8 <__ieee754_asinf+0x264>)
 8004e16:	f7fb fe8d 	bl	8000b34 <__addsf3>
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	f7fb ff92 	bl	8000d44 <__aeabi_fmul>
 8004e20:	496a      	ldr	r1, [pc, #424]	; (8004fcc <__ieee754_asinf+0x268>)
 8004e22:	4680      	mov	r8, r0
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fb ff8d 	bl	8000d44 <__aeabi_fmul>
 8004e2a:	4969      	ldr	r1, [pc, #420]	; (8004fd0 <__ieee754_asinf+0x26c>)
 8004e2c:	f7fb fe80 	bl	8000b30 <__aeabi_fsub>
 8004e30:	4621      	mov	r1, r4
 8004e32:	f7fb ff87 	bl	8000d44 <__aeabi_fmul>
 8004e36:	4967      	ldr	r1, [pc, #412]	; (8004fd4 <__ieee754_asinf+0x270>)
 8004e38:	f7fb fe7c 	bl	8000b34 <__addsf3>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	f7fb ff81 	bl	8000d44 <__aeabi_fmul>
 8004e42:	4965      	ldr	r1, [pc, #404]	; (8004fd8 <__ieee754_asinf+0x274>)
 8004e44:	f7fb fe74 	bl	8000b30 <__aeabi_fsub>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f7fb ff7b 	bl	8000d44 <__aeabi_fmul>
 8004e4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004e52:	f7fb fe6f 	bl	8000b34 <__addsf3>
 8004e56:	4681      	mov	r9, r0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 faad 	bl	80053b8 <__ieee754_sqrtf>
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <__ieee754_asinf+0x278>)
 8004e60:	4606      	mov	r6, r0
 8004e62:	429d      	cmp	r5, r3
 8004e64:	dd63      	ble.n	8004f2e <__ieee754_asinf+0x1ca>
 8004e66:	4649      	mov	r1, r9
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f7fc f81f 	bl	8000eac <__aeabi_fdiv>
 8004e6e:	4631      	mov	r1, r6
 8004e70:	f7fb ff68 	bl	8000d44 <__aeabi_fmul>
 8004e74:	4631      	mov	r1, r6
 8004e76:	f7fb fe5d 	bl	8000b34 <__addsf3>
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	f7fb fe5a 	bl	8000b34 <__addsf3>
 8004e80:	4957      	ldr	r1, [pc, #348]	; (8004fe0 <__ieee754_asinf+0x27c>)
 8004e82:	f7fb fe57 	bl	8000b34 <__addsf3>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4847      	ldr	r0, [pc, #284]	; (8004fa8 <__ieee754_asinf+0x244>)
 8004e8a:	f7fb fe51 	bl	8000b30 <__aeabi_fsub>
 8004e8e:	2f00      	cmp	r7, #0
 8004e90:	4604      	mov	r4, r0
 8004e92:	bfd8      	it	le
 8004e94:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8004e98:	e782      	b.n	8004da0 <__ieee754_asinf+0x3c>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	f7fb ff52 	bl	8000d44 <__aeabi_fmul>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	4944      	ldr	r1, [pc, #272]	; (8004fb4 <__ieee754_asinf+0x250>)
 8004ea4:	f7fb ff4e 	bl	8000d44 <__aeabi_fmul>
 8004ea8:	4943      	ldr	r1, [pc, #268]	; (8004fb8 <__ieee754_asinf+0x254>)
 8004eaa:	f7fb fe43 	bl	8000b34 <__addsf3>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f7fb ff48 	bl	8000d44 <__aeabi_fmul>
 8004eb4:	4941      	ldr	r1, [pc, #260]	; (8004fbc <__ieee754_asinf+0x258>)
 8004eb6:	f7fb fe3b 	bl	8000b30 <__aeabi_fsub>
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb ff42 	bl	8000d44 <__aeabi_fmul>
 8004ec0:	493f      	ldr	r1, [pc, #252]	; (8004fc0 <__ieee754_asinf+0x25c>)
 8004ec2:	f7fb fe37 	bl	8000b34 <__addsf3>
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7fb ff3c 	bl	8000d44 <__aeabi_fmul>
 8004ecc:	493d      	ldr	r1, [pc, #244]	; (8004fc4 <__ieee754_asinf+0x260>)
 8004ece:	f7fb fe2f 	bl	8000b30 <__aeabi_fsub>
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7fb ff36 	bl	8000d44 <__aeabi_fmul>
 8004ed8:	493b      	ldr	r1, [pc, #236]	; (8004fc8 <__ieee754_asinf+0x264>)
 8004eda:	f7fb fe2b 	bl	8000b34 <__addsf3>
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb ff30 	bl	8000d44 <__aeabi_fmul>
 8004ee4:	4939      	ldr	r1, [pc, #228]	; (8004fcc <__ieee754_asinf+0x268>)
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f7fb ff2b 	bl	8000d44 <__aeabi_fmul>
 8004eee:	4938      	ldr	r1, [pc, #224]	; (8004fd0 <__ieee754_asinf+0x26c>)
 8004ef0:	f7fb fe1e 	bl	8000b30 <__aeabi_fsub>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f7fb ff25 	bl	8000d44 <__aeabi_fmul>
 8004efa:	4936      	ldr	r1, [pc, #216]	; (8004fd4 <__ieee754_asinf+0x270>)
 8004efc:	f7fb fe1a 	bl	8000b34 <__addsf3>
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb ff1f 	bl	8000d44 <__aeabi_fmul>
 8004f06:	4934      	ldr	r1, [pc, #208]	; (8004fd8 <__ieee754_asinf+0x274>)
 8004f08:	f7fb fe12 	bl	8000b30 <__aeabi_fsub>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb ff19 	bl	8000d44 <__aeabi_fmul>
 8004f12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004f16:	f7fb fe0d 	bl	8000b34 <__addsf3>
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f7fb ffc5 	bl	8000eac <__aeabi_fdiv>
 8004f22:	4621      	mov	r1, r4
 8004f24:	f7fb ff0e 	bl	8000d44 <__aeabi_fmul>
 8004f28:	4601      	mov	r1, r0
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	e72d      	b.n	8004d8a <__ieee754_asinf+0x26>
 8004f2e:	4601      	mov	r1, r0
 8004f30:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8004f34:	f7fb fdfe 	bl	8000b34 <__addsf3>
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f7fb ffb5 	bl	8000eac <__aeabi_fdiv>
 8004f42:	4601      	mov	r1, r0
 8004f44:	4650      	mov	r0, sl
 8004f46:	f7fb fefd 	bl	8000d44 <__aeabi_fmul>
 8004f4a:	f025 050f 	bic.w	r5, r5, #15
 8004f4e:	4680      	mov	r8, r0
 8004f50:	4629      	mov	r1, r5
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7fb fef6 	bl	8000d44 <__aeabi_fmul>
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7fb fde8 	bl	8000b30 <__aeabi_fsub>
 8004f60:	4631      	mov	r1, r6
 8004f62:	4604      	mov	r4, r0
 8004f64:	4628      	mov	r0, r5
 8004f66:	f7fb fde5 	bl	8000b34 <__addsf3>
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7fb ff9d 	bl	8000eac <__aeabi_fdiv>
 8004f72:	4601      	mov	r1, r0
 8004f74:	f7fb fdde 	bl	8000b34 <__addsf3>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	480c      	ldr	r0, [pc, #48]	; (8004fac <__ieee754_asinf+0x248>)
 8004f7c:	f7fb fdd8 	bl	8000b30 <__aeabi_fsub>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4640      	mov	r0, r8
 8004f84:	f7fb fdd4 	bl	8000b30 <__aeabi_fsub>
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7fb fdd1 	bl	8000b34 <__addsf3>
 8004f92:	4601      	mov	r1, r0
 8004f94:	4813      	ldr	r0, [pc, #76]	; (8004fe4 <__ieee754_asinf+0x280>)
 8004f96:	f7fb fdcb 	bl	8000b30 <__aeabi_fsub>
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7fb fdc7 	bl	8000b30 <__aeabi_fsub>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <__ieee754_asinf+0x280>)
 8004fa6:	e770      	b.n	8004e8a <__ieee754_asinf+0x126>
 8004fa8:	3fc90fdb 	.word	0x3fc90fdb
 8004fac:	b33bbd2e 	.word	0xb33bbd2e
 8004fb0:	7149f2ca 	.word	0x7149f2ca
 8004fb4:	3811ef08 	.word	0x3811ef08
 8004fb8:	3a4f7f04 	.word	0x3a4f7f04
 8004fbc:	3d241146 	.word	0x3d241146
 8004fc0:	3e4e0aa8 	.word	0x3e4e0aa8
 8004fc4:	3ea6b090 	.word	0x3ea6b090
 8004fc8:	3e2aaaab 	.word	0x3e2aaaab
 8004fcc:	3d9dc62e 	.word	0x3d9dc62e
 8004fd0:	3f303361 	.word	0x3f303361
 8004fd4:	4001572d 	.word	0x4001572d
 8004fd8:	4019d139 	.word	0x4019d139
 8004fdc:	3f799999 	.word	0x3f799999
 8004fe0:	333bbd2e 	.word	0x333bbd2e
 8004fe4:	3f490fdb 	.word	0x3f490fdb

08004fe8 <__ieee754_atan2f>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004fee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	dc05      	bgt.n	8005002 <__ieee754_atan2f+0x1a>
 8004ff6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8004ffa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004ffe:	4607      	mov	r7, r0
 8005000:	dd04      	ble.n	800500c <__ieee754_atan2f+0x24>
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb fd96 	bl	8000b34 <__addsf3>
 8005008:	4603      	mov	r3, r0
 800500a:	e024      	b.n	8005056 <__ieee754_atan2f+0x6e>
 800500c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005010:	d103      	bne.n	800501a <__ieee754_atan2f+0x32>
 8005012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005016:	f000 bdbf 	b.w	8005b98 <atanf>
 800501a:	178c      	asrs	r4, r1, #30
 800501c:	f004 0402 	and.w	r4, r4, #2
 8005020:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005024:	b92a      	cbnz	r2, 8005032 <__ieee754_atan2f+0x4a>
 8005026:	2c02      	cmp	r4, #2
 8005028:	d057      	beq.n	80050da <__ieee754_atan2f+0xf2>
 800502a:	2c03      	cmp	r4, #3
 800502c:	d113      	bne.n	8005056 <__ieee754_atan2f+0x6e>
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <__ieee754_atan2f+0xfc>)
 8005030:	e011      	b.n	8005056 <__ieee754_atan2f+0x6e>
 8005032:	b91e      	cbnz	r6, 800503c <__ieee754_atan2f+0x54>
 8005034:	2f00      	cmp	r7, #0
 8005036:	da52      	bge.n	80050de <__ieee754_atan2f+0xf6>
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <__ieee754_atan2f+0x100>)
 800503a:	e00c      	b.n	8005056 <__ieee754_atan2f+0x6e>
 800503c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005040:	d11a      	bne.n	8005078 <__ieee754_atan2f+0x90>
 8005042:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005046:	d10c      	bne.n	8005062 <__ieee754_atan2f+0x7a>
 8005048:	2c02      	cmp	r4, #2
 800504a:	d006      	beq.n	800505a <__ieee754_atan2f+0x72>
 800504c:	2c03      	cmp	r4, #3
 800504e:	d006      	beq.n	800505e <__ieee754_atan2f+0x76>
 8005050:	2c01      	cmp	r4, #1
 8005052:	d140      	bne.n	80050d6 <__ieee754_atan2f+0xee>
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <__ieee754_atan2f+0x104>)
 8005056:	4618      	mov	r0, r3
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <__ieee754_atan2f+0x108>)
 800505c:	e7fb      	b.n	8005056 <__ieee754_atan2f+0x6e>
 800505e:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <__ieee754_atan2f+0x10c>)
 8005060:	e7f9      	b.n	8005056 <__ieee754_atan2f+0x6e>
 8005062:	2c02      	cmp	r4, #2
 8005064:	d039      	beq.n	80050da <__ieee754_atan2f+0xf2>
 8005066:	2c03      	cmp	r4, #3
 8005068:	d0e1      	beq.n	800502e <__ieee754_atan2f+0x46>
 800506a:	2c01      	cmp	r4, #1
 800506c:	d102      	bne.n	8005074 <__ieee754_atan2f+0x8c>
 800506e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005072:	e7f0      	b.n	8005056 <__ieee754_atan2f+0x6e>
 8005074:	2300      	movs	r3, #0
 8005076:	e7ee      	b.n	8005056 <__ieee754_atan2f+0x6e>
 8005078:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800507c:	d0da      	beq.n	8005034 <__ieee754_atan2f+0x4c>
 800507e:	1b92      	subs	r2, r2, r6
 8005080:	15d2      	asrs	r2, r2, #23
 8005082:	2a3c      	cmp	r2, #60	; 0x3c
 8005084:	dc17      	bgt.n	80050b6 <__ieee754_atan2f+0xce>
 8005086:	2900      	cmp	r1, #0
 8005088:	da01      	bge.n	800508e <__ieee754_atan2f+0xa6>
 800508a:	323c      	adds	r2, #60	; 0x3c
 800508c:	db15      	blt.n	80050ba <__ieee754_atan2f+0xd2>
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb ff0c 	bl	8000eac <__aeabi_fdiv>
 8005094:	f000 fe8c 	bl	8005db0 <fabsf>
 8005098:	f000 fd7e 	bl	8005b98 <atanf>
 800509c:	4603      	mov	r3, r0
 800509e:	2c01      	cmp	r4, #1
 80050a0:	d00d      	beq.n	80050be <__ieee754_atan2f+0xd6>
 80050a2:	2c02      	cmp	r4, #2
 80050a4:	d00e      	beq.n	80050c4 <__ieee754_atan2f+0xdc>
 80050a6:	2c00      	cmp	r4, #0
 80050a8:	d0d5      	beq.n	8005056 <__ieee754_atan2f+0x6e>
 80050aa:	4913      	ldr	r1, [pc, #76]	; (80050f8 <__ieee754_atan2f+0x110>)
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fb fd41 	bl	8000b34 <__addsf3>
 80050b2:	4912      	ldr	r1, [pc, #72]	; (80050fc <__ieee754_atan2f+0x114>)
 80050b4:	e00c      	b.n	80050d0 <__ieee754_atan2f+0xe8>
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <__ieee754_atan2f+0x118>)
 80050b8:	e7f1      	b.n	800509e <__ieee754_atan2f+0xb6>
 80050ba:	2300      	movs	r3, #0
 80050bc:	e7ef      	b.n	800509e <__ieee754_atan2f+0xb6>
 80050be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	e7c8      	b.n	8005056 <__ieee754_atan2f+0x6e>
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <__ieee754_atan2f+0x110>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fd34 	bl	8000b34 <__addsf3>
 80050cc:	4601      	mov	r1, r0
 80050ce:	480b      	ldr	r0, [pc, #44]	; (80050fc <__ieee754_atan2f+0x114>)
 80050d0:	f7fb fd2e 	bl	8000b30 <__aeabi_fsub>
 80050d4:	e798      	b.n	8005008 <__ieee754_atan2f+0x20>
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <__ieee754_atan2f+0x11c>)
 80050d8:	e7bd      	b.n	8005056 <__ieee754_atan2f+0x6e>
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <__ieee754_atan2f+0x114>)
 80050dc:	e7bb      	b.n	8005056 <__ieee754_atan2f+0x6e>
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <__ieee754_atan2f+0x118>)
 80050e0:	e7b9      	b.n	8005056 <__ieee754_atan2f+0x6e>
 80050e2:	bf00      	nop
 80050e4:	c0490fdb 	.word	0xc0490fdb
 80050e8:	bfc90fdb 	.word	0xbfc90fdb
 80050ec:	bf490fdb 	.word	0xbf490fdb
 80050f0:	4016cbe4 	.word	0x4016cbe4
 80050f4:	c016cbe4 	.word	0xc016cbe4
 80050f8:	33bbbd2e 	.word	0x33bbbd2e
 80050fc:	40490fdb 	.word	0x40490fdb
 8005100:	3fc90fdb 	.word	0x3fc90fdb
 8005104:	3f490fdb 	.word	0x3f490fdb

08005108 <__ieee754_rem_pio2f>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	4a9d      	ldr	r2, [pc, #628]	; (8005384 <__ieee754_rem_pio2f+0x27c>)
 800510e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005112:	4295      	cmp	r5, r2
 8005114:	b087      	sub	sp, #28
 8005116:	460c      	mov	r4, r1
 8005118:	4607      	mov	r7, r0
 800511a:	dc04      	bgt.n	8005126 <__ieee754_rem_pio2f+0x1e>
 800511c:	2300      	movs	r3, #0
 800511e:	6020      	str	r0, [r4, #0]
 8005120:	604b      	str	r3, [r1, #4]
 8005122:	2600      	movs	r6, #0
 8005124:	e01a      	b.n	800515c <__ieee754_rem_pio2f+0x54>
 8005126:	4a98      	ldr	r2, [pc, #608]	; (8005388 <__ieee754_rem_pio2f+0x280>)
 8005128:	4295      	cmp	r5, r2
 800512a:	dc4b      	bgt.n	80051c4 <__ieee754_rem_pio2f+0xbc>
 800512c:	2800      	cmp	r0, #0
 800512e:	f025 050f 	bic.w	r5, r5, #15
 8005132:	4996      	ldr	r1, [pc, #600]	; (800538c <__ieee754_rem_pio2f+0x284>)
 8005134:	4e96      	ldr	r6, [pc, #600]	; (8005390 <__ieee754_rem_pio2f+0x288>)
 8005136:	dd23      	ble.n	8005180 <__ieee754_rem_pio2f+0x78>
 8005138:	f7fb fcfa 	bl	8000b30 <__aeabi_fsub>
 800513c:	42b5      	cmp	r5, r6
 800513e:	4607      	mov	r7, r0
 8005140:	d010      	beq.n	8005164 <__ieee754_rem_pio2f+0x5c>
 8005142:	4994      	ldr	r1, [pc, #592]	; (8005394 <__ieee754_rem_pio2f+0x28c>)
 8005144:	f7fb fcf4 	bl	8000b30 <__aeabi_fsub>
 8005148:	4601      	mov	r1, r0
 800514a:	6020      	str	r0, [r4, #0]
 800514c:	4638      	mov	r0, r7
 800514e:	f7fb fcef 	bl	8000b30 <__aeabi_fsub>
 8005152:	4990      	ldr	r1, [pc, #576]	; (8005394 <__ieee754_rem_pio2f+0x28c>)
 8005154:	f7fb fcec 	bl	8000b30 <__aeabi_fsub>
 8005158:	2601      	movs	r6, #1
 800515a:	6060      	str	r0, [r4, #4]
 800515c:	4630      	mov	r0, r6
 800515e:	b007      	add	sp, #28
 8005160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005164:	498c      	ldr	r1, [pc, #560]	; (8005398 <__ieee754_rem_pio2f+0x290>)
 8005166:	f7fb fce3 	bl	8000b30 <__aeabi_fsub>
 800516a:	498c      	ldr	r1, [pc, #560]	; (800539c <__ieee754_rem_pio2f+0x294>)
 800516c:	4605      	mov	r5, r0
 800516e:	f7fb fcdf 	bl	8000b30 <__aeabi_fsub>
 8005172:	4601      	mov	r1, r0
 8005174:	6020      	str	r0, [r4, #0]
 8005176:	4628      	mov	r0, r5
 8005178:	f7fb fcda 	bl	8000b30 <__aeabi_fsub>
 800517c:	4987      	ldr	r1, [pc, #540]	; (800539c <__ieee754_rem_pio2f+0x294>)
 800517e:	e7e9      	b.n	8005154 <__ieee754_rem_pio2f+0x4c>
 8005180:	f7fb fcd8 	bl	8000b34 <__addsf3>
 8005184:	42b5      	cmp	r5, r6
 8005186:	4607      	mov	r7, r0
 8005188:	d00e      	beq.n	80051a8 <__ieee754_rem_pio2f+0xa0>
 800518a:	4982      	ldr	r1, [pc, #520]	; (8005394 <__ieee754_rem_pio2f+0x28c>)
 800518c:	f7fb fcd2 	bl	8000b34 <__addsf3>
 8005190:	4601      	mov	r1, r0
 8005192:	6020      	str	r0, [r4, #0]
 8005194:	4638      	mov	r0, r7
 8005196:	f7fb fccb 	bl	8000b30 <__aeabi_fsub>
 800519a:	497e      	ldr	r1, [pc, #504]	; (8005394 <__ieee754_rem_pio2f+0x28c>)
 800519c:	f7fb fcca 	bl	8000b34 <__addsf3>
 80051a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80051a4:	6060      	str	r0, [r4, #4]
 80051a6:	e7d9      	b.n	800515c <__ieee754_rem_pio2f+0x54>
 80051a8:	497b      	ldr	r1, [pc, #492]	; (8005398 <__ieee754_rem_pio2f+0x290>)
 80051aa:	f7fb fcc3 	bl	8000b34 <__addsf3>
 80051ae:	497b      	ldr	r1, [pc, #492]	; (800539c <__ieee754_rem_pio2f+0x294>)
 80051b0:	4605      	mov	r5, r0
 80051b2:	f7fb fcbf 	bl	8000b34 <__addsf3>
 80051b6:	4601      	mov	r1, r0
 80051b8:	6020      	str	r0, [r4, #0]
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7fb fcb8 	bl	8000b30 <__aeabi_fsub>
 80051c0:	4976      	ldr	r1, [pc, #472]	; (800539c <__ieee754_rem_pio2f+0x294>)
 80051c2:	e7eb      	b.n	800519c <__ieee754_rem_pio2f+0x94>
 80051c4:	4a76      	ldr	r2, [pc, #472]	; (80053a0 <__ieee754_rem_pio2f+0x298>)
 80051c6:	4295      	cmp	r5, r2
 80051c8:	f300 808c 	bgt.w	80052e4 <__ieee754_rem_pio2f+0x1dc>
 80051cc:	f000 fdf0 	bl	8005db0 <fabsf>
 80051d0:	4974      	ldr	r1, [pc, #464]	; (80053a4 <__ieee754_rem_pio2f+0x29c>)
 80051d2:	4680      	mov	r8, r0
 80051d4:	f7fb fdb6 	bl	8000d44 <__aeabi_fmul>
 80051d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80051dc:	f7fb fcaa 	bl	8000b34 <__addsf3>
 80051e0:	f7fb ff8c 	bl	80010fc <__aeabi_f2iz>
 80051e4:	4606      	mov	r6, r0
 80051e6:	f7fb fd59 	bl	8000c9c <__aeabi_i2f>
 80051ea:	4968      	ldr	r1, [pc, #416]	; (800538c <__ieee754_rem_pio2f+0x284>)
 80051ec:	4682      	mov	sl, r0
 80051ee:	f7fb fda9 	bl	8000d44 <__aeabi_fmul>
 80051f2:	4601      	mov	r1, r0
 80051f4:	4640      	mov	r0, r8
 80051f6:	f7fb fc9b 	bl	8000b30 <__aeabi_fsub>
 80051fa:	4966      	ldr	r1, [pc, #408]	; (8005394 <__ieee754_rem_pio2f+0x28c>)
 80051fc:	4680      	mov	r8, r0
 80051fe:	4650      	mov	r0, sl
 8005200:	f7fb fda0 	bl	8000d44 <__aeabi_fmul>
 8005204:	2e1f      	cmp	r6, #31
 8005206:	4681      	mov	r9, r0
 8005208:	dc0c      	bgt.n	8005224 <__ieee754_rem_pio2f+0x11c>
 800520a:	4a67      	ldr	r2, [pc, #412]	; (80053a8 <__ieee754_rem_pio2f+0x2a0>)
 800520c:	1e71      	subs	r1, r6, #1
 800520e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005212:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <__ieee754_rem_pio2f+0x11c>
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	f7fb fc87 	bl	8000b30 <__aeabi_fsub>
 8005222:	e009      	b.n	8005238 <__ieee754_rem_pio2f+0x130>
 8005224:	4649      	mov	r1, r9
 8005226:	4640      	mov	r0, r8
 8005228:	f7fb fc82 	bl	8000b30 <__aeabi_fsub>
 800522c:	15ed      	asrs	r5, r5, #23
 800522e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005232:	1aeb      	subs	r3, r5, r3
 8005234:	2b08      	cmp	r3, #8
 8005236:	dc01      	bgt.n	800523c <__ieee754_rem_pio2f+0x134>
 8005238:	6020      	str	r0, [r4, #0]
 800523a:	e024      	b.n	8005286 <__ieee754_rem_pio2f+0x17e>
 800523c:	4956      	ldr	r1, [pc, #344]	; (8005398 <__ieee754_rem_pio2f+0x290>)
 800523e:	4650      	mov	r0, sl
 8005240:	f7fb fd80 	bl	8000d44 <__aeabi_fmul>
 8005244:	4681      	mov	r9, r0
 8005246:	4601      	mov	r1, r0
 8005248:	4640      	mov	r0, r8
 800524a:	f7fb fc71 	bl	8000b30 <__aeabi_fsub>
 800524e:	4601      	mov	r1, r0
 8005250:	4683      	mov	fp, r0
 8005252:	4640      	mov	r0, r8
 8005254:	f7fb fc6c 	bl	8000b30 <__aeabi_fsub>
 8005258:	4649      	mov	r1, r9
 800525a:	f7fb fc69 	bl	8000b30 <__aeabi_fsub>
 800525e:	4680      	mov	r8, r0
 8005260:	494e      	ldr	r1, [pc, #312]	; (800539c <__ieee754_rem_pio2f+0x294>)
 8005262:	4650      	mov	r0, sl
 8005264:	f7fb fd6e 	bl	8000d44 <__aeabi_fmul>
 8005268:	4641      	mov	r1, r8
 800526a:	f7fb fc61 	bl	8000b30 <__aeabi_fsub>
 800526e:	4601      	mov	r1, r0
 8005270:	4681      	mov	r9, r0
 8005272:	4658      	mov	r0, fp
 8005274:	f7fb fc5c 	bl	8000b30 <__aeabi_fsub>
 8005278:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800527c:	1aed      	subs	r5, r5, r3
 800527e:	2d19      	cmp	r5, #25
 8005280:	dc15      	bgt.n	80052ae <__ieee754_rem_pio2f+0x1a6>
 8005282:	46d8      	mov	r8, fp
 8005284:	6020      	str	r0, [r4, #0]
 8005286:	6825      	ldr	r5, [r4, #0]
 8005288:	4640      	mov	r0, r8
 800528a:	4629      	mov	r1, r5
 800528c:	f7fb fc50 	bl	8000b30 <__aeabi_fsub>
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb fc4d 	bl	8000b30 <__aeabi_fsub>
 8005296:	2f00      	cmp	r7, #0
 8005298:	6060      	str	r0, [r4, #4]
 800529a:	f6bf af5f 	bge.w	800515c <__ieee754_rem_pio2f+0x54>
 800529e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80052a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80052a6:	6025      	str	r5, [r4, #0]
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	4276      	negs	r6, r6
 80052ac:	e756      	b.n	800515c <__ieee754_rem_pio2f+0x54>
 80052ae:	493f      	ldr	r1, [pc, #252]	; (80053ac <__ieee754_rem_pio2f+0x2a4>)
 80052b0:	4650      	mov	r0, sl
 80052b2:	f7fb fd47 	bl	8000d44 <__aeabi_fmul>
 80052b6:	4605      	mov	r5, r0
 80052b8:	4601      	mov	r1, r0
 80052ba:	4658      	mov	r0, fp
 80052bc:	f7fb fc38 	bl	8000b30 <__aeabi_fsub>
 80052c0:	4601      	mov	r1, r0
 80052c2:	4680      	mov	r8, r0
 80052c4:	4658      	mov	r0, fp
 80052c6:	f7fb fc33 	bl	8000b30 <__aeabi_fsub>
 80052ca:	4629      	mov	r1, r5
 80052cc:	f7fb fc30 	bl	8000b30 <__aeabi_fsub>
 80052d0:	4605      	mov	r5, r0
 80052d2:	4937      	ldr	r1, [pc, #220]	; (80053b0 <__ieee754_rem_pio2f+0x2a8>)
 80052d4:	4650      	mov	r0, sl
 80052d6:	f7fb fd35 	bl	8000d44 <__aeabi_fmul>
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fb fc28 	bl	8000b30 <__aeabi_fsub>
 80052e0:	4681      	mov	r9, r0
 80052e2:	e79a      	b.n	800521a <__ieee754_rem_pio2f+0x112>
 80052e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80052e8:	db05      	blt.n	80052f6 <__ieee754_rem_pio2f+0x1ee>
 80052ea:	4601      	mov	r1, r0
 80052ec:	f7fb fc20 	bl	8000b30 <__aeabi_fsub>
 80052f0:	6060      	str	r0, [r4, #4]
 80052f2:	6020      	str	r0, [r4, #0]
 80052f4:	e715      	b.n	8005122 <__ieee754_rem_pio2f+0x1a>
 80052f6:	15ee      	asrs	r6, r5, #23
 80052f8:	3e86      	subs	r6, #134	; 0x86
 80052fa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80052fe:	4628      	mov	r0, r5
 8005300:	f7fb fefc 	bl	80010fc <__aeabi_f2iz>
 8005304:	f7fb fcca 	bl	8000c9c <__aeabi_i2f>
 8005308:	4601      	mov	r1, r0
 800530a:	9003      	str	r0, [sp, #12]
 800530c:	4628      	mov	r0, r5
 800530e:	f7fb fc0f 	bl	8000b30 <__aeabi_fsub>
 8005312:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005316:	f7fb fd15 	bl	8000d44 <__aeabi_fmul>
 800531a:	4680      	mov	r8, r0
 800531c:	f7fb feee 	bl	80010fc <__aeabi_f2iz>
 8005320:	f7fb fcbc 	bl	8000c9c <__aeabi_i2f>
 8005324:	4601      	mov	r1, r0
 8005326:	9004      	str	r0, [sp, #16]
 8005328:	4605      	mov	r5, r0
 800532a:	4640      	mov	r0, r8
 800532c:	f7fb fc00 	bl	8000b30 <__aeabi_fsub>
 8005330:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005334:	f7fb fd06 	bl	8000d44 <__aeabi_fmul>
 8005338:	2100      	movs	r1, #0
 800533a:	9005      	str	r0, [sp, #20]
 800533c:	f7fb fe96 	bl	800106c <__aeabi_fcmpeq>
 8005340:	b1e8      	cbz	r0, 800537e <__ieee754_rem_pio2f+0x276>
 8005342:	2100      	movs	r1, #0
 8005344:	4628      	mov	r0, r5
 8005346:	f7fb fe91 	bl	800106c <__aeabi_fcmpeq>
 800534a:	2800      	cmp	r0, #0
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2302      	moveq	r3, #2
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <__ieee754_rem_pio2f+0x2ac>)
 8005354:	4621      	mov	r1, r4
 8005356:	9201      	str	r2, [sp, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	a803      	add	r0, sp, #12
 800535c:	9200      	str	r2, [sp, #0]
 800535e:	4632      	mov	r2, r6
 8005360:	f000 f8fe 	bl	8005560 <__kernel_rem_pio2f>
 8005364:	2f00      	cmp	r7, #0
 8005366:	4606      	mov	r6, r0
 8005368:	f6bf aef8 	bge.w	800515c <__ieee754_rem_pio2f+0x54>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	e795      	b.n	80052aa <__ieee754_rem_pio2f+0x1a2>
 800537e:	2303      	movs	r3, #3
 8005380:	e7e7      	b.n	8005352 <__ieee754_rem_pio2f+0x24a>
 8005382:	bf00      	nop
 8005384:	3f490fd8 	.word	0x3f490fd8
 8005388:	4016cbe3 	.word	0x4016cbe3
 800538c:	3fc90f80 	.word	0x3fc90f80
 8005390:	3fc90fd0 	.word	0x3fc90fd0
 8005394:	37354443 	.word	0x37354443
 8005398:	37354400 	.word	0x37354400
 800539c:	2e85a308 	.word	0x2e85a308
 80053a0:	43490f80 	.word	0x43490f80
 80053a4:	3f22f984 	.word	0x3f22f984
 80053a8:	08009494 	.word	0x08009494
 80053ac:	2e85a300 	.word	0x2e85a300
 80053b0:	248d3132 	.word	0x248d3132
 80053b4:	08009514 	.word	0x08009514

080053b8 <__ieee754_sqrtf>:
 80053b8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80053bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4603      	mov	r3, r0
 80053c4:	4604      	mov	r4, r0
 80053c6:	d309      	bcc.n	80053dc <__ieee754_sqrtf+0x24>
 80053c8:	4601      	mov	r1, r0
 80053ca:	f7fb fcbb 	bl	8000d44 <__aeabi_fmul>
 80053ce:	4601      	mov	r1, r0
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7fb fbaf 	bl	8000b34 <__addsf3>
 80053d6:	4604      	mov	r4, r0
 80053d8:	4620      	mov	r0, r4
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d0fb      	beq.n	80053d8 <__ieee754_sqrtf+0x20>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	da06      	bge.n	80053f2 <__ieee754_sqrtf+0x3a>
 80053e4:	4601      	mov	r1, r0
 80053e6:	f7fb fba3 	bl	8000b30 <__aeabi_fsub>
 80053ea:	4601      	mov	r1, r0
 80053ec:	f7fb fd5e 	bl	8000eac <__aeabi_fdiv>
 80053f0:	e7f1      	b.n	80053d6 <__ieee754_sqrtf+0x1e>
 80053f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80053f6:	ea4f 54e0 	mov.w	r4, r0, asr #23
 80053fa:	d32e      	bcc.n	800545a <__ieee754_sqrtf+0xa2>
 80053fc:	3c7f      	subs	r4, #127	; 0x7f
 80053fe:	07e2      	lsls	r2, r4, #31
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	ea4f 0164 	mov.w	r1, r4, asr #1
 8005408:	4616      	mov	r6, r2
 800540a:	f04f 0419 	mov.w	r4, #25
 800540e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005412:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005416:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800541a:	bf48      	it	mi
 800541c:	005b      	lslmi	r3, r3, #1
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	1835      	adds	r5, r6, r0
 8005422:	429d      	cmp	r5, r3
 8005424:	bfde      	ittt	le
 8005426:	182e      	addle	r6, r5, r0
 8005428:	1b5b      	suble	r3, r3, r5
 800542a:	1812      	addle	r2, r2, r0
 800542c:	3c01      	subs	r4, #1
 800542e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005432:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005436:	d1f3      	bne.n	8005420 <__ieee754_sqrtf+0x68>
 8005438:	b113      	cbz	r3, 8005440 <__ieee754_sqrtf+0x88>
 800543a:	3201      	adds	r2, #1
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	1054      	asrs	r4, r2, #1
 8005442:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005446:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800544a:	e7c5      	b.n	80053d8 <__ieee754_sqrtf+0x20>
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	3201      	adds	r2, #1
 8005450:	0219      	lsls	r1, r3, #8
 8005452:	d5fb      	bpl.n	800544c <__ieee754_sqrtf+0x94>
 8005454:	3a01      	subs	r2, #1
 8005456:	1aa4      	subs	r4, r4, r2
 8005458:	e7d0      	b.n	80053fc <__ieee754_sqrtf+0x44>
 800545a:	2200      	movs	r2, #0
 800545c:	e7f8      	b.n	8005450 <__ieee754_sqrtf+0x98>
	...

08005460 <__kernel_cosf>:
 8005460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005464:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005468:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800546c:	4606      	mov	r6, r0
 800546e:	4688      	mov	r8, r1
 8005470:	da03      	bge.n	800547a <__kernel_cosf+0x1a>
 8005472:	f7fb fe43 	bl	80010fc <__aeabi_f2iz>
 8005476:	2800      	cmp	r0, #0
 8005478:	d05c      	beq.n	8005534 <__kernel_cosf+0xd4>
 800547a:	4631      	mov	r1, r6
 800547c:	4630      	mov	r0, r6
 800547e:	f7fb fc61 	bl	8000d44 <__aeabi_fmul>
 8005482:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005486:	4605      	mov	r5, r0
 8005488:	f7fb fc5c 	bl	8000d44 <__aeabi_fmul>
 800548c:	492b      	ldr	r1, [pc, #172]	; (800553c <__kernel_cosf+0xdc>)
 800548e:	4607      	mov	r7, r0
 8005490:	4628      	mov	r0, r5
 8005492:	f7fb fc57 	bl	8000d44 <__aeabi_fmul>
 8005496:	492a      	ldr	r1, [pc, #168]	; (8005540 <__kernel_cosf+0xe0>)
 8005498:	f7fb fb4c 	bl	8000b34 <__addsf3>
 800549c:	4629      	mov	r1, r5
 800549e:	f7fb fc51 	bl	8000d44 <__aeabi_fmul>
 80054a2:	4928      	ldr	r1, [pc, #160]	; (8005544 <__kernel_cosf+0xe4>)
 80054a4:	f7fb fb44 	bl	8000b30 <__aeabi_fsub>
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fb fc4b 	bl	8000d44 <__aeabi_fmul>
 80054ae:	4926      	ldr	r1, [pc, #152]	; (8005548 <__kernel_cosf+0xe8>)
 80054b0:	f7fb fb40 	bl	8000b34 <__addsf3>
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7fb fc45 	bl	8000d44 <__aeabi_fmul>
 80054ba:	4924      	ldr	r1, [pc, #144]	; (800554c <__kernel_cosf+0xec>)
 80054bc:	f7fb fb38 	bl	8000b30 <__aeabi_fsub>
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb fc3f 	bl	8000d44 <__aeabi_fmul>
 80054c6:	4922      	ldr	r1, [pc, #136]	; (8005550 <__kernel_cosf+0xf0>)
 80054c8:	f7fb fb34 	bl	8000b34 <__addsf3>
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fb fc39 	bl	8000d44 <__aeabi_fmul>
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fb fc36 	bl	8000d44 <__aeabi_fmul>
 80054d8:	4641      	mov	r1, r8
 80054da:	4605      	mov	r5, r0
 80054dc:	4630      	mov	r0, r6
 80054de:	f7fb fc31 	bl	8000d44 <__aeabi_fmul>
 80054e2:	4601      	mov	r1, r0
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7fb fb23 	bl	8000b30 <__aeabi_fsub>
 80054ea:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <__kernel_cosf+0xf4>)
 80054ec:	4605      	mov	r5, r0
 80054ee:	429c      	cmp	r4, r3
 80054f0:	dc0a      	bgt.n	8005508 <__kernel_cosf+0xa8>
 80054f2:	4601      	mov	r1, r0
 80054f4:	4638      	mov	r0, r7
 80054f6:	f7fb fb1b 	bl	8000b30 <__aeabi_fsub>
 80054fa:	4601      	mov	r1, r0
 80054fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005500:	f7fb fb16 	bl	8000b30 <__aeabi_fsub>
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <__kernel_cosf+0xf8>)
 800550a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800550e:	429c      	cmp	r4, r3
 8005510:	bfcc      	ite	gt
 8005512:	4c12      	ldrgt	r4, [pc, #72]	; (800555c <__kernel_cosf+0xfc>)
 8005514:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8005518:	4621      	mov	r1, r4
 800551a:	f7fb fb09 	bl	8000b30 <__aeabi_fsub>
 800551e:	4621      	mov	r1, r4
 8005520:	4606      	mov	r6, r0
 8005522:	4638      	mov	r0, r7
 8005524:	f7fb fb04 	bl	8000b30 <__aeabi_fsub>
 8005528:	4629      	mov	r1, r5
 800552a:	f7fb fb01 	bl	8000b30 <__aeabi_fsub>
 800552e:	4601      	mov	r1, r0
 8005530:	4630      	mov	r0, r6
 8005532:	e7e5      	b.n	8005500 <__kernel_cosf+0xa0>
 8005534:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005538:	e7e4      	b.n	8005504 <__kernel_cosf+0xa4>
 800553a:	bf00      	nop
 800553c:	ad47d74e 	.word	0xad47d74e
 8005540:	310f74f6 	.word	0x310f74f6
 8005544:	3493f27c 	.word	0x3493f27c
 8005548:	37d00d01 	.word	0x37d00d01
 800554c:	3ab60b61 	.word	0x3ab60b61
 8005550:	3d2aaaab 	.word	0x3d2aaaab
 8005554:	3e999999 	.word	0x3e999999
 8005558:	3f480000 	.word	0x3f480000
 800555c:	3e900000 	.word	0x3e900000

08005560 <__kernel_rem_pio2f>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	b0d9      	sub	sp, #356	; 0x164
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9101      	str	r1, [sp, #4]
 800556a:	4bc3      	ldr	r3, [pc, #780]	; (8005878 <__kernel_rem_pio2f+0x318>)
 800556c:	9962      	ldr	r1, [sp, #392]	; 0x188
 800556e:	1ed4      	subs	r4, r2, #3
 8005570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005574:	2500      	movs	r5, #0
 8005576:	9302      	str	r3, [sp, #8]
 8005578:	9b04      	ldr	r3, [sp, #16]
 800557a:	f04f 0a00 	mov.w	sl, #0
 800557e:	3b01      	subs	r3, #1
 8005580:	9303      	str	r3, [sp, #12]
 8005582:	2308      	movs	r3, #8
 8005584:	fb94 f4f3 	sdiv	r4, r4, r3
 8005588:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800558c:	1c66      	adds	r6, r4, #1
 800558e:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8005592:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005596:	eb03 0802 	add.w	r8, r3, r2
 800559a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800559c:	1aa7      	subs	r7, r4, r2
 800559e:	9005      	str	r0, [sp, #20]
 80055a0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80055a4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80055a8:	4545      	cmp	r5, r8
 80055aa:	dd7f      	ble.n	80056ac <__kernel_rem_pio2f+0x14c>
 80055ac:	f04f 0800 	mov.w	r8, #0
 80055b0:	f04f 0a00 	mov.w	sl, #0
 80055b4:	f06f 0b03 	mvn.w	fp, #3
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	aa1c      	add	r2, sp, #112	; 0x70
 80055bc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80055c0:	ab44      	add	r3, sp, #272	; 0x110
 80055c2:	9a02      	ldr	r2, [sp, #8]
 80055c4:	4590      	cmp	r8, r2
 80055c6:	f340 8097 	ble.w	80056f8 <__kernel_rem_pio2f+0x198>
 80055ca:	4613      	mov	r3, r2
 80055cc:	aa08      	add	r2, sp, #32
 80055ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80055d6:	9f02      	ldr	r7, [sp, #8]
 80055d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80055dc:	9306      	str	r3, [sp, #24]
 80055de:	46ba      	mov	sl, r7
 80055e0:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80055e4:	ab58      	add	r3, sp, #352	; 0x160
 80055e6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80055ea:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80055ee:	ad07      	add	r5, sp, #28
 80055f0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80055f4:	f1ba 0f00 	cmp.w	sl, #0
 80055f8:	f300 8081 	bgt.w	80056fe <__kernel_rem_pio2f+0x19e>
 80055fc:	4631      	mov	r1, r6
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 fc1a 	bl	8005e38 <scalbnf>
 8005604:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8005608:	4604      	mov	r4, r0
 800560a:	f7fb fb9b 	bl	8000d44 <__aeabi_fmul>
 800560e:	f000 fbd3 	bl	8005db8 <floorf>
 8005612:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8005616:	f7fb fb95 	bl	8000d44 <__aeabi_fmul>
 800561a:	4601      	mov	r1, r0
 800561c:	4620      	mov	r0, r4
 800561e:	f7fb fa87 	bl	8000b30 <__aeabi_fsub>
 8005622:	4604      	mov	r4, r0
 8005624:	f7fb fd6a 	bl	80010fc <__aeabi_f2iz>
 8005628:	4681      	mov	r9, r0
 800562a:	f7fb fb37 	bl	8000c9c <__aeabi_i2f>
 800562e:	4601      	mov	r1, r0
 8005630:	4620      	mov	r0, r4
 8005632:	f7fb fa7d 	bl	8000b30 <__aeabi_fsub>
 8005636:	2e00      	cmp	r6, #0
 8005638:	4604      	mov	r4, r0
 800563a:	dd7e      	ble.n	800573a <__kernel_rem_pio2f+0x1da>
 800563c:	1e7b      	subs	r3, r7, #1
 800563e:	aa08      	add	r2, sp, #32
 8005640:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005644:	f1c6 0208 	rsb	r2, r6, #8
 8005648:	fa45 f002 	asr.w	r0, r5, r2
 800564c:	4481      	add	r9, r0
 800564e:	4090      	lsls	r0, r2
 8005650:	1a2d      	subs	r5, r5, r0
 8005652:	aa08      	add	r2, sp, #32
 8005654:	f1c6 0007 	rsb	r0, r6, #7
 8005658:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800565c:	4105      	asrs	r5, r0
 800565e:	2d00      	cmp	r5, #0
 8005660:	dd79      	ble.n	8005756 <__kernel_rem_pio2f+0x1f6>
 8005662:	2200      	movs	r2, #0
 8005664:	4690      	mov	r8, r2
 8005666:	f109 0901 	add.w	r9, r9, #1
 800566a:	4297      	cmp	r7, r2
 800566c:	f300 80ae 	bgt.w	80057cc <__kernel_rem_pio2f+0x26c>
 8005670:	2e00      	cmp	r6, #0
 8005672:	dd05      	ble.n	8005680 <__kernel_rem_pio2f+0x120>
 8005674:	2e01      	cmp	r6, #1
 8005676:	f000 80c0 	beq.w	80057fa <__kernel_rem_pio2f+0x29a>
 800567a:	2e02      	cmp	r6, #2
 800567c:	f000 80c7 	beq.w	800580e <__kernel_rem_pio2f+0x2ae>
 8005680:	2d02      	cmp	r5, #2
 8005682:	d168      	bne.n	8005756 <__kernel_rem_pio2f+0x1f6>
 8005684:	4621      	mov	r1, r4
 8005686:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800568a:	f7fb fa51 	bl	8000b30 <__aeabi_fsub>
 800568e:	4604      	mov	r4, r0
 8005690:	f1b8 0f00 	cmp.w	r8, #0
 8005694:	d05f      	beq.n	8005756 <__kernel_rem_pio2f+0x1f6>
 8005696:	4631      	mov	r1, r6
 8005698:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800569c:	f000 fbcc 	bl	8005e38 <scalbnf>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7fb fa44 	bl	8000b30 <__aeabi_fsub>
 80056a8:	4604      	mov	r4, r0
 80056aa:	e054      	b.n	8005756 <__kernel_rem_pio2f+0x1f6>
 80056ac:	42ef      	cmn	r7, r5
 80056ae:	d407      	bmi.n	80056c0 <__kernel_rem_pio2f+0x160>
 80056b0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056b4:	f7fb faf2 	bl	8000c9c <__aeabi_i2f>
 80056b8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80056bc:	3501      	adds	r5, #1
 80056be:	e773      	b.n	80055a8 <__kernel_rem_pio2f+0x48>
 80056c0:	4650      	mov	r0, sl
 80056c2:	e7f9      	b.n	80056b8 <__kernel_rem_pio2f+0x158>
 80056c4:	fb0b 5207 	mla	r2, fp, r7, r5
 80056c8:	9306      	str	r3, [sp, #24]
 80056ca:	9b05      	ldr	r3, [sp, #20]
 80056cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80056d0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80056d4:	f7fb fb36 	bl	8000d44 <__aeabi_fmul>
 80056d8:	4601      	mov	r1, r0
 80056da:	4648      	mov	r0, r9
 80056dc:	f7fb fa2a 	bl	8000b34 <__addsf3>
 80056e0:	4681      	mov	r9, r0
 80056e2:	9b06      	ldr	r3, [sp, #24]
 80056e4:	3701      	adds	r7, #1
 80056e6:	9a03      	ldr	r2, [sp, #12]
 80056e8:	4297      	cmp	r7, r2
 80056ea:	ddeb      	ble.n	80056c4 <__kernel_rem_pio2f+0x164>
 80056ec:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 80056f0:	3504      	adds	r5, #4
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	e764      	b.n	80055c2 <__kernel_rem_pio2f+0x62>
 80056f8:	46d1      	mov	r9, sl
 80056fa:	2700      	movs	r7, #0
 80056fc:	e7f3      	b.n	80056e6 <__kernel_rem_pio2f+0x186>
 80056fe:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005702:	4620      	mov	r0, r4
 8005704:	f7fb fb1e 	bl	8000d44 <__aeabi_fmul>
 8005708:	f7fb fcf8 	bl	80010fc <__aeabi_f2iz>
 800570c:	f7fb fac6 	bl	8000c9c <__aeabi_i2f>
 8005710:	4641      	mov	r1, r8
 8005712:	4683      	mov	fp, r0
 8005714:	f7fb fb16 	bl	8000d44 <__aeabi_fmul>
 8005718:	4601      	mov	r1, r0
 800571a:	4620      	mov	r0, r4
 800571c:	f7fb fa08 	bl	8000b30 <__aeabi_fsub>
 8005720:	f7fb fcec 	bl	80010fc <__aeabi_f2iz>
 8005724:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005728:	f845 0f04 	str.w	r0, [r5, #4]!
 800572c:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8005730:	4658      	mov	r0, fp
 8005732:	f7fb f9ff 	bl	8000b34 <__addsf3>
 8005736:	4604      	mov	r4, r0
 8005738:	e75c      	b.n	80055f4 <__kernel_rem_pio2f+0x94>
 800573a:	d105      	bne.n	8005748 <__kernel_rem_pio2f+0x1e8>
 800573c:	1e7b      	subs	r3, r7, #1
 800573e:	aa08      	add	r2, sp, #32
 8005740:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005744:	122d      	asrs	r5, r5, #8
 8005746:	e78a      	b.n	800565e <__kernel_rem_pio2f+0xfe>
 8005748:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800574c:	f7fb fcac 	bl	80010a8 <__aeabi_fcmpge>
 8005750:	2800      	cmp	r0, #0
 8005752:	d139      	bne.n	80057c8 <__kernel_rem_pio2f+0x268>
 8005754:	4605      	mov	r5, r0
 8005756:	2100      	movs	r1, #0
 8005758:	4620      	mov	r0, r4
 800575a:	f7fb fc87 	bl	800106c <__aeabi_fcmpeq>
 800575e:	2800      	cmp	r0, #0
 8005760:	f000 80a0 	beq.w	80058a4 <__kernel_rem_pio2f+0x344>
 8005764:	1e7c      	subs	r4, r7, #1
 8005766:	4623      	mov	r3, r4
 8005768:	2200      	movs	r2, #0
 800576a:	9902      	ldr	r1, [sp, #8]
 800576c:	428b      	cmp	r3, r1
 800576e:	da55      	bge.n	800581c <__kernel_rem_pio2f+0x2bc>
 8005770:	2a00      	cmp	r2, #0
 8005772:	d07e      	beq.n	8005872 <__kernel_rem_pio2f+0x312>
 8005774:	ab08      	add	r3, sp, #32
 8005776:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800577a:	3e08      	subs	r6, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 808f 	beq.w	80058a0 <__kernel_rem_pio2f+0x340>
 8005782:	4631      	mov	r1, r6
 8005784:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005788:	f000 fb56 	bl	8005e38 <scalbnf>
 800578c:	46a0      	mov	r8, r4
 800578e:	4682      	mov	sl, r0
 8005790:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8005794:	af44      	add	r7, sp, #272	; 0x110
 8005796:	f1b8 0f00 	cmp.w	r8, #0
 800579a:	f280 80b5 	bge.w	8005908 <__kernel_rem_pio2f+0x3a8>
 800579e:	f04f 0a00 	mov.w	sl, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	00a6      	lsls	r6, r4, #2
 80057a6:	4a35      	ldr	r2, [pc, #212]	; (800587c <__kernel_rem_pio2f+0x31c>)
 80057a8:	4437      	add	r7, r6
 80057aa:	eba4 010a 	sub.w	r1, r4, sl
 80057ae:	2900      	cmp	r1, #0
 80057b0:	f280 80db 	bge.w	800596a <__kernel_rem_pio2f+0x40a>
 80057b4:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	f200 80ff 	bhi.w	80059ba <__kernel_rem_pio2f+0x45a>
 80057bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80057c0:	01200102 	.word	0x01200102
 80057c4:	00d90120 	.word	0x00d90120
 80057c8:	2502      	movs	r5, #2
 80057ca:	e74a      	b.n	8005662 <__kernel_rem_pio2f+0x102>
 80057cc:	ab08      	add	r3, sp, #32
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	f1b8 0f00 	cmp.w	r8, #0
 80057d6:	d109      	bne.n	80057ec <__kernel_rem_pio2f+0x28c>
 80057d8:	b12b      	cbz	r3, 80057e6 <__kernel_rem_pio2f+0x286>
 80057da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80057de:	a908      	add	r1, sp, #32
 80057e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80057e4:	2301      	movs	r3, #1
 80057e6:	3201      	adds	r2, #1
 80057e8:	4698      	mov	r8, r3
 80057ea:	e73e      	b.n	800566a <__kernel_rem_pio2f+0x10a>
 80057ec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80057f0:	a908      	add	r1, sp, #32
 80057f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80057f6:	4643      	mov	r3, r8
 80057f8:	e7f5      	b.n	80057e6 <__kernel_rem_pio2f+0x286>
 80057fa:	1e7a      	subs	r2, r7, #1
 80057fc:	ab08      	add	r3, sp, #32
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005806:	a908      	add	r1, sp, #32
 8005808:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800580c:	e738      	b.n	8005680 <__kernel_rem_pio2f+0x120>
 800580e:	1e7a      	subs	r2, r7, #1
 8005810:	ab08      	add	r3, sp, #32
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800581a:	e7f4      	b.n	8005806 <__kernel_rem_pio2f+0x2a6>
 800581c:	a908      	add	r1, sp, #32
 800581e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005822:	3b01      	subs	r3, #1
 8005824:	430a      	orrs	r2, r1
 8005826:	e7a0      	b.n	800576a <__kernel_rem_pio2f+0x20a>
 8005828:	3301      	adds	r3, #1
 800582a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800582e:	2900      	cmp	r1, #0
 8005830:	d0fa      	beq.n	8005828 <__kernel_rem_pio2f+0x2c8>
 8005832:	f06f 0803 	mvn.w	r8, #3
 8005836:	9a04      	ldr	r2, [sp, #16]
 8005838:	1c7d      	adds	r5, r7, #1
 800583a:	18bc      	adds	r4, r7, r2
 800583c:	aa1c      	add	r2, sp, #112	; 0x70
 800583e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005842:	441f      	add	r7, r3
 8005844:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005848:	42af      	cmp	r7, r5
 800584a:	f6ff aec8 	blt.w	80055de <__kernel_rem_pio2f+0x7e>
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	f04f 0a00 	mov.w	sl, #0
 8005854:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005858:	f7fb fa20 	bl	8000c9c <__aeabi_i2f>
 800585c:	f04f 0b00 	mov.w	fp, #0
 8005860:	6020      	str	r0, [r4, #0]
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	459a      	cmp	sl, r3
 8005866:	dd0b      	ble.n	8005880 <__kernel_rem_pio2f+0x320>
 8005868:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800586c:	3404      	adds	r4, #4
 800586e:	3501      	adds	r5, #1
 8005870:	e7ea      	b.n	8005848 <__kernel_rem_pio2f+0x2e8>
 8005872:	9a07      	ldr	r2, [sp, #28]
 8005874:	2301      	movs	r3, #1
 8005876:	e7d8      	b.n	800582a <__kernel_rem_pio2f+0x2ca>
 8005878:	08009858 	.word	0x08009858
 800587c:	0800982c 	.word	0x0800982c
 8005880:	fb08 f30a 	mul.w	r3, r8, sl
 8005884:	9a05      	ldr	r2, [sp, #20]
 8005886:	58e0      	ldr	r0, [r4, r3]
 8005888:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800588c:	f7fb fa5a 	bl	8000d44 <__aeabi_fmul>
 8005890:	4601      	mov	r1, r0
 8005892:	4658      	mov	r0, fp
 8005894:	f7fb f94e 	bl	8000b34 <__addsf3>
 8005898:	f10a 0a01 	add.w	sl, sl, #1
 800589c:	4683      	mov	fp, r0
 800589e:	e7e0      	b.n	8005862 <__kernel_rem_pio2f+0x302>
 80058a0:	3c01      	subs	r4, #1
 80058a2:	e767      	b.n	8005774 <__kernel_rem_pio2f+0x214>
 80058a4:	4271      	negs	r1, r6
 80058a6:	4620      	mov	r0, r4
 80058a8:	f000 fac6 	bl	8005e38 <scalbnf>
 80058ac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80058b0:	4604      	mov	r4, r0
 80058b2:	f7fb fbf9 	bl	80010a8 <__aeabi_fcmpge>
 80058b6:	b1f8      	cbz	r0, 80058f8 <__kernel_rem_pio2f+0x398>
 80058b8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80058bc:	4620      	mov	r0, r4
 80058be:	f7fb fa41 	bl	8000d44 <__aeabi_fmul>
 80058c2:	f7fb fc1b 	bl	80010fc <__aeabi_f2iz>
 80058c6:	f7fb f9e9 	bl	8000c9c <__aeabi_i2f>
 80058ca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80058ce:	4680      	mov	r8, r0
 80058d0:	f7fb fa38 	bl	8000d44 <__aeabi_fmul>
 80058d4:	4601      	mov	r1, r0
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7fb f92a 	bl	8000b30 <__aeabi_fsub>
 80058dc:	f7fb fc0e 	bl	80010fc <__aeabi_f2iz>
 80058e0:	ab08      	add	r3, sp, #32
 80058e2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7fb fc08 	bl	80010fc <__aeabi_f2iz>
 80058ec:	1c7c      	adds	r4, r7, #1
 80058ee:	ab08      	add	r3, sp, #32
 80058f0:	3608      	adds	r6, #8
 80058f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058f6:	e744      	b.n	8005782 <__kernel_rem_pio2f+0x222>
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7fb fbff 	bl	80010fc <__aeabi_f2iz>
 80058fe:	ab08      	add	r3, sp, #32
 8005900:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005904:	463c      	mov	r4, r7
 8005906:	e73c      	b.n	8005782 <__kernel_rem_pio2f+0x222>
 8005908:	ab08      	add	r3, sp, #32
 800590a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800590e:	f7fb f9c5 	bl	8000c9c <__aeabi_i2f>
 8005912:	4651      	mov	r1, sl
 8005914:	f7fb fa16 	bl	8000d44 <__aeabi_fmul>
 8005918:	4631      	mov	r1, r6
 800591a:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800591e:	4650      	mov	r0, sl
 8005920:	f7fb fa10 	bl	8000d44 <__aeabi_fmul>
 8005924:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005928:	4682      	mov	sl, r0
 800592a:	e734      	b.n	8005796 <__kernel_rem_pio2f+0x236>
 800592c:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8005930:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	f7fb fa04 	bl	8000d44 <__aeabi_fmul>
 800593c:	4601      	mov	r1, r0
 800593e:	4658      	mov	r0, fp
 8005940:	f7fb f8f8 	bl	8000b34 <__addsf3>
 8005944:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8005948:	4683      	mov	fp, r0
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	9902      	ldr	r1, [sp, #8]
 8005950:	4588      	cmp	r8, r1
 8005952:	dc01      	bgt.n	8005958 <__kernel_rem_pio2f+0x3f8>
 8005954:	45c2      	cmp	sl, r8
 8005956:	dae9      	bge.n	800592c <__kernel_rem_pio2f+0x3cc>
 8005958:	a958      	add	r1, sp, #352	; 0x160
 800595a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800595e:	f841 bca0 	str.w	fp, [r1, #-160]
 8005962:	f10a 0a01 	add.w	sl, sl, #1
 8005966:	3f04      	subs	r7, #4
 8005968:	e71f      	b.n	80057aa <__kernel_rem_pio2f+0x24a>
 800596a:	469b      	mov	fp, r3
 800596c:	f04f 0800 	mov.w	r8, #0
 8005970:	e7ed      	b.n	800594e <__kernel_rem_pio2f+0x3ee>
 8005972:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8005976:	4456      	add	r6, sl
 8005978:	4637      	mov	r7, r6
 800597a:	46a0      	mov	r8, r4
 800597c:	f1b8 0f00 	cmp.w	r8, #0
 8005980:	dc4a      	bgt.n	8005a18 <__kernel_rem_pio2f+0x4b8>
 8005982:	4627      	mov	r7, r4
 8005984:	2f01      	cmp	r7, #1
 8005986:	dc60      	bgt.n	8005a4a <__kernel_rem_pio2f+0x4ea>
 8005988:	2000      	movs	r0, #0
 800598a:	2c01      	cmp	r4, #1
 800598c:	dc74      	bgt.n	8005a78 <__kernel_rem_pio2f+0x518>
 800598e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8005990:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005992:	2d00      	cmp	r5, #0
 8005994:	d176      	bne.n	8005a84 <__kernel_rem_pio2f+0x524>
 8005996:	9901      	ldr	r1, [sp, #4]
 8005998:	600a      	str	r2, [r1, #0]
 800599a:	460a      	mov	r2, r1
 800599c:	604b      	str	r3, [r1, #4]
 800599e:	6090      	str	r0, [r2, #8]
 80059a0:	e00b      	b.n	80059ba <__kernel_rem_pio2f+0x45a>
 80059a2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80059a6:	f7fb f8c5 	bl	8000b34 <__addsf3>
 80059aa:	3c01      	subs	r4, #1
 80059ac:	2c00      	cmp	r4, #0
 80059ae:	daf8      	bge.n	80059a2 <__kernel_rem_pio2f+0x442>
 80059b0:	b10d      	cbz	r5, 80059b6 <__kernel_rem_pio2f+0x456>
 80059b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	6018      	str	r0, [r3, #0]
 80059ba:	f009 0007 	and.w	r0, r9, #7
 80059be:	b059      	add	sp, #356	; 0x164
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	2000      	movs	r0, #0
 80059c6:	ae30      	add	r6, sp, #192	; 0xc0
 80059c8:	e7f0      	b.n	80059ac <__kernel_rem_pio2f+0x44c>
 80059ca:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80059ce:	f7fb f8b1 	bl	8000b34 <__addsf3>
 80059d2:	3e01      	subs	r6, #1
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	daf8      	bge.n	80059ca <__kernel_rem_pio2f+0x46a>
 80059d8:	b1b5      	cbz	r5, 8005a08 <__kernel_rem_pio2f+0x4a8>
 80059da:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80059de:	9a01      	ldr	r2, [sp, #4]
 80059e0:	af58      	add	r7, sp, #352	; 0x160
 80059e2:	4601      	mov	r1, r0
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80059ea:	f7fb f8a1 	bl	8000b30 <__aeabi_fsub>
 80059ee:	2601      	movs	r6, #1
 80059f0:	42b4      	cmp	r4, r6
 80059f2:	da0b      	bge.n	8005a0c <__kernel_rem_pio2f+0x4ac>
 80059f4:	b10d      	cbz	r5, 80059fa <__kernel_rem_pio2f+0x49a>
 80059f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	6058      	str	r0, [r3, #4]
 80059fe:	e7dc      	b.n	80059ba <__kernel_rem_pio2f+0x45a>
 8005a00:	4626      	mov	r6, r4
 8005a02:	2000      	movs	r0, #0
 8005a04:	af30      	add	r7, sp, #192	; 0xc0
 8005a06:	e7e5      	b.n	80059d4 <__kernel_rem_pio2f+0x474>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	e7e8      	b.n	80059de <__kernel_rem_pio2f+0x47e>
 8005a0c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005a10:	f7fb f890 	bl	8000b34 <__addsf3>
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7eb      	b.n	80059f0 <__kernel_rem_pio2f+0x490>
 8005a18:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8005a1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	9202      	str	r2, [sp, #8]
 8005a2a:	f7fb f883 	bl	8000b34 <__addsf3>
 8005a2e:	9a02      	ldr	r2, [sp, #8]
 8005a30:	4601      	mov	r1, r0
 8005a32:	4683      	mov	fp, r0
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fb f87b 	bl	8000b30 <__aeabi_fsub>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f7fb f879 	bl	8000b34 <__addsf3>
 8005a42:	f8c7 b000 	str.w	fp, [r7]
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	e798      	b.n	800597c <__kernel_rem_pio2f+0x41c>
 8005a4a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8005a4e:	3f01      	subs	r7, #1
 8005a50:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	4659      	mov	r1, fp
 8005a58:	9302      	str	r3, [sp, #8]
 8005a5a:	f7fb f86b 	bl	8000b34 <__addsf3>
 8005a5e:	9b02      	ldr	r3, [sp, #8]
 8005a60:	4601      	mov	r1, r0
 8005a62:	4680      	mov	r8, r0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fb f863 	bl	8000b30 <__aeabi_fsub>
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	f7fb f862 	bl	8000b34 <__addsf3>
 8005a70:	f8c6 8000 	str.w	r8, [r6]
 8005a74:	6070      	str	r0, [r6, #4]
 8005a76:	e785      	b.n	8005984 <__kernel_rem_pio2f+0x424>
 8005a78:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8005a7c:	f7fb f85a 	bl	8000b34 <__addsf3>
 8005a80:	3c01      	subs	r4, #1
 8005a82:	e782      	b.n	800598a <__kernel_rem_pio2f+0x42a>
 8005a84:	9901      	ldr	r1, [sp, #4]
 8005a86:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8005a8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	600a      	str	r2, [r1, #0]
 8005a90:	604b      	str	r3, [r1, #4]
 8005a92:	460a      	mov	r2, r1
 8005a94:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005a98:	e781      	b.n	800599e <__kernel_rem_pio2f+0x43e>
 8005a9a:	bf00      	nop

08005a9c <__kernel_sinf>:
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005aa4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	4691      	mov	r9, r2
 8005aae:	da03      	bge.n	8005ab8 <__kernel_sinf+0x1c>
 8005ab0:	f7fb fb24 	bl	80010fc <__aeabi_f2iz>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d035      	beq.n	8005b24 <__kernel_sinf+0x88>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7fb f942 	bl	8000d44 <__aeabi_fmul>
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7fb f93d 	bl	8000d44 <__aeabi_fmul>
 8005aca:	4929      	ldr	r1, [pc, #164]	; (8005b70 <__kernel_sinf+0xd4>)
 8005acc:	4606      	mov	r6, r0
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f7fb f938 	bl	8000d44 <__aeabi_fmul>
 8005ad4:	4927      	ldr	r1, [pc, #156]	; (8005b74 <__kernel_sinf+0xd8>)
 8005ad6:	f7fb f82b 	bl	8000b30 <__aeabi_fsub>
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7fb f932 	bl	8000d44 <__aeabi_fmul>
 8005ae0:	4925      	ldr	r1, [pc, #148]	; (8005b78 <__kernel_sinf+0xdc>)
 8005ae2:	f7fb f827 	bl	8000b34 <__addsf3>
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fb f92c 	bl	8000d44 <__aeabi_fmul>
 8005aec:	4923      	ldr	r1, [pc, #140]	; (8005b7c <__kernel_sinf+0xe0>)
 8005aee:	f7fb f81f 	bl	8000b30 <__aeabi_fsub>
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fb f926 	bl	8000d44 <__aeabi_fmul>
 8005af8:	4921      	ldr	r1, [pc, #132]	; (8005b80 <__kernel_sinf+0xe4>)
 8005afa:	f7fb f81b 	bl	8000b34 <__addsf3>
 8005afe:	4680      	mov	r8, r0
 8005b00:	f1b9 0f00 	cmp.w	r9, #0
 8005b04:	d111      	bne.n	8005b2a <__kernel_sinf+0x8e>
 8005b06:	4601      	mov	r1, r0
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f7fb f91b 	bl	8000d44 <__aeabi_fmul>
 8005b0e:	491d      	ldr	r1, [pc, #116]	; (8005b84 <__kernel_sinf+0xe8>)
 8005b10:	f7fb f80e 	bl	8000b30 <__aeabi_fsub>
 8005b14:	4631      	mov	r1, r6
 8005b16:	f7fb f915 	bl	8000d44 <__aeabi_fmul>
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7fb f809 	bl	8000b34 <__addsf3>
 8005b22:	4604      	mov	r4, r0
 8005b24:	4620      	mov	r0, r4
 8005b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7fb f908 	bl	8000d44 <__aeabi_fmul>
 8005b34:	4641      	mov	r1, r8
 8005b36:	4681      	mov	r9, r0
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f7fb f903 	bl	8000d44 <__aeabi_fmul>
 8005b3e:	4601      	mov	r1, r0
 8005b40:	4648      	mov	r0, r9
 8005b42:	f7fa fff5 	bl	8000b30 <__aeabi_fsub>
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7fb f8fc 	bl	8000d44 <__aeabi_fmul>
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa ffef 	bl	8000b30 <__aeabi_fsub>
 8005b52:	490c      	ldr	r1, [pc, #48]	; (8005b84 <__kernel_sinf+0xe8>)
 8005b54:	4605      	mov	r5, r0
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fb f8f4 	bl	8000d44 <__aeabi_fmul>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7fa ffe8 	bl	8000b34 <__addsf3>
 8005b64:	4601      	mov	r1, r0
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7fa ffe2 	bl	8000b30 <__aeabi_fsub>
 8005b6c:	e7d9      	b.n	8005b22 <__kernel_sinf+0x86>
 8005b6e:	bf00      	nop
 8005b70:	2f2ec9d3 	.word	0x2f2ec9d3
 8005b74:	32d72f34 	.word	0x32d72f34
 8005b78:	3638ef1b 	.word	0x3638ef1b
 8005b7c:	39500d01 	.word	0x39500d01
 8005b80:	3c088889 	.word	0x3c088889
 8005b84:	3e2aaaab 	.word	0x3e2aaaab

08005b88 <matherr>:
 8005b88:	2000      	movs	r0, #0
 8005b8a:	4770      	bx	lr

08005b8c <nan>:
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	4901      	ldr	r1, [pc, #4]	; (8005b94 <nan+0x8>)
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	7ff80000 	.word	0x7ff80000

08005b98 <atanf>:
 8005b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005ba0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	db0e      	blt.n	8005bc8 <atanf+0x30>
 8005baa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005bae:	dd04      	ble.n	8005bba <atanf+0x22>
 8005bb0:	4601      	mov	r1, r0
 8005bb2:	f7fa ffbf 	bl	8000b34 <__addsf3>
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	e003      	b.n	8005bc2 <atanf+0x2a>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f340 80cd 	ble.w	8005d5a <atanf+0x1c2>
 8005bc0:	4c67      	ldr	r4, [pc, #412]	; (8005d60 <atanf+0x1c8>)
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <atanf+0x1cc>)
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	dc0e      	bgt.n	8005bec <atanf+0x54>
 8005bce:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005bd2:	da08      	bge.n	8005be6 <atanf+0x4e>
 8005bd4:	4964      	ldr	r1, [pc, #400]	; (8005d68 <atanf+0x1d0>)
 8005bd6:	f7fa ffad 	bl	8000b34 <__addsf3>
 8005bda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005bde:	f7fb fa6d 	bl	80010bc <__aeabi_fcmpgt>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d1ed      	bne.n	8005bc2 <atanf+0x2a>
 8005be6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005bea:	e01c      	b.n	8005c26 <atanf+0x8e>
 8005bec:	f000 f8e0 	bl	8005db0 <fabsf>
 8005bf0:	4b5e      	ldr	r3, [pc, #376]	; (8005d6c <atanf+0x1d4>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	dc7c      	bgt.n	8005cf2 <atanf+0x15a>
 8005bf8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005bfc:	429d      	cmp	r5, r3
 8005bfe:	dc67      	bgt.n	8005cd0 <atanf+0x138>
 8005c00:	4601      	mov	r1, r0
 8005c02:	f7fa ff97 	bl	8000b34 <__addsf3>
 8005c06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c0a:	f7fa ff91 	bl	8000b30 <__aeabi_fsub>
 8005c0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c12:	4605      	mov	r5, r0
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7fa ff8d 	bl	8000b34 <__addsf3>
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f7fb f945 	bl	8000eac <__aeabi_fdiv>
 8005c22:	2600      	movs	r6, #0
 8005c24:	4604      	mov	r4, r0
 8005c26:	4621      	mov	r1, r4
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7fb f88b 	bl	8000d44 <__aeabi_fmul>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4680      	mov	r8, r0
 8005c32:	f7fb f887 	bl	8000d44 <__aeabi_fmul>
 8005c36:	4605      	mov	r5, r0
 8005c38:	494d      	ldr	r1, [pc, #308]	; (8005d70 <atanf+0x1d8>)
 8005c3a:	f7fb f883 	bl	8000d44 <__aeabi_fmul>
 8005c3e:	494d      	ldr	r1, [pc, #308]	; (8005d74 <atanf+0x1dc>)
 8005c40:	f7fa ff78 	bl	8000b34 <__addsf3>
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fb f87d 	bl	8000d44 <__aeabi_fmul>
 8005c4a:	494b      	ldr	r1, [pc, #300]	; (8005d78 <atanf+0x1e0>)
 8005c4c:	f7fa ff72 	bl	8000b34 <__addsf3>
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fb f877 	bl	8000d44 <__aeabi_fmul>
 8005c56:	4949      	ldr	r1, [pc, #292]	; (8005d7c <atanf+0x1e4>)
 8005c58:	f7fa ff6c 	bl	8000b34 <__addsf3>
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fb f871 	bl	8000d44 <__aeabi_fmul>
 8005c62:	4947      	ldr	r1, [pc, #284]	; (8005d80 <atanf+0x1e8>)
 8005c64:	f7fa ff66 	bl	8000b34 <__addsf3>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fb f86b 	bl	8000d44 <__aeabi_fmul>
 8005c6e:	4945      	ldr	r1, [pc, #276]	; (8005d84 <atanf+0x1ec>)
 8005c70:	f7fa ff60 	bl	8000b34 <__addsf3>
 8005c74:	4641      	mov	r1, r8
 8005c76:	f7fb f865 	bl	8000d44 <__aeabi_fmul>
 8005c7a:	4943      	ldr	r1, [pc, #268]	; (8005d88 <atanf+0x1f0>)
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7fb f860 	bl	8000d44 <__aeabi_fmul>
 8005c84:	4941      	ldr	r1, [pc, #260]	; (8005d8c <atanf+0x1f4>)
 8005c86:	f7fa ff53 	bl	8000b30 <__aeabi_fsub>
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f7fb f85a 	bl	8000d44 <__aeabi_fmul>
 8005c90:	493f      	ldr	r1, [pc, #252]	; (8005d90 <atanf+0x1f8>)
 8005c92:	f7fa ff4d 	bl	8000b30 <__aeabi_fsub>
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fb f854 	bl	8000d44 <__aeabi_fmul>
 8005c9c:	493d      	ldr	r1, [pc, #244]	; (8005d94 <atanf+0x1fc>)
 8005c9e:	f7fa ff47 	bl	8000b30 <__aeabi_fsub>
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	f7fb f84e 	bl	8000d44 <__aeabi_fmul>
 8005ca8:	493b      	ldr	r1, [pc, #236]	; (8005d98 <atanf+0x200>)
 8005caa:	f7fa ff41 	bl	8000b30 <__aeabi_fsub>
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fb f848 	bl	8000d44 <__aeabi_fmul>
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	f7fa ff3c 	bl	8000b34 <__addsf3>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	f7fb f841 	bl	8000d44 <__aeabi_fmul>
 8005cc2:	1c73      	adds	r3, r6, #1
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	d133      	bne.n	8005d30 <atanf+0x198>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fa ff31 	bl	8000b30 <__aeabi_fsub>
 8005cce:	e772      	b.n	8005bb6 <atanf+0x1e>
 8005cd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005cd4:	f7fa ff2c 	bl	8000b30 <__aeabi_fsub>
 8005cd8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005cdc:	4605      	mov	r5, r0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f7fa ff28 	bl	8000b34 <__addsf3>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7fb f8e0 	bl	8000eac <__aeabi_fdiv>
 8005cec:	2601      	movs	r6, #1
 8005cee:	4604      	mov	r4, r0
 8005cf0:	e799      	b.n	8005c26 <atanf+0x8e>
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <atanf+0x204>)
 8005cf4:	429d      	cmp	r5, r3
 8005cf6:	dc14      	bgt.n	8005d22 <atanf+0x18a>
 8005cf8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005cfc:	f7fa ff18 	bl	8000b30 <__aeabi_fsub>
 8005d00:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005d04:	4605      	mov	r5, r0
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7fb f81c 	bl	8000d44 <__aeabi_fmul>
 8005d0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d10:	f7fa ff10 	bl	8000b34 <__addsf3>
 8005d14:	4601      	mov	r1, r0
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7fb f8c8 	bl	8000eac <__aeabi_fdiv>
 8005d1c:	2602      	movs	r6, #2
 8005d1e:	4604      	mov	r4, r0
 8005d20:	e781      	b.n	8005c26 <atanf+0x8e>
 8005d22:	4601      	mov	r1, r0
 8005d24:	481e      	ldr	r0, [pc, #120]	; (8005da0 <atanf+0x208>)
 8005d26:	f7fb f8c1 	bl	8000eac <__aeabi_fdiv>
 8005d2a:	2603      	movs	r6, #3
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	e77a      	b.n	8005c26 <atanf+0x8e>
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <atanf+0x20c>)
 8005d32:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005d36:	f7fa fefb 	bl	8000b30 <__aeabi_fsub>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	f7fa fef8 	bl	8000b30 <__aeabi_fsub>
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <atanf+0x210>)
 8005d42:	4601      	mov	r1, r0
 8005d44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d48:	f7fa fef2 	bl	8000b30 <__aeabi_fsub>
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	f6bf af37 	bge.w	8005bc2 <atanf+0x2a>
 8005d54:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005d58:	e733      	b.n	8005bc2 <atanf+0x2a>
 8005d5a:	4c14      	ldr	r4, [pc, #80]	; (8005dac <atanf+0x214>)
 8005d5c:	e731      	b.n	8005bc2 <atanf+0x2a>
 8005d5e:	bf00      	nop
 8005d60:	3fc90fdb 	.word	0x3fc90fdb
 8005d64:	3edfffff 	.word	0x3edfffff
 8005d68:	7149f2ca 	.word	0x7149f2ca
 8005d6c:	3f97ffff 	.word	0x3f97ffff
 8005d70:	3c8569d7 	.word	0x3c8569d7
 8005d74:	3d4bda59 	.word	0x3d4bda59
 8005d78:	3d886b35 	.word	0x3d886b35
 8005d7c:	3dba2e6e 	.word	0x3dba2e6e
 8005d80:	3e124925 	.word	0x3e124925
 8005d84:	3eaaaaab 	.word	0x3eaaaaab
 8005d88:	bd15a221 	.word	0xbd15a221
 8005d8c:	3d6ef16b 	.word	0x3d6ef16b
 8005d90:	3d9d8795 	.word	0x3d9d8795
 8005d94:	3de38e38 	.word	0x3de38e38
 8005d98:	3e4ccccd 	.word	0x3e4ccccd
 8005d9c:	401bffff 	.word	0x401bffff
 8005da0:	bf800000 	.word	0xbf800000
 8005da4:	08009874 	.word	0x08009874
 8005da8:	08009864 	.word	0x08009864
 8005dac:	bfc90fdb 	.word	0xbfc90fdb

08005db0 <fabsf>:
 8005db0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005db4:	4770      	bx	lr
	...

08005db8 <floorf>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005dbe:	0df5      	lsrs	r5, r6, #23
 8005dc0:	3d7f      	subs	r5, #127	; 0x7f
 8005dc2:	2d16      	cmp	r5, #22
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	dc26      	bgt.n	8005e18 <floorf+0x60>
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	da0e      	bge.n	8005dec <floorf+0x34>
 8005dce:	4917      	ldr	r1, [pc, #92]	; (8005e2c <floorf+0x74>)
 8005dd0:	f7fa feb0 	bl	8000b34 <__addsf3>
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f7fb f971 	bl	80010bc <__aeabi_fcmpgt>
 8005dda:	b128      	cbz	r0, 8005de8 <floorf+0x30>
 8005ddc:	2c00      	cmp	r4, #0
 8005dde:	da23      	bge.n	8005e28 <floorf+0x70>
 8005de0:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <floorf+0x78>)
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	bf18      	it	ne
 8005de6:	461c      	movne	r4, r3
 8005de8:	4621      	mov	r1, r4
 8005dea:	e01b      	b.n	8005e24 <floorf+0x6c>
 8005dec:	4e11      	ldr	r6, [pc, #68]	; (8005e34 <floorf+0x7c>)
 8005dee:	412e      	asrs	r6, r5
 8005df0:	4230      	tst	r0, r6
 8005df2:	d017      	beq.n	8005e24 <floorf+0x6c>
 8005df4:	490d      	ldr	r1, [pc, #52]	; (8005e2c <floorf+0x74>)
 8005df6:	f7fa fe9d 	bl	8000b34 <__addsf3>
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	f7fb f95e 	bl	80010bc <__aeabi_fcmpgt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d0f1      	beq.n	8005de8 <floorf+0x30>
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	bfbe      	ittt	lt
 8005e08:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8005e0c:	fa43 f505 	asrlt.w	r5, r3, r5
 8005e10:	1964      	addlt	r4, r4, r5
 8005e12:	ea24 0406 	bic.w	r4, r4, r6
 8005e16:	e7e7      	b.n	8005de8 <floorf+0x30>
 8005e18:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005e1c:	d302      	bcc.n	8005e24 <floorf+0x6c>
 8005e1e:	f7fa fe89 	bl	8000b34 <__addsf3>
 8005e22:	4601      	mov	r1, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	2400      	movs	r4, #0
 8005e2a:	e7dd      	b.n	8005de8 <floorf+0x30>
 8005e2c:	7149f2ca 	.word	0x7149f2ca
 8005e30:	bf800000 	.word	0xbf800000
 8005e34:	007fffff 	.word	0x007fffff

08005e38 <scalbnf>:
 8005e38:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	4601      	mov	r1, r0
 8005e44:	d027      	beq.n	8005e96 <scalbnf+0x5e>
 8005e46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005e4a:	d303      	bcc.n	8005e54 <scalbnf+0x1c>
 8005e4c:	f7fa fe72 	bl	8000b34 <__addsf3>
 8005e50:	4602      	mov	r2, r0
 8005e52:	e020      	b.n	8005e96 <scalbnf+0x5e>
 8005e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e58:	d215      	bcs.n	8005e86 <scalbnf+0x4e>
 8005e5a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8005e5e:	f7fa ff71 	bl	8000d44 <__aeabi_fmul>
 8005e62:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <scalbnf+0x8c>)
 8005e64:	4602      	mov	r2, r0
 8005e66:	429c      	cmp	r4, r3
 8005e68:	db22      	blt.n	8005eb0 <scalbnf+0x78>
 8005e6a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005e6e:	3b19      	subs	r3, #25
 8005e70:	4423      	add	r3, r4
 8005e72:	2bfe      	cmp	r3, #254	; 0xfe
 8005e74:	dd09      	ble.n	8005e8a <scalbnf+0x52>
 8005e76:	4611      	mov	r1, r2
 8005e78:	4813      	ldr	r0, [pc, #76]	; (8005ec8 <scalbnf+0x90>)
 8005e7a:	f000 f829 	bl	8005ed0 <copysignf>
 8005e7e:	4912      	ldr	r1, [pc, #72]	; (8005ec8 <scalbnf+0x90>)
 8005e80:	f7fa ff60 	bl	8000d44 <__aeabi_fmul>
 8005e84:	e7e4      	b.n	8005e50 <scalbnf+0x18>
 8005e86:	0ddb      	lsrs	r3, r3, #23
 8005e88:	e7f2      	b.n	8005e70 <scalbnf+0x38>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	dd05      	ble.n	8005e9a <scalbnf+0x62>
 8005e8e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8005e92:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8005e96:	4610      	mov	r0, r2
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	f113 0f16 	cmn.w	r3, #22
 8005e9e:	da09      	bge.n	8005eb4 <scalbnf+0x7c>
 8005ea0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	dce6      	bgt.n	8005e78 <scalbnf+0x40>
 8005eaa:	4808      	ldr	r0, [pc, #32]	; (8005ecc <scalbnf+0x94>)
 8005eac:	f000 f810 	bl	8005ed0 <copysignf>
 8005eb0:	4906      	ldr	r1, [pc, #24]	; (8005ecc <scalbnf+0x94>)
 8005eb2:	e7e5      	b.n	8005e80 <scalbnf+0x48>
 8005eb4:	3319      	adds	r3, #25
 8005eb6:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8005eba:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8005ebe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8005ec2:	e7dd      	b.n	8005e80 <scalbnf+0x48>
 8005ec4:	ffff3cb0 	.word	0xffff3cb0
 8005ec8:	7149f2ca 	.word	0x7149f2ca
 8005ecc:	0da24260 	.word	0x0da24260

08005ed0 <copysignf>:
 8005ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ed4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ed8:	4308      	orrs	r0, r1
 8005eda:	4770      	bx	lr

08005edc <abort>:
 8005edc:	b508      	push	{r3, lr}
 8005ede:	2006      	movs	r0, #6
 8005ee0:	f000 fac2 	bl	8006468 <raise>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f003 fa9d 	bl	8009424 <_exit>
	...

08005eec <__errno>:
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <__errno+0x8>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000010 	.word	0x20000010

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	2500      	movs	r5, #0
 8005efc:	4e0c      	ldr	r6, [pc, #48]	; (8005f30 <__libc_init_array+0x38>)
 8005efe:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005f00:	1ba4      	subs	r4, r4, r6
 8005f02:	10a4      	asrs	r4, r4, #2
 8005f04:	42a5      	cmp	r5, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	f003 fa8e 	bl	8009428 <_init>
 8005f0c:	2500      	movs	r5, #0
 8005f0e:	4e0a      	ldr	r6, [pc, #40]	; (8005f38 <__libc_init_array+0x40>)
 8005f10:	4c0a      	ldr	r4, [pc, #40]	; (8005f3c <__libc_init_array+0x44>)
 8005f12:	1ba4      	subs	r4, r4, r6
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	42a5      	cmp	r5, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f20:	4798      	blx	r3
 8005f22:	3501      	adds	r5, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f2a:	4798      	blx	r3
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	08009af8 	.word	0x08009af8
 8005f34:	08009af8 	.word	0x08009af8
 8005f38:	08009af8 	.word	0x08009af8
 8005f3c:	08009b08 	.word	0x08009b08

08005f40 <malloc>:
 8005f40:	4b02      	ldr	r3, [pc, #8]	; (8005f4c <malloc+0xc>)
 8005f42:	4601      	mov	r1, r0
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f000 b80b 	b.w	8005f60 <_malloc_r>
 8005f4a:	bf00      	nop
 8005f4c:	20000010 	.word	0x20000010

08005f50 <free>:
 8005f50:	4b02      	ldr	r3, [pc, #8]	; (8005f5c <free+0xc>)
 8005f52:	4601      	mov	r1, r0
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f002 bb89 	b.w	800866c <_free_r>
 8005f5a:	bf00      	nop
 8005f5c:	20000010 	.word	0x20000010

08005f60 <_malloc_r>:
 8005f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	f101 050b 	add.w	r5, r1, #11
 8005f68:	2d16      	cmp	r5, #22
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	d906      	bls.n	8005f7c <_malloc_r+0x1c>
 8005f6e:	f035 0507 	bics.w	r5, r5, #7
 8005f72:	d504      	bpl.n	8005f7e <_malloc_r+0x1e>
 8005f74:	230c      	movs	r3, #12
 8005f76:	6033      	str	r3, [r6, #0]
 8005f78:	2400      	movs	r4, #0
 8005f7a:	e1a8      	b.n	80062ce <_malloc_r+0x36e>
 8005f7c:	2510      	movs	r5, #16
 8005f7e:	428d      	cmp	r5, r1
 8005f80:	d3f8      	bcc.n	8005f74 <_malloc_r+0x14>
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 fa2a 	bl	80063dc <__malloc_lock>
 8005f88:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005f8c:	4fc0      	ldr	r7, [pc, #768]	; (8006290 <_malloc_r+0x330>)
 8005f8e:	d238      	bcs.n	8006002 <_malloc_r+0xa2>
 8005f90:	f105 0208 	add.w	r2, r5, #8
 8005f94:	443a      	add	r2, r7
 8005f96:	6854      	ldr	r4, [r2, #4]
 8005f98:	f1a2 0108 	sub.w	r1, r2, #8
 8005f9c:	428c      	cmp	r4, r1
 8005f9e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8005fa2:	d102      	bne.n	8005faa <_malloc_r+0x4a>
 8005fa4:	68d4      	ldr	r4, [r2, #12]
 8005fa6:	42a2      	cmp	r2, r4
 8005fa8:	d010      	beq.n	8005fcc <_malloc_r+0x6c>
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	60ca      	str	r2, [r1, #12]
 8005fb6:	4423      	add	r3, r4
 8005fb8:	6091      	str	r1, [r2, #8]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 fa10 	bl	80063e8 <__malloc_unlock>
 8005fc8:	3408      	adds	r4, #8
 8005fca:	e180      	b.n	80062ce <_malloc_r+0x36e>
 8005fcc:	3302      	adds	r3, #2
 8005fce:	4ab1      	ldr	r2, [pc, #708]	; (8006294 <_malloc_r+0x334>)
 8005fd0:	693c      	ldr	r4, [r7, #16]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4294      	cmp	r4, r2
 8005fd6:	d075      	beq.n	80060c4 <_malloc_r+0x164>
 8005fd8:	6860      	ldr	r0, [r4, #4]
 8005fda:	f020 0c03 	bic.w	ip, r0, #3
 8005fde:	ebac 0005 	sub.w	r0, ip, r5
 8005fe2:	280f      	cmp	r0, #15
 8005fe4:	dd48      	ble.n	8006078 <_malloc_r+0x118>
 8005fe6:	1963      	adds	r3, r4, r5
 8005fe8:	f045 0501 	orr.w	r5, r5, #1
 8005fec:	6065      	str	r5, [r4, #4]
 8005fee:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8005ff2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8005ff6:	f040 0201 	orr.w	r2, r0, #1
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	f844 000c 	str.w	r0, [r4, ip]
 8006000:	e7df      	b.n	8005fc2 <_malloc_r+0x62>
 8006002:	0a6b      	lsrs	r3, r5, #9
 8006004:	d02a      	beq.n	800605c <_malloc_r+0xfc>
 8006006:	2b04      	cmp	r3, #4
 8006008:	d812      	bhi.n	8006030 <_malloc_r+0xd0>
 800600a:	09ab      	lsrs	r3, r5, #6
 800600c:	3338      	adds	r3, #56	; 0x38
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8006014:	6854      	ldr	r4, [r2, #4]
 8006016:	f1a2 0c08 	sub.w	ip, r2, #8
 800601a:	4564      	cmp	r4, ip
 800601c:	d006      	beq.n	800602c <_malloc_r+0xcc>
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	f022 0203 	bic.w	r2, r2, #3
 8006024:	1b50      	subs	r0, r2, r5
 8006026:	280f      	cmp	r0, #15
 8006028:	dd1c      	ble.n	8006064 <_malloc_r+0x104>
 800602a:	3b01      	subs	r3, #1
 800602c:	3301      	adds	r3, #1
 800602e:	e7ce      	b.n	8005fce <_malloc_r+0x6e>
 8006030:	2b14      	cmp	r3, #20
 8006032:	d801      	bhi.n	8006038 <_malloc_r+0xd8>
 8006034:	335b      	adds	r3, #91	; 0x5b
 8006036:	e7ea      	b.n	800600e <_malloc_r+0xae>
 8006038:	2b54      	cmp	r3, #84	; 0x54
 800603a:	d802      	bhi.n	8006042 <_malloc_r+0xe2>
 800603c:	0b2b      	lsrs	r3, r5, #12
 800603e:	336e      	adds	r3, #110	; 0x6e
 8006040:	e7e5      	b.n	800600e <_malloc_r+0xae>
 8006042:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006046:	d802      	bhi.n	800604e <_malloc_r+0xee>
 8006048:	0beb      	lsrs	r3, r5, #15
 800604a:	3377      	adds	r3, #119	; 0x77
 800604c:	e7df      	b.n	800600e <_malloc_r+0xae>
 800604e:	f240 5254 	movw	r2, #1364	; 0x554
 8006052:	4293      	cmp	r3, r2
 8006054:	d804      	bhi.n	8006060 <_malloc_r+0x100>
 8006056:	0cab      	lsrs	r3, r5, #18
 8006058:	337c      	adds	r3, #124	; 0x7c
 800605a:	e7d8      	b.n	800600e <_malloc_r+0xae>
 800605c:	233f      	movs	r3, #63	; 0x3f
 800605e:	e7d6      	b.n	800600e <_malloc_r+0xae>
 8006060:	237e      	movs	r3, #126	; 0x7e
 8006062:	e7d4      	b.n	800600e <_malloc_r+0xae>
 8006064:	2800      	cmp	r0, #0
 8006066:	68e1      	ldr	r1, [r4, #12]
 8006068:	db04      	blt.n	8006074 <_malloc_r+0x114>
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	60d9      	str	r1, [r3, #12]
 800606e:	608b      	str	r3, [r1, #8]
 8006070:	18a3      	adds	r3, r4, r2
 8006072:	e7a2      	b.n	8005fba <_malloc_r+0x5a>
 8006074:	460c      	mov	r4, r1
 8006076:	e7d0      	b.n	800601a <_malloc_r+0xba>
 8006078:	2800      	cmp	r0, #0
 800607a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800607e:	db07      	blt.n	8006090 <_malloc_r+0x130>
 8006080:	44a4      	add	ip, r4
 8006082:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	f8cc 3004 	str.w	r3, [ip, #4]
 800608e:	e798      	b.n	8005fc2 <_malloc_r+0x62>
 8006090:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f080 8099 	bcs.w	80061cc <_malloc_r+0x26c>
 800609a:	2201      	movs	r2, #1
 800609c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80060a0:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80060a4:	fa02 f20e 	lsl.w	r2, r2, lr
 80060a8:	4310      	orrs	r0, r2
 80060aa:	f10c 0c01 	add.w	ip, ip, #1
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80060b4:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80060b8:	3a08      	subs	r2, #8
 80060ba:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80060be:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80060c2:	60c4      	str	r4, [r0, #12]
 80060c4:	2001      	movs	r0, #1
 80060c6:	109a      	asrs	r2, r3, #2
 80060c8:	fa00 f202 	lsl.w	r2, r0, r2
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4290      	cmp	r0, r2
 80060d0:	d326      	bcc.n	8006120 <_malloc_r+0x1c0>
 80060d2:	4210      	tst	r0, r2
 80060d4:	d106      	bne.n	80060e4 <_malloc_r+0x184>
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	0052      	lsls	r2, r2, #1
 80060dc:	4210      	tst	r0, r2
 80060de:	f103 0304 	add.w	r3, r3, #4
 80060e2:	d0fa      	beq.n	80060da <_malloc_r+0x17a>
 80060e4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80060e8:	46e1      	mov	r9, ip
 80060ea:	4698      	mov	r8, r3
 80060ec:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80060f0:	454c      	cmp	r4, r9
 80060f2:	f040 80af 	bne.w	8006254 <_malloc_r+0x2f4>
 80060f6:	f108 0801 	add.w	r8, r8, #1
 80060fa:	f018 0f03 	tst.w	r8, #3
 80060fe:	f109 0908 	add.w	r9, r9, #8
 8006102:	d1f3      	bne.n	80060ec <_malloc_r+0x18c>
 8006104:	0798      	lsls	r0, r3, #30
 8006106:	f040 80e8 	bne.w	80062da <_malloc_r+0x37a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	ea23 0302 	bic.w	r3, r3, r2
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	0052      	lsls	r2, r2, #1
 8006116:	4290      	cmp	r0, r2
 8006118:	d302      	bcc.n	8006120 <_malloc_r+0x1c0>
 800611a:	2a00      	cmp	r2, #0
 800611c:	f040 80eb 	bne.w	80062f6 <_malloc_r+0x396>
 8006120:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8006124:	f8da 4004 	ldr.w	r4, [sl, #4]
 8006128:	f024 0203 	bic.w	r2, r4, #3
 800612c:	42aa      	cmp	r2, r5
 800612e:	d303      	bcc.n	8006138 <_malloc_r+0x1d8>
 8006130:	1b53      	subs	r3, r2, r5
 8006132:	2b0f      	cmp	r3, #15
 8006134:	f300 813f 	bgt.w	80063b6 <_malloc_r+0x456>
 8006138:	4b57      	ldr	r3, [pc, #348]	; (8006298 <_malloc_r+0x338>)
 800613a:	2008      	movs	r0, #8
 800613c:	681c      	ldr	r4, [r3, #0]
 800613e:	9200      	str	r2, [sp, #0]
 8006140:	f001 fbdc 	bl	80078fc <sysconf>
 8006144:	4b55      	ldr	r3, [pc, #340]	; (800629c <_malloc_r+0x33c>)
 8006146:	3410      	adds	r4, #16
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	442c      	add	r4, r5
 800614c:	3101      	adds	r1, #1
 800614e:	bf1f      	itttt	ne
 8006150:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8006154:	1824      	addne	r4, r4, r0
 8006156:	4241      	negne	r1, r0
 8006158:	400c      	andne	r4, r1
 800615a:	9a00      	ldr	r2, [sp, #0]
 800615c:	4680      	mov	r8, r0
 800615e:	4621      	mov	r1, r4
 8006160:	4630      	mov	r0, r6
 8006162:	e9cd 2300 	strd	r2, r3, [sp]
 8006166:	f000 f945 	bl	80063f4 <_sbrk_r>
 800616a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800616e:	4683      	mov	fp, r0
 8006170:	f000 80fa 	beq.w	8006368 <_malloc_r+0x408>
 8006174:	9a00      	ldr	r2, [sp, #0]
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	eb0a 0102 	add.w	r1, sl, r2
 800617c:	4281      	cmp	r1, r0
 800617e:	d902      	bls.n	8006186 <_malloc_r+0x226>
 8006180:	45ba      	cmp	sl, r7
 8006182:	f040 80f1 	bne.w	8006368 <_malloc_r+0x408>
 8006186:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80062a8 <_malloc_r+0x348>
 800618a:	4559      	cmp	r1, fp
 800618c:	f8d9 0000 	ldr.w	r0, [r9]
 8006190:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8006194:	eb00 0e04 	add.w	lr, r0, r4
 8006198:	f8c9 e000 	str.w	lr, [r9]
 800619c:	f040 80ad 	bne.w	80062fa <_malloc_r+0x39a>
 80061a0:	ea11 0f0c 	tst.w	r1, ip
 80061a4:	f040 80a9 	bne.w	80062fa <_malloc_r+0x39a>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4414      	add	r4, r2
 80061ac:	f044 0401 	orr.w	r4, r4, #1
 80061b0:	605c      	str	r4, [r3, #4]
 80061b2:	4a3b      	ldr	r2, [pc, #236]	; (80062a0 <_malloc_r+0x340>)
 80061b4:	f8d9 3000 	ldr.w	r3, [r9]
 80061b8:	6811      	ldr	r1, [r2, #0]
 80061ba:	428b      	cmp	r3, r1
 80061bc:	bf88      	it	hi
 80061be:	6013      	strhi	r3, [r2, #0]
 80061c0:	4a38      	ldr	r2, [pc, #224]	; (80062a4 <_malloc_r+0x344>)
 80061c2:	6811      	ldr	r1, [r2, #0]
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf88      	it	hi
 80061c8:	6013      	strhi	r3, [r2, #0]
 80061ca:	e0cd      	b.n	8006368 <_malloc_r+0x408>
 80061cc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80061d0:	2a04      	cmp	r2, #4
 80061d2:	d818      	bhi.n	8006206 <_malloc_r+0x2a6>
 80061d4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80061d8:	3238      	adds	r2, #56	; 0x38
 80061da:	f102 0e01 	add.w	lr, r2, #1
 80061de:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80061e2:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80061e6:	45f0      	cmp	r8, lr
 80061e8:	d12b      	bne.n	8006242 <_malloc_r+0x2e2>
 80061ea:	f04f 0c01 	mov.w	ip, #1
 80061ee:	1092      	asrs	r2, r2, #2
 80061f0:	fa0c f202 	lsl.w	r2, ip, r2
 80061f4:	4310      	orrs	r0, r2
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80061fc:	f8c8 4008 	str.w	r4, [r8, #8]
 8006200:	f8ce 400c 	str.w	r4, [lr, #12]
 8006204:	e75e      	b.n	80060c4 <_malloc_r+0x164>
 8006206:	2a14      	cmp	r2, #20
 8006208:	d801      	bhi.n	800620e <_malloc_r+0x2ae>
 800620a:	325b      	adds	r2, #91	; 0x5b
 800620c:	e7e5      	b.n	80061da <_malloc_r+0x27a>
 800620e:	2a54      	cmp	r2, #84	; 0x54
 8006210:	d803      	bhi.n	800621a <_malloc_r+0x2ba>
 8006212:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006216:	326e      	adds	r2, #110	; 0x6e
 8006218:	e7df      	b.n	80061da <_malloc_r+0x27a>
 800621a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800621e:	d803      	bhi.n	8006228 <_malloc_r+0x2c8>
 8006220:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006224:	3277      	adds	r2, #119	; 0x77
 8006226:	e7d8      	b.n	80061da <_malloc_r+0x27a>
 8006228:	f240 5e54 	movw	lr, #1364	; 0x554
 800622c:	4572      	cmp	r2, lr
 800622e:	bf9a      	itte	ls
 8006230:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006234:	327c      	addls	r2, #124	; 0x7c
 8006236:	227e      	movhi	r2, #126	; 0x7e
 8006238:	e7cf      	b.n	80061da <_malloc_r+0x27a>
 800623a:	f8de e008 	ldr.w	lr, [lr, #8]
 800623e:	45f0      	cmp	r8, lr
 8006240:	d005      	beq.n	800624e <_malloc_r+0x2ee>
 8006242:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006246:	f022 0203 	bic.w	r2, r2, #3
 800624a:	4562      	cmp	r2, ip
 800624c:	d8f5      	bhi.n	800623a <_malloc_r+0x2da>
 800624e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006252:	e7d1      	b.n	80061f8 <_malloc_r+0x298>
 8006254:	6860      	ldr	r0, [r4, #4]
 8006256:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800625a:	f020 0003 	bic.w	r0, r0, #3
 800625e:	eba0 0a05 	sub.w	sl, r0, r5
 8006262:	f1ba 0f0f 	cmp.w	sl, #15
 8006266:	dd21      	ble.n	80062ac <_malloc_r+0x34c>
 8006268:	68a2      	ldr	r2, [r4, #8]
 800626a:	1963      	adds	r3, r4, r5
 800626c:	f045 0501 	orr.w	r5, r5, #1
 8006270:	6065      	str	r5, [r4, #4]
 8006272:	f8c2 e00c 	str.w	lr, [r2, #12]
 8006276:	f8ce 2008 	str.w	r2, [lr, #8]
 800627a:	f04a 0201 	orr.w	r2, sl, #1
 800627e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8006282:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	f844 a000 	str.w	sl, [r4, r0]
 800628c:	e699      	b.n	8005fc2 <_malloc_r+0x62>
 800628e:	bf00      	nop
 8006290:	20000440 	.word	0x20000440
 8006294:	20000448 	.word	0x20000448
 8006298:	20000c60 	.word	0x20000c60
 800629c:	20000848 	.word	0x20000848
 80062a0:	20000c58 	.word	0x20000c58
 80062a4:	20000c5c 	.word	0x20000c5c
 80062a8:	20000c30 	.word	0x20000c30
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	db11      	blt.n	80062d6 <_malloc_r+0x376>
 80062b2:	4420      	add	r0, r4
 80062b4:	6843      	ldr	r3, [r0, #4]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6043      	str	r3, [r0, #4]
 80062bc:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80062c0:	4630      	mov	r0, r6
 80062c2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80062c6:	f8ce 3008 	str.w	r3, [lr, #8]
 80062ca:	f000 f88d 	bl	80063e8 <__malloc_unlock>
 80062ce:	4620      	mov	r0, r4
 80062d0:	b003      	add	sp, #12
 80062d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d6:	4674      	mov	r4, lr
 80062d8:	e70a      	b.n	80060f0 <_malloc_r+0x190>
 80062da:	f1ac 0008 	sub.w	r0, ip, #8
 80062de:	f8dc c000 	ldr.w	ip, [ip]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	4584      	cmp	ip, r0
 80062e6:	f43f af0d 	beq.w	8006104 <_malloc_r+0x1a4>
 80062ea:	e712      	b.n	8006112 <_malloc_r+0x1b2>
 80062ec:	3304      	adds	r3, #4
 80062ee:	0052      	lsls	r2, r2, #1
 80062f0:	4210      	tst	r0, r2
 80062f2:	d0fb      	beq.n	80062ec <_malloc_r+0x38c>
 80062f4:	e6f6      	b.n	80060e4 <_malloc_r+0x184>
 80062f6:	4643      	mov	r3, r8
 80062f8:	e7fa      	b.n	80062f0 <_malloc_r+0x390>
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	9200      	str	r2, [sp, #0]
 80062fe:	3001      	adds	r0, #1
 8006300:	bf1b      	ittet	ne
 8006302:	ebab 0101 	subne.w	r1, fp, r1
 8006306:	4471      	addne	r1, lr
 8006308:	f8c3 b000 	streq.w	fp, [r3]
 800630c:	f8c9 1000 	strne.w	r1, [r9]
 8006310:	f01b 0307 	ands.w	r3, fp, #7
 8006314:	bf1c      	itt	ne
 8006316:	f1c3 0308 	rsbne	r3, r3, #8
 800631a:	449b      	addne	fp, r3
 800631c:	445c      	add	r4, fp
 800631e:	4498      	add	r8, r3
 8006320:	ea04 030c 	and.w	r3, r4, ip
 8006324:	eba8 0803 	sub.w	r8, r8, r3
 8006328:	4641      	mov	r1, r8
 800632a:	4630      	mov	r0, r6
 800632c:	f000 f862 	bl	80063f4 <_sbrk_r>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	bf04      	itt	eq
 8006334:	4658      	moveq	r0, fp
 8006336:	f04f 0800 	moveq.w	r8, #0
 800633a:	f8d9 3000 	ldr.w	r3, [r9]
 800633e:	eba0 000b 	sub.w	r0, r0, fp
 8006342:	4440      	add	r0, r8
 8006344:	4443      	add	r3, r8
 8006346:	f040 0001 	orr.w	r0, r0, #1
 800634a:	45ba      	cmp	sl, r7
 800634c:	f8c7 b008 	str.w	fp, [r7, #8]
 8006350:	9a00      	ldr	r2, [sp, #0]
 8006352:	f8c9 3000 	str.w	r3, [r9]
 8006356:	f8cb 0004 	str.w	r0, [fp, #4]
 800635a:	f43f af2a 	beq.w	80061b2 <_malloc_r+0x252>
 800635e:	2a0f      	cmp	r2, #15
 8006360:	d810      	bhi.n	8006384 <_malloc_r+0x424>
 8006362:	2301      	movs	r3, #1
 8006364:	f8cb 3004 	str.w	r3, [fp, #4]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	f022 0203 	bic.w	r2, r2, #3
 8006370:	42aa      	cmp	r2, r5
 8006372:	eba2 0305 	sub.w	r3, r2, r5
 8006376:	d301      	bcc.n	800637c <_malloc_r+0x41c>
 8006378:	2b0f      	cmp	r3, #15
 800637a:	dc1c      	bgt.n	80063b6 <_malloc_r+0x456>
 800637c:	4630      	mov	r0, r6
 800637e:	f000 f833 	bl	80063e8 <__malloc_unlock>
 8006382:	e5f9      	b.n	8005f78 <_malloc_r+0x18>
 8006384:	f1a2 040c 	sub.w	r4, r2, #12
 8006388:	2205      	movs	r2, #5
 800638a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800638e:	f024 0407 	bic.w	r4, r4, #7
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	4323      	orrs	r3, r4
 8006398:	f8ca 3004 	str.w	r3, [sl, #4]
 800639c:	2c0f      	cmp	r4, #15
 800639e:	eb0a 0304 	add.w	r3, sl, r4
 80063a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80063a6:	f67f af04 	bls.w	80061b2 <_malloc_r+0x252>
 80063aa:	f10a 0108 	add.w	r1, sl, #8
 80063ae:	4630      	mov	r0, r6
 80063b0:	f002 f95c 	bl	800866c <_free_r>
 80063b4:	e6fd      	b.n	80061b2 <_malloc_r+0x252>
 80063b6:	68bc      	ldr	r4, [r7, #8]
 80063b8:	f045 0201 	orr.w	r2, r5, #1
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	4425      	add	r5, r4
 80063c2:	6062      	str	r2, [r4, #4]
 80063c4:	60bd      	str	r5, [r7, #8]
 80063c6:	606b      	str	r3, [r5, #4]
 80063c8:	e5fb      	b.n	8005fc2 <_malloc_r+0x62>
 80063ca:	bf00      	nop

080063cc <memset>:
 80063cc:	4603      	mov	r3, r0
 80063ce:	4402      	add	r2, r0
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	f803 1b01 	strb.w	r1, [r3], #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_lock+0x8>)
 80063de:	f002 ba0f 	b.w	8008800 <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	20000c70 	.word	0x20000c70

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f002 ba0a 	b.w	8008802 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000c70 	.word	0x20000c70

080063f4 <_sbrk_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	2300      	movs	r3, #0
 80063f8:	4c05      	ldr	r4, [pc, #20]	; (8006410 <_sbrk_r+0x1c>)
 80063fa:	4605      	mov	r5, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	f003 f802 	bl	8009408 <_sbrk>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_sbrk_r+0x1a>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	b103      	cbz	r3, 800640e <_sbrk_r+0x1a>
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20000c78 	.word	0x20000c78

08006414 <_raise_r>:
 8006414:	291f      	cmp	r1, #31
 8006416:	b538      	push	{r3, r4, r5, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	d904      	bls.n	8006428 <_raise_r+0x14>
 800641e:	2316      	movs	r3, #22
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800642c:	b112      	cbz	r2, 8006434 <_raise_r+0x20>
 800642e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006432:	b94b      	cbnz	r3, 8006448 <_raise_r+0x34>
 8006434:	4620      	mov	r0, r4
 8006436:	f000 f831 	bl	800649c <_getpid_r>
 800643a:	462a      	mov	r2, r5
 800643c:	4601      	mov	r1, r0
 800643e:	4620      	mov	r0, r4
 8006440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006444:	f000 b818 	b.w	8006478 <_kill_r>
 8006448:	2b01      	cmp	r3, #1
 800644a:	d00a      	beq.n	8006462 <_raise_r+0x4e>
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	d103      	bne.n	8006458 <_raise_r+0x44>
 8006450:	2316      	movs	r3, #22
 8006452:	6003      	str	r3, [r0, #0]
 8006454:	2001      	movs	r0, #1
 8006456:	e7e6      	b.n	8006426 <_raise_r+0x12>
 8006458:	2400      	movs	r4, #0
 800645a:	4628      	mov	r0, r5
 800645c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006460:	4798      	blx	r3
 8006462:	2000      	movs	r0, #0
 8006464:	e7df      	b.n	8006426 <_raise_r+0x12>
	...

08006468 <raise>:
 8006468:	4b02      	ldr	r3, [pc, #8]	; (8006474 <raise+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfd1 	b.w	8006414 <_raise_r>
 8006472:	bf00      	nop
 8006474:	20000010 	.word	0x20000010

08006478 <_kill_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	2300      	movs	r3, #0
 800647c:	4c06      	ldr	r4, [pc, #24]	; (8006498 <_kill_r+0x20>)
 800647e:	4605      	mov	r5, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	f002 ffb7 	bl	80093f8 <_kill>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_kill_r+0x1c>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	b103      	cbz	r3, 8006494 <_kill_r+0x1c>
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20000c78 	.word	0x20000c78

0800649c <_getpid_r>:
 800649c:	f002 bfa4 	b.w	80093e8 <_getpid>

080064a0 <sprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064a6:	b500      	push	{lr}
 80064a8:	b09c      	sub	sp, #112	; 0x70
 80064aa:	ab1d      	add	r3, sp, #116	; 0x74
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	9006      	str	r0, [sp, #24]
 80064b0:	9107      	str	r1, [sp, #28]
 80064b2:	9104      	str	r1, [sp, #16]
 80064b4:	4808      	ldr	r0, [pc, #32]	; (80064d8 <sprintf+0x38>)
 80064b6:	4909      	ldr	r1, [pc, #36]	; (80064dc <sprintf+0x3c>)
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	a902      	add	r1, sp, #8
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f000 f80c 	bl	80064e0 <_svfprintf_r>
 80064c8:	2200      	movs	r2, #0
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	b01c      	add	sp, #112	; 0x70
 80064d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d4:	b003      	add	sp, #12
 80064d6:	4770      	bx	lr
 80064d8:	20000010 	.word	0x20000010
 80064dc:	ffff0208 	.word	0xffff0208

080064e0 <_svfprintf_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	b0d5      	sub	sp, #340	; 0x154
 80064e6:	4689      	mov	r9, r1
 80064e8:	4693      	mov	fp, r2
 80064ea:	461e      	mov	r6, r3
 80064ec:	9007      	str	r0, [sp, #28]
 80064ee:	f002 f979 	bl	80087e4 <_localeconv_r>
 80064f2:	6803      	ldr	r3, [r0, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	931a      	str	r3, [sp, #104]	; 0x68
 80064f8:	f7f9 fe2a 	bl	8000150 <strlen>
 80064fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006500:	900f      	str	r0, [sp, #60]	; 0x3c
 8006502:	0618      	lsls	r0, r3, #24
 8006504:	d518      	bpl.n	8006538 <_svfprintf_r+0x58>
 8006506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800650a:	b9ab      	cbnz	r3, 8006538 <_svfprintf_r+0x58>
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	9807      	ldr	r0, [sp, #28]
 8006510:	f7ff fd26 	bl	8005f60 <_malloc_r>
 8006514:	f8c9 0000 	str.w	r0, [r9]
 8006518:	f8c9 0010 	str.w	r0, [r9, #16]
 800651c:	b948      	cbnz	r0, 8006532 <_svfprintf_r+0x52>
 800651e:	230c      	movs	r3, #12
 8006520:	9a07      	ldr	r2, [sp, #28]
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006528:	9310      	str	r3, [sp, #64]	; 0x40
 800652a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800652c:	b055      	add	sp, #340	; 0x154
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	f8c9 3014 	str.w	r3, [r9, #20]
 8006538:	2300      	movs	r3, #0
 800653a:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 800653e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8006542:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 8006546:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800654a:	ac2b      	add	r4, sp, #172	; 0xac
 800654c:	9428      	str	r4, [sp, #160]	; 0xa0
 800654e:	9308      	str	r3, [sp, #32]
 8006550:	930d      	str	r3, [sp, #52]	; 0x34
 8006552:	9316      	str	r3, [sp, #88]	; 0x58
 8006554:	931d      	str	r3, [sp, #116]	; 0x74
 8006556:	9310      	str	r3, [sp, #64]	; 0x40
 8006558:	465d      	mov	r5, fp
 800655a:	462b      	mov	r3, r5
 800655c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006560:	b112      	cbz	r2, 8006568 <_svfprintf_r+0x88>
 8006562:	2a25      	cmp	r2, #37	; 0x25
 8006564:	f040 80e4 	bne.w	8006730 <_svfprintf_r+0x250>
 8006568:	ebb5 070b 	subs.w	r7, r5, fp
 800656c:	d00e      	beq.n	800658c <_svfprintf_r+0xac>
 800656e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006570:	e9c4 b700 	strd	fp, r7, [r4]
 8006574:	443b      	add	r3, r7
 8006576:	932a      	str	r3, [sp, #168]	; 0xa8
 8006578:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800657a:	3301      	adds	r3, #1
 800657c:	2b07      	cmp	r3, #7
 800657e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006580:	f300 80d8 	bgt.w	8006734 <_svfprintf_r+0x254>
 8006584:	3408      	adds	r4, #8
 8006586:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006588:	443b      	add	r3, r7
 800658a:	9310      	str	r3, [sp, #64]	; 0x40
 800658c:	782b      	ldrb	r3, [r5, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f001 81a4 	beq.w	80078dc <_svfprintf_r+0x13fc>
 8006594:	1c6b      	adds	r3, r5, #1
 8006596:	930e      	str	r3, [sp, #56]	; 0x38
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800659e:	469a      	mov	sl, r3
 80065a0:	270a      	movs	r7, #10
 80065a2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80065a6:	9311      	str	r3, [sp, #68]	; 0x44
 80065a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	930a      	str	r3, [sp, #40]	; 0x28
 80065ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b0:	3301      	adds	r3, #1
 80065b2:	930e      	str	r3, [sp, #56]	; 0x38
 80065b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b6:	3b20      	subs	r3, #32
 80065b8:	2b5a      	cmp	r3, #90	; 0x5a
 80065ba:	f200 8614 	bhi.w	80071e6 <_svfprintf_r+0xd06>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <_svfprintf_r+0xe4>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080067c7 	.word	0x080067c7
 80065c8:	080071e7 	.word	0x080071e7
 80065cc:	080071e7 	.word	0x080071e7
 80065d0:	080067d9 	.word	0x080067d9
 80065d4:	080071e7 	.word	0x080071e7
 80065d8:	080071e7 	.word	0x080071e7
 80065dc:	080071e7 	.word	0x080071e7
 80065e0:	0800678d 	.word	0x0800678d
 80065e4:	080071e7 	.word	0x080071e7
 80065e8:	080071e7 	.word	0x080071e7
 80065ec:	080067df 	.word	0x080067df
 80065f0:	080067f5 	.word	0x080067f5
 80065f4:	080071e7 	.word	0x080071e7
 80065f8:	080067ef 	.word	0x080067ef
 80065fc:	080067f9 	.word	0x080067f9
 8006600:	080071e7 	.word	0x080071e7
 8006604:	0800682b 	.word	0x0800682b
 8006608:	08006831 	.word	0x08006831
 800660c:	08006831 	.word	0x08006831
 8006610:	08006831 	.word	0x08006831
 8006614:	08006831 	.word	0x08006831
 8006618:	08006831 	.word	0x08006831
 800661c:	08006831 	.word	0x08006831
 8006620:	08006831 	.word	0x08006831
 8006624:	08006831 	.word	0x08006831
 8006628:	08006831 	.word	0x08006831
 800662c:	080071e7 	.word	0x080071e7
 8006630:	080071e7 	.word	0x080071e7
 8006634:	080071e7 	.word	0x080071e7
 8006638:	080071e7 	.word	0x080071e7
 800663c:	080071e7 	.word	0x080071e7
 8006640:	080071e7 	.word	0x080071e7
 8006644:	080071e7 	.word	0x080071e7
 8006648:	0800691f 	.word	0x0800691f
 800664c:	080071e7 	.word	0x080071e7
 8006650:	0800688b 	.word	0x0800688b
 8006654:	080068ad 	.word	0x080068ad
 8006658:	0800691f 	.word	0x0800691f
 800665c:	0800691f 	.word	0x0800691f
 8006660:	0800691f 	.word	0x0800691f
 8006664:	080071e7 	.word	0x080071e7
 8006668:	080071e7 	.word	0x080071e7
 800666c:	080071e7 	.word	0x080071e7
 8006670:	080071e7 	.word	0x080071e7
 8006674:	08006851 	.word	0x08006851
 8006678:	080071e7 	.word	0x080071e7
 800667c:	080071e7 	.word	0x080071e7
 8006680:	08006ded 	.word	0x08006ded
 8006684:	080071e7 	.word	0x080071e7
 8006688:	080071e7 	.word	0x080071e7
 800668c:	080071e7 	.word	0x080071e7
 8006690:	08006e79 	.word	0x08006e79
 8006694:	080071e7 	.word	0x080071e7
 8006698:	08007055 	.word	0x08007055
 800669c:	080071e7 	.word	0x080071e7
 80066a0:	080071e7 	.word	0x080071e7
 80066a4:	0800674d 	.word	0x0800674d
 80066a8:	080071e7 	.word	0x080071e7
 80066ac:	080071e7 	.word	0x080071e7
 80066b0:	080071e7 	.word	0x080071e7
 80066b4:	080071e7 	.word	0x080071e7
 80066b8:	080071e7 	.word	0x080071e7
 80066bc:	080071e7 	.word	0x080071e7
 80066c0:	080071e7 	.word	0x080071e7
 80066c4:	080071e7 	.word	0x080071e7
 80066c8:	0800691f 	.word	0x0800691f
 80066cc:	080071e7 	.word	0x080071e7
 80066d0:	0800688b 	.word	0x0800688b
 80066d4:	080068b1 	.word	0x080068b1
 80066d8:	0800691f 	.word	0x0800691f
 80066dc:	0800691f 	.word	0x0800691f
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	08006857 	.word	0x08006857
 80066e8:	080068b1 	.word	0x080068b1
 80066ec:	0800687f 	.word	0x0800687f
 80066f0:	080071e7 	.word	0x080071e7
 80066f4:	08006871 	.word	0x08006871
 80066f8:	080071e7 	.word	0x080071e7
 80066fc:	08006da7 	.word	0x08006da7
 8006700:	08006df1 	.word	0x08006df1
 8006704:	08006e59 	.word	0x08006e59
 8006708:	0800687f 	.word	0x0800687f
 800670c:	080071e7 	.word	0x080071e7
 8006710:	08006e79 	.word	0x08006e79
 8006714:	080065a9 	.word	0x080065a9
 8006718:	08007059 	.word	0x08007059
 800671c:	080071e7 	.word	0x080071e7
 8006720:	080071e7 	.word	0x080071e7
 8006724:	08007097 	.word	0x08007097
 8006728:	080071e7 	.word	0x080071e7
 800672c:	080065a9 	.word	0x080065a9
 8006730:	461d      	mov	r5, r3
 8006732:	e712      	b.n	800655a <_svfprintf_r+0x7a>
 8006734:	aa28      	add	r2, sp, #160	; 0xa0
 8006736:	4649      	mov	r1, r9
 8006738:	9807      	ldr	r0, [sp, #28]
 800673a:	f002 fb74 	bl	8008e26 <__ssprint_r>
 800673e:	2800      	cmp	r0, #0
 8006740:	f040 8157 	bne.w	80069f2 <_svfprintf_r+0x512>
 8006744:	ac2b      	add	r4, sp, #172	; 0xac
 8006746:	e71e      	b.n	8006586 <_svfprintf_r+0xa6>
 8006748:	461e      	mov	r6, r3
 800674a:	e72d      	b.n	80065a8 <_svfprintf_r+0xc8>
 800674c:	4bad      	ldr	r3, [pc, #692]	; (8006a04 <_svfprintf_r+0x524>)
 800674e:	f01a 0f20 	tst.w	sl, #32
 8006752:	931c      	str	r3, [sp, #112]	; 0x70
 8006754:	f000 84a2 	beq.w	800709c <_svfprintf_r+0xbbc>
 8006758:	3607      	adds	r6, #7
 800675a:	f026 0607 	bic.w	r6, r6, #7
 800675e:	f106 0308 	add.w	r3, r6, #8
 8006762:	930c      	str	r3, [sp, #48]	; 0x30
 8006764:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006768:	f01a 0f01 	tst.w	sl, #1
 800676c:	d00a      	beq.n	8006784 <_svfprintf_r+0x2a4>
 800676e:	ea56 0307 	orrs.w	r3, r6, r7
 8006772:	d007      	beq.n	8006784 <_svfprintf_r+0x2a4>
 8006774:	2330      	movs	r3, #48	; 0x30
 8006776:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800677a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677c:	f04a 0a02 	orr.w	sl, sl, #2
 8006780:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8006784:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006788:	2302      	movs	r3, #2
 800678a:	e33f      	b.n	8006e0c <_svfprintf_r+0x92c>
 800678c:	9807      	ldr	r0, [sp, #28]
 800678e:	f002 f829 	bl	80087e4 <_localeconv_r>
 8006792:	6843      	ldr	r3, [r0, #4]
 8006794:	4618      	mov	r0, r3
 8006796:	931d      	str	r3, [sp, #116]	; 0x74
 8006798:	f7f9 fcda 	bl	8000150 <strlen>
 800679c:	9016      	str	r0, [sp, #88]	; 0x58
 800679e:	9807      	ldr	r0, [sp, #28]
 80067a0:	f002 f820 	bl	80087e4 <_localeconv_r>
 80067a4:	6883      	ldr	r3, [r0, #8]
 80067a6:	930d      	str	r3, [sp, #52]	; 0x34
 80067a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f43f aefc 	beq.w	80065a8 <_svfprintf_r+0xc8>
 80067b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f43f aef8 	beq.w	80065a8 <_svfprintf_r+0xc8>
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f43f aef4 	beq.w	80065a8 <_svfprintf_r+0xc8>
 80067c0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80067c4:	e6f0      	b.n	80065a8 <_svfprintf_r+0xc8>
 80067c6:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f47f aeec 	bne.w	80065a8 <_svfprintf_r+0xc8>
 80067d0:	2320      	movs	r3, #32
 80067d2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80067d6:	e6e7      	b.n	80065a8 <_svfprintf_r+0xc8>
 80067d8:	f04a 0a01 	orr.w	sl, sl, #1
 80067dc:	e6e4      	b.n	80065a8 <_svfprintf_r+0xc8>
 80067de:	6832      	ldr	r2, [r6, #0]
 80067e0:	1d33      	adds	r3, r6, #4
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	9211      	str	r2, [sp, #68]	; 0x44
 80067e6:	daaf      	bge.n	8006748 <_svfprintf_r+0x268>
 80067e8:	461e      	mov	r6, r3
 80067ea:	4252      	negs	r2, r2
 80067ec:	9211      	str	r2, [sp, #68]	; 0x44
 80067ee:	f04a 0a04 	orr.w	sl, sl, #4
 80067f2:	e6d9      	b.n	80065a8 <_svfprintf_r+0xc8>
 80067f4:	232b      	movs	r3, #43	; 0x2b
 80067f6:	e7ec      	b.n	80067d2 <_svfprintf_r+0x2f2>
 80067f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	2a2a      	cmp	r2, #42	; 0x2a
 8006802:	920a      	str	r2, [sp, #40]	; 0x28
 8006804:	d10f      	bne.n	8006826 <_svfprintf_r+0x346>
 8006806:	6835      	ldr	r5, [r6, #0]
 8006808:	930e      	str	r3, [sp, #56]	; 0x38
 800680a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800680e:	3604      	adds	r6, #4
 8006810:	e6ca      	b.n	80065a8 <_svfprintf_r+0xc8>
 8006812:	fb07 2505 	mla	r5, r7, r5, r2
 8006816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800681a:	920a      	str	r2, [sp, #40]	; 0x28
 800681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681e:	3a30      	subs	r2, #48	; 0x30
 8006820:	2a09      	cmp	r2, #9
 8006822:	d9f6      	bls.n	8006812 <_svfprintf_r+0x332>
 8006824:	e6c5      	b.n	80065b2 <_svfprintf_r+0xd2>
 8006826:	2500      	movs	r5, #0
 8006828:	e7f8      	b.n	800681c <_svfprintf_r+0x33c>
 800682a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800682e:	e6bb      	b.n	80065a8 <_svfprintf_r+0xc8>
 8006830:	2200      	movs	r2, #0
 8006832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006834:	9211      	str	r2, [sp, #68]	; 0x44
 8006836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006838:	9911      	ldr	r1, [sp, #68]	; 0x44
 800683a:	3a30      	subs	r2, #48	; 0x30
 800683c:	fb07 2201 	mla	r2, r7, r1, r2
 8006840:	9211      	str	r2, [sp, #68]	; 0x44
 8006842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006846:	920a      	str	r2, [sp, #40]	; 0x28
 8006848:	3a30      	subs	r2, #48	; 0x30
 800684a:	2a09      	cmp	r2, #9
 800684c:	d9f3      	bls.n	8006836 <_svfprintf_r+0x356>
 800684e:	e6b0      	b.n	80065b2 <_svfprintf_r+0xd2>
 8006850:	f04a 0a08 	orr.w	sl, sl, #8
 8006854:	e6a8      	b.n	80065a8 <_svfprintf_r+0xc8>
 8006856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b68      	cmp	r3, #104	; 0x68
 800685c:	bf01      	itttt	eq
 800685e:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8006860:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8006864:	3301      	addeq	r3, #1
 8006866:	930e      	streq	r3, [sp, #56]	; 0x38
 8006868:	bf18      	it	ne
 800686a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800686e:	e69b      	b.n	80065a8 <_svfprintf_r+0xc8>
 8006870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b6c      	cmp	r3, #108	; 0x6c
 8006876:	d105      	bne.n	8006884 <_svfprintf_r+0x3a4>
 8006878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687a:	3301      	adds	r3, #1
 800687c:	930e      	str	r3, [sp, #56]	; 0x38
 800687e:	f04a 0a20 	orr.w	sl, sl, #32
 8006882:	e691      	b.n	80065a8 <_svfprintf_r+0xc8>
 8006884:	f04a 0a10 	orr.w	sl, sl, #16
 8006888:	e68e      	b.n	80065a8 <_svfprintf_r+0xc8>
 800688a:	2000      	movs	r0, #0
 800688c:	1d33      	adds	r3, r6, #4
 800688e:	930c      	str	r3, [sp, #48]	; 0x30
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 8006896:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 800689a:	4680      	mov	r8, r0
 800689c:	2501      	movs	r5, #1
 800689e:	9012      	str	r0, [sp, #72]	; 0x48
 80068a0:	4607      	mov	r7, r0
 80068a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80068a4:	4606      	mov	r6, r0
 80068a6:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 80068aa:	e2fe      	b.n	8006eaa <_svfprintf_r+0x9ca>
 80068ac:	f04a 0a10 	orr.w	sl, sl, #16
 80068b0:	f01a 0f20 	tst.w	sl, #32
 80068b4:	d020      	beq.n	80068f8 <_svfprintf_r+0x418>
 80068b6:	3607      	adds	r6, #7
 80068b8:	f026 0607 	bic.w	r6, r6, #7
 80068bc:	f106 0308 	add.w	r3, r6, #8
 80068c0:	930c      	str	r3, [sp, #48]	; 0x30
 80068c2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	f177 0300 	sbcs.w	r3, r7, #0
 80068cc:	da05      	bge.n	80068da <_svfprintf_r+0x3fa>
 80068ce:	232d      	movs	r3, #45	; 0x2d
 80068d0:	4276      	negs	r6, r6
 80068d2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80068d6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80068da:	1c6b      	adds	r3, r5, #1
 80068dc:	f040 83f1 	bne.w	80070c2 <_svfprintf_r+0xbe2>
 80068e0:	2f00      	cmp	r7, #0
 80068e2:	bf08      	it	eq
 80068e4:	2e0a      	cmpeq	r6, #10
 80068e6:	f080 8423 	bcs.w	8007130 <_svfprintf_r+0xc50>
 80068ea:	3630      	adds	r6, #48	; 0x30
 80068ec:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80068f0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80068f4:	f000 bc08 	b.w	8007108 <_svfprintf_r+0xc28>
 80068f8:	1d33      	adds	r3, r6, #4
 80068fa:	f01a 0f10 	tst.w	sl, #16
 80068fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006900:	d002      	beq.n	8006908 <_svfprintf_r+0x428>
 8006902:	6836      	ldr	r6, [r6, #0]
 8006904:	17f7      	asrs	r7, r6, #31
 8006906:	e7de      	b.n	80068c6 <_svfprintf_r+0x3e6>
 8006908:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800690c:	6836      	ldr	r6, [r6, #0]
 800690e:	d001      	beq.n	8006914 <_svfprintf_r+0x434>
 8006910:	b236      	sxth	r6, r6
 8006912:	e7f7      	b.n	8006904 <_svfprintf_r+0x424>
 8006914:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006918:	bf18      	it	ne
 800691a:	b276      	sxtbne	r6, r6
 800691c:	e7f2      	b.n	8006904 <_svfprintf_r+0x424>
 800691e:	3607      	adds	r6, #7
 8006920:	f026 0607 	bic.w	r6, r6, #7
 8006924:	f106 0308 	add.w	r3, r6, #8
 8006928:	930c      	str	r3, [sp, #48]	; 0x30
 800692a:	6833      	ldr	r3, [r6, #0]
 800692c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006930:	9314      	str	r3, [sp, #80]	; 0x50
 8006932:	6873      	ldr	r3, [r6, #4]
 8006934:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006936:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800693a:	9313      	str	r3, [sp, #76]	; 0x4c
 800693c:	4638      	mov	r0, r7
 800693e:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <_svfprintf_r+0x528>)
 8006940:	4631      	mov	r1, r6
 8006942:	f7fa f863 	bl	8000a0c <__aeabi_dcmpun>
 8006946:	bb00      	cbnz	r0, 800698a <_svfprintf_r+0x4aa>
 8006948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694c:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <_svfprintf_r+0x528>)
 800694e:	4638      	mov	r0, r7
 8006950:	4631      	mov	r1, r6
 8006952:	f7fa f83d 	bl	80009d0 <__aeabi_dcmple>
 8006956:	b9c0      	cbnz	r0, 800698a <_svfprintf_r+0x4aa>
 8006958:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800695c:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006960:	f7fa f82c 	bl	80009bc <__aeabi_dcmplt>
 8006964:	b110      	cbz	r0, 800696c <_svfprintf_r+0x48c>
 8006966:	232d      	movs	r3, #45	; 0x2d
 8006968:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 800696c:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <_svfprintf_r+0x52c>)
 800696e:	4b28      	ldr	r3, [pc, #160]	; (8006a10 <_svfprintf_r+0x530>)
 8006970:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	2947      	cmp	r1, #71	; 0x47
 8006978:	bfcc      	ite	gt
 800697a:	4693      	movgt	fp, r2
 800697c:	469b      	movle	fp, r3
 800697e:	2503      	movs	r5, #3
 8006980:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006984:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8006988:	e3c4      	b.n	8007114 <_svfprintf_r+0xc34>
 800698a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800698e:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8006992:	f7fa f83b 	bl	8000a0c <__aeabi_dcmpun>
 8006996:	4680      	mov	r8, r0
 8006998:	b140      	cbz	r0, 80069ac <_svfprintf_r+0x4cc>
 800699a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699c:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <_svfprintf_r+0x534>)
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bfbc      	itt	lt
 80069a2:	232d      	movlt	r3, #45	; 0x2d
 80069a4:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <_svfprintf_r+0x538>)
 80069aa:	e7e1      	b.n	8006970 <_svfprintf_r+0x490>
 80069ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ae:	f023 0320 	bic.w	r3, r3, #32
 80069b2:	2b41      	cmp	r3, #65	; 0x41
 80069b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069b6:	d131      	bne.n	8006a1c <_svfprintf_r+0x53c>
 80069b8:	2330      	movs	r3, #48	; 0x30
 80069ba:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	f04a 0a02 	orr.w	sl, sl, #2
 80069c4:	2b61      	cmp	r3, #97	; 0x61
 80069c6:	bf14      	ite	ne
 80069c8:	2358      	movne	r3, #88	; 0x58
 80069ca:	2378      	moveq	r3, #120	; 0x78
 80069cc:	2d63      	cmp	r5, #99	; 0x63
 80069ce:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 80069d2:	f340 8111 	ble.w	8006bf8 <_svfprintf_r+0x718>
 80069d6:	1c69      	adds	r1, r5, #1
 80069d8:	9807      	ldr	r0, [sp, #28]
 80069da:	f7ff fac1 	bl	8005f60 <_malloc_r>
 80069de:	4683      	mov	fp, r0
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f040 810c 	bne.w	8006bfe <_svfprintf_r+0x71e>
 80069e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ee:	f8a9 300c 	strh.w	r3, [r9, #12]
 80069f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069fc:	bf18      	it	ne
 80069fe:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006a02:	e591      	b.n	8006528 <_svfprintf_r+0x48>
 8006a04:	080098a5 	.word	0x080098a5
 8006a08:	7fefffff 	.word	0x7fefffff
 8006a0c:	0800948a 	.word	0x0800948a
 8006a10:	08009888 	.word	0x08009888
 8006a14:	08009890 	.word	0x08009890
 8006a18:	0800988c 	.word	0x0800988c
 8006a1c:	1c69      	adds	r1, r5, #1
 8006a1e:	f000 80f0 	beq.w	8006c02 <_svfprintf_r+0x722>
 8006a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a24:	2b47      	cmp	r3, #71	; 0x47
 8006a26:	d102      	bne.n	8006a2e <_svfprintf_r+0x54e>
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	f000 80ec 	beq.w	8006c06 <_svfprintf_r+0x726>
 8006a2e:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8006a32:	9315      	str	r3, [sp, #84]	; 0x54
 8006a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a36:	1e1e      	subs	r6, r3, #0
 8006a38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a3a:	9308      	str	r3, [sp, #32]
 8006a3c:	bfb7      	itett	lt
 8006a3e:	4633      	movlt	r3, r6
 8006a40:	2300      	movge	r3, #0
 8006a42:	f103 4600 	addlt.w	r6, r3, #2147483648	; 0x80000000
 8006a46:	232d      	movlt	r3, #45	; 0x2d
 8006a48:	9319      	str	r3, [sp, #100]	; 0x64
 8006a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4c:	2b41      	cmp	r3, #65	; 0x41
 8006a4e:	f040 80eb 	bne.w	8006c28 <_svfprintf_r+0x748>
 8006a52:	aa22      	add	r2, sp, #136	; 0x88
 8006a54:	9808      	ldr	r0, [sp, #32]
 8006a56:	4631      	mov	r1, r6
 8006a58:	f002 f99e 	bl	8008d98 <frexp>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006a62:	f7f9 fd39 	bl	80004d8 <__aeabi_dmul>
 8006a66:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006a6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a6e:	f7f9 ff9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006a72:	b108      	cbz	r0, 8006a78 <_svfprintf_r+0x598>
 8006a74:	2301      	movs	r3, #1
 8006a76:	9322      	str	r3, [sp, #136]	; 0x88
 8006a78:	4fac      	ldr	r7, [pc, #688]	; (8006d2c <_svfprintf_r+0x84c>)
 8006a7a:	4bad      	ldr	r3, [pc, #692]	; (8006d30 <_svfprintf_r+0x850>)
 8006a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7e:	465e      	mov	r6, fp
 8006a80:	2a61      	cmp	r2, #97	; 0x61
 8006a82:	bf08      	it	eq
 8006a84:	461f      	moveq	r7, r3
 8006a86:	9712      	str	r7, [sp, #72]	; 0x48
 8006a88:	1e6f      	subs	r7, r5, #1
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a90:	4ba8      	ldr	r3, [pc, #672]	; (8006d34 <_svfprintf_r+0x854>)
 8006a92:	f7f9 fd21 	bl	80004d8 <__aeabi_dmul>
 8006a96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a9a:	f7f9 ffcd 	bl	8000a38 <__aeabi_d2iz>
 8006a9e:	901e      	str	r0, [sp, #120]	; 0x78
 8006aa0:	f7f9 fcb0 	bl	8000404 <__aeabi_i2d>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006aac:	f7f9 fb5c 	bl	8000168 <__aeabi_dsub>
 8006ab0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ab8:	5c9b      	ldrb	r3, [r3, r2]
 8006aba:	1c7a      	adds	r2, r7, #1
 8006abc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ac0:	971f      	str	r7, [sp, #124]	; 0x7c
 8006ac2:	d006      	beq.n	8006ad2 <_svfprintf_r+0x5f2>
 8006ac4:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006ac8:	3f01      	subs	r7, #1
 8006aca:	f7f9 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0db      	beq.n	8006a8a <_svfprintf_r+0x5aa>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ad8:	4b97      	ldr	r3, [pc, #604]	; (8006d38 <_svfprintf_r+0x858>)
 8006ada:	f7f9 ff8d 	bl	80009f8 <__aeabi_dcmpgt>
 8006ade:	b960      	cbnz	r0, 8006afa <_svfprintf_r+0x61a>
 8006ae0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4b94      	ldr	r3, [pc, #592]	; (8006d38 <_svfprintf_r+0x858>)
 8006ae8:	f7f9 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f000 8096 	beq.w	8006c1e <_svfprintf_r+0x73e>
 8006af2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006af4:	07db      	lsls	r3, r3, #31
 8006af6:	f140 8092 	bpl.w	8006c1e <_svfprintf_r+0x73e>
 8006afa:	2030      	movs	r0, #48	; 0x30
 8006afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006afe:	9626      	str	r6, [sp, #152]	; 0x98
 8006b00:	7bd9      	ldrb	r1, [r3, #15]
 8006b02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b04:	1e53      	subs	r3, r2, #1
 8006b06:	9326      	str	r3, [sp, #152]	; 0x98
 8006b08:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	d07d      	beq.n	8006c0c <_svfprintf_r+0x72c>
 8006b10:	2b39      	cmp	r3, #57	; 0x39
 8006b12:	bf0b      	itete	eq
 8006b14:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8006b16:	3301      	addne	r3, #1
 8006b18:	7a9b      	ldrbeq	r3, [r3, #10]
 8006b1a:	b2db      	uxtbne	r3, r3
 8006b1c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b20:	4633      	mov	r3, r6
 8006b22:	eba3 030b 	sub.w	r3, r3, fp
 8006b26:	9308      	str	r3, [sp, #32]
 8006b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006b2c:	2b47      	cmp	r3, #71	; 0x47
 8006b2e:	f040 80c7 	bne.w	8006cc0 <_svfprintf_r+0x7e0>
 8006b32:	1cf7      	adds	r7, r6, #3
 8006b34:	db02      	blt.n	8006b3c <_svfprintf_r+0x65c>
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	f280 80ed 	bge.w	8006d16 <_svfprintf_r+0x836>
 8006b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3e:	3b02      	subs	r3, #2
 8006b40:	930a      	str	r3, [sp, #40]	; 0x28
 8006b42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b44:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8006b48:	f021 0120 	bic.w	r1, r1, #32
 8006b4c:	2941      	cmp	r1, #65	; 0x41
 8006b4e:	bf08      	it	eq
 8006b50:	320f      	addeq	r2, #15
 8006b52:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 8006b56:	bf06      	itte	eq
 8006b58:	b2d2      	uxtbeq	r2, r2
 8006b5a:	2101      	moveq	r1, #1
 8006b5c:	2100      	movne	r1, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8006b64:	bfb4      	ite	lt
 8006b66:	222d      	movlt	r2, #45	; 0x2d
 8006b68:	222b      	movge	r2, #43	; 0x2b
 8006b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b6c:	bfb8      	it	lt
 8006b6e:	f1c6 0301 	rsblt	r3, r6, #1
 8006b72:	2b09      	cmp	r3, #9
 8006b74:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8006b78:	f340 80b9 	ble.w	8006cee <_svfprintf_r+0x80e>
 8006b7c:	250a      	movs	r5, #10
 8006b7e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8006b82:	fb93 f0f5 	sdiv	r0, r3, r5
 8006b86:	fb05 3310 	mls	r3, r5, r0, r3
 8006b8a:	2809      	cmp	r0, #9
 8006b8c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006b90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b94:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f300 80a1 	bgt.w	8006ce0 <_svfprintf_r+0x800>
 8006b9e:	3330      	adds	r3, #48	; 0x30
 8006ba0:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006ba4:	3a02      	subs	r2, #2
 8006ba6:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 8006baa:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8006bae:	4282      	cmp	r2, r0
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f0c0 8097 	bcc.w	8006ce4 <_svfprintf_r+0x804>
 8006bb6:	9a08      	ldr	r2, [sp, #32]
 8006bb8:	ab24      	add	r3, sp, #144	; 0x90
 8006bba:	1acb      	subs	r3, r1, r3
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bc0:	eb03 0502 	add.w	r5, r3, r2
 8006bc4:	dc02      	bgt.n	8006bcc <_svfprintf_r+0x6ec>
 8006bc6:	f01a 0f01 	tst.w	sl, #1
 8006bca:	d001      	beq.n	8006bd0 <_svfprintf_r+0x6f0>
 8006bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bce:	441d      	add	r5, r3
 8006bd0:	2700      	movs	r7, #0
 8006bd2:	463e      	mov	r6, r7
 8006bd4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bdc:	9315      	str	r3, [sp, #84]	; 0x54
 8006bde:	970b      	str	r7, [sp, #44]	; 0x2c
 8006be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 830b 	beq.w	80071fe <_svfprintf_r+0xd1e>
 8006be8:	232d      	movs	r3, #45	; 0x2d
 8006bea:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8006bf4:	9312      	str	r3, [sp, #72]	; 0x48
 8006bf6:	e158      	b.n	8006eaa <_svfprintf_r+0x9ca>
 8006bf8:	f10d 0bec 	add.w	fp, sp, #236	; 0xec
 8006bfc:	e717      	b.n	8006a2e <_svfprintf_r+0x54e>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	e715      	b.n	8006a2e <_svfprintf_r+0x54e>
 8006c02:	2506      	movs	r5, #6
 8006c04:	e713      	b.n	8006a2e <_svfprintf_r+0x54e>
 8006c06:	46a8      	mov	r8, r5
 8006c08:	2501      	movs	r5, #1
 8006c0a:	e710      	b.n	8006a2e <_svfprintf_r+0x54e>
 8006c0c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006c10:	e777      	b.n	8006b02 <_svfprintf_r+0x622>
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	1af2      	subs	r2, r6, r3
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	dafa      	bge.n	8006c12 <_svfprintf_r+0x732>
 8006c1c:	e781      	b.n	8006b22 <_svfprintf_r+0x642>
 8006c1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006c20:	4633      	mov	r3, r6
 8006c22:	2130      	movs	r1, #48	; 0x30
 8006c24:	4416      	add	r6, r2
 8006c26:	e7f6      	b.n	8006c16 <_svfprintf_r+0x736>
 8006c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2a:	2b46      	cmp	r3, #70	; 0x46
 8006c2c:	d004      	beq.n	8006c38 <_svfprintf_r+0x758>
 8006c2e:	2b45      	cmp	r3, #69	; 0x45
 8006c30:	d140      	bne.n	8006cb4 <_svfprintf_r+0x7d4>
 8006c32:	1c6f      	adds	r7, r5, #1
 8006c34:	2302      	movs	r3, #2
 8006c36:	e001      	b.n	8006c3c <_svfprintf_r+0x75c>
 8006c38:	462f      	mov	r7, r5
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	aa26      	add	r2, sp, #152	; 0x98
 8006c3e:	9204      	str	r2, [sp, #16]
 8006c40:	aa23      	add	r2, sp, #140	; 0x8c
 8006c42:	9203      	str	r2, [sp, #12]
 8006c44:	aa22      	add	r2, sp, #136	; 0x88
 8006c46:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	9a08      	ldr	r2, [sp, #32]
 8006c4e:	4633      	mov	r3, r6
 8006c50:	9807      	ldr	r0, [sp, #28]
 8006c52:	f000 ff01 	bl	8007a58 <_dtoa_r>
 8006c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c58:	4683      	mov	fp, r0
 8006c5a:	2b47      	cmp	r3, #71	; 0x47
 8006c5c:	d102      	bne.n	8006c64 <_svfprintf_r+0x784>
 8006c5e:	f01a 0f01 	tst.w	sl, #1
 8006c62:	d02b      	beq.n	8006cbc <_svfprintf_r+0x7dc>
 8006c64:	eb0b 0307 	add.w	r3, fp, r7
 8006c68:	9312      	str	r3, [sp, #72]	; 0x48
 8006c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6c:	2b46      	cmp	r3, #70	; 0x46
 8006c6e:	d111      	bne.n	8006c94 <_svfprintf_r+0x7b4>
 8006c70:	f89b 3000 	ldrb.w	r3, [fp]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d109      	bne.n	8006c8c <_svfprintf_r+0x7ac>
 8006c78:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006c7c:	9808      	ldr	r0, [sp, #32]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	f7f9 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8006c84:	b910      	cbnz	r0, 8006c8c <_svfprintf_r+0x7ac>
 8006c86:	f1c7 0701 	rsb	r7, r7, #1
 8006c8a:	9722      	str	r7, [sp, #136]	; 0x88
 8006c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c90:	441a      	add	r2, r3
 8006c92:	9212      	str	r2, [sp, #72]	; 0x48
 8006c94:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8006c98:	9808      	ldr	r0, [sp, #32]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	f7f9 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ca0:	b950      	cbnz	r0, 8006cb8 <_svfprintf_r+0x7d8>
 8006ca2:	2230      	movs	r2, #48	; 0x30
 8006ca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ca6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d907      	bls.n	8006cbc <_svfprintf_r+0x7dc>
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	9126      	str	r1, [sp, #152]	; 0x98
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e7f7      	b.n	8006ca4 <_svfprintf_r+0x7c4>
 8006cb4:	462f      	mov	r7, r5
 8006cb6:	e7bd      	b.n	8006c34 <_svfprintf_r+0x754>
 8006cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cba:	9326      	str	r3, [sp, #152]	; 0x98
 8006cbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cbe:	e730      	b.n	8006b22 <_svfprintf_r+0x642>
 8006cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc2:	2b46      	cmp	r3, #70	; 0x46
 8006cc4:	f47f af3d 	bne.w	8006b42 <_svfprintf_r+0x662>
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	dd1d      	ble.n	8006d08 <_svfprintf_r+0x828>
 8006ccc:	b915      	cbnz	r5, 8006cd4 <_svfprintf_r+0x7f4>
 8006cce:	f01a 0f01 	tst.w	sl, #1
 8006cd2:	d03d      	beq.n	8006d50 <_svfprintf_r+0x870>
 8006cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cd6:	18f3      	adds	r3, r6, r3
 8006cd8:	441d      	add	r5, r3
 8006cda:	2366      	movs	r3, #102	; 0x66
 8006cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8006cde:	e03c      	b.n	8006d5a <_svfprintf_r+0x87a>
 8006ce0:	460a      	mov	r2, r1
 8006ce2:	e74e      	b.n	8006b82 <_svfprintf_r+0x6a2>
 8006ce4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8006cec:	e75f      	b.n	8006bae <_svfprintf_r+0x6ce>
 8006cee:	b941      	cbnz	r1, 8006d02 <_svfprintf_r+0x822>
 8006cf0:	2230      	movs	r2, #48	; 0x30
 8006cf2:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8006cf6:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8006cfa:	3330      	adds	r3, #48	; 0x30
 8006cfc:	1c51      	adds	r1, r2, #1
 8006cfe:	7013      	strb	r3, [r2, #0]
 8006d00:	e759      	b.n	8006bb6 <_svfprintf_r+0x6d6>
 8006d02:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8006d06:	e7f8      	b.n	8006cfa <_svfprintf_r+0x81a>
 8006d08:	b915      	cbnz	r5, 8006d10 <_svfprintf_r+0x830>
 8006d0a:	f01a 0f01 	tst.w	sl, #1
 8006d0e:	d021      	beq.n	8006d54 <_svfprintf_r+0x874>
 8006d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d12:	3301      	adds	r3, #1
 8006d14:	e7e0      	b.n	8006cd8 <_svfprintf_r+0x7f8>
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	42b3      	cmp	r3, r6
 8006d1a:	dc0f      	bgt.n	8006d3c <_svfprintf_r+0x85c>
 8006d1c:	f01a 0f01 	tst.w	sl, #1
 8006d20:	d02e      	beq.n	8006d80 <_svfprintf_r+0x8a0>
 8006d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d24:	18f5      	adds	r5, r6, r3
 8006d26:	2367      	movs	r3, #103	; 0x67
 8006d28:	e7d8      	b.n	8006cdc <_svfprintf_r+0x7fc>
 8006d2a:	bf00      	nop
 8006d2c:	080098a5 	.word	0x080098a5
 8006d30:	08009894 	.word	0x08009894
 8006d34:	40300000 	.word	0x40300000
 8006d38:	3fe00000 	.word	0x3fe00000
 8006d3c:	9b08      	ldr	r3, [sp, #32]
 8006d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	eb03 0502 	add.w	r5, r3, r2
 8006d46:	dcee      	bgt.n	8006d26 <_svfprintf_r+0x846>
 8006d48:	f1c6 0301 	rsb	r3, r6, #1
 8006d4c:	441d      	add	r5, r3
 8006d4e:	e7ea      	b.n	8006d26 <_svfprintf_r+0x846>
 8006d50:	4635      	mov	r5, r6
 8006d52:	e7c2      	b.n	8006cda <_svfprintf_r+0x7fa>
 8006d54:	2366      	movs	r3, #102	; 0x66
 8006d56:	2501      	movs	r5, #1
 8006d58:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5a:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8006d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d60:	d01f      	beq.n	8006da2 <_svfprintf_r+0x8c2>
 8006d62:	2700      	movs	r7, #0
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	970b      	str	r7, [sp, #44]	; 0x2c
 8006d68:	f77f af3a 	ble.w	8006be0 <_svfprintf_r+0x700>
 8006d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2bff      	cmp	r3, #255	; 0xff
 8006d72:	d107      	bne.n	8006d84 <_svfprintf_r+0x8a4>
 8006d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d78:	443b      	add	r3, r7
 8006d7a:	fb02 5503 	mla	r5, r2, r3, r5
 8006d7e:	e72f      	b.n	8006be0 <_svfprintf_r+0x700>
 8006d80:	4635      	mov	r5, r6
 8006d82:	e7d0      	b.n	8006d26 <_svfprintf_r+0x846>
 8006d84:	42b3      	cmp	r3, r6
 8006d86:	daf5      	bge.n	8006d74 <_svfprintf_r+0x894>
 8006d88:	1af6      	subs	r6, r6, r3
 8006d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	b133      	cbz	r3, 8006d9e <_svfprintf_r+0x8be>
 8006d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d92:	3301      	adds	r3, #1
 8006d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d98:	3301      	adds	r3, #1
 8006d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d9c:	e7e6      	b.n	8006d6c <_svfprintf_r+0x88c>
 8006d9e:	3701      	adds	r7, #1
 8006da0:	e7e4      	b.n	8006d6c <_svfprintf_r+0x88c>
 8006da2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006da4:	e71c      	b.n	8006be0 <_svfprintf_r+0x700>
 8006da6:	4632      	mov	r2, r6
 8006da8:	f852 3b04 	ldr.w	r3, [r2], #4
 8006dac:	f01a 0f20 	tst.w	sl, #32
 8006db0:	920c      	str	r2, [sp, #48]	; 0x30
 8006db2:	d009      	beq.n	8006dc8 <_svfprintf_r+0x8e8>
 8006db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006db6:	4610      	mov	r0, r2
 8006db8:	17d1      	asrs	r1, r2, #31
 8006dba:	e9c3 0100 	strd	r0, r1, [r3]
 8006dbe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006dc0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8006dc4:	f7ff bbc8 	b.w	8006558 <_svfprintf_r+0x78>
 8006dc8:	f01a 0f10 	tst.w	sl, #16
 8006dcc:	d002      	beq.n	8006dd4 <_svfprintf_r+0x8f4>
 8006dce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e7f4      	b.n	8006dbe <_svfprintf_r+0x8de>
 8006dd4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006dd8:	d002      	beq.n	8006de0 <_svfprintf_r+0x900>
 8006dda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	e7ee      	b.n	8006dbe <_svfprintf_r+0x8de>
 8006de0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006de4:	d0f3      	beq.n	8006dce <_svfprintf_r+0x8ee>
 8006de6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e7e8      	b.n	8006dbe <_svfprintf_r+0x8de>
 8006dec:	f04a 0a10 	orr.w	sl, sl, #16
 8006df0:	f01a 0f20 	tst.w	sl, #32
 8006df4:	d01e      	beq.n	8006e34 <_svfprintf_r+0x954>
 8006df6:	3607      	adds	r6, #7
 8006df8:	f026 0607 	bic.w	r6, r6, #7
 8006dfc:	f106 0308 	add.w	r3, r6, #8
 8006e00:	930c      	str	r3, [sp, #48]	; 0x30
 8006e02:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006e06:	2300      	movs	r3, #0
 8006e08:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	1c69      	adds	r1, r5, #1
 8006e10:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006e14:	f000 8158 	beq.w	80070c8 <_svfprintf_r+0xbe8>
 8006e18:	4652      	mov	r2, sl
 8006e1a:	ea56 0107 	orrs.w	r1, r6, r7
 8006e1e:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006e22:	f040 8151 	bne.w	80070c8 <_svfprintf_r+0xbe8>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	f000 81d3 	beq.w	80071d2 <_svfprintf_r+0xcf2>
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 814e 	bne.w	80070ce <_svfprintf_r+0xbee>
 8006e32:	e55a      	b.n	80068ea <_svfprintf_r+0x40a>
 8006e34:	1d33      	adds	r3, r6, #4
 8006e36:	f01a 0f10 	tst.w	sl, #16
 8006e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e3c:	d001      	beq.n	8006e42 <_svfprintf_r+0x962>
 8006e3e:	6836      	ldr	r6, [r6, #0]
 8006e40:	e003      	b.n	8006e4a <_svfprintf_r+0x96a>
 8006e42:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006e46:	d002      	beq.n	8006e4e <_svfprintf_r+0x96e>
 8006e48:	8836      	ldrh	r6, [r6, #0]
 8006e4a:	2700      	movs	r7, #0
 8006e4c:	e7db      	b.n	8006e06 <_svfprintf_r+0x926>
 8006e4e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006e52:	d0f4      	beq.n	8006e3e <_svfprintf_r+0x95e>
 8006e54:	7836      	ldrb	r6, [r6, #0]
 8006e56:	e7f8      	b.n	8006e4a <_svfprintf_r+0x96a>
 8006e58:	1d33      	adds	r3, r6, #4
 8006e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5c:	f647 0330 	movw	r3, #30768	; 0x7830
 8006e60:	2278      	movs	r2, #120	; 0x78
 8006e62:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8006e66:	4baf      	ldr	r3, [pc, #700]	; (8007124 <_svfprintf_r+0xc44>)
 8006e68:	6836      	ldr	r6, [r6, #0]
 8006e6a:	931c      	str	r3, [sp, #112]	; 0x70
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	f04a 0a02 	orr.w	sl, sl, #2
 8006e72:	2302      	movs	r3, #2
 8006e74:	920a      	str	r2, [sp, #40]	; 0x28
 8006e76:	e7c9      	b.n	8006e0c <_svfprintf_r+0x92c>
 8006e78:	1d33      	adds	r3, r6, #4
 8006e7a:	f8d6 b000 	ldr.w	fp, [r6]
 8006e7e:	2600      	movs	r6, #0
 8006e80:	1c68      	adds	r0, r5, #1
 8006e82:	930c      	str	r3, [sp, #48]	; 0x30
 8006e84:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 8006e88:	f000 80de 	beq.w	8007048 <_svfprintf_r+0xb68>
 8006e8c:	462a      	mov	r2, r5
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4658      	mov	r0, fp
 8006e92:	f001 fcb7 	bl	8008804 <memchr>
 8006e96:	4680      	mov	r8, r0
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f43f ad73 	beq.w	8006984 <_svfprintf_r+0x4a4>
 8006e9e:	46b0      	mov	r8, r6
 8006ea0:	4637      	mov	r7, r6
 8006ea2:	eba0 050b 	sub.w	r5, r0, fp
 8006ea6:	9612      	str	r6, [sp, #72]	; 0x48
 8006ea8:	960b      	str	r6, [sp, #44]	; 0x2c
 8006eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	bfb8      	it	lt
 8006eb0:	462b      	movlt	r3, r5
 8006eb2:	9315      	str	r3, [sp, #84]	; 0x54
 8006eb4:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006eb8:	b113      	cbz	r3, 8006ec0 <_svfprintf_r+0x9e0>
 8006eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	9315      	str	r3, [sp, #84]	; 0x54
 8006ec0:	f01a 0302 	ands.w	r3, sl, #2
 8006ec4:	931e      	str	r3, [sp, #120]	; 0x78
 8006ec6:	bf1e      	ittt	ne
 8006ec8:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8006eca:	3302      	addne	r3, #2
 8006ecc:	9315      	strne	r3, [sp, #84]	; 0x54
 8006ece:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8006ed2:	931f      	str	r3, [sp, #124]	; 0x7c
 8006ed4:	d121      	bne.n	8006f1a <_svfprintf_r+0xa3a>
 8006ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	9319      	str	r3, [sp, #100]	; 0x64
 8006ee0:	dd1b      	ble.n	8006f1a <_svfprintf_r+0xa3a>
 8006ee2:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006ee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006ee8:	3201      	adds	r2, #1
 8006eea:	2810      	cmp	r0, #16
 8006eec:	488e      	ldr	r0, [pc, #568]	; (8007128 <_svfprintf_r+0xc48>)
 8006eee:	f104 0108 	add.w	r1, r4, #8
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f300 8187 	bgt.w	8007206 <_svfprintf_r+0xd26>
 8006ef8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006efa:	2a07      	cmp	r2, #7
 8006efc:	4403      	add	r3, r0
 8006efe:	6060      	str	r0, [r4, #4]
 8006f00:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006f04:	f340 8194 	ble.w	8007230 <_svfprintf_r+0xd50>
 8006f08:	aa28      	add	r2, sp, #160	; 0xa0
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	9807      	ldr	r0, [sp, #28]
 8006f0e:	f001 ff8a 	bl	8008e26 <__ssprint_r>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f040 84c0 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8006f18:	ac2b      	add	r4, sp, #172	; 0xac
 8006f1a:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8006f1e:	b173      	cbz	r3, 8006f3e <_svfprintf_r+0xa5e>
 8006f20:	f10d 0383 	add.w	r3, sp, #131	; 0x83
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2301      	movs	r3, #1
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006f30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f32:	3301      	adds	r3, #1
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f38:	f300 817c 	bgt.w	8007234 <_svfprintf_r+0xd54>
 8006f3c:	3408      	adds	r4, #8
 8006f3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f40:	b16b      	cbz	r3, 8006f5e <_svfprintf_r+0xa7e>
 8006f42:	ab21      	add	r3, sp, #132	; 0x84
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	2302      	movs	r3, #2
 8006f48:	6063      	str	r3, [r4, #4]
 8006f4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	932a      	str	r3, [sp, #168]	; 0xa8
 8006f50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006f52:	3301      	adds	r3, #1
 8006f54:	2b07      	cmp	r3, #7
 8006f56:	9329      	str	r3, [sp, #164]	; 0xa4
 8006f58:	f300 8176 	bgt.w	8007248 <_svfprintf_r+0xd68>
 8006f5c:	3408      	adds	r4, #8
 8006f5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d121      	bne.n	8006fa8 <_svfprintf_r+0xac8>
 8006f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	9319      	str	r3, [sp, #100]	; 0x64
 8006f6e:	dd1b      	ble.n	8006fa8 <_svfprintf_r+0xac8>
 8006f70:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006f74:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f76:	3201      	adds	r2, #1
 8006f78:	2810      	cmp	r0, #16
 8006f7a:	486c      	ldr	r0, [pc, #432]	; (800712c <_svfprintf_r+0xc4c>)
 8006f7c:	f104 0108 	add.w	r1, r4, #8
 8006f80:	6020      	str	r0, [r4, #0]
 8006f82:	f300 816b 	bgt.w	800725c <_svfprintf_r+0xd7c>
 8006f86:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f88:	2a07      	cmp	r2, #7
 8006f8a:	4403      	add	r3, r0
 8006f8c:	6060      	str	r0, [r4, #4]
 8006f8e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006f92:	f340 8178 	ble.w	8007286 <_svfprintf_r+0xda6>
 8006f96:	aa28      	add	r2, sp, #160	; 0xa0
 8006f98:	4649      	mov	r1, r9
 8006f9a:	9807      	ldr	r0, [sp, #28]
 8006f9c:	f001 ff43 	bl	8008e26 <__ssprint_r>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	f040 8479 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8006fa6:	ac2b      	add	r4, sp, #172	; 0xac
 8006fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006faa:	1b5b      	subs	r3, r3, r5
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	9312      	str	r3, [sp, #72]	; 0x48
 8006fb0:	dd1b      	ble.n	8006fea <_svfprintf_r+0xb0a>
 8006fb2:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8006fb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fb8:	3201      	adds	r2, #1
 8006fba:	2810      	cmp	r0, #16
 8006fbc:	485b      	ldr	r0, [pc, #364]	; (800712c <_svfprintf_r+0xc4c>)
 8006fbe:	f104 0108 	add.w	r1, r4, #8
 8006fc2:	6020      	str	r0, [r4, #0]
 8006fc4:	f300 8161 	bgt.w	800728a <_svfprintf_r+0xdaa>
 8006fc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fca:	2a07      	cmp	r2, #7
 8006fcc:	4403      	add	r3, r0
 8006fce:	6060      	str	r0, [r4, #4]
 8006fd0:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8006fd4:	f340 816e 	ble.w	80072b4 <_svfprintf_r+0xdd4>
 8006fd8:	aa28      	add	r2, sp, #160	; 0xa0
 8006fda:	4649      	mov	r1, r9
 8006fdc:	9807      	ldr	r0, [sp, #28]
 8006fde:	f001 ff22 	bl	8008e26 <__ssprint_r>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f040 8458 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8006fe8:	ac2b      	add	r4, sp, #172	; 0xac
 8006fea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006fec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ff0:	9312      	str	r3, [sp, #72]	; 0x48
 8006ff2:	f040 8161 	bne.w	80072b8 <_svfprintf_r+0xdd8>
 8006ff6:	e9c4 b500 	strd	fp, r5, [r4]
 8006ffa:	441d      	add	r5, r3
 8006ffc:	952a      	str	r5, [sp, #168]	; 0xa8
 8006ffe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007000:	3301      	adds	r3, #1
 8007002:	2b07      	cmp	r3, #7
 8007004:	9329      	str	r3, [sp, #164]	; 0xa4
 8007006:	f300 819d 	bgt.w	8007344 <_svfprintf_r+0xe64>
 800700a:	3408      	adds	r4, #8
 800700c:	f01a 0f04 	tst.w	sl, #4
 8007010:	f040 8424 	bne.w	800785c <_svfprintf_r+0x137c>
 8007014:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007018:	9915      	ldr	r1, [sp, #84]	; 0x54
 800701a:	428a      	cmp	r2, r1
 800701c:	bfac      	ite	ge
 800701e:	189b      	addge	r3, r3, r2
 8007020:	185b      	addlt	r3, r3, r1
 8007022:	9310      	str	r3, [sp, #64]	; 0x40
 8007024:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007026:	b13b      	cbz	r3, 8007038 <_svfprintf_r+0xb58>
 8007028:	aa28      	add	r2, sp, #160	; 0xa0
 800702a:	4649      	mov	r1, r9
 800702c:	9807      	ldr	r0, [sp, #28]
 800702e:	f001 fefa 	bl	8008e26 <__ssprint_r>
 8007032:	2800      	cmp	r0, #0
 8007034:	f040 8430 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007038:	2300      	movs	r3, #0
 800703a:	9329      	str	r3, [sp, #164]	; 0xa4
 800703c:	f1b8 0f00 	cmp.w	r8, #0
 8007040:	f040 8446 	bne.w	80078d0 <_svfprintf_r+0x13f0>
 8007044:	ac2b      	add	r4, sp, #172	; 0xac
 8007046:	e6ba      	b.n	8006dbe <_svfprintf_r+0x8de>
 8007048:	4658      	mov	r0, fp
 800704a:	f7f9 f881 	bl	8000150 <strlen>
 800704e:	46b0      	mov	r8, r6
 8007050:	4605      	mov	r5, r0
 8007052:	e497      	b.n	8006984 <_svfprintf_r+0x4a4>
 8007054:	f04a 0a10 	orr.w	sl, sl, #16
 8007058:	f01a 0f20 	tst.w	sl, #32
 800705c:	d009      	beq.n	8007072 <_svfprintf_r+0xb92>
 800705e:	3607      	adds	r6, #7
 8007060:	f026 0607 	bic.w	r6, r6, #7
 8007064:	f106 0308 	add.w	r3, r6, #8
 8007068:	930c      	str	r3, [sp, #48]	; 0x30
 800706a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800706e:	2301      	movs	r3, #1
 8007070:	e6cc      	b.n	8006e0c <_svfprintf_r+0x92c>
 8007072:	1d33      	adds	r3, r6, #4
 8007074:	f01a 0f10 	tst.w	sl, #16
 8007078:	930c      	str	r3, [sp, #48]	; 0x30
 800707a:	d001      	beq.n	8007080 <_svfprintf_r+0xba0>
 800707c:	6836      	ldr	r6, [r6, #0]
 800707e:	e003      	b.n	8007088 <_svfprintf_r+0xba8>
 8007080:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007084:	d002      	beq.n	800708c <_svfprintf_r+0xbac>
 8007086:	8836      	ldrh	r6, [r6, #0]
 8007088:	2700      	movs	r7, #0
 800708a:	e7f0      	b.n	800706e <_svfprintf_r+0xb8e>
 800708c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007090:	d0f4      	beq.n	800707c <_svfprintf_r+0xb9c>
 8007092:	7836      	ldrb	r6, [r6, #0]
 8007094:	e7f8      	b.n	8007088 <_svfprintf_r+0xba8>
 8007096:	4b23      	ldr	r3, [pc, #140]	; (8007124 <_svfprintf_r+0xc44>)
 8007098:	f7ff bb59 	b.w	800674e <_svfprintf_r+0x26e>
 800709c:	1d33      	adds	r3, r6, #4
 800709e:	f01a 0f10 	tst.w	sl, #16
 80070a2:	930c      	str	r3, [sp, #48]	; 0x30
 80070a4:	d001      	beq.n	80070aa <_svfprintf_r+0xbca>
 80070a6:	6836      	ldr	r6, [r6, #0]
 80070a8:	e003      	b.n	80070b2 <_svfprintf_r+0xbd2>
 80070aa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80070ae:	d003      	beq.n	80070b8 <_svfprintf_r+0xbd8>
 80070b0:	8836      	ldrh	r6, [r6, #0]
 80070b2:	2700      	movs	r7, #0
 80070b4:	f7ff bb58 	b.w	8006768 <_svfprintf_r+0x288>
 80070b8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80070bc:	d0f3      	beq.n	80070a6 <_svfprintf_r+0xbc6>
 80070be:	7836      	ldrb	r6, [r6, #0]
 80070c0:	e7f7      	b.n	80070b2 <_svfprintf_r+0xbd2>
 80070c2:	4652      	mov	r2, sl
 80070c4:	2301      	movs	r3, #1
 80070c6:	e6a8      	b.n	8006e1a <_svfprintf_r+0x93a>
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f43f ac09 	beq.w	80068e0 <_svfprintf_r+0x400>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d06d      	beq.n	80071ae <_svfprintf_r+0xcce>
 80070d2:	ab54      	add	r3, sp, #336	; 0x150
 80070d4:	08f1      	lsrs	r1, r6, #3
 80070d6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80070da:	08f8      	lsrs	r0, r7, #3
 80070dc:	f006 0207 	and.w	r2, r6, #7
 80070e0:	4607      	mov	r7, r0
 80070e2:	460e      	mov	r6, r1
 80070e4:	3230      	adds	r2, #48	; 0x30
 80070e6:	ea56 0107 	orrs.w	r1, r6, r7
 80070ea:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80070ee:	f803 2c01 	strb.w	r2, [r3, #-1]
 80070f2:	d114      	bne.n	800711e <_svfprintf_r+0xc3e>
 80070f4:	f01a 0f01 	tst.w	sl, #1
 80070f8:	d006      	beq.n	8007108 <_svfprintf_r+0xc28>
 80070fa:	2a30      	cmp	r2, #48	; 0x30
 80070fc:	d004      	beq.n	8007108 <_svfprintf_r+0xc28>
 80070fe:	2230      	movs	r2, #48	; 0x30
 8007100:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007104:	f1a3 0b02 	sub.w	fp, r3, #2
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	ab54      	add	r3, sp, #336	; 0x150
 800710e:	9512      	str	r5, [sp, #72]	; 0x48
 8007110:	eba3 050b 	sub.w	r5, r3, fp
 8007114:	4647      	mov	r7, r8
 8007116:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800711a:	4646      	mov	r6, r8
 800711c:	e6c5      	b.n	8006eaa <_svfprintf_r+0x9ca>
 800711e:	465b      	mov	r3, fp
 8007120:	e7d8      	b.n	80070d4 <_svfprintf_r+0xbf4>
 8007122:	bf00      	nop
 8007124:	08009894 	.word	0x08009894
 8007128:	080098b8 	.word	0x080098b8
 800712c:	080098c8 	.word	0x080098c8
 8007130:	2300      	movs	r3, #0
 8007132:	9308      	str	r3, [sp, #32]
 8007134:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8007138:	f50d 78a8 	add.w	r8, sp, #336	; 0x150
 800713c:	930b      	str	r3, [sp, #44]	; 0x2c
 800713e:	220a      	movs	r2, #10
 8007140:	2300      	movs	r3, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 ffff 	bl	8001148 <__aeabi_uldivmod>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	3230      	adds	r2, #48	; 0x30
 800714e:	3301      	adds	r3, #1
 8007150:	9308      	str	r3, [sp, #32]
 8007152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007154:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
 8007158:	f808 2c01 	strb.w	r2, [r8, #-1]
 800715c:	b1d3      	cbz	r3, 8007194 <_svfprintf_r+0xcb4>
 800715e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007160:	9a08      	ldr	r2, [sp, #32]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d115      	bne.n	8007194 <_svfprintf_r+0xcb4>
 8007168:	2aff      	cmp	r2, #255	; 0xff
 800716a:	d013      	beq.n	8007194 <_svfprintf_r+0xcb4>
 800716c:	2f00      	cmp	r7, #0
 800716e:	bf08      	it	eq
 8007170:	2e0a      	cmpeq	r6, #10
 8007172:	d30f      	bcc.n	8007194 <_svfprintf_r+0xcb4>
 8007174:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007176:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007178:	ebab 0b03 	sub.w	fp, fp, r3
 800717c:	461a      	mov	r2, r3
 800717e:	4658      	mov	r0, fp
 8007180:	f001 fe3c 	bl	8008dfc <strncpy>
 8007184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	b11b      	cbz	r3, 8007192 <_svfprintf_r+0xcb2>
 800718a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800718c:	3301      	adds	r3, #1
 800718e:	930d      	str	r3, [sp, #52]	; 0x34
 8007190:	2300      	movs	r3, #0
 8007192:	9308      	str	r3, [sp, #32]
 8007194:	2300      	movs	r3, #0
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	220a      	movs	r2, #10
 800719c:	f7f9 ffd4 	bl	8001148 <__aeabi_uldivmod>
 80071a0:	4606      	mov	r6, r0
 80071a2:	460f      	mov	r7, r1
 80071a4:	ea56 0307 	orrs.w	r3, r6, r7
 80071a8:	d0ae      	beq.n	8007108 <_svfprintf_r+0xc28>
 80071aa:	46d8      	mov	r8, fp
 80071ac:	e7c7      	b.n	800713e <_svfprintf_r+0xc5e>
 80071ae:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80071b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071b4:	f006 030f 	and.w	r3, r6, #15
 80071b8:	5cd3      	ldrb	r3, [r2, r3]
 80071ba:	093a      	lsrs	r2, r7, #4
 80071bc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80071c0:	0933      	lsrs	r3, r6, #4
 80071c2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80071c6:	461e      	mov	r6, r3
 80071c8:	4617      	mov	r7, r2
 80071ca:	ea56 0307 	orrs.w	r3, r6, r7
 80071ce:	d1f0      	bne.n	80071b2 <_svfprintf_r+0xcd2>
 80071d0:	e79a      	b.n	8007108 <_svfprintf_r+0xc28>
 80071d2:	f50d 7ba8 	add.w	fp, sp, #336	; 0x150
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d196      	bne.n	8007108 <_svfprintf_r+0xc28>
 80071da:	07d2      	lsls	r2, r2, #31
 80071dc:	bf44      	itt	mi
 80071de:	2330      	movmi	r3, #48	; 0x30
 80071e0:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 80071e4:	e790      	b.n	8007108 <_svfprintf_r+0xc28>
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8377 	beq.w	80078dc <_svfprintf_r+0x13fc>
 80071ee:	2000      	movs	r0, #0
 80071f0:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
 80071f4:	f88d 0083 	strb.w	r0, [sp, #131]	; 0x83
 80071f8:	960c      	str	r6, [sp, #48]	; 0x30
 80071fa:	f7ff bb4e 	b.w	800689a <_svfprintf_r+0x3ba>
 80071fe:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8007202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007204:	e4f6      	b.n	8006bf4 <_svfprintf_r+0x714>
 8007206:	2010      	movs	r0, #16
 8007208:	2a07      	cmp	r2, #7
 800720a:	4403      	add	r3, r0
 800720c:	6060      	str	r0, [r4, #4]
 800720e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007212:	dd08      	ble.n	8007226 <_svfprintf_r+0xd46>
 8007214:	aa28      	add	r2, sp, #160	; 0xa0
 8007216:	4649      	mov	r1, r9
 8007218:	9807      	ldr	r0, [sp, #28]
 800721a:	f001 fe04 	bl	8008e26 <__ssprint_r>
 800721e:	2800      	cmp	r0, #0
 8007220:	f040 833a 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007224:	a92b      	add	r1, sp, #172	; 0xac
 8007226:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007228:	460c      	mov	r4, r1
 800722a:	3b10      	subs	r3, #16
 800722c:	9319      	str	r3, [sp, #100]	; 0x64
 800722e:	e658      	b.n	8006ee2 <_svfprintf_r+0xa02>
 8007230:	460c      	mov	r4, r1
 8007232:	e672      	b.n	8006f1a <_svfprintf_r+0xa3a>
 8007234:	aa28      	add	r2, sp, #160	; 0xa0
 8007236:	4649      	mov	r1, r9
 8007238:	9807      	ldr	r0, [sp, #28]
 800723a:	f001 fdf4 	bl	8008e26 <__ssprint_r>
 800723e:	2800      	cmp	r0, #0
 8007240:	f040 832a 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007244:	ac2b      	add	r4, sp, #172	; 0xac
 8007246:	e67a      	b.n	8006f3e <_svfprintf_r+0xa5e>
 8007248:	aa28      	add	r2, sp, #160	; 0xa0
 800724a:	4649      	mov	r1, r9
 800724c:	9807      	ldr	r0, [sp, #28]
 800724e:	f001 fdea 	bl	8008e26 <__ssprint_r>
 8007252:	2800      	cmp	r0, #0
 8007254:	f040 8320 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007258:	ac2b      	add	r4, sp, #172	; 0xac
 800725a:	e680      	b.n	8006f5e <_svfprintf_r+0xa7e>
 800725c:	2010      	movs	r0, #16
 800725e:	2a07      	cmp	r2, #7
 8007260:	4403      	add	r3, r0
 8007262:	6060      	str	r0, [r4, #4]
 8007264:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007268:	dd08      	ble.n	800727c <_svfprintf_r+0xd9c>
 800726a:	aa28      	add	r2, sp, #160	; 0xa0
 800726c:	4649      	mov	r1, r9
 800726e:	9807      	ldr	r0, [sp, #28]
 8007270:	f001 fdd9 	bl	8008e26 <__ssprint_r>
 8007274:	2800      	cmp	r0, #0
 8007276:	f040 830f 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800727a:	a92b      	add	r1, sp, #172	; 0xac
 800727c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800727e:	460c      	mov	r4, r1
 8007280:	3b10      	subs	r3, #16
 8007282:	9319      	str	r3, [sp, #100]	; 0x64
 8007284:	e674      	b.n	8006f70 <_svfprintf_r+0xa90>
 8007286:	460c      	mov	r4, r1
 8007288:	e68e      	b.n	8006fa8 <_svfprintf_r+0xac8>
 800728a:	2010      	movs	r0, #16
 800728c:	2a07      	cmp	r2, #7
 800728e:	4403      	add	r3, r0
 8007290:	6060      	str	r0, [r4, #4]
 8007292:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 8007296:	dd08      	ble.n	80072aa <_svfprintf_r+0xdca>
 8007298:	aa28      	add	r2, sp, #160	; 0xa0
 800729a:	4649      	mov	r1, r9
 800729c:	9807      	ldr	r0, [sp, #28]
 800729e:	f001 fdc2 	bl	8008e26 <__ssprint_r>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f040 82f8 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80072a8:	a92b      	add	r1, sp, #172	; 0xac
 80072aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ac:	460c      	mov	r4, r1
 80072ae:	3b10      	subs	r3, #16
 80072b0:	9312      	str	r3, [sp, #72]	; 0x48
 80072b2:	e67e      	b.n	8006fb2 <_svfprintf_r+0xad2>
 80072b4:	460c      	mov	r4, r1
 80072b6:	e698      	b.n	8006fea <_svfprintf_r+0xb0a>
 80072b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ba:	2b65      	cmp	r3, #101	; 0x65
 80072bc:	f340 8234 	ble.w	8007728 <_svfprintf_r+0x1248>
 80072c0:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 80072c4:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 80072c8:	f7f9 fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d069      	beq.n	80073a4 <_svfprintf_r+0xec4>
 80072d0:	4b6e      	ldr	r3, [pc, #440]	; (800748c <_svfprintf_r+0xfac>)
 80072d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2301      	movs	r3, #1
 80072d8:	441d      	add	r5, r3
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80072de:	952a      	str	r5, [sp, #168]	; 0xa8
 80072e0:	3301      	adds	r3, #1
 80072e2:	2b07      	cmp	r3, #7
 80072e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80072e6:	dc37      	bgt.n	8007358 <_svfprintf_r+0xe78>
 80072e8:	3408      	adds	r4, #8
 80072ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ec:	9a08      	ldr	r2, [sp, #32]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	db03      	blt.n	80072fa <_svfprintf_r+0xe1a>
 80072f2:	f01a 0f01 	tst.w	sl, #1
 80072f6:	f43f ae89 	beq.w	800700c <_svfprintf_r+0xb2c>
 80072fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80072fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007302:	6063      	str	r3, [r4, #4]
 8007304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007306:	4413      	add	r3, r2
 8007308:	932a      	str	r3, [sp, #168]	; 0xa8
 800730a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800730c:	3301      	adds	r3, #1
 800730e:	2b07      	cmp	r3, #7
 8007310:	9329      	str	r3, [sp, #164]	; 0xa4
 8007312:	dc2b      	bgt.n	800736c <_svfprintf_r+0xe8c>
 8007314:	3408      	adds	r4, #8
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	1e5d      	subs	r5, r3, #1
 800731a:	2d00      	cmp	r5, #0
 800731c:	f77f ae76 	ble.w	800700c <_svfprintf_r+0xb2c>
 8007320:	2710      	movs	r7, #16
 8007322:	4e5b      	ldr	r6, [pc, #364]	; (8007490 <_svfprintf_r+0xfb0>)
 8007324:	2d10      	cmp	r5, #16
 8007326:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800732a:	f104 0108 	add.w	r1, r4, #8
 800732e:	f103 0301 	add.w	r3, r3, #1
 8007332:	6026      	str	r6, [r4, #0]
 8007334:	dc24      	bgt.n	8007380 <_svfprintf_r+0xea0>
 8007336:	6065      	str	r5, [r4, #4]
 8007338:	2b07      	cmp	r3, #7
 800733a:	4415      	add	r5, r2
 800733c:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8007340:	f340 8289 	ble.w	8007856 <_svfprintf_r+0x1376>
 8007344:	aa28      	add	r2, sp, #160	; 0xa0
 8007346:	4649      	mov	r1, r9
 8007348:	9807      	ldr	r0, [sp, #28]
 800734a:	f001 fd6c 	bl	8008e26 <__ssprint_r>
 800734e:	2800      	cmp	r0, #0
 8007350:	f040 82a2 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007354:	ac2b      	add	r4, sp, #172	; 0xac
 8007356:	e659      	b.n	800700c <_svfprintf_r+0xb2c>
 8007358:	aa28      	add	r2, sp, #160	; 0xa0
 800735a:	4649      	mov	r1, r9
 800735c:	9807      	ldr	r0, [sp, #28]
 800735e:	f001 fd62 	bl	8008e26 <__ssprint_r>
 8007362:	2800      	cmp	r0, #0
 8007364:	f040 8298 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007368:	ac2b      	add	r4, sp, #172	; 0xac
 800736a:	e7be      	b.n	80072ea <_svfprintf_r+0xe0a>
 800736c:	aa28      	add	r2, sp, #160	; 0xa0
 800736e:	4649      	mov	r1, r9
 8007370:	9807      	ldr	r0, [sp, #28]
 8007372:	f001 fd58 	bl	8008e26 <__ssprint_r>
 8007376:	2800      	cmp	r0, #0
 8007378:	f040 828e 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800737c:	ac2b      	add	r4, sp, #172	; 0xac
 800737e:	e7ca      	b.n	8007316 <_svfprintf_r+0xe36>
 8007380:	3210      	adds	r2, #16
 8007382:	2b07      	cmp	r3, #7
 8007384:	6067      	str	r7, [r4, #4]
 8007386:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800738a:	dd08      	ble.n	800739e <_svfprintf_r+0xebe>
 800738c:	aa28      	add	r2, sp, #160	; 0xa0
 800738e:	4649      	mov	r1, r9
 8007390:	9807      	ldr	r0, [sp, #28]
 8007392:	f001 fd48 	bl	8008e26 <__ssprint_r>
 8007396:	2800      	cmp	r0, #0
 8007398:	f040 827e 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800739c:	a92b      	add	r1, sp, #172	; 0xac
 800739e:	3d10      	subs	r5, #16
 80073a0:	460c      	mov	r4, r1
 80073a2:	e7bf      	b.n	8007324 <_svfprintf_r+0xe44>
 80073a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dc74      	bgt.n	8007494 <_svfprintf_r+0xfb4>
 80073aa:	4b38      	ldr	r3, [pc, #224]	; (800748c <_svfprintf_r+0xfac>)
 80073ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	2301      	movs	r3, #1
 80073b2:	441d      	add	r5, r3
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073b8:	952a      	str	r5, [sp, #168]	; 0xa8
 80073ba:	3301      	adds	r3, #1
 80073bc:	2b07      	cmp	r3, #7
 80073be:	9329      	str	r3, [sp, #164]	; 0xa4
 80073c0:	dc3e      	bgt.n	8007440 <_svfprintf_r+0xf60>
 80073c2:	3408      	adds	r4, #8
 80073c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c6:	b92b      	cbnz	r3, 80073d4 <_svfprintf_r+0xef4>
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	b91b      	cbnz	r3, 80073d4 <_svfprintf_r+0xef4>
 80073cc:	f01a 0f01 	tst.w	sl, #1
 80073d0:	f43f ae1c 	beq.w	800700c <_svfprintf_r+0xb2c>
 80073d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80073d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80073e0:	4413      	add	r3, r2
 80073e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80073e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073e6:	3301      	adds	r3, #1
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80073ec:	dc32      	bgt.n	8007454 <_svfprintf_r+0xf74>
 80073ee:	3408      	adds	r4, #8
 80073f0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	da1b      	bge.n	800742e <_svfprintf_r+0xf4e>
 80073f6:	4623      	mov	r3, r4
 80073f8:	2710      	movs	r7, #16
 80073fa:	4e25      	ldr	r6, [pc, #148]	; (8007490 <_svfprintf_r+0xfb0>)
 80073fc:	426d      	negs	r5, r5
 80073fe:	2d10      	cmp	r5, #16
 8007400:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8007404:	f104 0408 	add.w	r4, r4, #8
 8007408:	f102 0201 	add.w	r2, r2, #1
 800740c:	601e      	str	r6, [r3, #0]
 800740e:	dc2b      	bgt.n	8007468 <_svfprintf_r+0xf88>
 8007410:	605d      	str	r5, [r3, #4]
 8007412:	2a07      	cmp	r2, #7
 8007414:	440d      	add	r5, r1
 8007416:	e9cd 2529 	strd	r2, r5, [sp, #164]	; 0xa4
 800741a:	dd08      	ble.n	800742e <_svfprintf_r+0xf4e>
 800741c:	aa28      	add	r2, sp, #160	; 0xa0
 800741e:	4649      	mov	r1, r9
 8007420:	9807      	ldr	r0, [sp, #28]
 8007422:	f001 fd00 	bl	8008e26 <__ssprint_r>
 8007426:	2800      	cmp	r0, #0
 8007428:	f040 8236 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800742c:	ac2b      	add	r4, sp, #172	; 0xac
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	9a08      	ldr	r2, [sp, #32]
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007436:	f8c4 b000 	str.w	fp, [r4]
 800743a:	4413      	add	r3, r2
 800743c:	932a      	str	r3, [sp, #168]	; 0xa8
 800743e:	e5de      	b.n	8006ffe <_svfprintf_r+0xb1e>
 8007440:	aa28      	add	r2, sp, #160	; 0xa0
 8007442:	4649      	mov	r1, r9
 8007444:	9807      	ldr	r0, [sp, #28]
 8007446:	f001 fcee 	bl	8008e26 <__ssprint_r>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 8224 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007450:	ac2b      	add	r4, sp, #172	; 0xac
 8007452:	e7b7      	b.n	80073c4 <_svfprintf_r+0xee4>
 8007454:	aa28      	add	r2, sp, #160	; 0xa0
 8007456:	4649      	mov	r1, r9
 8007458:	9807      	ldr	r0, [sp, #28]
 800745a:	f001 fce4 	bl	8008e26 <__ssprint_r>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 821a 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007464:	ac2b      	add	r4, sp, #172	; 0xac
 8007466:	e7c3      	b.n	80073f0 <_svfprintf_r+0xf10>
 8007468:	3110      	adds	r1, #16
 800746a:	2a07      	cmp	r2, #7
 800746c:	605f      	str	r7, [r3, #4]
 800746e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8007472:	dd08      	ble.n	8007486 <_svfprintf_r+0xfa6>
 8007474:	aa28      	add	r2, sp, #160	; 0xa0
 8007476:	4649      	mov	r1, r9
 8007478:	9807      	ldr	r0, [sp, #28]
 800747a:	f001 fcd4 	bl	8008e26 <__ssprint_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	f040 820a 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007484:	ac2b      	add	r4, sp, #172	; 0xac
 8007486:	3d10      	subs	r5, #16
 8007488:	4623      	mov	r3, r4
 800748a:	e7b8      	b.n	80073fe <_svfprintf_r+0xf1e>
 800748c:	080098b6 	.word	0x080098b6
 8007490:	080098c8 	.word	0x080098c8
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	42b3      	cmp	r3, r6
 8007498:	bfa8      	it	ge
 800749a:	4633      	movge	r3, r6
 800749c:	2b00      	cmp	r3, #0
 800749e:	461d      	mov	r5, r3
 80074a0:	dd0b      	ble.n	80074ba <_svfprintf_r+0xfda>
 80074a2:	e9c4 b300 	strd	fp, r3, [r4]
 80074a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a8:	442b      	add	r3, r5
 80074aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80074ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074ae:	3301      	adds	r3, #1
 80074b0:	2b07      	cmp	r3, #7
 80074b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80074b4:	f300 8086 	bgt.w	80075c4 <_svfprintf_r+0x10e4>
 80074b8:	3408      	adds	r4, #8
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bfb4      	ite	lt
 80074be:	4635      	movlt	r5, r6
 80074c0:	1b75      	subge	r5, r6, r5
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	dd19      	ble.n	80074fa <_svfprintf_r+0x101a>
 80074c6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80074ca:	4896      	ldr	r0, [pc, #600]	; (8007724 <_svfprintf_r+0x1244>)
 80074cc:	2d10      	cmp	r5, #16
 80074ce:	f103 0301 	add.w	r3, r3, #1
 80074d2:	f104 0108 	add.w	r1, r4, #8
 80074d6:	6020      	str	r0, [r4, #0]
 80074d8:	dc7e      	bgt.n	80075d8 <_svfprintf_r+0x10f8>
 80074da:	6065      	str	r5, [r4, #4]
 80074dc:	2b07      	cmp	r3, #7
 80074de:	4415      	add	r5, r2
 80074e0:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 80074e4:	f340 808b 	ble.w	80075fe <_svfprintf_r+0x111e>
 80074e8:	aa28      	add	r2, sp, #160	; 0xa0
 80074ea:	4649      	mov	r1, r9
 80074ec:	9807      	ldr	r0, [sp, #28]
 80074ee:	f001 fc9a 	bl	8008e26 <__ssprint_r>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f040 81d0 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80074f8:	ac2b      	add	r4, sp, #172	; 0xac
 80074fa:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80074fe:	445e      	add	r6, fp
 8007500:	d009      	beq.n	8007516 <_svfprintf_r+0x1036>
 8007502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007504:	2b00      	cmp	r3, #0
 8007506:	d17c      	bne.n	8007602 <_svfprintf_r+0x1122>
 8007508:	2f00      	cmp	r7, #0
 800750a:	d17c      	bne.n	8007606 <_svfprintf_r+0x1126>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	445b      	add	r3, fp
 8007510:	429e      	cmp	r6, r3
 8007512:	bf28      	it	cs
 8007514:	461e      	movcs	r6, r3
 8007516:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007518:	9a08      	ldr	r2, [sp, #32]
 800751a:	4293      	cmp	r3, r2
 800751c:	db02      	blt.n	8007524 <_svfprintf_r+0x1044>
 800751e:	f01a 0f01 	tst.w	sl, #1
 8007522:	d00e      	beq.n	8007542 <_svfprintf_r+0x1062>
 8007524:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007530:	4413      	add	r3, r2
 8007532:	932a      	str	r3, [sp, #168]	; 0xa8
 8007534:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007536:	3301      	adds	r3, #1
 8007538:	2b07      	cmp	r3, #7
 800753a:	9329      	str	r3, [sp, #164]	; 0xa4
 800753c:	f300 80dd 	bgt.w	80076fa <_svfprintf_r+0x121a>
 8007540:	3408      	adds	r4, #8
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	9a08      	ldr	r2, [sp, #32]
 8007546:	eb0b 0503 	add.w	r5, fp, r3
 800754a:	1bab      	subs	r3, r5, r6
 800754c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800754e:	1b55      	subs	r5, r2, r5
 8007550:	429d      	cmp	r5, r3
 8007552:	bfa8      	it	ge
 8007554:	461d      	movge	r5, r3
 8007556:	2d00      	cmp	r5, #0
 8007558:	dd0b      	ble.n	8007572 <_svfprintf_r+0x1092>
 800755a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800755c:	e9c4 6500 	strd	r6, r5, [r4]
 8007560:	442b      	add	r3, r5
 8007562:	932a      	str	r3, [sp, #168]	; 0xa8
 8007564:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007566:	3301      	adds	r3, #1
 8007568:	2b07      	cmp	r3, #7
 800756a:	9329      	str	r3, [sp, #164]	; 0xa4
 800756c:	f300 80cf 	bgt.w	800770e <_svfprintf_r+0x122e>
 8007570:	3408      	adds	r4, #8
 8007572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007574:	9a08      	ldr	r2, [sp, #32]
 8007576:	2d00      	cmp	r5, #0
 8007578:	eba2 0303 	sub.w	r3, r2, r3
 800757c:	bfb4      	ite	lt
 800757e:	461d      	movlt	r5, r3
 8007580:	1b5d      	subge	r5, r3, r5
 8007582:	2d00      	cmp	r5, #0
 8007584:	f77f ad42 	ble.w	800700c <_svfprintf_r+0xb2c>
 8007588:	2710      	movs	r7, #16
 800758a:	4e66      	ldr	r6, [pc, #408]	; (8007724 <_svfprintf_r+0x1244>)
 800758c:	2d10      	cmp	r5, #16
 800758e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007592:	f104 0108 	add.w	r1, r4, #8
 8007596:	f103 0301 	add.w	r3, r3, #1
 800759a:	6026      	str	r6, [r4, #0]
 800759c:	f77f aecb 	ble.w	8007336 <_svfprintf_r+0xe56>
 80075a0:	3210      	adds	r2, #16
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	6067      	str	r7, [r4, #4]
 80075a6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80075aa:	dd08      	ble.n	80075be <_svfprintf_r+0x10de>
 80075ac:	aa28      	add	r2, sp, #160	; 0xa0
 80075ae:	4649      	mov	r1, r9
 80075b0:	9807      	ldr	r0, [sp, #28]
 80075b2:	f001 fc38 	bl	8008e26 <__ssprint_r>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 816e 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80075bc:	a92b      	add	r1, sp, #172	; 0xac
 80075be:	3d10      	subs	r5, #16
 80075c0:	460c      	mov	r4, r1
 80075c2:	e7e3      	b.n	800758c <_svfprintf_r+0x10ac>
 80075c4:	aa28      	add	r2, sp, #160	; 0xa0
 80075c6:	4649      	mov	r1, r9
 80075c8:	9807      	ldr	r0, [sp, #28]
 80075ca:	f001 fc2c 	bl	8008e26 <__ssprint_r>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f040 8162 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80075d4:	ac2b      	add	r4, sp, #172	; 0xac
 80075d6:	e770      	b.n	80074ba <_svfprintf_r+0xfda>
 80075d8:	2010      	movs	r0, #16
 80075da:	2b07      	cmp	r3, #7
 80075dc:	4402      	add	r2, r0
 80075de:	6060      	str	r0, [r4, #4]
 80075e0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80075e4:	dd08      	ble.n	80075f8 <_svfprintf_r+0x1118>
 80075e6:	aa28      	add	r2, sp, #160	; 0xa0
 80075e8:	4649      	mov	r1, r9
 80075ea:	9807      	ldr	r0, [sp, #28]
 80075ec:	f001 fc1b 	bl	8008e26 <__ssprint_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f040 8151 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80075f6:	a92b      	add	r1, sp, #172	; 0xac
 80075f8:	3d10      	subs	r5, #16
 80075fa:	460c      	mov	r4, r1
 80075fc:	e763      	b.n	80074c6 <_svfprintf_r+0xfe6>
 80075fe:	460c      	mov	r4, r1
 8007600:	e77b      	b.n	80074fa <_svfprintf_r+0x101a>
 8007602:	2f00      	cmp	r7, #0
 8007604:	d049      	beq.n	800769a <_svfprintf_r+0x11ba>
 8007606:	3f01      	subs	r7, #1
 8007608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800760a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007610:	6063      	str	r3, [r4, #4]
 8007612:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007614:	4413      	add	r3, r2
 8007616:	932a      	str	r3, [sp, #168]	; 0xa8
 8007618:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800761a:	3301      	adds	r3, #1
 800761c:	2b07      	cmp	r3, #7
 800761e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007620:	dc42      	bgt.n	80076a8 <_svfprintf_r+0x11c8>
 8007622:	3408      	adds	r4, #8
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	445b      	add	r3, fp
 8007628:	1b9a      	subs	r2, r3, r6
 800762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	4293      	cmp	r3, r2
 8007630:	bfa8      	it	ge
 8007632:	4613      	movge	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	461d      	mov	r5, r3
 8007638:	dd0a      	ble.n	8007650 <_svfprintf_r+0x1170>
 800763a:	e9c4 6300 	strd	r6, r3, [r4]
 800763e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007640:	442b      	add	r3, r5
 8007642:	932a      	str	r3, [sp, #168]	; 0xa8
 8007644:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007646:	3301      	adds	r3, #1
 8007648:	2b07      	cmp	r3, #7
 800764a:	9329      	str	r3, [sp, #164]	; 0xa4
 800764c:	dc36      	bgt.n	80076bc <_svfprintf_r+0x11dc>
 800764e:	3408      	adds	r4, #8
 8007650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007652:	2d00      	cmp	r5, #0
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	bfb4      	ite	lt
 8007658:	461d      	movlt	r5, r3
 800765a:	1b5d      	subge	r5, r3, r5
 800765c:	2d00      	cmp	r5, #0
 800765e:	dd18      	ble.n	8007692 <_svfprintf_r+0x11b2>
 8007660:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8007664:	482f      	ldr	r0, [pc, #188]	; (8007724 <_svfprintf_r+0x1244>)
 8007666:	2d10      	cmp	r5, #16
 8007668:	f102 0201 	add.w	r2, r2, #1
 800766c:	f104 0108 	add.w	r1, r4, #8
 8007670:	6020      	str	r0, [r4, #0]
 8007672:	dc2d      	bgt.n	80076d0 <_svfprintf_r+0x11f0>
 8007674:	442b      	add	r3, r5
 8007676:	2a07      	cmp	r2, #7
 8007678:	6065      	str	r5, [r4, #4]
 800767a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 800767e:	dd3a      	ble.n	80076f6 <_svfprintf_r+0x1216>
 8007680:	aa28      	add	r2, sp, #160	; 0xa0
 8007682:	4649      	mov	r1, r9
 8007684:	9807      	ldr	r0, [sp, #28]
 8007686:	f001 fbce 	bl	8008e26 <__ssprint_r>
 800768a:	2800      	cmp	r0, #0
 800768c:	f040 8104 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007690:	ac2b      	add	r4, sp, #172	; 0xac
 8007692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	441e      	add	r6, r3
 8007698:	e733      	b.n	8007502 <_svfprintf_r+0x1022>
 800769a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800769c:	3b01      	subs	r3, #1
 800769e:	930d      	str	r3, [sp, #52]	; 0x34
 80076a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a2:	3b01      	subs	r3, #1
 80076a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a6:	e7af      	b.n	8007608 <_svfprintf_r+0x1128>
 80076a8:	aa28      	add	r2, sp, #160	; 0xa0
 80076aa:	4649      	mov	r1, r9
 80076ac:	9807      	ldr	r0, [sp, #28]
 80076ae:	f001 fbba 	bl	8008e26 <__ssprint_r>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f040 80f0 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80076b8:	ac2b      	add	r4, sp, #172	; 0xac
 80076ba:	e7b3      	b.n	8007624 <_svfprintf_r+0x1144>
 80076bc:	aa28      	add	r2, sp, #160	; 0xa0
 80076be:	4649      	mov	r1, r9
 80076c0:	9807      	ldr	r0, [sp, #28]
 80076c2:	f001 fbb0 	bl	8008e26 <__ssprint_r>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 80e6 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80076cc:	ac2b      	add	r4, sp, #172	; 0xac
 80076ce:	e7bf      	b.n	8007650 <_svfprintf_r+0x1170>
 80076d0:	2010      	movs	r0, #16
 80076d2:	2a07      	cmp	r2, #7
 80076d4:	4403      	add	r3, r0
 80076d6:	6060      	str	r0, [r4, #4]
 80076d8:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80076dc:	dd08      	ble.n	80076f0 <_svfprintf_r+0x1210>
 80076de:	aa28      	add	r2, sp, #160	; 0xa0
 80076e0:	4649      	mov	r1, r9
 80076e2:	9807      	ldr	r0, [sp, #28]
 80076e4:	f001 fb9f 	bl	8008e26 <__ssprint_r>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f040 80d5 	bne.w	8007898 <_svfprintf_r+0x13b8>
 80076ee:	a92b      	add	r1, sp, #172	; 0xac
 80076f0:	3d10      	subs	r5, #16
 80076f2:	460c      	mov	r4, r1
 80076f4:	e7b4      	b.n	8007660 <_svfprintf_r+0x1180>
 80076f6:	460c      	mov	r4, r1
 80076f8:	e7cb      	b.n	8007692 <_svfprintf_r+0x11b2>
 80076fa:	aa28      	add	r2, sp, #160	; 0xa0
 80076fc:	4649      	mov	r1, r9
 80076fe:	9807      	ldr	r0, [sp, #28]
 8007700:	f001 fb91 	bl	8008e26 <__ssprint_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 80c7 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800770a:	ac2b      	add	r4, sp, #172	; 0xac
 800770c:	e719      	b.n	8007542 <_svfprintf_r+0x1062>
 800770e:	aa28      	add	r2, sp, #160	; 0xa0
 8007710:	4649      	mov	r1, r9
 8007712:	9807      	ldr	r0, [sp, #28]
 8007714:	f001 fb87 	bl	8008e26 <__ssprint_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	f040 80bd 	bne.w	8007898 <_svfprintf_r+0x13b8>
 800771e:	ac2b      	add	r4, sp, #172	; 0xac
 8007720:	e727      	b.n	8007572 <_svfprintf_r+0x1092>
 8007722:	bf00      	nop
 8007724:	080098c8 	.word	0x080098c8
 8007728:	9a08      	ldr	r2, [sp, #32]
 800772a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800772c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800772e:	2a01      	cmp	r2, #1
 8007730:	f105 0501 	add.w	r5, r5, #1
 8007734:	f103 0301 	add.w	r3, r3, #1
 8007738:	f104 0608 	add.w	r6, r4, #8
 800773c:	dc02      	bgt.n	8007744 <_svfprintf_r+0x1264>
 800773e:	f01a 0f01 	tst.w	sl, #1
 8007742:	d07d      	beq.n	8007840 <_svfprintf_r+0x1360>
 8007744:	2201      	movs	r2, #1
 8007746:	2b07      	cmp	r3, #7
 8007748:	f8c4 b000 	str.w	fp, [r4]
 800774c:	6062      	str	r2, [r4, #4]
 800774e:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8007752:	dd08      	ble.n	8007766 <_svfprintf_r+0x1286>
 8007754:	aa28      	add	r2, sp, #160	; 0xa0
 8007756:	4649      	mov	r1, r9
 8007758:	9807      	ldr	r0, [sp, #28]
 800775a:	f001 fb64 	bl	8008e26 <__ssprint_r>
 800775e:	2800      	cmp	r0, #0
 8007760:	f040 809a 	bne.w	8007898 <_svfprintf_r+0x13b8>
 8007764:	ae2b      	add	r6, sp, #172	; 0xac
 8007766:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800776a:	6033      	str	r3, [r6, #0]
 800776c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800776e:	6073      	str	r3, [r6, #4]
 8007770:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007772:	4413      	add	r3, r2
 8007774:	932a      	str	r3, [sp, #168]	; 0xa8
 8007776:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007778:	3301      	adds	r3, #1
 800777a:	2b07      	cmp	r3, #7
 800777c:	9329      	str	r3, [sp, #164]	; 0xa4
 800777e:	dc31      	bgt.n	80077e4 <_svfprintf_r+0x1304>
 8007780:	3608      	adds	r6, #8
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 8007788:	1e5c      	subs	r4, r3, #1
 800778a:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 800778e:	f7f9 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8007792:	2800      	cmp	r0, #0
 8007794:	d12f      	bne.n	80077f6 <_svfprintf_r+0x1316>
 8007796:	f10b 0301 	add.w	r3, fp, #1
 800779a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800779c:	e9c6 3400 	strd	r3, r4, [r6]
 80077a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80077a2:	9908      	ldr	r1, [sp, #32]
 80077a4:	3201      	adds	r2, #1
 80077a6:	3b01      	subs	r3, #1
 80077a8:	440b      	add	r3, r1
 80077aa:	2a07      	cmp	r2, #7
 80077ac:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
 80077b0:	dd4f      	ble.n	8007852 <_svfprintf_r+0x1372>
 80077b2:	aa28      	add	r2, sp, #160	; 0xa0
 80077b4:	4649      	mov	r1, r9
 80077b6:	9807      	ldr	r0, [sp, #28]
 80077b8:	f001 fb35 	bl	8008e26 <__ssprint_r>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d16b      	bne.n	8007898 <_svfprintf_r+0x13b8>
 80077c0:	ae2b      	add	r6, sp, #172	; 0xac
 80077c2:	ab24      	add	r3, sp, #144	; 0x90
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80077ca:	6073      	str	r3, [r6, #4]
 80077cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80077ce:	4413      	add	r3, r2
 80077d0:	932a      	str	r3, [sp, #168]	; 0xa8
 80077d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80077d4:	3301      	adds	r3, #1
 80077d6:	2b07      	cmp	r3, #7
 80077d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80077da:	f73f adb3 	bgt.w	8007344 <_svfprintf_r+0xe64>
 80077de:	f106 0408 	add.w	r4, r6, #8
 80077e2:	e413      	b.n	800700c <_svfprintf_r+0xb2c>
 80077e4:	aa28      	add	r2, sp, #160	; 0xa0
 80077e6:	4649      	mov	r1, r9
 80077e8:	9807      	ldr	r0, [sp, #28]
 80077ea:	f001 fb1c 	bl	8008e26 <__ssprint_r>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d152      	bne.n	8007898 <_svfprintf_r+0x13b8>
 80077f2:	ae2b      	add	r6, sp, #172	; 0xac
 80077f4:	e7c5      	b.n	8007782 <_svfprintf_r+0x12a2>
 80077f6:	2c00      	cmp	r4, #0
 80077f8:	dde3      	ble.n	80077c2 <_svfprintf_r+0x12e2>
 80077fa:	2710      	movs	r7, #16
 80077fc:	4d3d      	ldr	r5, [pc, #244]	; (80078f4 <_svfprintf_r+0x1414>)
 80077fe:	2c10      	cmp	r4, #16
 8007800:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007804:	f106 0108 	add.w	r1, r6, #8
 8007808:	f103 0301 	add.w	r3, r3, #1
 800780c:	6035      	str	r5, [r6, #0]
 800780e:	dc07      	bgt.n	8007820 <_svfprintf_r+0x1340>
 8007810:	6074      	str	r4, [r6, #4]
 8007812:	2b07      	cmp	r3, #7
 8007814:	4414      	add	r4, r2
 8007816:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 800781a:	dcca      	bgt.n	80077b2 <_svfprintf_r+0x12d2>
 800781c:	460e      	mov	r6, r1
 800781e:	e7d0      	b.n	80077c2 <_svfprintf_r+0x12e2>
 8007820:	3210      	adds	r2, #16
 8007822:	2b07      	cmp	r3, #7
 8007824:	6077      	str	r7, [r6, #4]
 8007826:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800782a:	dd06      	ble.n	800783a <_svfprintf_r+0x135a>
 800782c:	aa28      	add	r2, sp, #160	; 0xa0
 800782e:	4649      	mov	r1, r9
 8007830:	9807      	ldr	r0, [sp, #28]
 8007832:	f001 faf8 	bl	8008e26 <__ssprint_r>
 8007836:	bb78      	cbnz	r0, 8007898 <_svfprintf_r+0x13b8>
 8007838:	a92b      	add	r1, sp, #172	; 0xac
 800783a:	3c10      	subs	r4, #16
 800783c:	460e      	mov	r6, r1
 800783e:	e7de      	b.n	80077fe <_svfprintf_r+0x131e>
 8007840:	2201      	movs	r2, #1
 8007842:	2b07      	cmp	r3, #7
 8007844:	f8c4 b000 	str.w	fp, [r4]
 8007848:	6062      	str	r2, [r4, #4]
 800784a:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 800784e:	ddb8      	ble.n	80077c2 <_svfprintf_r+0x12e2>
 8007850:	e7af      	b.n	80077b2 <_svfprintf_r+0x12d2>
 8007852:	3608      	adds	r6, #8
 8007854:	e7b5      	b.n	80077c2 <_svfprintf_r+0x12e2>
 8007856:	460c      	mov	r4, r1
 8007858:	f7ff bbd8 	b.w	800700c <_svfprintf_r+0xb2c>
 800785c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800785e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007860:	1a9d      	subs	r5, r3, r2
 8007862:	2d00      	cmp	r5, #0
 8007864:	f77f abd6 	ble.w	8007014 <_svfprintf_r+0xb34>
 8007868:	2710      	movs	r7, #16
 800786a:	4e23      	ldr	r6, [pc, #140]	; (80078f8 <_svfprintf_r+0x1418>)
 800786c:	2d10      	cmp	r5, #16
 800786e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007872:	6026      	str	r6, [r4, #0]
 8007874:	f103 0301 	add.w	r3, r3, #1
 8007878:	dc18      	bgt.n	80078ac <_svfprintf_r+0x13cc>
 800787a:	6065      	str	r5, [r4, #4]
 800787c:	2b07      	cmp	r3, #7
 800787e:	4415      	add	r5, r2
 8007880:	e9cd 3529 	strd	r3, r5, [sp, #164]	; 0xa4
 8007884:	f77f abc6 	ble.w	8007014 <_svfprintf_r+0xb34>
 8007888:	aa28      	add	r2, sp, #160	; 0xa0
 800788a:	4649      	mov	r1, r9
 800788c:	9807      	ldr	r0, [sp, #28]
 800788e:	f001 faca 	bl	8008e26 <__ssprint_r>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f abbe 	beq.w	8007014 <_svfprintf_r+0xb34>
 8007898:	f1b8 0f00 	cmp.w	r8, #0
 800789c:	f43f a8a9 	beq.w	80069f2 <_svfprintf_r+0x512>
 80078a0:	4641      	mov	r1, r8
 80078a2:	9807      	ldr	r0, [sp, #28]
 80078a4:	f000 fee2 	bl	800866c <_free_r>
 80078a8:	f7ff b8a3 	b.w	80069f2 <_svfprintf_r+0x512>
 80078ac:	3210      	adds	r2, #16
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	6067      	str	r7, [r4, #4]
 80078b2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80078b6:	dc02      	bgt.n	80078be <_svfprintf_r+0x13de>
 80078b8:	3408      	adds	r4, #8
 80078ba:	3d10      	subs	r5, #16
 80078bc:	e7d6      	b.n	800786c <_svfprintf_r+0x138c>
 80078be:	aa28      	add	r2, sp, #160	; 0xa0
 80078c0:	4649      	mov	r1, r9
 80078c2:	9807      	ldr	r0, [sp, #28]
 80078c4:	f001 faaf 	bl	8008e26 <__ssprint_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1e5      	bne.n	8007898 <_svfprintf_r+0x13b8>
 80078cc:	ac2b      	add	r4, sp, #172	; 0xac
 80078ce:	e7f4      	b.n	80078ba <_svfprintf_r+0x13da>
 80078d0:	4641      	mov	r1, r8
 80078d2:	9807      	ldr	r0, [sp, #28]
 80078d4:	f000 feca 	bl	800866c <_free_r>
 80078d8:	f7ff bbb4 	b.w	8007044 <_svfprintf_r+0xb64>
 80078dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f43f a887 	beq.w	80069f2 <_svfprintf_r+0x512>
 80078e4:	aa28      	add	r2, sp, #160	; 0xa0
 80078e6:	4649      	mov	r1, r9
 80078e8:	9807      	ldr	r0, [sp, #28]
 80078ea:	f001 fa9c 	bl	8008e26 <__ssprint_r>
 80078ee:	f7ff b880 	b.w	80069f2 <_svfprintf_r+0x512>
 80078f2:	bf00      	nop
 80078f4:	080098c8 	.word	0x080098c8
 80078f8:	080098b8 	.word	0x080098b8

080078fc <sysconf>:
 80078fc:	2808      	cmp	r0, #8
 80078fe:	b508      	push	{r3, lr}
 8007900:	d006      	beq.n	8007910 <sysconf+0x14>
 8007902:	f7fe faf3 	bl	8005eec <__errno>
 8007906:	2316      	movs	r3, #22
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790e:	bd08      	pop	{r3, pc}
 8007910:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007914:	e7fb      	b.n	800790e <sysconf+0x12>
	...

08007918 <register_fini>:
 8007918:	4b02      	ldr	r3, [pc, #8]	; (8007924 <register_fini+0xc>)
 800791a:	b113      	cbz	r3, 8007922 <register_fini+0xa>
 800791c:	4802      	ldr	r0, [pc, #8]	; (8007928 <register_fini+0x10>)
 800791e:	f000 b805 	b.w	800792c <atexit>
 8007922:	4770      	bx	lr
 8007924:	00000000 	.word	0x00000000
 8007928:	0800859d 	.word	0x0800859d

0800792c <atexit>:
 800792c:	2300      	movs	r3, #0
 800792e:	4601      	mov	r1, r0
 8007930:	461a      	mov	r2, r3
 8007932:	4618      	mov	r0, r3
 8007934:	f001 baf0 	b.w	8008f18 <__register_exitproc>

08007938 <quorem>:
 8007938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	6903      	ldr	r3, [r0, #16]
 800793e:	690c      	ldr	r4, [r1, #16]
 8007940:	4680      	mov	r8, r0
 8007942:	42a3      	cmp	r3, r4
 8007944:	f2c0 8084 	blt.w	8007a50 <quorem+0x118>
 8007948:	3c01      	subs	r4, #1
 800794a:	f101 0714 	add.w	r7, r1, #20
 800794e:	f100 0614 	add.w	r6, r0, #20
 8007952:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007956:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800795a:	3501      	adds	r5, #1
 800795c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007960:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007964:	eb06 030c 	add.w	r3, r6, ip
 8007968:	eb07 090c 	add.w	r9, r7, ip
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	b39d      	cbz	r5, 80079d8 <quorem+0xa0>
 8007970:	f04f 0a00 	mov.w	sl, #0
 8007974:	4638      	mov	r0, r7
 8007976:	46b6      	mov	lr, r6
 8007978:	46d3      	mov	fp, sl
 800797a:	f850 2b04 	ldr.w	r2, [r0], #4
 800797e:	b293      	uxth	r3, r2
 8007980:	fb05 a303 	mla	r3, r5, r3, sl
 8007984:	0c12      	lsrs	r2, r2, #16
 8007986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800798a:	fb05 a202 	mla	r2, r5, r2, sl
 800798e:	b29b      	uxth	r3, r3
 8007990:	ebab 0303 	sub.w	r3, fp, r3
 8007994:	f8de b000 	ldr.w	fp, [lr]
 8007998:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800799c:	fa1f fb8b 	uxth.w	fp, fp
 80079a0:	445b      	add	r3, fp
 80079a2:	fa1f fb82 	uxth.w	fp, r2
 80079a6:	f8de 2000 	ldr.w	r2, [lr]
 80079aa:	4581      	cmp	r9, r0
 80079ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80079b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80079be:	f84e 3b04 	str.w	r3, [lr], #4
 80079c2:	d2da      	bcs.n	800797a <quorem+0x42>
 80079c4:	f856 300c 	ldr.w	r3, [r6, ip]
 80079c8:	b933      	cbnz	r3, 80079d8 <quorem+0xa0>
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	3b04      	subs	r3, #4
 80079ce:	429e      	cmp	r6, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	d331      	bcc.n	8007a38 <quorem+0x100>
 80079d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80079d8:	4640      	mov	r0, r8
 80079da:	f001 f915 	bl	8008c08 <__mcmp>
 80079de:	2800      	cmp	r0, #0
 80079e0:	db26      	blt.n	8007a30 <quorem+0xf8>
 80079e2:	4630      	mov	r0, r6
 80079e4:	f04f 0c00 	mov.w	ip, #0
 80079e8:	3501      	adds	r5, #1
 80079ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80079ee:	f8d0 e000 	ldr.w	lr, [r0]
 80079f2:	b28b      	uxth	r3, r1
 80079f4:	ebac 0303 	sub.w	r3, ip, r3
 80079f8:	fa1f f28e 	uxth.w	r2, lr
 80079fc:	4413      	add	r3, r2
 80079fe:	0c0a      	lsrs	r2, r1, #16
 8007a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0e:	45b9      	cmp	r9, r7
 8007a10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a14:	f840 3b04 	str.w	r3, [r0], #4
 8007a18:	d2e7      	bcs.n	80079ea <quorem+0xb2>
 8007a1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a22:	b92a      	cbnz	r2, 8007a30 <quorem+0xf8>
 8007a24:	3b04      	subs	r3, #4
 8007a26:	429e      	cmp	r6, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	d30b      	bcc.n	8007a44 <quorem+0x10c>
 8007a2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a30:	4628      	mov	r0, r5
 8007a32:	b003      	add	sp, #12
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	d1c9      	bne.n	80079d4 <quorem+0x9c>
 8007a40:	3c01      	subs	r4, #1
 8007a42:	e7c4      	b.n	80079ce <quorem+0x96>
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	3b04      	subs	r3, #4
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d1ef      	bne.n	8007a2c <quorem+0xf4>
 8007a4c:	3c01      	subs	r4, #1
 8007a4e:	e7ea      	b.n	8007a26 <quorem+0xee>
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7ee      	b.n	8007a32 <quorem+0xfa>
 8007a54:	0000      	movs	r0, r0
	...

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	461f      	mov	r7, r3
 8007a60:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a62:	b095      	sub	sp, #84	; 0x54
 8007a64:	4604      	mov	r4, r0
 8007a66:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007a68:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a6c:	b141      	cbz	r1, 8007a80 <_dtoa_r+0x28>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a72:	4093      	lsls	r3, r2
 8007a74:	608b      	str	r3, [r1, #8]
 8007a76:	604a      	str	r2, [r1, #4]
 8007a78:	f000 ff02 	bl	8008880 <_Bfree>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6423      	str	r3, [r4, #64]	; 0x40
 8007a80:	1e3b      	subs	r3, r7, #0
 8007a82:	bfaf      	iteee	ge
 8007a84:	2300      	movge	r3, #0
 8007a86:	2201      	movlt	r2, #1
 8007a88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a8c:	9303      	strlt	r3, [sp, #12]
 8007a8e:	bfa8      	it	ge
 8007a90:	602b      	strge	r3, [r5, #0]
 8007a92:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a96:	4bb0      	ldr	r3, [pc, #704]	; (8007d58 <_dtoa_r+0x300>)
 8007a98:	bfb8      	it	lt
 8007a9a:	602a      	strlt	r2, [r5, #0]
 8007a9c:	ea33 0308 	bics.w	r3, r3, r8
 8007aa0:	d116      	bne.n	8007ad0 <_dtoa_r+0x78>
 8007aa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007aa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	9b02      	ldr	r3, [sp, #8]
 8007aac:	b923      	cbnz	r3, 8007ab8 <_dtoa_r+0x60>
 8007aae:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f000 853f 	beq.w	8008536 <_dtoa_r+0xade>
 8007ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aba:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8007d6c <_dtoa_r+0x314>
 8007abe:	b11b      	cbz	r3, 8007ac8 <_dtoa_r+0x70>
 8007ac0:	f10b 0303 	add.w	r3, fp, #3
 8007ac4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4658      	mov	r0, fp
 8007aca:	b015      	add	sp, #84	; 0x54
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f8 ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ae0:	4682      	mov	sl, r0
 8007ae2:	b160      	cbz	r0, 8007afe <_dtoa_r+0xa6>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 851e 	beq.w	800852e <_dtoa_r+0xad6>
 8007af2:	4b9a      	ldr	r3, [pc, #616]	; (8007d5c <_dtoa_r+0x304>)
 8007af4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007af6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e7e4      	b.n	8007ac8 <_dtoa_r+0x70>
 8007afe:	ab12      	add	r3, sp, #72	; 0x48
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	ab13      	add	r3, sp, #76	; 0x4c
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4632      	mov	r2, r6
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f001 f8f4 	bl	8008cf8 <__d2b>
 8007b10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b14:	9006      	str	r0, [sp, #24]
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	d07d      	beq.n	8007c16 <_dtoa_r+0x1be>
 8007b1a:	46b0      	mov	r8, r6
 8007b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007b24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007b28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007b30:	2200      	movs	r2, #0
 8007b32:	4b8b      	ldr	r3, [pc, #556]	; (8007d60 <_dtoa_r+0x308>)
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f8 fb16 	bl	8000168 <__aeabi_dsub>
 8007b3c:	a380      	add	r3, pc, #512	; (adr r3, 8007d40 <_dtoa_r+0x2e8>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fcc9 	bl	80004d8 <__aeabi_dmul>
 8007b46:	a380      	add	r3, pc, #512	; (adr r3, 8007d48 <_dtoa_r+0x2f0>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 fb0e 	bl	800016c <__adddf3>
 8007b50:	4606      	mov	r6, r0
 8007b52:	4628      	mov	r0, r5
 8007b54:	460f      	mov	r7, r1
 8007b56:	f7f8 fc55 	bl	8000404 <__aeabi_i2d>
 8007b5a:	a37d      	add	r3, pc, #500	; (adr r3, 8007d50 <_dtoa_r+0x2f8>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fcba 	bl	80004d8 <__aeabi_dmul>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 fafe 	bl	800016c <__adddf3>
 8007b70:	4606      	mov	r6, r0
 8007b72:	460f      	mov	r7, r1
 8007b74:	f7f8 ff60 	bl	8000a38 <__aeabi_d2iz>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 ff1b 	bl	80009bc <__aeabi_dcmplt>
 8007b86:	b148      	cbz	r0, 8007b9c <_dtoa_r+0x144>
 8007b88:	4650      	mov	r0, sl
 8007b8a:	f7f8 fc3b 	bl	8000404 <__aeabi_i2d>
 8007b8e:	4632      	mov	r2, r6
 8007b90:	463b      	mov	r3, r7
 8007b92:	f7f8 ff09 	bl	80009a8 <__aeabi_dcmpeq>
 8007b96:	b908      	cbnz	r0, 8007b9c <_dtoa_r+0x144>
 8007b98:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b9c:	f1ba 0f16 	cmp.w	sl, #22
 8007ba0:	d85a      	bhi.n	8007c58 <_dtoa_r+0x200>
 8007ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba6:	496f      	ldr	r1, [pc, #444]	; (8007d64 <_dtoa_r+0x30c>)
 8007ba8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb0:	f7f8 ff22 	bl	80009f8 <__aeabi_dcmpgt>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d051      	beq.n	8007c5c <_dtoa_r+0x204>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bc2:	1b5d      	subs	r5, r3, r5
 8007bc4:	1e6b      	subs	r3, r5, #1
 8007bc6:	9307      	str	r3, [sp, #28]
 8007bc8:	bf43      	ittte	mi
 8007bca:	2300      	movmi	r3, #0
 8007bcc:	f1c5 0901 	rsbmi	r9, r5, #1
 8007bd0:	9307      	strmi	r3, [sp, #28]
 8007bd2:	f04f 0900 	movpl.w	r9, #0
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	db41      	blt.n	8007c60 <_dtoa_r+0x208>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007be2:	4453      	add	r3, sl
 8007be4:	9307      	str	r3, [sp, #28]
 8007be6:	2300      	movs	r3, #0
 8007be8:	9308      	str	r3, [sp, #32]
 8007bea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	f200 808c 	bhi.w	8007d0a <_dtoa_r+0x2b2>
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	bfc4      	itt	gt
 8007bf6:	3b04      	subgt	r3, #4
 8007bf8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bfc:	bfc8      	it	gt
 8007bfe:	2500      	movgt	r5, #0
 8007c00:	f1a3 0302 	sub.w	r3, r3, #2
 8007c04:	bfd8      	it	le
 8007c06:	2501      	movle	r5, #1
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	f200 808a 	bhi.w	8007d22 <_dtoa_r+0x2ca>
 8007c0e:	e8df f003 	tbb	[pc, r3]
 8007c12:	7a78      	.short	0x7a78
 8007c14:	6c2f      	.short	0x6c2f
 8007c16:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c1a:	441d      	add	r5, r3
 8007c1c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007c20:	2820      	cmp	r0, #32
 8007c22:	dd13      	ble.n	8007c4c <_dtoa_r+0x1f4>
 8007c24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	fa08 f800 	lsl.w	r8, r8, r0
 8007c2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007c32:	fa23 f000 	lsr.w	r0, r3, r0
 8007c36:	ea48 0000 	orr.w	r0, r8, r0
 8007c3a:	f7f8 fbd3 	bl	80003e4 <__aeabi_ui2d>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4680      	mov	r8, r0
 8007c42:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007c46:	3d01      	subs	r5, #1
 8007c48:	9310      	str	r3, [sp, #64]	; 0x40
 8007c4a:	e771      	b.n	8007b30 <_dtoa_r+0xd8>
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	f1c0 0020 	rsb	r0, r0, #32
 8007c52:	fa03 f000 	lsl.w	r0, r3, r0
 8007c56:	e7f0      	b.n	8007c3a <_dtoa_r+0x1e2>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7b0      	b.n	8007bbe <_dtoa_r+0x166>
 8007c5c:	900d      	str	r0, [sp, #52]	; 0x34
 8007c5e:	e7af      	b.n	8007bc0 <_dtoa_r+0x168>
 8007c60:	f1ca 0300 	rsb	r3, sl, #0
 8007c64:	9308      	str	r3, [sp, #32]
 8007c66:	2300      	movs	r3, #0
 8007c68:	eba9 090a 	sub.w	r9, r9, sl
 8007c6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c6e:	e7bc      	b.n	8007bea <_dtoa_r+0x192>
 8007c70:	2301      	movs	r3, #1
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd56      	ble.n	8007d28 <_dtoa_r+0x2d0>
 8007c7a:	4698      	mov	r8, r3
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	6462      	str	r2, [r4, #68]	; 0x44
 8007c82:	2204      	movs	r2, #4
 8007c84:	f102 0014 	add.w	r0, r2, #20
 8007c88:	4298      	cmp	r0, r3
 8007c8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c8c:	d951      	bls.n	8007d32 <_dtoa_r+0x2da>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 fdd1 	bl	8008836 <_Balloc>
 8007c94:	f1b8 0f0e 	cmp.w	r8, #14
 8007c98:	4683      	mov	fp, r0
 8007c9a:	6420      	str	r0, [r4, #64]	; 0x40
 8007c9c:	f200 80ed 	bhi.w	8007e7a <_dtoa_r+0x422>
 8007ca0:	2d00      	cmp	r5, #0
 8007ca2:	f000 80ea 	beq.w	8007e7a <_dtoa_r+0x422>
 8007ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007caa:	f1ba 0f00 	cmp.w	sl, #0
 8007cae:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007cb2:	dd77      	ble.n	8007da4 <_dtoa_r+0x34c>
 8007cb4:	4a2b      	ldr	r2, [pc, #172]	; (8007d64 <_dtoa_r+0x30c>)
 8007cb6:	f00a 030f 	and.w	r3, sl, #15
 8007cba:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007cbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cc2:	06f0      	lsls	r0, r6, #27
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007ccc:	d568      	bpl.n	8007da0 <_dtoa_r+0x348>
 8007cce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007cd2:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <_dtoa_r+0x310>)
 8007cd4:	2503      	movs	r5, #3
 8007cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cda:	f7f8 fd27 	bl	800072c <__aeabi_ddiv>
 8007cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce2:	f006 060f 	and.w	r6, r6, #15
 8007ce6:	4f20      	ldr	r7, [pc, #128]	; (8007d68 <_dtoa_r+0x310>)
 8007ce8:	e04f      	b.n	8007d8a <_dtoa_r+0x332>
 8007cea:	2301      	movs	r3, #1
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cf0:	4453      	add	r3, sl
 8007cf2:	f103 0801 	add.w	r8, r3, #1
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	4643      	mov	r3, r8
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	bfb8      	it	lt
 8007cfe:	2301      	movlt	r3, #1
 8007d00:	e7bd      	b.n	8007c7e <_dtoa_r+0x226>
 8007d02:	2300      	movs	r3, #0
 8007d04:	e7b5      	b.n	8007c72 <_dtoa_r+0x21a>
 8007d06:	2300      	movs	r3, #0
 8007d08:	e7f0      	b.n	8007cec <_dtoa_r+0x294>
 8007d0a:	2501      	movs	r5, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9509      	str	r5, [sp, #36]	; 0x24
 8007d10:	931e      	str	r3, [sp, #120]	; 0x78
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d16:	2200      	movs	r2, #0
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	4698      	mov	r8, r3
 8007d1c:	2312      	movs	r3, #18
 8007d1e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d20:	e7ad      	b.n	8007c7e <_dtoa_r+0x226>
 8007d22:	2301      	movs	r3, #1
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	e7f4      	b.n	8007d12 <_dtoa_r+0x2ba>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	4698      	mov	r8, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	e7f5      	b.n	8007d1e <_dtoa_r+0x2c6>
 8007d32:	3101      	adds	r1, #1
 8007d34:	6461      	str	r1, [r4, #68]	; 0x44
 8007d36:	0052      	lsls	r2, r2, #1
 8007d38:	e7a4      	b.n	8007c84 <_dtoa_r+0x22c>
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w
 8007d40:	636f4361 	.word	0x636f4361
 8007d44:	3fd287a7 	.word	0x3fd287a7
 8007d48:	8b60c8b3 	.word	0x8b60c8b3
 8007d4c:	3fc68a28 	.word	0x3fc68a28
 8007d50:	509f79fb 	.word	0x509f79fb
 8007d54:	3fd34413 	.word	0x3fd34413
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	080098b7 	.word	0x080098b7
 8007d60:	3ff80000 	.word	0x3ff80000
 8007d64:	08009910 	.word	0x08009910
 8007d68:	080098e8 	.word	0x080098e8
 8007d6c:	080098e1 	.word	0x080098e1
 8007d70:	07f1      	lsls	r1, r6, #31
 8007d72:	d508      	bpl.n	8007d86 <_dtoa_r+0x32e>
 8007d74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d84:	3501      	adds	r5, #1
 8007d86:	1076      	asrs	r6, r6, #1
 8007d88:	3708      	adds	r7, #8
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d1f0      	bne.n	8007d70 <_dtoa_r+0x318>
 8007d8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d96:	f7f8 fcc9 	bl	800072c <__aeabi_ddiv>
 8007d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d9e:	e01b      	b.n	8007dd8 <_dtoa_r+0x380>
 8007da0:	2502      	movs	r5, #2
 8007da2:	e7a0      	b.n	8007ce6 <_dtoa_r+0x28e>
 8007da4:	f000 80a4 	beq.w	8007ef0 <_dtoa_r+0x498>
 8007da8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007dac:	f1ca 0600 	rsb	r6, sl, #0
 8007db0:	4ba0      	ldr	r3, [pc, #640]	; (8008034 <_dtoa_r+0x5dc>)
 8007db2:	f006 020f 	and.w	r2, r6, #15
 8007db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fb8b 	bl	80004d8 <__aeabi_dmul>
 8007dc2:	2502      	movs	r5, #2
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dca:	4f9b      	ldr	r7, [pc, #620]	; (8008038 <_dtoa_r+0x5e0>)
 8007dcc:	1136      	asrs	r6, r6, #4
 8007dce:	2e00      	cmp	r6, #0
 8007dd0:	f040 8083 	bne.w	8007eda <_dtoa_r+0x482>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e0      	bne.n	8007d9a <_dtoa_r+0x342>
 8007dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 808a 	beq.w	8007ef4 <_dtoa_r+0x49c>
 8007de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007de4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dec:	2200      	movs	r2, #0
 8007dee:	4b93      	ldr	r3, [pc, #588]	; (800803c <_dtoa_r+0x5e4>)
 8007df0:	f7f8 fde4 	bl	80009bc <__aeabi_dcmplt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d07d      	beq.n	8007ef4 <_dtoa_r+0x49c>
 8007df8:	f1b8 0f00 	cmp.w	r8, #0
 8007dfc:	d07a      	beq.n	8007ef4 <_dtoa_r+0x49c>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dd36      	ble.n	8007e72 <_dtoa_r+0x41a>
 8007e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4b8d      	ldr	r3, [pc, #564]	; (8008040 <_dtoa_r+0x5e8>)
 8007e0c:	f7f8 fb64 	bl	80004d8 <__aeabi_dmul>
 8007e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e14:	9e04      	ldr	r6, [sp, #16]
 8007e16:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007e1a:	3501      	adds	r5, #1
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7f8 faf1 	bl	8000404 <__aeabi_i2d>
 8007e22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e26:	f7f8 fb57 	bl	80004d8 <__aeabi_dmul>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4b85      	ldr	r3, [pc, #532]	; (8008044 <_dtoa_r+0x5ec>)
 8007e2e:	f7f8 f99d 	bl	800016c <__adddf3>
 8007e32:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007e36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e3a:	950b      	str	r5, [sp, #44]	; 0x2c
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	d15c      	bne.n	8007efa <_dtoa_r+0x4a2>
 8007e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	4b80      	ldr	r3, [pc, #512]	; (8008048 <_dtoa_r+0x5f0>)
 8007e48:	f7f8 f98e 	bl	8000168 <__aeabi_dsub>
 8007e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e4e:	462b      	mov	r3, r5
 8007e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e54:	f7f8 fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f040 8282 	bne.w	8008362 <_dtoa_r+0x90a>
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e64:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007e68:	f7f8 fda8 	bl	80009bc <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f040 8276 	bne.w	800835e <_dtoa_r+0x906>
 8007e72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f2c0 814c 	blt.w	800811a <_dtoa_r+0x6c2>
 8007e82:	f1ba 0f0e 	cmp.w	sl, #14
 8007e86:	f300 8148 	bgt.w	800811a <_dtoa_r+0x6c2>
 8007e8a:	4b6a      	ldr	r3, [pc, #424]	; (8008034 <_dtoa_r+0x5dc>)
 8007e8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f280 80d8 	bge.w	8008050 <_dtoa_r+0x5f8>
 8007ea0:	f1b8 0f00 	cmp.w	r8, #0
 8007ea4:	f300 80d4 	bgt.w	8008050 <_dtoa_r+0x5f8>
 8007ea8:	f040 8258 	bne.w	800835c <_dtoa_r+0x904>
 8007eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4b65      	ldr	r3, [pc, #404]	; (8008048 <_dtoa_r+0x5f0>)
 8007eb4:	f7f8 fb10 	bl	80004d8 <__aeabi_dmul>
 8007eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebc:	f7f8 fd92 	bl	80009e4 <__aeabi_dcmpge>
 8007ec0:	4646      	mov	r6, r8
 8007ec2:	4647      	mov	r7, r8
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 822e 	bne.w	8008326 <_dtoa_r+0x8ce>
 8007eca:	2331      	movs	r3, #49	; 0x31
 8007ecc:	f10b 0501 	add.w	r5, fp, #1
 8007ed0:	f88b 3000 	strb.w	r3, [fp]
 8007ed4:	f10a 0a01 	add.w	sl, sl, #1
 8007ed8:	e229      	b.n	800832e <_dtoa_r+0x8d6>
 8007eda:	07f2      	lsls	r2, r6, #31
 8007edc:	d505      	bpl.n	8007eea <_dtoa_r+0x492>
 8007ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee2:	f7f8 faf9 	bl	80004d8 <__aeabi_dmul>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	3501      	adds	r5, #1
 8007eea:	1076      	asrs	r6, r6, #1
 8007eec:	3708      	adds	r7, #8
 8007eee:	e76e      	b.n	8007dce <_dtoa_r+0x376>
 8007ef0:	2502      	movs	r5, #2
 8007ef2:	e771      	b.n	8007dd8 <_dtoa_r+0x380>
 8007ef4:	4657      	mov	r7, sl
 8007ef6:	4646      	mov	r6, r8
 8007ef8:	e790      	b.n	8007e1c <_dtoa_r+0x3c4>
 8007efa:	4b4e      	ldr	r3, [pc, #312]	; (8008034 <_dtoa_r+0x5dc>)
 8007efc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f00:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d048      	beq.n	8007f9c <_dtoa_r+0x544>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	2000      	movs	r0, #0
 8007f10:	494e      	ldr	r1, [pc, #312]	; (800804c <_dtoa_r+0x5f4>)
 8007f12:	f7f8 fc0b 	bl	800072c <__aeabi_ddiv>
 8007f16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f1a:	f7f8 f925 	bl	8000168 <__aeabi_dsub>
 8007f1e:	465d      	mov	r5, fp
 8007f20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f28:	f7f8 fd86 	bl	8000a38 <__aeabi_d2iz>
 8007f2c:	9011      	str	r0, [sp, #68]	; 0x44
 8007f2e:	f7f8 fa69 	bl	8000404 <__aeabi_i2d>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3a:	f7f8 f915 	bl	8000168 <__aeabi_dsub>
 8007f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f44:	3330      	adds	r3, #48	; 0x30
 8007f46:	f805 3b01 	strb.w	r3, [r5], #1
 8007f4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f4e:	f7f8 fd35 	bl	80009bc <__aeabi_dcmplt>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d163      	bne.n	800801e <_dtoa_r+0x5c6>
 8007f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4937      	ldr	r1, [pc, #220]	; (800803c <_dtoa_r+0x5e4>)
 8007f5e:	f7f8 f903 	bl	8000168 <__aeabi_dsub>
 8007f62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f66:	f7f8 fd29 	bl	80009bc <__aeabi_dcmplt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f040 80b6 	bne.w	80080dc <_dtoa_r+0x684>
 8007f70:	eba5 030b 	sub.w	r3, r5, fp
 8007f74:	429e      	cmp	r6, r3
 8007f76:	f77f af7c 	ble.w	8007e72 <_dtoa_r+0x41a>
 8007f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b2f      	ldr	r3, [pc, #188]	; (8008040 <_dtoa_r+0x5e8>)
 8007f82:	f7f8 faa9 	bl	80004d8 <__aeabi_dmul>
 8007f86:	2200      	movs	r2, #0
 8007f88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f90:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <_dtoa_r+0x5e8>)
 8007f92:	f7f8 faa1 	bl	80004d8 <__aeabi_dmul>
 8007f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f9a:	e7c3      	b.n	8007f24 <_dtoa_r+0x4cc>
 8007f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fa0:	f7f8 fa9a 	bl	80004d8 <__aeabi_dmul>
 8007fa4:	eb0b 0506 	add.w	r5, fp, r6
 8007fa8:	465e      	mov	r6, fp
 8007faa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb2:	f7f8 fd41 	bl	8000a38 <__aeabi_d2iz>
 8007fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8007fb8:	f7f8 fa24 	bl	8000404 <__aeabi_i2d>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc4:	f7f8 f8d0 	bl	8000168 <__aeabi_dsub>
 8007fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fce:	3330      	adds	r3, #48	; 0x30
 8007fd0:	f806 3b01 	strb.w	r3, [r6], #1
 8007fd4:	42ae      	cmp	r6, r5
 8007fd6:	f04f 0200 	mov.w	r2, #0
 8007fda:	d124      	bne.n	8008026 <_dtoa_r+0x5ce>
 8007fdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fe0:	4b1a      	ldr	r3, [pc, #104]	; (800804c <_dtoa_r+0x5f4>)
 8007fe2:	f7f8 f8c3 	bl	800016c <__adddf3>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fee:	f7f8 fd03 	bl	80009f8 <__aeabi_dcmpgt>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d172      	bne.n	80080dc <_dtoa_r+0x684>
 8007ff6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4913      	ldr	r1, [pc, #76]	; (800804c <_dtoa_r+0x5f4>)
 8007ffe:	f7f8 f8b3 	bl	8000168 <__aeabi_dsub>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800a:	f7f8 fcd7 	bl	80009bc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f43f af2f 	beq.w	8007e72 <_dtoa_r+0x41a>
 8008014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008018:	1e6a      	subs	r2, r5, #1
 800801a:	2b30      	cmp	r3, #48	; 0x30
 800801c:	d001      	beq.n	8008022 <_dtoa_r+0x5ca>
 800801e:	46ba      	mov	sl, r7
 8008020:	e04b      	b.n	80080ba <_dtoa_r+0x662>
 8008022:	4615      	mov	r5, r2
 8008024:	e7f6      	b.n	8008014 <_dtoa_r+0x5bc>
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <_dtoa_r+0x5e8>)
 8008028:	f7f8 fa56 	bl	80004d8 <__aeabi_dmul>
 800802c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008030:	e7bd      	b.n	8007fae <_dtoa_r+0x556>
 8008032:	bf00      	nop
 8008034:	08009910 	.word	0x08009910
 8008038:	080098e8 	.word	0x080098e8
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	40240000 	.word	0x40240000
 8008044:	401c0000 	.word	0x401c0000
 8008048:	40140000 	.word	0x40140000
 800804c:	3fe00000 	.word	0x3fe00000
 8008050:	465d      	mov	r5, fp
 8008052:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fb65 	bl	800072c <__aeabi_ddiv>
 8008062:	f7f8 fce9 	bl	8000a38 <__aeabi_d2iz>
 8008066:	4681      	mov	r9, r0
 8008068:	f7f8 f9cc 	bl	8000404 <__aeabi_i2d>
 800806c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008070:	f7f8 fa32 	bl	80004d8 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 f874 	bl	8000168 <__aeabi_dsub>
 8008080:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008084:	f805 6b01 	strb.w	r6, [r5], #1
 8008088:	eba5 060b 	sub.w	r6, r5, fp
 800808c:	45b0      	cmp	r8, r6
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	d135      	bne.n	8008100 <_dtoa_r+0x6a8>
 8008094:	f7f8 f86a 	bl	800016c <__adddf3>
 8008098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	f7f8 fcaa 	bl	80009f8 <__aeabi_dcmpgt>
 80080a4:	b9c8      	cbnz	r0, 80080da <_dtoa_r+0x682>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 fc7b 	bl	80009a8 <__aeabi_dcmpeq>
 80080b2:	b110      	cbz	r0, 80080ba <_dtoa_r+0x662>
 80080b4:	f019 0f01 	tst.w	r9, #1
 80080b8:	d10f      	bne.n	80080da <_dtoa_r+0x682>
 80080ba:	9906      	ldr	r1, [sp, #24]
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fbdf 	bl	8008880 <_Bfree>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080c6:	702b      	strb	r3, [r5, #0]
 80080c8:	f10a 0301 	add.w	r3, sl, #1
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f43f acf9 	beq.w	8007ac8 <_dtoa_r+0x70>
 80080d6:	601d      	str	r5, [r3, #0]
 80080d8:	e4f6      	b.n	8007ac8 <_dtoa_r+0x70>
 80080da:	4657      	mov	r7, sl
 80080dc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080e0:	1e6b      	subs	r3, r5, #1
 80080e2:	2a39      	cmp	r2, #57	; 0x39
 80080e4:	d106      	bne.n	80080f4 <_dtoa_r+0x69c>
 80080e6:	459b      	cmp	fp, r3
 80080e8:	d108      	bne.n	80080fc <_dtoa_r+0x6a4>
 80080ea:	2330      	movs	r3, #48	; 0x30
 80080ec:	f88b 3000 	strb.w	r3, [fp]
 80080f0:	465b      	mov	r3, fp
 80080f2:	3701      	adds	r7, #1
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	3201      	adds	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e790      	b.n	800801e <_dtoa_r+0x5c6>
 80080fc:	461d      	mov	r5, r3
 80080fe:	e7ed      	b.n	80080dc <_dtoa_r+0x684>
 8008100:	2200      	movs	r2, #0
 8008102:	4b99      	ldr	r3, [pc, #612]	; (8008368 <_dtoa_r+0x910>)
 8008104:	f7f8 f9e8 	bl	80004d8 <__aeabi_dmul>
 8008108:	2200      	movs	r2, #0
 800810a:	2300      	movs	r3, #0
 800810c:	4606      	mov	r6, r0
 800810e:	460f      	mov	r7, r1
 8008110:	f7f8 fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8008114:	2800      	cmp	r0, #0
 8008116:	d09e      	beq.n	8008056 <_dtoa_r+0x5fe>
 8008118:	e7cf      	b.n	80080ba <_dtoa_r+0x662>
 800811a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811c:	2a00      	cmp	r2, #0
 800811e:	f000 8088 	beq.w	8008232 <_dtoa_r+0x7da>
 8008122:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008124:	2a01      	cmp	r2, #1
 8008126:	dc6d      	bgt.n	8008204 <_dtoa_r+0x7ac>
 8008128:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800812a:	2a00      	cmp	r2, #0
 800812c:	d066      	beq.n	80081fc <_dtoa_r+0x7a4>
 800812e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008132:	464d      	mov	r5, r9
 8008134:	9e08      	ldr	r6, [sp, #32]
 8008136:	9a07      	ldr	r2, [sp, #28]
 8008138:	2101      	movs	r1, #1
 800813a:	441a      	add	r2, r3
 800813c:	4620      	mov	r0, r4
 800813e:	4499      	add	r9, r3
 8008140:	9207      	str	r2, [sp, #28]
 8008142:	f000 fc2f 	bl	80089a4 <__i2b>
 8008146:	4607      	mov	r7, r0
 8008148:	2d00      	cmp	r5, #0
 800814a:	dd0b      	ble.n	8008164 <_dtoa_r+0x70c>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd08      	ble.n	8008164 <_dtoa_r+0x70c>
 8008152:	42ab      	cmp	r3, r5
 8008154:	bfa8      	it	ge
 8008156:	462b      	movge	r3, r5
 8008158:	9a07      	ldr	r2, [sp, #28]
 800815a:	eba9 0903 	sub.w	r9, r9, r3
 800815e:	1aed      	subs	r5, r5, r3
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	9307      	str	r3, [sp, #28]
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	b1eb      	cbz	r3, 80081a4 <_dtoa_r+0x74c>
 8008168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d065      	beq.n	800823a <_dtoa_r+0x7e2>
 800816e:	b18e      	cbz	r6, 8008194 <_dtoa_r+0x73c>
 8008170:	4639      	mov	r1, r7
 8008172:	4632      	mov	r2, r6
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fcb3 	bl	8008ae0 <__pow5mult>
 800817a:	9a06      	ldr	r2, [sp, #24]
 800817c:	4601      	mov	r1, r0
 800817e:	4607      	mov	r7, r0
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fc18 	bl	80089b6 <__multiply>
 8008186:	9906      	ldr	r1, [sp, #24]
 8008188:	900a      	str	r0, [sp, #40]	; 0x28
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fb78 	bl	8008880 <_Bfree>
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	9306      	str	r3, [sp, #24]
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	1b9a      	subs	r2, r3, r6
 8008198:	d004      	beq.n	80081a4 <_dtoa_r+0x74c>
 800819a:	9906      	ldr	r1, [sp, #24]
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fc9f 	bl	8008ae0 <__pow5mult>
 80081a2:	9006      	str	r0, [sp, #24]
 80081a4:	2101      	movs	r1, #1
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 fbfc 	bl	80089a4 <__i2b>
 80081ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ae:	4606      	mov	r6, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 81ca 	beq.w	800854a <_dtoa_r+0xaf2>
 80081b6:	461a      	mov	r2, r3
 80081b8:	4601      	mov	r1, r0
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fc90 	bl	8008ae0 <__pow5mult>
 80081c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081c2:	4606      	mov	r6, r0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	dc3e      	bgt.n	8008246 <_dtoa_r+0x7ee>
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d137      	bne.n	800823e <_dtoa_r+0x7e6>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d134      	bne.n	8008242 <_dtoa_r+0x7ea>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	051b      	lsls	r3, r3, #20
 80081e2:	b12b      	cbz	r3, 80081f0 <_dtoa_r+0x798>
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	f109 0901 	add.w	r9, r9, #1
 80081ea:	3301      	adds	r3, #1
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	2301      	movs	r3, #1
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d128      	bne.n	800824a <_dtoa_r+0x7f2>
 80081f8:	2001      	movs	r0, #1
 80081fa:	e02e      	b.n	800825a <_dtoa_r+0x802>
 80081fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008202:	e796      	b.n	8008132 <_dtoa_r+0x6da>
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800820a:	42b3      	cmp	r3, r6
 800820c:	bfb7      	itett	lt
 800820e:	9b08      	ldrlt	r3, [sp, #32]
 8008210:	1b9e      	subge	r6, r3, r6
 8008212:	1af2      	sublt	r2, r6, r3
 8008214:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008216:	bfbf      	itttt	lt
 8008218:	9608      	strlt	r6, [sp, #32]
 800821a:	189b      	addlt	r3, r3, r2
 800821c:	930c      	strlt	r3, [sp, #48]	; 0x30
 800821e:	2600      	movlt	r6, #0
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	bfb9      	ittee	lt
 8008226:	eba9 0508 	sublt.w	r5, r9, r8
 800822a:	2300      	movlt	r3, #0
 800822c:	464d      	movge	r5, r9
 800822e:	4643      	movge	r3, r8
 8008230:	e781      	b.n	8008136 <_dtoa_r+0x6de>
 8008232:	9e08      	ldr	r6, [sp, #32]
 8008234:	464d      	mov	r5, r9
 8008236:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008238:	e786      	b.n	8008148 <_dtoa_r+0x6f0>
 800823a:	9a08      	ldr	r2, [sp, #32]
 800823c:	e7ad      	b.n	800819a <_dtoa_r+0x742>
 800823e:	2300      	movs	r3, #0
 8008240:	e7d6      	b.n	80081f0 <_dtoa_r+0x798>
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	e7d4      	b.n	80081f0 <_dtoa_r+0x798>
 8008246:	2300      	movs	r3, #0
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	6933      	ldr	r3, [r6, #16]
 800824c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008250:	6918      	ldr	r0, [r3, #16]
 8008252:	f000 fb59 	bl	8008908 <__hi0bits>
 8008256:	f1c0 0020 	rsb	r0, r0, #32
 800825a:	9b07      	ldr	r3, [sp, #28]
 800825c:	4418      	add	r0, r3
 800825e:	f010 001f 	ands.w	r0, r0, #31
 8008262:	d047      	beq.n	80082f4 <_dtoa_r+0x89c>
 8008264:	f1c0 0320 	rsb	r3, r0, #32
 8008268:	2b04      	cmp	r3, #4
 800826a:	dd3b      	ble.n	80082e4 <_dtoa_r+0x88c>
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	f1c0 001c 	rsb	r0, r0, #28
 8008272:	4481      	add	r9, r0
 8008274:	4405      	add	r5, r0
 8008276:	4403      	add	r3, r0
 8008278:	9307      	str	r3, [sp, #28]
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	dd05      	ble.n	800828c <_dtoa_r+0x834>
 8008280:	464a      	mov	r2, r9
 8008282:	9906      	ldr	r1, [sp, #24]
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fc6b 	bl	8008b60 <__lshift>
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd05      	ble.n	800829e <_dtoa_r+0x846>
 8008292:	4631      	mov	r1, r6
 8008294:	461a      	mov	r2, r3
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fc62 	bl	8008b60 <__lshift>
 800829c:	4606      	mov	r6, r0
 800829e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a0:	b353      	cbz	r3, 80082f8 <_dtoa_r+0x8a0>
 80082a2:	4631      	mov	r1, r6
 80082a4:	9806      	ldr	r0, [sp, #24]
 80082a6:	f000 fcaf 	bl	8008c08 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	da24      	bge.n	80082f8 <_dtoa_r+0x8a0>
 80082ae:	2300      	movs	r3, #0
 80082b0:	220a      	movs	r2, #10
 80082b2:	9906      	ldr	r1, [sp, #24]
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 faec 	bl	8008892 <__multadd>
 80082ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80082c0:	9006      	str	r0, [sp, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8148 	beq.w	8008558 <_dtoa_r+0xb00>
 80082c8:	2300      	movs	r3, #0
 80082ca:	4639      	mov	r1, r7
 80082cc:	220a      	movs	r2, #10
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 fadf 	bl	8008892 <__multadd>
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	4607      	mov	r7, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dc4d      	bgt.n	8008378 <_dtoa_r+0x920>
 80082dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80082de:	2b02      	cmp	r3, #2
 80082e0:	dd4a      	ble.n	8008378 <_dtoa_r+0x920>
 80082e2:	e011      	b.n	8008308 <_dtoa_r+0x8b0>
 80082e4:	d0c9      	beq.n	800827a <_dtoa_r+0x822>
 80082e6:	9a07      	ldr	r2, [sp, #28]
 80082e8:	331c      	adds	r3, #28
 80082ea:	441a      	add	r2, r3
 80082ec:	4499      	add	r9, r3
 80082ee:	441d      	add	r5, r3
 80082f0:	4613      	mov	r3, r2
 80082f2:	e7c1      	b.n	8008278 <_dtoa_r+0x820>
 80082f4:	4603      	mov	r3, r0
 80082f6:	e7f6      	b.n	80082e6 <_dtoa_r+0x88e>
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	dc36      	bgt.n	800836c <_dtoa_r+0x914>
 80082fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008300:	2b02      	cmp	r3, #2
 8008302:	dd33      	ble.n	800836c <_dtoa_r+0x914>
 8008304:	f8cd 8010 	str.w	r8, [sp, #16]
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	b963      	cbnz	r3, 8008326 <_dtoa_r+0x8ce>
 800830c:	4631      	mov	r1, r6
 800830e:	2205      	movs	r2, #5
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fabe 	bl	8008892 <__multadd>
 8008316:	4601      	mov	r1, r0
 8008318:	4606      	mov	r6, r0
 800831a:	9806      	ldr	r0, [sp, #24]
 800831c:	f000 fc74 	bl	8008c08 <__mcmp>
 8008320:	2800      	cmp	r0, #0
 8008322:	f73f add2 	bgt.w	8007eca <_dtoa_r+0x472>
 8008326:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008328:	465d      	mov	r5, fp
 800832a:	ea6f 0a03 	mvn.w	sl, r3
 800832e:	f04f 0900 	mov.w	r9, #0
 8008332:	4631      	mov	r1, r6
 8008334:	4620      	mov	r0, r4
 8008336:	f000 faa3 	bl	8008880 <_Bfree>
 800833a:	2f00      	cmp	r7, #0
 800833c:	f43f aebd 	beq.w	80080ba <_dtoa_r+0x662>
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	d005      	beq.n	8008352 <_dtoa_r+0x8fa>
 8008346:	45b9      	cmp	r9, r7
 8008348:	d003      	beq.n	8008352 <_dtoa_r+0x8fa>
 800834a:	4649      	mov	r1, r9
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fa97 	bl	8008880 <_Bfree>
 8008352:	4639      	mov	r1, r7
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fa93 	bl	8008880 <_Bfree>
 800835a:	e6ae      	b.n	80080ba <_dtoa_r+0x662>
 800835c:	2600      	movs	r6, #0
 800835e:	4637      	mov	r7, r6
 8008360:	e7e1      	b.n	8008326 <_dtoa_r+0x8ce>
 8008362:	46ba      	mov	sl, r7
 8008364:	4637      	mov	r7, r6
 8008366:	e5b0      	b.n	8007eca <_dtoa_r+0x472>
 8008368:	40240000 	.word	0x40240000
 800836c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836e:	f8cd 8010 	str.w	r8, [sp, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80f7 	beq.w	8008566 <_dtoa_r+0xb0e>
 8008378:	2d00      	cmp	r5, #0
 800837a:	dd05      	ble.n	8008388 <_dtoa_r+0x930>
 800837c:	4639      	mov	r1, r7
 800837e:	462a      	mov	r2, r5
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fbed 	bl	8008b60 <__lshift>
 8008386:	4607      	mov	r7, r0
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d04c      	beq.n	8008428 <_dtoa_r+0x9d0>
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fa50 	bl	8008836 <_Balloc>
 8008396:	4605      	mov	r5, r0
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	f107 010c 	add.w	r1, r7, #12
 800839e:	3202      	adds	r2, #2
 80083a0:	0092      	lsls	r2, r2, #2
 80083a2:	300c      	adds	r0, #12
 80083a4:	f000 fa3c 	bl	8008820 <memcpy>
 80083a8:	2201      	movs	r2, #1
 80083aa:	4629      	mov	r1, r5
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 fbd7 	bl	8008b60 <__lshift>
 80083b2:	46b9      	mov	r9, r7
 80083b4:	4607      	mov	r7, r0
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	f8cd b01c 	str.w	fp, [sp, #28]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	4631      	mov	r1, r6
 80083c4:	9806      	ldr	r0, [sp, #24]
 80083c6:	f7ff fab7 	bl	8007938 <quorem>
 80083ca:	4649      	mov	r1, r9
 80083cc:	4605      	mov	r5, r0
 80083ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80083d2:	9806      	ldr	r0, [sp, #24]
 80083d4:	f000 fc18 	bl	8008c08 <__mcmp>
 80083d8:	463a      	mov	r2, r7
 80083da:	9002      	str	r0, [sp, #8]
 80083dc:	4631      	mov	r1, r6
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fc2c 	bl	8008c3c <__mdiff>
 80083e4:	68c3      	ldr	r3, [r0, #12]
 80083e6:	4602      	mov	r2, r0
 80083e8:	bb03      	cbnz	r3, 800842c <_dtoa_r+0x9d4>
 80083ea:	4601      	mov	r1, r0
 80083ec:	9009      	str	r0, [sp, #36]	; 0x24
 80083ee:	9806      	ldr	r0, [sp, #24]
 80083f0:	f000 fc0a 	bl	8008c08 <__mcmp>
 80083f4:	4603      	mov	r3, r0
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	4611      	mov	r1, r2
 80083fa:	4620      	mov	r0, r4
 80083fc:	9309      	str	r3, [sp, #36]	; 0x24
 80083fe:	f000 fa3f 	bl	8008880 <_Bfree>
 8008402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008404:	b9a3      	cbnz	r3, 8008430 <_dtoa_r+0x9d8>
 8008406:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008408:	b992      	cbnz	r2, 8008430 <_dtoa_r+0x9d8>
 800840a:	9a08      	ldr	r2, [sp, #32]
 800840c:	b982      	cbnz	r2, 8008430 <_dtoa_r+0x9d8>
 800840e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008412:	d029      	beq.n	8008468 <_dtoa_r+0xa10>
 8008414:	9b02      	ldr	r3, [sp, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd01      	ble.n	800841e <_dtoa_r+0x9c6>
 800841a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800841e:	9b07      	ldr	r3, [sp, #28]
 8008420:	1c5d      	adds	r5, r3, #1
 8008422:	f883 8000 	strb.w	r8, [r3]
 8008426:	e784      	b.n	8008332 <_dtoa_r+0x8da>
 8008428:	4638      	mov	r0, r7
 800842a:	e7c2      	b.n	80083b2 <_dtoa_r+0x95a>
 800842c:	2301      	movs	r3, #1
 800842e:	e7e3      	b.n	80083f8 <_dtoa_r+0x9a0>
 8008430:	9a02      	ldr	r2, [sp, #8]
 8008432:	2a00      	cmp	r2, #0
 8008434:	db04      	blt.n	8008440 <_dtoa_r+0x9e8>
 8008436:	d124      	bne.n	8008482 <_dtoa_r+0xa2a>
 8008438:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800843a:	bb12      	cbnz	r2, 8008482 <_dtoa_r+0xa2a>
 800843c:	9a08      	ldr	r2, [sp, #32]
 800843e:	bb02      	cbnz	r2, 8008482 <_dtoa_r+0xa2a>
 8008440:	2b00      	cmp	r3, #0
 8008442:	ddec      	ble.n	800841e <_dtoa_r+0x9c6>
 8008444:	2201      	movs	r2, #1
 8008446:	9906      	ldr	r1, [sp, #24]
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fb89 	bl	8008b60 <__lshift>
 800844e:	4631      	mov	r1, r6
 8008450:	9006      	str	r0, [sp, #24]
 8008452:	f000 fbd9 	bl	8008c08 <__mcmp>
 8008456:	2800      	cmp	r0, #0
 8008458:	dc03      	bgt.n	8008462 <_dtoa_r+0xa0a>
 800845a:	d1e0      	bne.n	800841e <_dtoa_r+0x9c6>
 800845c:	f018 0f01 	tst.w	r8, #1
 8008460:	d0dd      	beq.n	800841e <_dtoa_r+0x9c6>
 8008462:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008466:	d1d8      	bne.n	800841a <_dtoa_r+0x9c2>
 8008468:	9b07      	ldr	r3, [sp, #28]
 800846a:	9a07      	ldr	r2, [sp, #28]
 800846c:	1c5d      	adds	r5, r3, #1
 800846e:	2339      	movs	r3, #57	; 0x39
 8008470:	7013      	strb	r3, [r2, #0]
 8008472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008476:	1e6a      	subs	r2, r5, #1
 8008478:	2b39      	cmp	r3, #57	; 0x39
 800847a:	d04e      	beq.n	800851a <_dtoa_r+0xac2>
 800847c:	3301      	adds	r3, #1
 800847e:	7013      	strb	r3, [r2, #0]
 8008480:	e757      	b.n	8008332 <_dtoa_r+0x8da>
 8008482:	9a07      	ldr	r2, [sp, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f102 0501 	add.w	r5, r2, #1
 800848a:	dd06      	ble.n	800849a <_dtoa_r+0xa42>
 800848c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008490:	d0ea      	beq.n	8008468 <_dtoa_r+0xa10>
 8008492:	f108 0801 	add.w	r8, r8, #1
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	e7c3      	b.n	8008422 <_dtoa_r+0x9ca>
 800849a:	9a04      	ldr	r2, [sp, #16]
 800849c:	eba5 030b 	sub.w	r3, r5, fp
 80084a0:	4293      	cmp	r3, r2
 80084a2:	f805 8c01 	strb.w	r8, [r5, #-1]
 80084a6:	d021      	beq.n	80084ec <_dtoa_r+0xa94>
 80084a8:	2300      	movs	r3, #0
 80084aa:	220a      	movs	r2, #10
 80084ac:	9906      	ldr	r1, [sp, #24]
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 f9ef 	bl	8008892 <__multadd>
 80084b4:	45b9      	cmp	r9, r7
 80084b6:	9006      	str	r0, [sp, #24]
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	f04f 020a 	mov.w	r2, #10
 80084c0:	4649      	mov	r1, r9
 80084c2:	4620      	mov	r0, r4
 80084c4:	d105      	bne.n	80084d2 <_dtoa_r+0xa7a>
 80084c6:	f000 f9e4 	bl	8008892 <__multadd>
 80084ca:	4681      	mov	r9, r0
 80084cc:	4607      	mov	r7, r0
 80084ce:	9507      	str	r5, [sp, #28]
 80084d0:	e777      	b.n	80083c2 <_dtoa_r+0x96a>
 80084d2:	f000 f9de 	bl	8008892 <__multadd>
 80084d6:	4639      	mov	r1, r7
 80084d8:	4681      	mov	r9, r0
 80084da:	2300      	movs	r3, #0
 80084dc:	220a      	movs	r2, #10
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 f9d7 	bl	8008892 <__multadd>
 80084e4:	4607      	mov	r7, r0
 80084e6:	e7f2      	b.n	80084ce <_dtoa_r+0xa76>
 80084e8:	f04f 0900 	mov.w	r9, #0
 80084ec:	2201      	movs	r2, #1
 80084ee:	9906      	ldr	r1, [sp, #24]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fb35 	bl	8008b60 <__lshift>
 80084f6:	4631      	mov	r1, r6
 80084f8:	9006      	str	r0, [sp, #24]
 80084fa:	f000 fb85 	bl	8008c08 <__mcmp>
 80084fe:	2800      	cmp	r0, #0
 8008500:	dcb7      	bgt.n	8008472 <_dtoa_r+0xa1a>
 8008502:	d102      	bne.n	800850a <_dtoa_r+0xab2>
 8008504:	f018 0f01 	tst.w	r8, #1
 8008508:	d1b3      	bne.n	8008472 <_dtoa_r+0xa1a>
 800850a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800850e:	1e6a      	subs	r2, r5, #1
 8008510:	2b30      	cmp	r3, #48	; 0x30
 8008512:	f47f af0e 	bne.w	8008332 <_dtoa_r+0x8da>
 8008516:	4615      	mov	r5, r2
 8008518:	e7f7      	b.n	800850a <_dtoa_r+0xab2>
 800851a:	4593      	cmp	fp, r2
 800851c:	d105      	bne.n	800852a <_dtoa_r+0xad2>
 800851e:	2331      	movs	r3, #49	; 0x31
 8008520:	f10a 0a01 	add.w	sl, sl, #1
 8008524:	f88b 3000 	strb.w	r3, [fp]
 8008528:	e703      	b.n	8008332 <_dtoa_r+0x8da>
 800852a:	4615      	mov	r5, r2
 800852c:	e7a1      	b.n	8008472 <_dtoa_r+0xa1a>
 800852e:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008594 <_dtoa_r+0xb3c>
 8008532:	f7ff bac9 	b.w	8007ac8 <_dtoa_r+0x70>
 8008536:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008538:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8008598 <_dtoa_r+0xb40>
 800853c:	2b00      	cmp	r3, #0
 800853e:	f43f aac3 	beq.w	8007ac8 <_dtoa_r+0x70>
 8008542:	f10b 0308 	add.w	r3, fp, #8
 8008546:	f7ff babd 	b.w	8007ac4 <_dtoa_r+0x6c>
 800854a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800854c:	2b01      	cmp	r3, #1
 800854e:	f77f ae3b 	ble.w	80081c8 <_dtoa_r+0x770>
 8008552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008554:	9308      	str	r3, [sp, #32]
 8008556:	e64f      	b.n	80081f8 <_dtoa_r+0x7a0>
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dc03      	bgt.n	8008566 <_dtoa_r+0xb0e>
 800855e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008560:	2b02      	cmp	r3, #2
 8008562:	f73f aed1 	bgt.w	8008308 <_dtoa_r+0x8b0>
 8008566:	465d      	mov	r5, fp
 8008568:	4631      	mov	r1, r6
 800856a:	9806      	ldr	r0, [sp, #24]
 800856c:	f7ff f9e4 	bl	8007938 <quorem>
 8008570:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008574:	f805 8b01 	strb.w	r8, [r5], #1
 8008578:	9a04      	ldr	r2, [sp, #16]
 800857a:	eba5 030b 	sub.w	r3, r5, fp
 800857e:	429a      	cmp	r2, r3
 8008580:	ddb2      	ble.n	80084e8 <_dtoa_r+0xa90>
 8008582:	2300      	movs	r3, #0
 8008584:	220a      	movs	r2, #10
 8008586:	9906      	ldr	r1, [sp, #24]
 8008588:	4620      	mov	r0, r4
 800858a:	f000 f982 	bl	8008892 <__multadd>
 800858e:	9006      	str	r0, [sp, #24]
 8008590:	e7ea      	b.n	8008568 <_dtoa_r+0xb10>
 8008592:	bf00      	nop
 8008594:	080098b6 	.word	0x080098b6
 8008598:	080098d8 	.word	0x080098d8

0800859c <__libc_fini_array>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	; (80085bc <__libc_fini_array+0x20>)
 80085a0:	4c07      	ldr	r4, [pc, #28]	; (80085c0 <__libc_fini_array+0x24>)
 80085a2:	1b64      	subs	r4, r4, r5
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	b91c      	cbnz	r4, 80085b0 <__libc_fini_array+0x14>
 80085a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ac:	f000 bf42 	b.w	8009434 <_fini>
 80085b0:	3c01      	subs	r4, #1
 80085b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80085b6:	4798      	blx	r3
 80085b8:	e7f5      	b.n	80085a6 <__libc_fini_array+0xa>
 80085ba:	bf00      	nop
 80085bc:	08009b08 	.word	0x08009b08
 80085c0:	08009b0c 	.word	0x08009b0c

080085c4 <_malloc_trim_r>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	4605      	mov	r5, r0
 80085ca:	2008      	movs	r0, #8
 80085cc:	460c      	mov	r4, r1
 80085ce:	f7ff f995 	bl	80078fc <sysconf>
 80085d2:	4680      	mov	r8, r0
 80085d4:	4f22      	ldr	r7, [pc, #136]	; (8008660 <_malloc_trim_r+0x9c>)
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7fd ff00 	bl	80063dc <__malloc_lock>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	685e      	ldr	r6, [r3, #4]
 80085e0:	f026 0603 	bic.w	r6, r6, #3
 80085e4:	1b34      	subs	r4, r6, r4
 80085e6:	3c11      	subs	r4, #17
 80085e8:	4444      	add	r4, r8
 80085ea:	fbb4 f4f8 	udiv	r4, r4, r8
 80085ee:	3c01      	subs	r4, #1
 80085f0:	fb08 f404 	mul.w	r4, r8, r4
 80085f4:	45a0      	cmp	r8, r4
 80085f6:	dd05      	ble.n	8008604 <_malloc_trim_r+0x40>
 80085f8:	4628      	mov	r0, r5
 80085fa:	f7fd fef5 	bl	80063e8 <__malloc_unlock>
 80085fe:	2000      	movs	r0, #0
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	2100      	movs	r1, #0
 8008606:	4628      	mov	r0, r5
 8008608:	f7fd fef4 	bl	80063f4 <_sbrk_r>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4433      	add	r3, r6
 8008610:	4298      	cmp	r0, r3
 8008612:	d1f1      	bne.n	80085f8 <_malloc_trim_r+0x34>
 8008614:	4261      	negs	r1, r4
 8008616:	4628      	mov	r0, r5
 8008618:	f7fd feec 	bl	80063f4 <_sbrk_r>
 800861c:	3001      	adds	r0, #1
 800861e:	d110      	bne.n	8008642 <_malloc_trim_r+0x7e>
 8008620:	2100      	movs	r1, #0
 8008622:	4628      	mov	r0, r5
 8008624:	f7fd fee6 	bl	80063f4 <_sbrk_r>
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	1a83      	subs	r3, r0, r2
 800862c:	2b0f      	cmp	r3, #15
 800862e:	dde3      	ble.n	80085f8 <_malloc_trim_r+0x34>
 8008630:	490c      	ldr	r1, [pc, #48]	; (8008664 <_malloc_trim_r+0xa0>)
 8008632:	f043 0301 	orr.w	r3, r3, #1
 8008636:	6809      	ldr	r1, [r1, #0]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	1a40      	subs	r0, r0, r1
 800863c:	490a      	ldr	r1, [pc, #40]	; (8008668 <_malloc_trim_r+0xa4>)
 800863e:	6008      	str	r0, [r1, #0]
 8008640:	e7da      	b.n	80085f8 <_malloc_trim_r+0x34>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4a08      	ldr	r2, [pc, #32]	; (8008668 <_malloc_trim_r+0xa4>)
 8008646:	1b36      	subs	r6, r6, r4
 8008648:	f046 0601 	orr.w	r6, r6, #1
 800864c:	605e      	str	r6, [r3, #4]
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	4628      	mov	r0, r5
 8008652:	1b1c      	subs	r4, r3, r4
 8008654:	6014      	str	r4, [r2, #0]
 8008656:	f7fd fec7 	bl	80063e8 <__malloc_unlock>
 800865a:	2001      	movs	r0, #1
 800865c:	e7d0      	b.n	8008600 <_malloc_trim_r+0x3c>
 800865e:	bf00      	nop
 8008660:	20000440 	.word	0x20000440
 8008664:	20000848 	.word	0x20000848
 8008668:	20000c30 	.word	0x20000c30

0800866c <_free_r>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	4604      	mov	r4, r0
 8008672:	4688      	mov	r8, r1
 8008674:	2900      	cmp	r1, #0
 8008676:	f000 80ab 	beq.w	80087d0 <_free_r+0x164>
 800867a:	f7fd feaf 	bl	80063dc <__malloc_lock>
 800867e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008682:	4d54      	ldr	r5, [pc, #336]	; (80087d4 <_free_r+0x168>)
 8008684:	f022 0001 	bic.w	r0, r2, #1
 8008688:	f1a8 0308 	sub.w	r3, r8, #8
 800868c:	181f      	adds	r7, r3, r0
 800868e:	68a9      	ldr	r1, [r5, #8]
 8008690:	687e      	ldr	r6, [r7, #4]
 8008692:	42b9      	cmp	r1, r7
 8008694:	f026 0603 	bic.w	r6, r6, #3
 8008698:	f002 0201 	and.w	r2, r2, #1
 800869c:	d11b      	bne.n	80086d6 <_free_r+0x6a>
 800869e:	4430      	add	r0, r6
 80086a0:	b93a      	cbnz	r2, 80086b2 <_free_r+0x46>
 80086a2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	4410      	add	r0, r2
 80086aa:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80086ae:	60ca      	str	r2, [r1, #12]
 80086b0:	6091      	str	r1, [r2, #8]
 80086b2:	f040 0201 	orr.w	r2, r0, #1
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	60ab      	str	r3, [r5, #8]
 80086ba:	4b47      	ldr	r3, [pc, #284]	; (80087d8 <_free_r+0x16c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4283      	cmp	r3, r0
 80086c0:	d804      	bhi.n	80086cc <_free_r+0x60>
 80086c2:	4b46      	ldr	r3, [pc, #280]	; (80087dc <_free_r+0x170>)
 80086c4:	4620      	mov	r0, r4
 80086c6:	6819      	ldr	r1, [r3, #0]
 80086c8:	f7ff ff7c 	bl	80085c4 <_malloc_trim_r>
 80086cc:	4620      	mov	r0, r4
 80086ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	f7fd be89 	b.w	80063e8 <__malloc_unlock>
 80086d6:	607e      	str	r6, [r7, #4]
 80086d8:	2a00      	cmp	r2, #0
 80086da:	d139      	bne.n	8008750 <_free_r+0xe4>
 80086dc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80086e0:	f105 0c08 	add.w	ip, r5, #8
 80086e4:	1a5b      	subs	r3, r3, r1
 80086e6:	4408      	add	r0, r1
 80086e8:	6899      	ldr	r1, [r3, #8]
 80086ea:	4561      	cmp	r1, ip
 80086ec:	d032      	beq.n	8008754 <_free_r+0xe8>
 80086ee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80086f2:	f8c1 c00c 	str.w	ip, [r1, #12]
 80086f6:	f8cc 1008 	str.w	r1, [ip, #8]
 80086fa:	19b9      	adds	r1, r7, r6
 80086fc:	6849      	ldr	r1, [r1, #4]
 80086fe:	07c9      	lsls	r1, r1, #31
 8008700:	d40a      	bmi.n	8008718 <_free_r+0xac>
 8008702:	4430      	add	r0, r6
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	bb3a      	cbnz	r2, 8008758 <_free_r+0xec>
 8008708:	4e35      	ldr	r6, [pc, #212]	; (80087e0 <_free_r+0x174>)
 800870a:	42b1      	cmp	r1, r6
 800870c:	d124      	bne.n	8008758 <_free_r+0xec>
 800870e:	2201      	movs	r2, #1
 8008710:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8008714:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008718:	f040 0101 	orr.w	r1, r0, #1
 800871c:	6059      	str	r1, [r3, #4]
 800871e:	5018      	str	r0, [r3, r0]
 8008720:	2a00      	cmp	r2, #0
 8008722:	d1d3      	bne.n	80086cc <_free_r+0x60>
 8008724:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008728:	d21a      	bcs.n	8008760 <_free_r+0xf4>
 800872a:	2201      	movs	r2, #1
 800872c:	08c0      	lsrs	r0, r0, #3
 800872e:	1081      	asrs	r1, r0, #2
 8008730:	408a      	lsls	r2, r1
 8008732:	6869      	ldr	r1, [r5, #4]
 8008734:	3001      	adds	r0, #1
 8008736:	430a      	orrs	r2, r1
 8008738:	606a      	str	r2, [r5, #4]
 800873a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800873e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008742:	3a08      	subs	r2, #8
 8008744:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8008748:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800874c:	60cb      	str	r3, [r1, #12]
 800874e:	e7bd      	b.n	80086cc <_free_r+0x60>
 8008750:	2200      	movs	r2, #0
 8008752:	e7d2      	b.n	80086fa <_free_r+0x8e>
 8008754:	2201      	movs	r2, #1
 8008756:	e7d0      	b.n	80086fa <_free_r+0x8e>
 8008758:	68fe      	ldr	r6, [r7, #12]
 800875a:	60ce      	str	r6, [r1, #12]
 800875c:	60b1      	str	r1, [r6, #8]
 800875e:	e7db      	b.n	8008718 <_free_r+0xac>
 8008760:	0a42      	lsrs	r2, r0, #9
 8008762:	2a04      	cmp	r2, #4
 8008764:	d813      	bhi.n	800878e <_free_r+0x122>
 8008766:	0982      	lsrs	r2, r0, #6
 8008768:	3238      	adds	r2, #56	; 0x38
 800876a:	1c51      	adds	r1, r2, #1
 800876c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008770:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008774:	428e      	cmp	r6, r1
 8008776:	d124      	bne.n	80087c2 <_free_r+0x156>
 8008778:	2001      	movs	r0, #1
 800877a:	1092      	asrs	r2, r2, #2
 800877c:	fa00 f202 	lsl.w	r2, r0, r2
 8008780:	6868      	ldr	r0, [r5, #4]
 8008782:	4302      	orrs	r2, r0
 8008784:	606a      	str	r2, [r5, #4]
 8008786:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800878a:	60b3      	str	r3, [r6, #8]
 800878c:	e7de      	b.n	800874c <_free_r+0xe0>
 800878e:	2a14      	cmp	r2, #20
 8008790:	d801      	bhi.n	8008796 <_free_r+0x12a>
 8008792:	325b      	adds	r2, #91	; 0x5b
 8008794:	e7e9      	b.n	800876a <_free_r+0xfe>
 8008796:	2a54      	cmp	r2, #84	; 0x54
 8008798:	d802      	bhi.n	80087a0 <_free_r+0x134>
 800879a:	0b02      	lsrs	r2, r0, #12
 800879c:	326e      	adds	r2, #110	; 0x6e
 800879e:	e7e4      	b.n	800876a <_free_r+0xfe>
 80087a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80087a4:	d802      	bhi.n	80087ac <_free_r+0x140>
 80087a6:	0bc2      	lsrs	r2, r0, #15
 80087a8:	3277      	adds	r2, #119	; 0x77
 80087aa:	e7de      	b.n	800876a <_free_r+0xfe>
 80087ac:	f240 5154 	movw	r1, #1364	; 0x554
 80087b0:	428a      	cmp	r2, r1
 80087b2:	bf9a      	itte	ls
 80087b4:	0c82      	lsrls	r2, r0, #18
 80087b6:	327c      	addls	r2, #124	; 0x7c
 80087b8:	227e      	movhi	r2, #126	; 0x7e
 80087ba:	e7d6      	b.n	800876a <_free_r+0xfe>
 80087bc:	6889      	ldr	r1, [r1, #8]
 80087be:	428e      	cmp	r6, r1
 80087c0:	d004      	beq.n	80087cc <_free_r+0x160>
 80087c2:	684a      	ldr	r2, [r1, #4]
 80087c4:	f022 0203 	bic.w	r2, r2, #3
 80087c8:	4282      	cmp	r2, r0
 80087ca:	d8f7      	bhi.n	80087bc <_free_r+0x150>
 80087cc:	68ce      	ldr	r6, [r1, #12]
 80087ce:	e7da      	b.n	8008786 <_free_r+0x11a>
 80087d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d4:	20000440 	.word	0x20000440
 80087d8:	2000084c 	.word	0x2000084c
 80087dc:	20000c60 	.word	0x20000c60
 80087e0:	20000448 	.word	0x20000448

080087e4 <_localeconv_r>:
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <_localeconv_r+0x14>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80087ea:	4b04      	ldr	r3, [pc, #16]	; (80087fc <_localeconv_r+0x18>)
 80087ec:	2800      	cmp	r0, #0
 80087ee:	bf08      	it	eq
 80087f0:	4618      	moveq	r0, r3
 80087f2:	30f0      	adds	r0, #240	; 0xf0
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000010 	.word	0x20000010
 80087fc:	20000854 	.word	0x20000854

08008800 <__retarget_lock_acquire_recursive>:
 8008800:	4770      	bx	lr

08008802 <__retarget_lock_release_recursive>:
 8008802:	4770      	bx	lr

08008804 <memchr>:
 8008804:	b510      	push	{r4, lr}
 8008806:	b2c9      	uxtb	r1, r1
 8008808:	4402      	add	r2, r0
 800880a:	4290      	cmp	r0, r2
 800880c:	4603      	mov	r3, r0
 800880e:	d101      	bne.n	8008814 <memchr+0x10>
 8008810:	2300      	movs	r3, #0
 8008812:	e003      	b.n	800881c <memchr+0x18>
 8008814:	781c      	ldrb	r4, [r3, #0]
 8008816:	3001      	adds	r0, #1
 8008818:	428c      	cmp	r4, r1
 800881a:	d1f6      	bne.n	800880a <memchr+0x6>
 800881c:	4618      	mov	r0, r3
 800881e:	bd10      	pop	{r4, pc}

08008820 <memcpy>:
 8008820:	b510      	push	{r4, lr}
 8008822:	1e43      	subs	r3, r0, #1
 8008824:	440a      	add	r2, r1
 8008826:	4291      	cmp	r1, r2
 8008828:	d100      	bne.n	800882c <memcpy+0xc>
 800882a:	bd10      	pop	{r4, pc}
 800882c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008834:	e7f7      	b.n	8008826 <memcpy+0x6>

08008836 <_Balloc>:
 8008836:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	460c      	mov	r4, r1
 800883e:	b17b      	cbz	r3, 8008860 <_Balloc+0x2a>
 8008840:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008846:	b9a0      	cbnz	r0, 8008872 <_Balloc+0x3c>
 8008848:	2101      	movs	r1, #1
 800884a:	fa01 f604 	lsl.w	r6, r1, r4
 800884e:	1d72      	adds	r2, r6, #5
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	4628      	mov	r0, r5
 8008854:	f000 fbb6 	bl	8008fc4 <_calloc_r>
 8008858:	b148      	cbz	r0, 800886e <_Balloc+0x38>
 800885a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800885e:	e00b      	b.n	8008878 <_Balloc+0x42>
 8008860:	2221      	movs	r2, #33	; 0x21
 8008862:	2104      	movs	r1, #4
 8008864:	f000 fbae 	bl	8008fc4 <_calloc_r>
 8008868:	64e8      	str	r0, [r5, #76]	; 0x4c
 800886a:	2800      	cmp	r0, #0
 800886c:	d1e8      	bne.n	8008840 <_Balloc+0xa>
 800886e:	2000      	movs	r0, #0
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	6802      	ldr	r2, [r0, #0]
 8008874:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008878:	2300      	movs	r3, #0
 800887a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800887e:	e7f7      	b.n	8008870 <_Balloc+0x3a>

08008880 <_Bfree>:
 8008880:	b131      	cbz	r1, 8008890 <_Bfree+0x10>
 8008882:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008884:	684a      	ldr	r2, [r1, #4]
 8008886:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800888a:	6008      	str	r0, [r1, #0]
 800888c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008890:	4770      	bx	lr

08008892 <__multadd>:
 8008892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	461f      	mov	r7, r3
 8008898:	4606      	mov	r6, r0
 800889a:	460c      	mov	r4, r1
 800889c:	2300      	movs	r3, #0
 800889e:	690d      	ldr	r5, [r1, #16]
 80088a0:	f101 0c14 	add.w	ip, r1, #20
 80088a4:	f8dc 0000 	ldr.w	r0, [ip]
 80088a8:	3301      	adds	r3, #1
 80088aa:	b281      	uxth	r1, r0
 80088ac:	fb02 7101 	mla	r1, r2, r1, r7
 80088b0:	0c00      	lsrs	r0, r0, #16
 80088b2:	0c0f      	lsrs	r7, r1, #16
 80088b4:	fb02 7000 	mla	r0, r2, r0, r7
 80088b8:	b289      	uxth	r1, r1
 80088ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80088be:	429d      	cmp	r5, r3
 80088c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80088c4:	f84c 1b04 	str.w	r1, [ip], #4
 80088c8:	dcec      	bgt.n	80088a4 <__multadd+0x12>
 80088ca:	b1d7      	cbz	r7, 8008902 <__multadd+0x70>
 80088cc:	68a3      	ldr	r3, [r4, #8]
 80088ce:	42ab      	cmp	r3, r5
 80088d0:	dc12      	bgt.n	80088f8 <__multadd+0x66>
 80088d2:	6861      	ldr	r1, [r4, #4]
 80088d4:	4630      	mov	r0, r6
 80088d6:	3101      	adds	r1, #1
 80088d8:	f7ff ffad 	bl	8008836 <_Balloc>
 80088dc:	4680      	mov	r8, r0
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	f104 010c 	add.w	r1, r4, #12
 80088e4:	3202      	adds	r2, #2
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	300c      	adds	r0, #12
 80088ea:	f7ff ff99 	bl	8008820 <memcpy>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ffc5 	bl	8008880 <_Bfree>
 80088f6:	4644      	mov	r4, r8
 80088f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088fc:	3501      	adds	r5, #1
 80088fe:	615f      	str	r7, [r3, #20]
 8008900:	6125      	str	r5, [r4, #16]
 8008902:	4620      	mov	r0, r4
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008908 <__hi0bits>:
 8008908:	0c02      	lsrs	r2, r0, #16
 800890a:	0412      	lsls	r2, r2, #16
 800890c:	4603      	mov	r3, r0
 800890e:	b9b2      	cbnz	r2, 800893e <__hi0bits+0x36>
 8008910:	0403      	lsls	r3, r0, #16
 8008912:	2010      	movs	r0, #16
 8008914:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008918:	bf04      	itt	eq
 800891a:	021b      	lsleq	r3, r3, #8
 800891c:	3008      	addeq	r0, #8
 800891e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008922:	bf04      	itt	eq
 8008924:	011b      	lsleq	r3, r3, #4
 8008926:	3004      	addeq	r0, #4
 8008928:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800892c:	bf04      	itt	eq
 800892e:	009b      	lsleq	r3, r3, #2
 8008930:	3002      	addeq	r0, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	db06      	blt.n	8008944 <__hi0bits+0x3c>
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	d503      	bpl.n	8008942 <__hi0bits+0x3a>
 800893a:	3001      	adds	r0, #1
 800893c:	4770      	bx	lr
 800893e:	2000      	movs	r0, #0
 8008940:	e7e8      	b.n	8008914 <__hi0bits+0xc>
 8008942:	2020      	movs	r0, #32
 8008944:	4770      	bx	lr

08008946 <__lo0bits>:
 8008946:	6803      	ldr	r3, [r0, #0]
 8008948:	4601      	mov	r1, r0
 800894a:	f013 0207 	ands.w	r2, r3, #7
 800894e:	d00b      	beq.n	8008968 <__lo0bits+0x22>
 8008950:	07da      	lsls	r2, r3, #31
 8008952:	d423      	bmi.n	800899c <__lo0bits+0x56>
 8008954:	0798      	lsls	r0, r3, #30
 8008956:	bf49      	itett	mi
 8008958:	085b      	lsrmi	r3, r3, #1
 800895a:	089b      	lsrpl	r3, r3, #2
 800895c:	2001      	movmi	r0, #1
 800895e:	600b      	strmi	r3, [r1, #0]
 8008960:	bf5c      	itt	pl
 8008962:	600b      	strpl	r3, [r1, #0]
 8008964:	2002      	movpl	r0, #2
 8008966:	4770      	bx	lr
 8008968:	b298      	uxth	r0, r3
 800896a:	b9a8      	cbnz	r0, 8008998 <__lo0bits+0x52>
 800896c:	2010      	movs	r0, #16
 800896e:	0c1b      	lsrs	r3, r3, #16
 8008970:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008974:	bf04      	itt	eq
 8008976:	0a1b      	lsreq	r3, r3, #8
 8008978:	3008      	addeq	r0, #8
 800897a:	071a      	lsls	r2, r3, #28
 800897c:	bf04      	itt	eq
 800897e:	091b      	lsreq	r3, r3, #4
 8008980:	3004      	addeq	r0, #4
 8008982:	079a      	lsls	r2, r3, #30
 8008984:	bf04      	itt	eq
 8008986:	089b      	lsreq	r3, r3, #2
 8008988:	3002      	addeq	r0, #2
 800898a:	07da      	lsls	r2, r3, #31
 800898c:	d402      	bmi.n	8008994 <__lo0bits+0x4e>
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	d006      	beq.n	80089a0 <__lo0bits+0x5a>
 8008992:	3001      	adds	r0, #1
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	4770      	bx	lr
 8008998:	4610      	mov	r0, r2
 800899a:	e7e9      	b.n	8008970 <__lo0bits+0x2a>
 800899c:	2000      	movs	r0, #0
 800899e:	4770      	bx	lr
 80089a0:	2020      	movs	r0, #32
 80089a2:	4770      	bx	lr

080089a4 <__i2b>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	2101      	movs	r1, #1
 80089aa:	f7ff ff44 	bl	8008836 <_Balloc>
 80089ae:	2201      	movs	r2, #1
 80089b0:	6144      	str	r4, [r0, #20]
 80089b2:	6102      	str	r2, [r0, #16]
 80089b4:	bd10      	pop	{r4, pc}

080089b6 <__multiply>:
 80089b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	4614      	mov	r4, r2
 80089bc:	690a      	ldr	r2, [r1, #16]
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	4688      	mov	r8, r1
 80089c2:	429a      	cmp	r2, r3
 80089c4:	bfbe      	ittt	lt
 80089c6:	460b      	movlt	r3, r1
 80089c8:	46a0      	movlt	r8, r4
 80089ca:	461c      	movlt	r4, r3
 80089cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089dc:	eb07 0609 	add.w	r6, r7, r9
 80089e0:	42b3      	cmp	r3, r6
 80089e2:	bfb8      	it	lt
 80089e4:	3101      	addlt	r1, #1
 80089e6:	f7ff ff26 	bl	8008836 <_Balloc>
 80089ea:	f100 0514 	add.w	r5, r0, #20
 80089ee:	462b      	mov	r3, r5
 80089f0:	2200      	movs	r2, #0
 80089f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80089f6:	4573      	cmp	r3, lr
 80089f8:	d316      	bcc.n	8008a28 <__multiply+0x72>
 80089fa:	f104 0214 	add.w	r2, r4, #20
 80089fe:	f108 0114 	add.w	r1, r8, #20
 8008a02:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008a06:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d80c      	bhi.n	8008a2e <__multiply+0x78>
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	dd03      	ble.n	8008a20 <__multiply+0x6a>
 8008a18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d05d      	beq.n	8008adc <__multiply+0x126>
 8008a20:	6106      	str	r6, [r0, #16]
 8008a22:	b003      	add	sp, #12
 8008a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a28:	f843 2b04 	str.w	r2, [r3], #4
 8008a2c:	e7e3      	b.n	80089f6 <__multiply+0x40>
 8008a2e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008a32:	f1bb 0f00 	cmp.w	fp, #0
 8008a36:	d023      	beq.n	8008a80 <__multiply+0xca>
 8008a38:	4689      	mov	r9, r1
 8008a3a:	46ac      	mov	ip, r5
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a44:	f8dc a000 	ldr.w	sl, [ip]
 8008a48:	b2a3      	uxth	r3, r4
 8008a4a:	fa1f fa8a 	uxth.w	sl, sl
 8008a4e:	fb0b a303 	mla	r3, fp, r3, sl
 8008a52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a56:	f8dc 4000 	ldr.w	r4, [ip]
 8008a5a:	4443      	add	r3, r8
 8008a5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a60:	fb0b 840a 	mla	r4, fp, sl, r8
 8008a64:	46e2      	mov	sl, ip
 8008a66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a70:	454f      	cmp	r7, r9
 8008a72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a76:	f84a 3b04 	str.w	r3, [sl], #4
 8008a7a:	d82b      	bhi.n	8008ad4 <__multiply+0x11e>
 8008a7c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008a80:	9b01      	ldr	r3, [sp, #4]
 8008a82:	3204      	adds	r2, #4
 8008a84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008a88:	f1ba 0f00 	cmp.w	sl, #0
 8008a8c:	d020      	beq.n	8008ad0 <__multiply+0x11a>
 8008a8e:	4689      	mov	r9, r1
 8008a90:	46a8      	mov	r8, r5
 8008a92:	f04f 0b00 	mov.w	fp, #0
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	f8b9 c000 	ldrh.w	ip, [r9]
 8008a9c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	fb0a 440c 	mla	r4, sl, ip, r4
 8008aa6:	46c4      	mov	ip, r8
 8008aa8:	445c      	add	r4, fp
 8008aaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008aae:	f84c 3b04 	str.w	r3, [ip], #4
 8008ab2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ab6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008aba:	0c1b      	lsrs	r3, r3, #16
 8008abc:	fb0a b303 	mla	r3, sl, r3, fp
 8008ac0:	454f      	cmp	r7, r9
 8008ac2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ac6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008aca:	d805      	bhi.n	8008ad8 <__multiply+0x122>
 8008acc:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ad0:	3504      	adds	r5, #4
 8008ad2:	e79b      	b.n	8008a0c <__multiply+0x56>
 8008ad4:	46d4      	mov	ip, sl
 8008ad6:	e7b3      	b.n	8008a40 <__multiply+0x8a>
 8008ad8:	46e0      	mov	r8, ip
 8008ada:	e7dd      	b.n	8008a98 <__multiply+0xe2>
 8008adc:	3e01      	subs	r6, #1
 8008ade:	e799      	b.n	8008a14 <__multiply+0x5e>

08008ae0 <__pow5mult>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	4615      	mov	r5, r2
 8008ae6:	f012 0203 	ands.w	r2, r2, #3
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	d007      	beq.n	8008b00 <__pow5mult+0x20>
 8008af0:	4c1a      	ldr	r4, [pc, #104]	; (8008b5c <__pow5mult+0x7c>)
 8008af2:	3a01      	subs	r2, #1
 8008af4:	2300      	movs	r3, #0
 8008af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008afa:	f7ff feca 	bl	8008892 <__multadd>
 8008afe:	4607      	mov	r7, r0
 8008b00:	10ad      	asrs	r5, r5, #2
 8008b02:	d027      	beq.n	8008b54 <__pow5mult+0x74>
 8008b04:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008b06:	b944      	cbnz	r4, 8008b1a <__pow5mult+0x3a>
 8008b08:	f240 2171 	movw	r1, #625	; 0x271
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff ff49 	bl	80089a4 <__i2b>
 8008b12:	2300      	movs	r3, #0
 8008b14:	4604      	mov	r4, r0
 8008b16:	64b0      	str	r0, [r6, #72]	; 0x48
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	f04f 0800 	mov.w	r8, #0
 8008b1e:	07eb      	lsls	r3, r5, #31
 8008b20:	d50a      	bpl.n	8008b38 <__pow5mult+0x58>
 8008b22:	4639      	mov	r1, r7
 8008b24:	4622      	mov	r2, r4
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff ff45 	bl	80089b6 <__multiply>
 8008b2c:	4681      	mov	r9, r0
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff fea5 	bl	8008880 <_Bfree>
 8008b36:	464f      	mov	r7, r9
 8008b38:	106d      	asrs	r5, r5, #1
 8008b3a:	d00b      	beq.n	8008b54 <__pow5mult+0x74>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	b938      	cbnz	r0, 8008b50 <__pow5mult+0x70>
 8008b40:	4622      	mov	r2, r4
 8008b42:	4621      	mov	r1, r4
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff ff36 	bl	80089b6 <__multiply>
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	f8c0 8000 	str.w	r8, [r0]
 8008b50:	4604      	mov	r4, r0
 8008b52:	e7e4      	b.n	8008b1e <__pow5mult+0x3e>
 8008b54:	4638      	mov	r0, r7
 8008b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5a:	bf00      	nop
 8008b5c:	080099d8 	.word	0x080099d8

08008b60 <__lshift>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	4607      	mov	r7, r0
 8008b68:	4616      	mov	r6, r2
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b70:	eb0a 0903 	add.w	r9, sl, r3
 8008b74:	6849      	ldr	r1, [r1, #4]
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	f109 0501 	add.w	r5, r9, #1
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	db32      	blt.n	8008be6 <__lshift+0x86>
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7ff fe58 	bl	8008836 <_Balloc>
 8008b86:	2300      	movs	r3, #0
 8008b88:	4680      	mov	r8, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f100 0114 	add.w	r1, r0, #20
 8008b90:	4553      	cmp	r3, sl
 8008b92:	db2b      	blt.n	8008bec <__lshift+0x8c>
 8008b94:	6920      	ldr	r0, [r4, #16]
 8008b96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b9a:	f104 0314 	add.w	r3, r4, #20
 8008b9e:	f016 021f 	ands.w	r2, r6, #31
 8008ba2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ba6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008baa:	d025      	beq.n	8008bf8 <__lshift+0x98>
 8008bac:	2000      	movs	r0, #0
 8008bae:	f1c2 0e20 	rsb	lr, r2, #32
 8008bb2:	468a      	mov	sl, r1
 8008bb4:	681e      	ldr	r6, [r3, #0]
 8008bb6:	4096      	lsls	r6, r2
 8008bb8:	4330      	orrs	r0, r6
 8008bba:	f84a 0b04 	str.w	r0, [sl], #4
 8008bbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8008bc2:	459c      	cmp	ip, r3
 8008bc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8008bc8:	d814      	bhi.n	8008bf4 <__lshift+0x94>
 8008bca:	6048      	str	r0, [r1, #4]
 8008bcc:	b108      	cbz	r0, 8008bd2 <__lshift+0x72>
 8008bce:	f109 0502 	add.w	r5, r9, #2
 8008bd2:	3d01      	subs	r5, #1
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008bda:	4621      	mov	r1, r4
 8008bdc:	f7ff fe50 	bl	8008880 <_Bfree>
 8008be0:	4640      	mov	r0, r8
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	3101      	adds	r1, #1
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	e7c7      	b.n	8008b7c <__lshift+0x1c>
 8008bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	e7cd      	b.n	8008b90 <__lshift+0x30>
 8008bf4:	4651      	mov	r1, sl
 8008bf6:	e7dc      	b.n	8008bb2 <__lshift+0x52>
 8008bf8:	3904      	subs	r1, #4
 8008bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfe:	459c      	cmp	ip, r3
 8008c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c04:	d8f9      	bhi.n	8008bfa <__lshift+0x9a>
 8008c06:	e7e4      	b.n	8008bd2 <__lshift+0x72>

08008c08 <__mcmp>:
 8008c08:	6903      	ldr	r3, [r0, #16]
 8008c0a:	690a      	ldr	r2, [r1, #16]
 8008c0c:	b530      	push	{r4, r5, lr}
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	d10c      	bne.n	8008c2c <__mcmp+0x24>
 8008c12:	0092      	lsls	r2, r2, #2
 8008c14:	3014      	adds	r0, #20
 8008c16:	3114      	adds	r1, #20
 8008c18:	1884      	adds	r4, r0, r2
 8008c1a:	4411      	add	r1, r2
 8008c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c24:	4295      	cmp	r5, r2
 8008c26:	d003      	beq.n	8008c30 <__mcmp+0x28>
 8008c28:	d305      	bcc.n	8008c36 <__mcmp+0x2e>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	bd30      	pop	{r4, r5, pc}
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d3f3      	bcc.n	8008c1c <__mcmp+0x14>
 8008c34:	e7fa      	b.n	8008c2c <__mcmp+0x24>
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c3a:	e7f7      	b.n	8008c2c <__mcmp+0x24>

08008c3c <__mdiff>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	460d      	mov	r5, r1
 8008c42:	4607      	mov	r7, r0
 8008c44:	4611      	mov	r1, r2
 8008c46:	4628      	mov	r0, r5
 8008c48:	4614      	mov	r4, r2
 8008c4a:	f7ff ffdd 	bl	8008c08 <__mcmp>
 8008c4e:	1e06      	subs	r6, r0, #0
 8008c50:	d108      	bne.n	8008c64 <__mdiff+0x28>
 8008c52:	4631      	mov	r1, r6
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff fdee 	bl	8008836 <_Balloc>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c64:	bfa4      	itt	ge
 8008c66:	4623      	movge	r3, r4
 8008c68:	462c      	movge	r4, r5
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	bfa6      	itte	ge
 8008c70:	461d      	movge	r5, r3
 8008c72:	2600      	movge	r6, #0
 8008c74:	2601      	movlt	r6, #1
 8008c76:	f7ff fdde 	bl	8008836 <_Balloc>
 8008c7a:	f04f 0e00 	mov.w	lr, #0
 8008c7e:	60c6      	str	r6, [r0, #12]
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	6926      	ldr	r6, [r4, #16]
 8008c84:	f104 0214 	add.w	r2, r4, #20
 8008c88:	f105 0914 	add.w	r9, r5, #20
 8008c8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008c90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008c94:	f100 0114 	add.w	r1, r0, #20
 8008c98:	f852 ab04 	ldr.w	sl, [r2], #4
 8008c9c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008ca0:	fa1f f38a 	uxth.w	r3, sl
 8008ca4:	4473      	add	r3, lr
 8008ca6:	b2ac      	uxth	r4, r5
 8008ca8:	1b1b      	subs	r3, r3, r4
 8008caa:	0c2c      	lsrs	r4, r5, #16
 8008cac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008cb0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008cba:	45c8      	cmp	r8, r9
 8008cbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008cc0:	4694      	mov	ip, r2
 8008cc2:	f841 4b04 	str.w	r4, [r1], #4
 8008cc6:	d8e7      	bhi.n	8008c98 <__mdiff+0x5c>
 8008cc8:	45bc      	cmp	ip, r7
 8008cca:	d304      	bcc.n	8008cd6 <__mdiff+0x9a>
 8008ccc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008cd0:	b183      	cbz	r3, 8008cf4 <__mdiff+0xb8>
 8008cd2:	6106      	str	r6, [r0, #16]
 8008cd4:	e7c4      	b.n	8008c60 <__mdiff+0x24>
 8008cd6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008cda:	b2a2      	uxth	r2, r4
 8008cdc:	4472      	add	r2, lr
 8008cde:	1413      	asrs	r3, r2, #16
 8008ce0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ce4:	b292      	uxth	r2, r2
 8008ce6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008cee:	f841 2b04 	str.w	r2, [r1], #4
 8008cf2:	e7e9      	b.n	8008cc8 <__mdiff+0x8c>
 8008cf4:	3e01      	subs	r6, #1
 8008cf6:	e7e9      	b.n	8008ccc <__mdiff+0x90>

08008cf8 <__d2b>:
 8008cf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008cfc:	461c      	mov	r4, r3
 8008cfe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008d02:	2101      	movs	r1, #1
 8008d04:	4690      	mov	r8, r2
 8008d06:	f7ff fd96 	bl	8008836 <_Balloc>
 8008d0a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008d0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008d12:	4607      	mov	r7, r0
 8008d14:	bb34      	cbnz	r4, 8008d64 <__d2b+0x6c>
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	f1b8 0200 	subs.w	r2, r8, #0
 8008d1c:	d027      	beq.n	8008d6e <__d2b+0x76>
 8008d1e:	a802      	add	r0, sp, #8
 8008d20:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008d24:	f7ff fe0f 	bl	8008946 <__lo0bits>
 8008d28:	9900      	ldr	r1, [sp, #0]
 8008d2a:	b1f0      	cbz	r0, 8008d6a <__d2b+0x72>
 8008d2c:	9a01      	ldr	r2, [sp, #4]
 8008d2e:	f1c0 0320 	rsb	r3, r0, #32
 8008d32:	fa02 f303 	lsl.w	r3, r2, r3
 8008d36:	430b      	orrs	r3, r1
 8008d38:	40c2      	lsrs	r2, r0
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	9201      	str	r2, [sp, #4]
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bf14      	ite	ne
 8008d44:	2102      	movne	r1, #2
 8008d46:	2101      	moveq	r1, #1
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	6139      	str	r1, [r7, #16]
 8008d4c:	b1c4      	cbz	r4, 8008d80 <__d2b+0x88>
 8008d4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008d52:	4404      	add	r4, r0
 8008d54:	6034      	str	r4, [r6, #0]
 8008d56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d5a:	6028      	str	r0, [r5, #0]
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	b002      	add	sp, #8
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d68:	e7d5      	b.n	8008d16 <__d2b+0x1e>
 8008d6a:	6179      	str	r1, [r7, #20]
 8008d6c:	e7e7      	b.n	8008d3e <__d2b+0x46>
 8008d6e:	a801      	add	r0, sp, #4
 8008d70:	f7ff fde9 	bl	8008946 <__lo0bits>
 8008d74:	2101      	movs	r1, #1
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	6139      	str	r1, [r7, #16]
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	3020      	adds	r0, #32
 8008d7e:	e7e5      	b.n	8008d4c <__d2b+0x54>
 8008d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008d88:	6030      	str	r0, [r6, #0]
 8008d8a:	6918      	ldr	r0, [r3, #16]
 8008d8c:	f7ff fdbc 	bl	8008908 <__hi0bits>
 8008d90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d94:	e7e1      	b.n	8008d5a <__d2b+0x62>
	...

08008d98 <frexp>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	4616      	mov	r6, r2
 8008d9c:	2700      	movs	r7, #0
 8008d9e:	6037      	str	r7, [r6, #0]
 8008da0:	4f14      	ldr	r7, [pc, #80]	; (8008df4 <frexp+0x5c>)
 8008da2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008da6:	42bb      	cmp	r3, r7
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	460a      	mov	r2, r1
 8008dae:	dc1e      	bgt.n	8008dee <frexp+0x56>
 8008db0:	4607      	mov	r7, r0
 8008db2:	431f      	orrs	r7, r3
 8008db4:	d01b      	beq.n	8008dee <frexp+0x56>
 8008db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dba:	da0a      	bge.n	8008dd2 <frexp+0x3a>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <frexp+0x60>)
 8008dc0:	f7f7 fb8a 	bl	80004d8 <__aeabi_dmul>
 8008dc4:	460a      	mov	r2, r1
 8008dc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008dce:	4604      	mov	r4, r0
 8008dd0:	6031      	str	r1, [r6, #0]
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	151b      	asrs	r3, r3, #20
 8008dd6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008dda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008dde:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8008de2:	440b      	add	r3, r1
 8008de4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008de8:	6033      	str	r3, [r6, #0]
 8008dea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	7fefffff 	.word	0x7fefffff
 8008df8:	43500000 	.word	0x43500000

08008dfc <strncpy>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	3901      	subs	r1, #1
 8008e02:	b902      	cbnz	r2, 8008e06 <strncpy+0xa>
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	4623      	mov	r3, r4
 8008e08:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008e0c:	1e56      	subs	r6, r2, #1
 8008e0e:	f803 5b01 	strb.w	r5, [r3], #1
 8008e12:	b92d      	cbnz	r5, 8008e20 <strncpy+0x24>
 8008e14:	4414      	add	r4, r2
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	d0f4      	beq.n	8008e04 <strncpy+0x8>
 8008e1a:	f803 5b01 	strb.w	r5, [r3], #1
 8008e1e:	e7fa      	b.n	8008e16 <strncpy+0x1a>
 8008e20:	461c      	mov	r4, r3
 8008e22:	4632      	mov	r2, r6
 8008e24:	e7ed      	b.n	8008e02 <strncpy+0x6>

08008e26 <__ssprint_r>:
 8008e26:	6893      	ldr	r3, [r2, #8]
 8008e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	4681      	mov	r9, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4616      	mov	r6, r2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d05e      	beq.n	8008ef4 <__ssprint_r+0xce>
 8008e36:	f04f 0b00 	mov.w	fp, #0
 8008e3a:	465f      	mov	r7, fp
 8008e3c:	f8d2 a000 	ldr.w	sl, [r2]
 8008e40:	b357      	cbz	r7, 8008e98 <__ssprint_r+0x72>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	429f      	cmp	r7, r3
 8008e46:	d340      	bcc.n	8008eca <__ssprint_r+0xa4>
 8008e48:	89a2      	ldrh	r2, [r4, #12]
 8008e4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e4e:	d03c      	beq.n	8008eca <__ssprint_r+0xa4>
 8008e50:	2302      	movs	r3, #2
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	6921      	ldr	r1, [r4, #16]
 8008e56:	eba5 0801 	sub.w	r8, r5, r1
 8008e5a:	6965      	ldr	r5, [r4, #20]
 8008e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e60:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e64:	f108 0301 	add.w	r3, r8, #1
 8008e68:	443b      	add	r3, r7
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	bf38      	it	cc
 8008e6e:	461d      	movcc	r5, r3
 8008e70:	0553      	lsls	r3, r2, #21
 8008e72:	d544      	bpl.n	8008efe <__ssprint_r+0xd8>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4648      	mov	r0, r9
 8008e78:	f7fd f872 	bl	8005f60 <_malloc_r>
 8008e7c:	b988      	cbnz	r0, 8008ea2 <__ssprint_r+0x7c>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	f8c9 3000 	str.w	r3, [r9]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	2300      	movs	r3, #0
 8008e92:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8008e96:	e02f      	b.n	8008ef8 <__ssprint_r+0xd2>
 8008e98:	e9da b700 	ldrd	fp, r7, [sl]
 8008e9c:	f10a 0a08 	add.w	sl, sl, #8
 8008ea0:	e7ce      	b.n	8008e40 <__ssprint_r+0x1a>
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	6921      	ldr	r1, [r4, #16]
 8008ea6:	9001      	str	r0, [sp, #4]
 8008ea8:	f7ff fcba 	bl	8008820 <memcpy>
 8008eac:	89a2      	ldrh	r2, [r4, #12]
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008eb8:	81a2      	strh	r2, [r4, #12]
 8008eba:	6123      	str	r3, [r4, #16]
 8008ebc:	4443      	add	r3, r8
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	6165      	str	r5, [r4, #20]
 8008ec4:	eba5 0508 	sub.w	r5, r5, r8
 8008ec8:	60a5      	str	r5, [r4, #8]
 8008eca:	42bb      	cmp	r3, r7
 8008ecc:	bf28      	it	cs
 8008ece:	463b      	movcs	r3, r7
 8008ed0:	4659      	mov	r1, fp
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	f000 f8b3 	bl	8009042 <memmove>
 8008edc:	68a2      	ldr	r2, [r4, #8]
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	60a2      	str	r2, [r4, #8]
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	68b3      	ldr	r3, [r6, #8]
 8008eec:	1bdf      	subs	r7, r3, r7
 8008eee:	60b7      	str	r7, [r6, #8]
 8008ef0:	2f00      	cmp	r7, #0
 8008ef2:	d1d1      	bne.n	8008e98 <__ssprint_r+0x72>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	6070      	str	r0, [r6, #4]
 8008ef8:	b003      	add	sp, #12
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	462a      	mov	r2, r5
 8008f00:	4648      	mov	r0, r9
 8008f02:	f000 f8b7 	bl	8009074 <_realloc_r>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1d6      	bne.n	8008eba <__ssprint_r+0x94>
 8008f0c:	6921      	ldr	r1, [r4, #16]
 8008f0e:	4648      	mov	r0, r9
 8008f10:	f7ff fbac 	bl	800866c <_free_r>
 8008f14:	e7b3      	b.n	8008e7e <__ssprint_r+0x58>
	...

08008f18 <__register_exitproc>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4c26      	ldr	r4, [pc, #152]	; (8008fb8 <__register_exitproc+0xa0>)
 8008f1e:	4606      	mov	r6, r0
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	4698      	mov	r8, r3
 8008f24:	460f      	mov	r7, r1
 8008f26:	4691      	mov	r9, r2
 8008f28:	f7ff fc6a 	bl	8008800 <__retarget_lock_acquire_recursive>
 8008f2c:	4b23      	ldr	r3, [pc, #140]	; (8008fbc <__register_exitproc+0xa4>)
 8008f2e:	681d      	ldr	r5, [r3, #0]
 8008f30:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8008f34:	b918      	cbnz	r0, 8008f3e <__register_exitproc+0x26>
 8008f36:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8008f3a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008f3e:	6843      	ldr	r3, [r0, #4]
 8008f40:	2b1f      	cmp	r3, #31
 8008f42:	dd19      	ble.n	8008f78 <__register_exitproc+0x60>
 8008f44:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <__register_exitproc+0xa8>)
 8008f46:	b933      	cbnz	r3, 8008f56 <__register_exitproc+0x3e>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	f7ff fc5a 	bl	8008802 <__retarget_lock_release_recursive>
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008f5a:	f7fc fff1 	bl	8005f40 <malloc>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d0f2      	beq.n	8008f48 <__register_exitproc+0x30>
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8008f68:	6042      	str	r2, [r0, #4]
 8008f6a:	6003      	str	r3, [r0, #0]
 8008f6c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008f70:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8008f74:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8008f78:	6843      	ldr	r3, [r0, #4]
 8008f7a:	b19e      	cbz	r6, 8008fa4 <__register_exitproc+0x8c>
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8008f82:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8008f86:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8008f8a:	409a      	lsls	r2, r3
 8008f8c:	4311      	orrs	r1, r2
 8008f8e:	2e02      	cmp	r6, #2
 8008f90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8008f94:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8008f98:	bf02      	ittt	eq
 8008f9a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8008f9e:	430a      	orreq	r2, r1
 8008fa0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	6042      	str	r2, [r0, #4]
 8008faa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	f7ff fc27 	bl	8008802 <__retarget_lock_release_recursive>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7cc      	b.n	8008f52 <__register_exitproc+0x3a>
 8008fb8:	20000850 	.word	0x20000850
 8008fbc:	08009884 	.word	0x08009884
 8008fc0:	08005f41 	.word	0x08005f41

08008fc4 <_calloc_r>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	4351      	muls	r1, r2
 8008fc8:	f7fc ffca 	bl	8005f60 <_malloc_r>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	b198      	cbz	r0, 8008ff8 <_calloc_r+0x34>
 8008fd0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008fd4:	f022 0203 	bic.w	r2, r2, #3
 8008fd8:	3a04      	subs	r2, #4
 8008fda:	2a24      	cmp	r2, #36	; 0x24
 8008fdc:	d81b      	bhi.n	8009016 <_calloc_r+0x52>
 8008fde:	2a13      	cmp	r2, #19
 8008fe0:	d917      	bls.n	8009012 <_calloc_r+0x4e>
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	2a1b      	cmp	r2, #27
 8008fe6:	e9c0 1100 	strd	r1, r1, [r0]
 8008fea:	d807      	bhi.n	8008ffc <_calloc_r+0x38>
 8008fec:	f100 0308 	add.w	r3, r0, #8
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	e9c3 2200 	strd	r2, r2, [r3]
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	bd10      	pop	{r4, pc}
 8008ffc:	2a24      	cmp	r2, #36	; 0x24
 8008ffe:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8009002:	bf11      	iteee	ne
 8009004:	f100 0310 	addne.w	r3, r0, #16
 8009008:	6101      	streq	r1, [r0, #16]
 800900a:	f100 0318 	addeq.w	r3, r0, #24
 800900e:	6141      	streq	r1, [r0, #20]
 8009010:	e7ee      	b.n	8008ff0 <_calloc_r+0x2c>
 8009012:	4603      	mov	r3, r0
 8009014:	e7ec      	b.n	8008ff0 <_calloc_r+0x2c>
 8009016:	2100      	movs	r1, #0
 8009018:	f7fd f9d8 	bl	80063cc <memset>
 800901c:	e7ec      	b.n	8008ff8 <_calloc_r+0x34>

0800901e <__ascii_mbtowc>:
 800901e:	b082      	sub	sp, #8
 8009020:	b901      	cbnz	r1, 8009024 <__ascii_mbtowc+0x6>
 8009022:	a901      	add	r1, sp, #4
 8009024:	b142      	cbz	r2, 8009038 <__ascii_mbtowc+0x1a>
 8009026:	b14b      	cbz	r3, 800903c <__ascii_mbtowc+0x1e>
 8009028:	7813      	ldrb	r3, [r2, #0]
 800902a:	600b      	str	r3, [r1, #0]
 800902c:	7812      	ldrb	r2, [r2, #0]
 800902e:	1c10      	adds	r0, r2, #0
 8009030:	bf18      	it	ne
 8009032:	2001      	movne	r0, #1
 8009034:	b002      	add	sp, #8
 8009036:	4770      	bx	lr
 8009038:	4610      	mov	r0, r2
 800903a:	e7fb      	b.n	8009034 <__ascii_mbtowc+0x16>
 800903c:	f06f 0001 	mvn.w	r0, #1
 8009040:	e7f8      	b.n	8009034 <__ascii_mbtowc+0x16>

08009042 <memmove>:
 8009042:	4288      	cmp	r0, r1
 8009044:	b510      	push	{r4, lr}
 8009046:	eb01 0302 	add.w	r3, r1, r2
 800904a:	d807      	bhi.n	800905c <memmove+0x1a>
 800904c:	1e42      	subs	r2, r0, #1
 800904e:	4299      	cmp	r1, r3
 8009050:	d00a      	beq.n	8009068 <memmove+0x26>
 8009052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009056:	f802 4f01 	strb.w	r4, [r2, #1]!
 800905a:	e7f8      	b.n	800904e <memmove+0xc>
 800905c:	4283      	cmp	r3, r0
 800905e:	d9f5      	bls.n	800904c <memmove+0xa>
 8009060:	1881      	adds	r1, r0, r2
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	42d3      	cmn	r3, r2
 8009066:	d100      	bne.n	800906a <memmove+0x28>
 8009068:	bd10      	pop	{r4, pc}
 800906a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800906e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009072:	e7f7      	b.n	8009064 <memmove+0x22>

08009074 <_realloc_r>:
 8009074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4682      	mov	sl, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b929      	cbnz	r1, 800908a <_realloc_r+0x16>
 800907e:	4611      	mov	r1, r2
 8009080:	b003      	add	sp, #12
 8009082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009086:	f7fc bf6b 	b.w	8005f60 <_malloc_r>
 800908a:	9201      	str	r2, [sp, #4]
 800908c:	f7fd f9a6 	bl	80063dc <__malloc_lock>
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009096:	f102 080b 	add.w	r8, r2, #11
 800909a:	f1b8 0f16 	cmp.w	r8, #22
 800909e:	f1a4 0908 	sub.w	r9, r4, #8
 80090a2:	f025 0603 	bic.w	r6, r5, #3
 80090a6:	d90b      	bls.n	80090c0 <_realloc_r+0x4c>
 80090a8:	f038 0807 	bics.w	r8, r8, #7
 80090ac:	d50a      	bpl.n	80090c4 <_realloc_r+0x50>
 80090ae:	230c      	movs	r3, #12
 80090b0:	f04f 0b00 	mov.w	fp, #0
 80090b4:	f8ca 3000 	str.w	r3, [sl]
 80090b8:	4658      	mov	r0, fp
 80090ba:	b003      	add	sp, #12
 80090bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c0:	f04f 0810 	mov.w	r8, #16
 80090c4:	4590      	cmp	r8, r2
 80090c6:	d3f2      	bcc.n	80090ae <_realloc_r+0x3a>
 80090c8:	45b0      	cmp	r8, r6
 80090ca:	f340 8175 	ble.w	80093b8 <_realloc_r+0x344>
 80090ce:	49ab      	ldr	r1, [pc, #684]	; (800937c <_realloc_r+0x308>)
 80090d0:	eb09 0306 	add.w	r3, r9, r6
 80090d4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80090d8:	6858      	ldr	r0, [r3, #4]
 80090da:	459c      	cmp	ip, r3
 80090dc:	9101      	str	r1, [sp, #4]
 80090de:	d005      	beq.n	80090ec <_realloc_r+0x78>
 80090e0:	f020 0101 	bic.w	r1, r0, #1
 80090e4:	4419      	add	r1, r3
 80090e6:	6849      	ldr	r1, [r1, #4]
 80090e8:	07cf      	lsls	r7, r1, #31
 80090ea:	d447      	bmi.n	800917c <_realloc_r+0x108>
 80090ec:	f020 0003 	bic.w	r0, r0, #3
 80090f0:	459c      	cmp	ip, r3
 80090f2:	eb06 0700 	add.w	r7, r6, r0
 80090f6:	d119      	bne.n	800912c <_realloc_r+0xb8>
 80090f8:	f108 0110 	add.w	r1, r8, #16
 80090fc:	42b9      	cmp	r1, r7
 80090fe:	dc3f      	bgt.n	8009180 <_realloc_r+0x10c>
 8009100:	9a01      	ldr	r2, [sp, #4]
 8009102:	eba7 0708 	sub.w	r7, r7, r8
 8009106:	eb09 0308 	add.w	r3, r9, r8
 800910a:	f047 0701 	orr.w	r7, r7, #1
 800910e:	6093      	str	r3, [r2, #8]
 8009110:	605f      	str	r7, [r3, #4]
 8009112:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009116:	4650      	mov	r0, sl
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	ea43 0308 	orr.w	r3, r3, r8
 8009120:	f844 3c04 	str.w	r3, [r4, #-4]
 8009124:	f7fd f960 	bl	80063e8 <__malloc_unlock>
 8009128:	46a3      	mov	fp, r4
 800912a:	e7c5      	b.n	80090b8 <_realloc_r+0x44>
 800912c:	45b8      	cmp	r8, r7
 800912e:	dc27      	bgt.n	8009180 <_realloc_r+0x10c>
 8009130:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	6093      	str	r3, [r2, #8]
 8009138:	eba7 0008 	sub.w	r0, r7, r8
 800913c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009140:	280f      	cmp	r0, #15
 8009142:	f002 0201 	and.w	r2, r2, #1
 8009146:	eb09 0307 	add.w	r3, r9, r7
 800914a:	f240 8137 	bls.w	80093bc <_realloc_r+0x348>
 800914e:	eb09 0108 	add.w	r1, r9, r8
 8009152:	ea48 0202 	orr.w	r2, r8, r2
 8009156:	f040 0001 	orr.w	r0, r0, #1
 800915a:	f8c9 2004 	str.w	r2, [r9, #4]
 800915e:	6048      	str	r0, [r1, #4]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	3108      	adds	r1, #8
 8009164:	f042 0201 	orr.w	r2, r2, #1
 8009168:	605a      	str	r2, [r3, #4]
 800916a:	4650      	mov	r0, sl
 800916c:	f7ff fa7e 	bl	800866c <_free_r>
 8009170:	4650      	mov	r0, sl
 8009172:	f7fd f939 	bl	80063e8 <__malloc_unlock>
 8009176:	f109 0b08 	add.w	fp, r9, #8
 800917a:	e79d      	b.n	80090b8 <_realloc_r+0x44>
 800917c:	2000      	movs	r0, #0
 800917e:	4603      	mov	r3, r0
 8009180:	07e9      	lsls	r1, r5, #31
 8009182:	f100 80c9 	bmi.w	8009318 <_realloc_r+0x2a4>
 8009186:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800918a:	eba9 0505 	sub.w	r5, r9, r5
 800918e:	6869      	ldr	r1, [r5, #4]
 8009190:	f021 0103 	bic.w	r1, r1, #3
 8009194:	eb01 0b06 	add.w	fp, r1, r6
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8088 	beq.w	80092ae <_realloc_r+0x23a>
 800919e:	459c      	cmp	ip, r3
 80091a0:	eb00 070b 	add.w	r7, r0, fp
 80091a4:	d14a      	bne.n	800923c <_realloc_r+0x1c8>
 80091a6:	f108 0310 	add.w	r3, r8, #16
 80091aa:	42bb      	cmp	r3, r7
 80091ac:	dc7f      	bgt.n	80092ae <_realloc_r+0x23a>
 80091ae:	46ab      	mov	fp, r5
 80091b0:	68eb      	ldr	r3, [r5, #12]
 80091b2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80091b6:	60d3      	str	r3, [r2, #12]
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	1f32      	subs	r2, r6, #4
 80091bc:	2a24      	cmp	r2, #36	; 0x24
 80091be:	d838      	bhi.n	8009232 <_realloc_r+0x1be>
 80091c0:	2a13      	cmp	r2, #19
 80091c2:	d934      	bls.n	800922e <_realloc_r+0x1ba>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	2a1b      	cmp	r2, #27
 80091c8:	60ab      	str	r3, [r5, #8]
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	60eb      	str	r3, [r5, #12]
 80091ce:	d81b      	bhi.n	8009208 <_realloc_r+0x194>
 80091d0:	3408      	adds	r4, #8
 80091d2:	f105 0310 	add.w	r3, r5, #16
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	68a2      	ldr	r2, [r4, #8]
 80091e0:	609a      	str	r2, [r3, #8]
 80091e2:	9a01      	ldr	r2, [sp, #4]
 80091e4:	eba7 0708 	sub.w	r7, r7, r8
 80091e8:	eb05 0308 	add.w	r3, r5, r8
 80091ec:	f047 0701 	orr.w	r7, r7, #1
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	605f      	str	r7, [r3, #4]
 80091f4:	686b      	ldr	r3, [r5, #4]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	ea43 0308 	orr.w	r3, r3, r8
 80091fe:	606b      	str	r3, [r5, #4]
 8009200:	4650      	mov	r0, sl
 8009202:	f7fd f8f1 	bl	80063e8 <__malloc_unlock>
 8009206:	e757      	b.n	80090b8 <_realloc_r+0x44>
 8009208:	68a3      	ldr	r3, [r4, #8]
 800920a:	2a24      	cmp	r2, #36	; 0x24
 800920c:	612b      	str	r3, [r5, #16]
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	bf18      	it	ne
 8009212:	3410      	addne	r4, #16
 8009214:	616b      	str	r3, [r5, #20]
 8009216:	bf09      	itett	eq
 8009218:	6923      	ldreq	r3, [r4, #16]
 800921a:	f105 0318 	addne.w	r3, r5, #24
 800921e:	61ab      	streq	r3, [r5, #24]
 8009220:	6962      	ldreq	r2, [r4, #20]
 8009222:	bf02      	ittt	eq
 8009224:	f105 0320 	addeq.w	r3, r5, #32
 8009228:	61ea      	streq	r2, [r5, #28]
 800922a:	3418      	addeq	r4, #24
 800922c:	e7d3      	b.n	80091d6 <_realloc_r+0x162>
 800922e:	465b      	mov	r3, fp
 8009230:	e7d1      	b.n	80091d6 <_realloc_r+0x162>
 8009232:	4621      	mov	r1, r4
 8009234:	4658      	mov	r0, fp
 8009236:	f7ff ff04 	bl	8009042 <memmove>
 800923a:	e7d2      	b.n	80091e2 <_realloc_r+0x16e>
 800923c:	45b8      	cmp	r8, r7
 800923e:	dc36      	bgt.n	80092ae <_realloc_r+0x23a>
 8009240:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009244:	4628      	mov	r0, r5
 8009246:	60da      	str	r2, [r3, #12]
 8009248:	6093      	str	r3, [r2, #8]
 800924a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800924e:	68eb      	ldr	r3, [r5, #12]
 8009250:	60d3      	str	r3, [r2, #12]
 8009252:	609a      	str	r2, [r3, #8]
 8009254:	1f32      	subs	r2, r6, #4
 8009256:	2a24      	cmp	r2, #36	; 0x24
 8009258:	d825      	bhi.n	80092a6 <_realloc_r+0x232>
 800925a:	2a13      	cmp	r2, #19
 800925c:	d908      	bls.n	8009270 <_realloc_r+0x1fc>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	2a1b      	cmp	r2, #27
 8009262:	60ab      	str	r3, [r5, #8]
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	60eb      	str	r3, [r5, #12]
 8009268:	d80a      	bhi.n	8009280 <_realloc_r+0x20c>
 800926a:	3408      	adds	r4, #8
 800926c:	f105 0010 	add.w	r0, r5, #16
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	6003      	str	r3, [r0, #0]
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	6043      	str	r3, [r0, #4]
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	6083      	str	r3, [r0, #8]
 800927c:	46a9      	mov	r9, r5
 800927e:	e75b      	b.n	8009138 <_realloc_r+0xc4>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	2a24      	cmp	r2, #36	; 0x24
 8009284:	612b      	str	r3, [r5, #16]
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	bf18      	it	ne
 800928a:	f105 0018 	addne.w	r0, r5, #24
 800928e:	616b      	str	r3, [r5, #20]
 8009290:	bf09      	itett	eq
 8009292:	6923      	ldreq	r3, [r4, #16]
 8009294:	3410      	addne	r4, #16
 8009296:	61ab      	streq	r3, [r5, #24]
 8009298:	6963      	ldreq	r3, [r4, #20]
 800929a:	bf02      	ittt	eq
 800929c:	f105 0020 	addeq.w	r0, r5, #32
 80092a0:	61eb      	streq	r3, [r5, #28]
 80092a2:	3418      	addeq	r4, #24
 80092a4:	e7e4      	b.n	8009270 <_realloc_r+0x1fc>
 80092a6:	4621      	mov	r1, r4
 80092a8:	f7ff fecb 	bl	8009042 <memmove>
 80092ac:	e7e6      	b.n	800927c <_realloc_r+0x208>
 80092ae:	45d8      	cmp	r8, fp
 80092b0:	dc32      	bgt.n	8009318 <_realloc_r+0x2a4>
 80092b2:	4628      	mov	r0, r5
 80092b4:	68eb      	ldr	r3, [r5, #12]
 80092b6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80092ba:	60d3      	str	r3, [r2, #12]
 80092bc:	609a      	str	r2, [r3, #8]
 80092be:	1f32      	subs	r2, r6, #4
 80092c0:	2a24      	cmp	r2, #36	; 0x24
 80092c2:	d825      	bhi.n	8009310 <_realloc_r+0x29c>
 80092c4:	2a13      	cmp	r2, #19
 80092c6:	d908      	bls.n	80092da <_realloc_r+0x266>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	2a1b      	cmp	r2, #27
 80092cc:	60ab      	str	r3, [r5, #8]
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	60eb      	str	r3, [r5, #12]
 80092d2:	d80a      	bhi.n	80092ea <_realloc_r+0x276>
 80092d4:	3408      	adds	r4, #8
 80092d6:	f105 0010 	add.w	r0, r5, #16
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	6043      	str	r3, [r0, #4]
 80092e2:	68a3      	ldr	r3, [r4, #8]
 80092e4:	6083      	str	r3, [r0, #8]
 80092e6:	465f      	mov	r7, fp
 80092e8:	e7c8      	b.n	800927c <_realloc_r+0x208>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	2a24      	cmp	r2, #36	; 0x24
 80092ee:	612b      	str	r3, [r5, #16]
 80092f0:	68e3      	ldr	r3, [r4, #12]
 80092f2:	bf18      	it	ne
 80092f4:	f105 0018 	addne.w	r0, r5, #24
 80092f8:	616b      	str	r3, [r5, #20]
 80092fa:	bf09      	itett	eq
 80092fc:	6923      	ldreq	r3, [r4, #16]
 80092fe:	3410      	addne	r4, #16
 8009300:	61ab      	streq	r3, [r5, #24]
 8009302:	6963      	ldreq	r3, [r4, #20]
 8009304:	bf02      	ittt	eq
 8009306:	f105 0020 	addeq.w	r0, r5, #32
 800930a:	61eb      	streq	r3, [r5, #28]
 800930c:	3418      	addeq	r4, #24
 800930e:	e7e4      	b.n	80092da <_realloc_r+0x266>
 8009310:	4621      	mov	r1, r4
 8009312:	f7ff fe96 	bl	8009042 <memmove>
 8009316:	e7e6      	b.n	80092e6 <_realloc_r+0x272>
 8009318:	4611      	mov	r1, r2
 800931a:	4650      	mov	r0, sl
 800931c:	f7fc fe20 	bl	8005f60 <_malloc_r>
 8009320:	4683      	mov	fp, r0
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f af6c 	beq.w	8009200 <_realloc_r+0x18c>
 8009328:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800932c:	f1a0 0208 	sub.w	r2, r0, #8
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	444b      	add	r3, r9
 8009336:	4293      	cmp	r3, r2
 8009338:	d105      	bne.n	8009346 <_realloc_r+0x2d2>
 800933a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800933e:	f027 0703 	bic.w	r7, r7, #3
 8009342:	4437      	add	r7, r6
 8009344:	e6f8      	b.n	8009138 <_realloc_r+0xc4>
 8009346:	1f32      	subs	r2, r6, #4
 8009348:	2a24      	cmp	r2, #36	; 0x24
 800934a:	d831      	bhi.n	80093b0 <_realloc_r+0x33c>
 800934c:	2a13      	cmp	r2, #19
 800934e:	d92c      	bls.n	80093aa <_realloc_r+0x336>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	2a1b      	cmp	r2, #27
 8009354:	6003      	str	r3, [r0, #0]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	6043      	str	r3, [r0, #4]
 800935a:	d811      	bhi.n	8009380 <_realloc_r+0x30c>
 800935c:	f104 0208 	add.w	r2, r4, #8
 8009360:	f100 0308 	add.w	r3, r0, #8
 8009364:	6811      	ldr	r1, [r2, #0]
 8009366:	6019      	str	r1, [r3, #0]
 8009368:	6851      	ldr	r1, [r2, #4]
 800936a:	6059      	str	r1, [r3, #4]
 800936c:	6892      	ldr	r2, [r2, #8]
 800936e:	609a      	str	r2, [r3, #8]
 8009370:	4621      	mov	r1, r4
 8009372:	4650      	mov	r0, sl
 8009374:	f7ff f97a 	bl	800866c <_free_r>
 8009378:	e742      	b.n	8009200 <_realloc_r+0x18c>
 800937a:	bf00      	nop
 800937c:	20000440 	.word	0x20000440
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	2a24      	cmp	r2, #36	; 0x24
 8009384:	6083      	str	r3, [r0, #8]
 8009386:	68e3      	ldr	r3, [r4, #12]
 8009388:	bf18      	it	ne
 800938a:	f104 0210 	addne.w	r2, r4, #16
 800938e:	60c3      	str	r3, [r0, #12]
 8009390:	bf09      	itett	eq
 8009392:	6923      	ldreq	r3, [r4, #16]
 8009394:	f100 0310 	addne.w	r3, r0, #16
 8009398:	6103      	streq	r3, [r0, #16]
 800939a:	6961      	ldreq	r1, [r4, #20]
 800939c:	bf02      	ittt	eq
 800939e:	f104 0218 	addeq.w	r2, r4, #24
 80093a2:	f100 0318 	addeq.w	r3, r0, #24
 80093a6:	6141      	streq	r1, [r0, #20]
 80093a8:	e7dc      	b.n	8009364 <_realloc_r+0x2f0>
 80093aa:	4603      	mov	r3, r0
 80093ac:	4622      	mov	r2, r4
 80093ae:	e7d9      	b.n	8009364 <_realloc_r+0x2f0>
 80093b0:	4621      	mov	r1, r4
 80093b2:	f7ff fe46 	bl	8009042 <memmove>
 80093b6:	e7db      	b.n	8009370 <_realloc_r+0x2fc>
 80093b8:	4637      	mov	r7, r6
 80093ba:	e6bd      	b.n	8009138 <_realloc_r+0xc4>
 80093bc:	4317      	orrs	r7, r2
 80093be:	f8c9 7004 	str.w	r7, [r9, #4]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	605a      	str	r2, [r3, #4]
 80093ca:	e6d1      	b.n	8009170 <_realloc_r+0xfc>

080093cc <__ascii_wctomb>:
 80093cc:	b149      	cbz	r1, 80093e2 <__ascii_wctomb+0x16>
 80093ce:	2aff      	cmp	r2, #255	; 0xff
 80093d0:	bf8b      	itete	hi
 80093d2:	238a      	movhi	r3, #138	; 0x8a
 80093d4:	700a      	strbls	r2, [r1, #0]
 80093d6:	6003      	strhi	r3, [r0, #0]
 80093d8:	2001      	movls	r0, #1
 80093da:	bf88      	it	hi
 80093dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80093e0:	4770      	bx	lr
 80093e2:	4608      	mov	r0, r1
 80093e4:	4770      	bx	lr
	...

080093e8 <_getpid>:
 80093e8:	2258      	movs	r2, #88	; 0x58
 80093ea:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <_getpid+0xc>)
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	4770      	bx	lr
 80093f4:	20000c78 	.word	0x20000c78

080093f8 <_kill>:
 80093f8:	2258      	movs	r2, #88	; 0x58
 80093fa:	4b02      	ldr	r3, [pc, #8]	; (8009404 <_kill+0xc>)
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	4770      	bx	lr
 8009404:	20000c78 	.word	0x20000c78

08009408 <_sbrk>:
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <_sbrk+0x14>)
 800940a:	4602      	mov	r2, r0
 800940c:	6819      	ldr	r1, [r3, #0]
 800940e:	b909      	cbnz	r1, 8009414 <_sbrk+0xc>
 8009410:	4903      	ldr	r1, [pc, #12]	; (8009420 <_sbrk+0x18>)
 8009412:	6019      	str	r1, [r3, #0]
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	4402      	add	r2, r0
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	4770      	bx	lr
 800941c:	20000c64 	.word	0x20000c64
 8009420:	20000c7c 	.word	0x20000c7c

08009424 <_exit>:
 8009424:	e7fe      	b.n	8009424 <_exit>
	...

08009428 <_init>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr

08009434 <_fini>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	bf00      	nop
 8009438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943a:	bc08      	pop	{r3}
 800943c:	469e      	mov	lr, r3
 800943e:	4770      	bx	lr
