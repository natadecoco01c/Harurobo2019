
odom_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000d4  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000168  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000518  20000000  08006648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000250  20000518  08006b60  00020518  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000768  08006b60  00020768  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b371  00000000  00000000  00020541  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003720  00000000  00000000  0003b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006c25  00000000  00000000  0003efd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  00046740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006961  00000000  00000000  000474a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005659  00000000  00000000  0004de01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005345a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003554  00000000  00000000  000534d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00056a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00056a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000518 	.word	0x20000518
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ec8 	.word	0x08005ec8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000051c 	.word	0x2000051c
 8000148:	08005ec8 	.word	0x08005ec8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__gedf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004d4:	e006      	b.n	80004e4 <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__ledf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpdf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004fa:	d01b      	beq.n	8000534 <__cmpdf2+0x54>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000502:	bf0c      	ite	eq
 8000504:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000508:	ea91 0f03 	teqne	r1, r3
 800050c:	bf02      	ittt	eq
 800050e:	ea90 0f02 	teqeq	r0, r2
 8000512:	2000      	moveq	r0, #0
 8000514:	4770      	bxeq	lr
 8000516:	f110 0f00 	cmn.w	r0, #0
 800051a:	ea91 0f03 	teq	r1, r3
 800051e:	bf58      	it	pl
 8000520:	4299      	cmppl	r1, r3
 8000522:	bf08      	it	eq
 8000524:	4290      	cmpeq	r0, r2
 8000526:	bf2c      	ite	cs
 8000528:	17d8      	asrcs	r0, r3, #31
 800052a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800052e:	f040 0001 	orr.w	r0, r0, #1
 8000532:	4770      	bx	lr
 8000534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800053c:	d102      	bne.n	8000544 <__cmpdf2+0x64>
 800053e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000542:	d107      	bne.n	8000554 <__cmpdf2+0x74>
 8000544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800054c:	d1d6      	bne.n	80004fc <__cmpdf2+0x1c>
 800054e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000552:	d0d3      	beq.n	80004fc <__cmpdf2+0x1c>
 8000554:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <__aeabi_cdrcmple>:
 800055c:	4684      	mov	ip, r0
 800055e:	4610      	mov	r0, r2
 8000560:	4662      	mov	r2, ip
 8000562:	468c      	mov	ip, r1
 8000564:	4619      	mov	r1, r3
 8000566:	4663      	mov	r3, ip
 8000568:	e000      	b.n	800056c <__aeabi_cdcmpeq>
 800056a:	bf00      	nop

0800056c <__aeabi_cdcmpeq>:
 800056c:	b501      	push	{r0, lr}
 800056e:	f7ff ffb7 	bl	80004e0 <__cmpdf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	bf48      	it	mi
 8000576:	f110 0f00 	cmnmi.w	r0, #0
 800057a:	bd01      	pop	{r0, pc}

0800057c <__aeabi_dcmpeq>:
 800057c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000580:	f7ff fff4 	bl	800056c <__aeabi_cdcmpeq>
 8000584:	bf0c      	ite	eq
 8000586:	2001      	moveq	r0, #1
 8000588:	2000      	movne	r0, #0
 800058a:	f85d fb08 	ldr.w	pc, [sp], #8
 800058e:	bf00      	nop

08000590 <__aeabi_dcmplt>:
 8000590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000594:	f7ff ffea 	bl	800056c <__aeabi_cdcmpeq>
 8000598:	bf34      	ite	cc
 800059a:	2001      	movcc	r0, #1
 800059c:	2000      	movcs	r0, #0
 800059e:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a2:	bf00      	nop

080005a4 <__aeabi_dcmple>:
 80005a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a8:	f7ff ffe0 	bl	800056c <__aeabi_cdcmpeq>
 80005ac:	bf94      	ite	ls
 80005ae:	2001      	movls	r0, #1
 80005b0:	2000      	movhi	r0, #0
 80005b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005b6:	bf00      	nop

080005b8 <__aeabi_dcmpge>:
 80005b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005bc:	f7ff ffce 	bl	800055c <__aeabi_cdrcmple>
 80005c0:	bf94      	ite	ls
 80005c2:	2001      	movls	r0, #1
 80005c4:	2000      	movhi	r0, #0
 80005c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ca:	bf00      	nop

080005cc <__aeabi_dcmpgt>:
 80005cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d0:	f7ff ffc4 	bl	800055c <__aeabi_cdrcmple>
 80005d4:	bf34      	ite	cc
 80005d6:	2001      	movcc	r0, #1
 80005d8:	2000      	movcs	r0, #0
 80005da:	f85d fb08 	ldr.w	pc, [sp], #8
 80005de:	bf00      	nop

080005e0 <__aeabi_frsub>:
 80005e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005e4:	e002      	b.n	80005ec <__addsf3>
 80005e6:	bf00      	nop

080005e8 <__aeabi_fsub>:
 80005e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005ec <__addsf3>:
 80005ec:	0042      	lsls	r2, r0, #1
 80005ee:	bf1f      	itttt	ne
 80005f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005f4:	ea92 0f03 	teqne	r2, r3
 80005f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000600:	d06a      	beq.n	80006d8 <__addsf3+0xec>
 8000602:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000606:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800060a:	bfc1      	itttt	gt
 800060c:	18d2      	addgt	r2, r2, r3
 800060e:	4041      	eorgt	r1, r0
 8000610:	4048      	eorgt	r0, r1
 8000612:	4041      	eorgt	r1, r0
 8000614:	bfb8      	it	lt
 8000616:	425b      	neglt	r3, r3
 8000618:	2b19      	cmp	r3, #25
 800061a:	bf88      	it	hi
 800061c:	4770      	bxhi	lr
 800061e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000622:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800062a:	bf18      	it	ne
 800062c:	4240      	negne	r0, r0
 800062e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000632:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000636:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800063a:	bf18      	it	ne
 800063c:	4249      	negne	r1, r1
 800063e:	ea92 0f03 	teq	r2, r3
 8000642:	d03f      	beq.n	80006c4 <__addsf3+0xd8>
 8000644:	f1a2 0201 	sub.w	r2, r2, #1
 8000648:	fa41 fc03 	asr.w	ip, r1, r3
 800064c:	eb10 000c 	adds.w	r0, r0, ip
 8000650:	f1c3 0320 	rsb	r3, r3, #32
 8000654:	fa01 f103 	lsl.w	r1, r1, r3
 8000658:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800065c:	d502      	bpl.n	8000664 <__addsf3+0x78>
 800065e:	4249      	negs	r1, r1
 8000660:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000664:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000668:	d313      	bcc.n	8000692 <__addsf3+0xa6>
 800066a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800066e:	d306      	bcc.n	800067e <__addsf3+0x92>
 8000670:	0840      	lsrs	r0, r0, #1
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	f102 0201 	add.w	r2, r2, #1
 800067a:	2afe      	cmp	r2, #254	; 0xfe
 800067c:	d251      	bcs.n	8000722 <__addsf3+0x136>
 800067e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000682:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000686:	bf08      	it	eq
 8000688:	f020 0001 	biceq.w	r0, r0, #1
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	4770      	bx	lr
 8000692:	0049      	lsls	r1, r1, #1
 8000694:	eb40 0000 	adc.w	r0, r0, r0
 8000698:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800069c:	f1a2 0201 	sub.w	r2, r2, #1
 80006a0:	d1ed      	bne.n	800067e <__addsf3+0x92>
 80006a2:	fab0 fc80 	clz	ip, r0
 80006a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006aa:	ebb2 020c 	subs.w	r2, r2, ip
 80006ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80006b2:	bfaa      	itet	ge
 80006b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b8:	4252      	neglt	r2, r2
 80006ba:	4318      	orrge	r0, r3
 80006bc:	bfbc      	itt	lt
 80006be:	40d0      	lsrlt	r0, r2
 80006c0:	4318      	orrlt	r0, r3
 80006c2:	4770      	bx	lr
 80006c4:	f092 0f00 	teq	r2, #0
 80006c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006cc:	bf06      	itte	eq
 80006ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006d2:	3201      	addeq	r2, #1
 80006d4:	3b01      	subne	r3, #1
 80006d6:	e7b5      	b.n	8000644 <__addsf3+0x58>
 80006d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e0:	bf18      	it	ne
 80006e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e6:	d021      	beq.n	800072c <__addsf3+0x140>
 80006e8:	ea92 0f03 	teq	r2, r3
 80006ec:	d004      	beq.n	80006f8 <__addsf3+0x10c>
 80006ee:	f092 0f00 	teq	r2, #0
 80006f2:	bf08      	it	eq
 80006f4:	4608      	moveq	r0, r1
 80006f6:	4770      	bx	lr
 80006f8:	ea90 0f01 	teq	r0, r1
 80006fc:	bf1c      	itt	ne
 80006fe:	2000      	movne	r0, #0
 8000700:	4770      	bxne	lr
 8000702:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000706:	d104      	bne.n	8000712 <__addsf3+0x126>
 8000708:	0040      	lsls	r0, r0, #1
 800070a:	bf28      	it	cs
 800070c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000710:	4770      	bx	lr
 8000712:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000716:	bf3c      	itt	cc
 8000718:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800071c:	4770      	bxcc	lr
 800071e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000722:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000726:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800072a:	4770      	bx	lr
 800072c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000730:	bf16      	itet	ne
 8000732:	4608      	movne	r0, r1
 8000734:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000738:	4601      	movne	r1, r0
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	bf06      	itte	eq
 800073e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000742:	ea90 0f01 	teqeq	r0, r1
 8000746:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800074a:	4770      	bx	lr

0800074c <__aeabi_ui2f>:
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	e004      	b.n	800075c <__aeabi_i2f+0x8>
 8000752:	bf00      	nop

08000754 <__aeabi_i2f>:
 8000754:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000758:	bf48      	it	mi
 800075a:	4240      	negmi	r0, r0
 800075c:	ea5f 0c00 	movs.w	ip, r0
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000768:	4601      	mov	r1, r0
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	e01c      	b.n	80007aa <__aeabi_l2f+0x2a>

08000770 <__aeabi_ul2f>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	e00a      	b.n	8000794 <__aeabi_l2f+0x14>
 800077e:	bf00      	nop

08000780 <__aeabi_l2f>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800078c:	d502      	bpl.n	8000794 <__aeabi_l2f+0x14>
 800078e:	4240      	negs	r0, r0
 8000790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000794:	ea5f 0c01 	movs.w	ip, r1
 8000798:	bf02      	ittt	eq
 800079a:	4684      	moveq	ip, r0
 800079c:	4601      	moveq	r1, r0
 800079e:	2000      	moveq	r0, #0
 80007a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007a4:	bf08      	it	eq
 80007a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007ae:	fabc f28c 	clz	r2, ip
 80007b2:	3a08      	subs	r2, #8
 80007b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b8:	db10      	blt.n	80007dc <__aeabi_l2f+0x5c>
 80007ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80007be:	4463      	add	r3, ip
 80007c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007c4:	f1c2 0220 	rsb	r2, r2, #32
 80007c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007cc:	fa20 f202 	lsr.w	r2, r0, r2
 80007d0:	eb43 0002 	adc.w	r0, r3, r2
 80007d4:	bf08      	it	eq
 80007d6:	f020 0001 	biceq.w	r0, r0, #1
 80007da:	4770      	bx	lr
 80007dc:	f102 0220 	add.w	r2, r2, #32
 80007e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80007e4:	f1c2 0220 	rsb	r2, r2, #32
 80007e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007ec:	fa21 f202 	lsr.w	r2, r1, r2
 80007f0:	eb43 0002 	adc.w	r0, r3, r2
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007fa:	4770      	bx	lr

080007fc <__aeabi_fmul>:
 80007fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000800:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000804:	bf1e      	ittt	ne
 8000806:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800080a:	ea92 0f0c 	teqne	r2, ip
 800080e:	ea93 0f0c 	teqne	r3, ip
 8000812:	d06f      	beq.n	80008f4 <__aeabi_fmul+0xf8>
 8000814:	441a      	add	r2, r3
 8000816:	ea80 0c01 	eor.w	ip, r0, r1
 800081a:	0240      	lsls	r0, r0, #9
 800081c:	bf18      	it	ne
 800081e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000822:	d01e      	beq.n	8000862 <__aeabi_fmul+0x66>
 8000824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000828:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800082c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000830:	fba0 3101 	umull	r3, r1, r0, r1
 8000834:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000838:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800083c:	bf3e      	ittt	cc
 800083e:	0049      	lslcc	r1, r1, #1
 8000840:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000844:	005b      	lslcc	r3, r3, #1
 8000846:	ea40 0001 	orr.w	r0, r0, r1
 800084a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800084e:	2afd      	cmp	r2, #253	; 0xfd
 8000850:	d81d      	bhi.n	800088e <__aeabi_fmul+0x92>
 8000852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000856:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800085a:	bf08      	it	eq
 800085c:	f020 0001 	biceq.w	r0, r0, #1
 8000860:	4770      	bx	lr
 8000862:	f090 0f00 	teq	r0, #0
 8000866:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800086a:	bf08      	it	eq
 800086c:	0249      	lsleq	r1, r1, #9
 800086e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000872:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000876:	3a7f      	subs	r2, #127	; 0x7f
 8000878:	bfc2      	ittt	gt
 800087a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800087e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000882:	4770      	bxgt	lr
 8000884:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	3a01      	subs	r2, #1
 800088e:	dc5d      	bgt.n	800094c <__aeabi_fmul+0x150>
 8000890:	f112 0f19 	cmn.w	r2, #25
 8000894:	bfdc      	itt	le
 8000896:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800089a:	4770      	bxle	lr
 800089c:	f1c2 0200 	rsb	r2, r2, #0
 80008a0:	0041      	lsls	r1, r0, #1
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	f1c2 0220 	rsb	r2, r2, #32
 80008aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80008b2:	f140 0000 	adc.w	r0, r0, #0
 80008b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ba:	bf08      	it	eq
 80008bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008c0:	4770      	bx	lr
 80008c2:	f092 0f00 	teq	r2, #0
 80008c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008ca:	bf02      	ittt	eq
 80008cc:	0040      	lsleq	r0, r0, #1
 80008ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008d2:	3a01      	subeq	r2, #1
 80008d4:	d0f9      	beq.n	80008ca <__aeabi_fmul+0xce>
 80008d6:	ea40 000c 	orr.w	r0, r0, ip
 80008da:	f093 0f00 	teq	r3, #0
 80008de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008e2:	bf02      	ittt	eq
 80008e4:	0049      	lsleq	r1, r1, #1
 80008e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008ea:	3b01      	subeq	r3, #1
 80008ec:	d0f9      	beq.n	80008e2 <__aeabi_fmul+0xe6>
 80008ee:	ea41 010c 	orr.w	r1, r1, ip
 80008f2:	e78f      	b.n	8000814 <__aeabi_fmul+0x18>
 80008f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f8:	ea92 0f0c 	teq	r2, ip
 80008fc:	bf18      	it	ne
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d00a      	beq.n	800091a <__aeabi_fmul+0x11e>
 8000904:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000908:	bf18      	it	ne
 800090a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800090e:	d1d8      	bne.n	80008c2 <__aeabi_fmul+0xc6>
 8000910:	ea80 0001 	eor.w	r0, r0, r1
 8000914:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000918:	4770      	bx	lr
 800091a:	f090 0f00 	teq	r0, #0
 800091e:	bf17      	itett	ne
 8000920:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000924:	4608      	moveq	r0, r1
 8000926:	f091 0f00 	teqne	r1, #0
 800092a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800092e:	d014      	beq.n	800095a <__aeabi_fmul+0x15e>
 8000930:	ea92 0f0c 	teq	r2, ip
 8000934:	d101      	bne.n	800093a <__aeabi_fmul+0x13e>
 8000936:	0242      	lsls	r2, r0, #9
 8000938:	d10f      	bne.n	800095a <__aeabi_fmul+0x15e>
 800093a:	ea93 0f0c 	teq	r3, ip
 800093e:	d103      	bne.n	8000948 <__aeabi_fmul+0x14c>
 8000940:	024b      	lsls	r3, r1, #9
 8000942:	bf18      	it	ne
 8000944:	4608      	movne	r0, r1
 8000946:	d108      	bne.n	800095a <__aeabi_fmul+0x15e>
 8000948:	ea80 0001 	eor.w	r0, r0, r1
 800094c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000950:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000958:	4770      	bx	lr
 800095a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800095e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000962:	4770      	bx	lr

08000964 <__aeabi_fdiv>:
 8000964:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000968:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800096c:	bf1e      	ittt	ne
 800096e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000972:	ea92 0f0c 	teqne	r2, ip
 8000976:	ea93 0f0c 	teqne	r3, ip
 800097a:	d069      	beq.n	8000a50 <__aeabi_fdiv+0xec>
 800097c:	eba2 0203 	sub.w	r2, r2, r3
 8000980:	ea80 0c01 	eor.w	ip, r0, r1
 8000984:	0249      	lsls	r1, r1, #9
 8000986:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800098a:	d037      	beq.n	80009fc <__aeabi_fdiv+0x98>
 800098c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000990:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000994:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000998:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800099c:	428b      	cmp	r3, r1
 800099e:	bf38      	it	cc
 80009a0:	005b      	lslcc	r3, r3, #1
 80009a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009aa:	428b      	cmp	r3, r1
 80009ac:	bf24      	itt	cs
 80009ae:	1a5b      	subcs	r3, r3, r1
 80009b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b8:	bf24      	itt	cs
 80009ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009c6:	bf24      	itt	cs
 80009c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009d4:	bf24      	itt	cs
 80009d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	bf18      	it	ne
 80009e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009e6:	d1e0      	bne.n	80009aa <__aeabi_fdiv+0x46>
 80009e8:	2afd      	cmp	r2, #253	; 0xfd
 80009ea:	f63f af50 	bhi.w	800088e <__aeabi_fmul+0x92>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a04:	327f      	adds	r2, #127	; 0x7f
 8000a06:	bfc2      	ittt	gt
 8000a08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a10:	4770      	bxgt	lr
 8000a12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	3a01      	subs	r2, #1
 8000a1c:	e737      	b.n	800088e <__aeabi_fmul+0x92>
 8000a1e:	f092 0f00 	teq	r2, #0
 8000a22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a26:	bf02      	ittt	eq
 8000a28:	0040      	lsleq	r0, r0, #1
 8000a2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a2e:	3a01      	subeq	r2, #1
 8000a30:	d0f9      	beq.n	8000a26 <__aeabi_fdiv+0xc2>
 8000a32:	ea40 000c 	orr.w	r0, r0, ip
 8000a36:	f093 0f00 	teq	r3, #0
 8000a3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a3e:	bf02      	ittt	eq
 8000a40:	0049      	lsleq	r1, r1, #1
 8000a42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a46:	3b01      	subeq	r3, #1
 8000a48:	d0f9      	beq.n	8000a3e <__aeabi_fdiv+0xda>
 8000a4a:	ea41 010c 	orr.w	r1, r1, ip
 8000a4e:	e795      	b.n	800097c <__aeabi_fdiv+0x18>
 8000a50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a54:	ea92 0f0c 	teq	r2, ip
 8000a58:	d108      	bne.n	8000a6c <__aeabi_fdiv+0x108>
 8000a5a:	0242      	lsls	r2, r0, #9
 8000a5c:	f47f af7d 	bne.w	800095a <__aeabi_fmul+0x15e>
 8000a60:	ea93 0f0c 	teq	r3, ip
 8000a64:	f47f af70 	bne.w	8000948 <__aeabi_fmul+0x14c>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e776      	b.n	800095a <__aeabi_fmul+0x15e>
 8000a6c:	ea93 0f0c 	teq	r3, ip
 8000a70:	d104      	bne.n	8000a7c <__aeabi_fdiv+0x118>
 8000a72:	024b      	lsls	r3, r1, #9
 8000a74:	f43f af4c 	beq.w	8000910 <__aeabi_fmul+0x114>
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e76e      	b.n	800095a <__aeabi_fmul+0x15e>
 8000a7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a80:	bf18      	it	ne
 8000a82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	d1ca      	bne.n	8000a1e <__aeabi_fdiv+0xba>
 8000a88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a8c:	f47f af5c 	bne.w	8000948 <__aeabi_fmul+0x14c>
 8000a90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a94:	f47f af3c 	bne.w	8000910 <__aeabi_fmul+0x114>
 8000a98:	e75f      	b.n	800095a <__aeabi_fmul+0x15e>
 8000a9a:	bf00      	nop

08000a9c <__gesf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa0:	e006      	b.n	8000ab0 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__lesf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpsf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpsf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000abc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac6:	d011      	beq.n	8000aec <__cmpsf2+0x40>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ace:	bf18      	it	ne
 8000ad0:	ea90 0f01 	teqne	r0, r1
 8000ad4:	bf58      	it	pl
 8000ad6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ada:	bf88      	it	hi
 8000adc:	17c8      	asrhi	r0, r1, #31
 8000ade:	bf38      	it	cc
 8000ae0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ae4:	bf18      	it	ne
 8000ae6:	f040 0001 	orrne.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af0:	d102      	bne.n	8000af8 <__cmpsf2+0x4c>
 8000af2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000af6:	d105      	bne.n	8000b04 <__cmpsf2+0x58>
 8000af8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000afc:	d1e4      	bne.n	8000ac8 <__cmpsf2+0x1c>
 8000afe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b02:	d0e1      	beq.n	8000ac8 <__cmpsf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cfrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4608      	mov	r0, r1
 8000b10:	4661      	mov	r1, ip
 8000b12:	e7ff      	b.n	8000b14 <__aeabi_cfcmpeq>

08000b14 <__aeabi_cfcmpeq>:
 8000b14:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b16:	f7ff ffc9 	bl	8000aac <__cmpsf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b24 <__aeabi_fcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_fcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffd2 	bl	8000b0c <__aeabi_cfrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_fcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc8 	bl	8000b0c <__aeabi_cfrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_f2iz>:
 8000b88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b90:	d30f      	bcc.n	8000bb2 <__aeabi_f2iz+0x2a>
 8000b92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_f2iz+0x30>
 8000b9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bac:	bf18      	it	ne
 8000bae:	4240      	negne	r0, r0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr
 8000bb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bbc:	d101      	bne.n	8000bc2 <__aeabi_f2iz+0x3a>
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	d105      	bne.n	8000bce <__aeabi_f2iz+0x46>
 8000bc2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <selfrel_offset31>:
 8000bd4:	6803      	ldr	r3, [r0, #0]
 8000bd6:	005a      	lsls	r2, r3, #1
 8000bd8:	bf4c      	ite	mi
 8000bda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	4418      	add	r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <search_EIT_table>:
 8000be8:	b361      	cbz	r1, 8000c44 <search_EIT_table+0x5c>
 8000bea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bee:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000bf2:	4690      	mov	r8, r2
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	46d1      	mov	r9, sl
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	eb07 0409 	add.w	r4, r7, r9
 8000bfe:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000c02:	1064      	asrs	r4, r4, #1
 8000c04:	00e5      	lsls	r5, r4, #3
 8000c06:	1971      	adds	r1, r6, r5
 8000c08:	4608      	mov	r0, r1
 8000c0a:	f7ff ffe3 	bl	8000bd4 <selfrel_offset31>
 8000c0e:	45a2      	cmp	sl, r4
 8000c10:	4683      	mov	fp, r0
 8000c12:	f105 0008 	add.w	r0, r5, #8
 8000c16:	4430      	add	r0, r6
 8000c18:	d009      	beq.n	8000c2e <search_EIT_table+0x46>
 8000c1a:	f7ff ffdb 	bl	8000bd4 <selfrel_offset31>
 8000c1e:	45c3      	cmp	fp, r8
 8000c20:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000c24:	d805      	bhi.n	8000c32 <search_EIT_table+0x4a>
 8000c26:	4540      	cmp	r0, r8
 8000c28:	d209      	bcs.n	8000c3e <search_EIT_table+0x56>
 8000c2a:	1c67      	adds	r7, r4, #1
 8000c2c:	e7e5      	b.n	8000bfa <search_EIT_table+0x12>
 8000c2e:	45c3      	cmp	fp, r8
 8000c30:	d905      	bls.n	8000c3e <search_EIT_table+0x56>
 8000c32:	42a7      	cmp	r7, r4
 8000c34:	d002      	beq.n	8000c3c <search_EIT_table+0x54>
 8000c36:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000c3a:	e7de      	b.n	8000bfa <search_EIT_table+0x12>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c44:	4608      	mov	r0, r1
 8000c46:	4770      	bx	lr

08000c48 <__gnu_unwind_get_pr_addr>:
 8000c48:	2801      	cmp	r0, #1
 8000c4a:	d007      	beq.n	8000c5c <__gnu_unwind_get_pr_addr+0x14>
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d007      	beq.n	8000c60 <__gnu_unwind_get_pr_addr+0x18>
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__gnu_unwind_get_pr_addr+0x1c>)
 8000c52:	2800      	cmp	r0, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	4618      	moveq	r0, r3
 8000c58:	2000      	movne	r0, #0
 8000c5a:	4770      	bx	lr
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <__gnu_unwind_get_pr_addr+0x20>)
 8000c5e:	4770      	bx	lr
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <__gnu_unwind_get_pr_addr+0x24>)
 8000c62:	4770      	bx	lr
 8000c64:	08001359 	.word	0x08001359
 8000c68:	0800135d 	.word	0x0800135d
 8000c6c:	08001361 	.word	0x08001361

08000c70 <get_eit_entry>:
 8000c70:	b530      	push	{r4, r5, lr}
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <get_eit_entry+0x98>)
 8000c74:	b083      	sub	sp, #12
 8000c76:	4604      	mov	r4, r0
 8000c78:	1e8d      	subs	r5, r1, #2
 8000c7a:	b373      	cbz	r3, 8000cda <get_eit_entry+0x6a>
 8000c7c:	a901      	add	r1, sp, #4
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f3af 8000 	nop.w
 8000c84:	b318      	cbz	r0, 8000cce <get_eit_entry+0x5e>
 8000c86:	9901      	ldr	r1, [sp, #4]
 8000c88:	462a      	mov	r2, r5
 8000c8a:	f7ff ffad 	bl	8000be8 <search_EIT_table>
 8000c8e:	4601      	mov	r1, r0
 8000c90:	b1e8      	cbz	r0, 8000cce <get_eit_entry+0x5e>
 8000c92:	f7ff ff9f 	bl	8000bd4 <selfrel_offset31>
 8000c96:	684b      	ldr	r3, [r1, #4]
 8000c98:	64a0      	str	r0, [r4, #72]	; 0x48
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d011      	beq.n	8000cc2 <get_eit_entry+0x52>
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db22      	blt.n	8000ce8 <get_eit_entry+0x78>
 8000ca2:	1d08      	adds	r0, r1, #4
 8000ca4:	f7ff ff96 	bl	8000bd4 <selfrel_offset31>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000cac:	6523      	str	r3, [r4, #80]	; 0x50
 8000cae:	6803      	ldr	r3, [r0, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1e      	blt.n	8000cf2 <get_eit_entry+0x82>
 8000cb4:	f7ff ff8e 	bl	8000bd4 <selfrel_offset31>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6120      	str	r0, [r4, #16]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	b003      	add	sp, #12
 8000cc0:	bd30      	pop	{r4, r5, pc}
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	6122      	str	r2, [r4, #16]
 8000cca:	b003      	add	sp, #12
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	2309      	movs	r3, #9
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	6122      	str	r2, [r4, #16]
 8000cd6:	b003      	add	sp, #12
 8000cd8:	bd30      	pop	{r4, r5, pc}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <get_eit_entry+0x9c>)
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <get_eit_entry+0xa0>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	10c9      	asrs	r1, r1, #3
 8000ce4:	9101      	str	r1, [sp, #4]
 8000ce6:	e7cf      	b.n	8000c88 <get_eit_entry+0x18>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	1d08      	adds	r0, r1, #4
 8000cec:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000cee:	6523      	str	r3, [r4, #80]	; 0x50
 8000cf0:	e7dd      	b.n	8000cae <get_eit_entry+0x3e>
 8000cf2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000cf6:	f7ff ffa7 	bl	8000c48 <__gnu_unwind_get_pr_addr>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	6120      	str	r0, [r4, #16]
 8000cfe:	bf14      	ite	ne
 8000d00:	2300      	movne	r3, #0
 8000d02:	2309      	moveq	r3, #9
 8000d04:	e7da      	b.n	8000cbc <get_eit_entry+0x4c>
 8000d06:	bf00      	nop
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	080064d4 	.word	0x080064d4
 8000d10:	0800663c 	.word	0x0800663c

08000d14 <restore_non_core_regs>:
 8000d14:	6803      	ldr	r3, [r0, #0]
 8000d16:	b510      	push	{r4, lr}
 8000d18:	07da      	lsls	r2, r3, #31
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	d406      	bmi.n	8000d2c <restore_non_core_regs+0x18>
 8000d1e:	079b      	lsls	r3, r3, #30
 8000d20:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000d24:	d509      	bpl.n	8000d3a <restore_non_core_regs+0x26>
 8000d26:	f000 fc57 	bl	80015d8 <__gnu_Unwind_Restore_VFP_D>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	0759      	lsls	r1, r3, #29
 8000d2e:	d509      	bpl.n	8000d44 <restore_non_core_regs+0x30>
 8000d30:	071a      	lsls	r2, r3, #28
 8000d32:	d50e      	bpl.n	8000d52 <restore_non_core_regs+0x3e>
 8000d34:	06db      	lsls	r3, r3, #27
 8000d36:	d513      	bpl.n	8000d60 <restore_non_core_regs+0x4c>
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	f000 fc45 	bl	80015c8 <__gnu_Unwind_Restore_VFP>
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	0759      	lsls	r1, r3, #29
 8000d42:	d4f5      	bmi.n	8000d30 <restore_non_core_regs+0x1c>
 8000d44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000d48:	f000 fc4e 	bl	80015e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	071a      	lsls	r2, r3, #28
 8000d50:	d4f0      	bmi.n	8000d34 <restore_non_core_regs+0x20>
 8000d52:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000d56:	f000 fc4f 	bl	80015f8 <__gnu_Unwind_Restore_WMMXD>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	06db      	lsls	r3, r3, #27
 8000d5e:	d4eb      	bmi.n	8000d38 <restore_non_core_regs+0x24>
 8000d60:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d68:	f000 bc8a 	b.w	8001680 <__gnu_Unwind_Restore_WMMXC>

08000d6c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000d6c:	6803      	ldr	r3, [r0, #0]
 8000d6e:	b103      	cbz	r3, 8000d72 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000d70:	4403      	add	r3, r0
 8000d72:	4618      	mov	r0, r3
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__gnu_unwind_24bit.isra.1>:
 8000d78:	2009      	movs	r0, #9
 8000d7a:	4770      	bx	lr

08000d7c <_Unwind_DebugHook>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <unwind_phase2>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4604      	mov	r4, r0
 8000d84:	460d      	mov	r5, r1
 8000d86:	e008      	b.n	8000d9a <unwind_phase2+0x1a>
 8000d88:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000d8a:	6923      	ldr	r3, [r4, #16]
 8000d8c:	6162      	str	r2, [r4, #20]
 8000d8e:	4621      	mov	r1, r4
 8000d90:	462a      	mov	r2, r5
 8000d92:	2001      	movs	r0, #1
 8000d94:	4798      	blx	r3
 8000d96:	2808      	cmp	r0, #8
 8000d98:	d108      	bne.n	8000dac <unwind_phase2+0x2c>
 8000d9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff ff67 	bl	8000c70 <get_eit_entry>
 8000da2:	4606      	mov	r6, r0
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d0ef      	beq.n	8000d88 <unwind_phase2+0x8>
 8000da8:	f004 fc9e 	bl	80056e8 <abort>
 8000dac:	2807      	cmp	r0, #7
 8000dae:	d1fb      	bne.n	8000da8 <unwind_phase2+0x28>
 8000db0:	4630      	mov	r0, r6
 8000db2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000db4:	f7ff ffe2 	bl	8000d7c <_Unwind_DebugHook>
 8000db8:	1d28      	adds	r0, r5, #4
 8000dba:	f000 fbf9 	bl	80015b0 <__restore_core_regs>
 8000dbe:	bf00      	nop

08000dc0 <unwind_phase2_forced>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	2700      	movs	r7, #0
 8000dc8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000dcc:	ac03      	add	r4, sp, #12
 8000dce:	1d0e      	adds	r6, r1, #4
 8000dd0:	4692      	mov	sl, r2
 8000dd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000de2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000de6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dee:	ac02      	add	r4, sp, #8
 8000df0:	4628      	mov	r0, r5
 8000df2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000df4:	6027      	str	r7, [r4, #0]
 8000df6:	f7ff ff3b 	bl	8000c70 <get_eit_entry>
 8000dfa:	f1ba 0f00 	cmp.w	sl, #0
 8000dfe:	4607      	mov	r7, r0
 8000e00:	bf14      	ite	ne
 8000e02:	260a      	movne	r6, #10
 8000e04:	2609      	moveq	r6, #9
 8000e06:	b17f      	cbz	r7, 8000e28 <unwind_phase2_forced+0x68>
 8000e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e0a:	f046 0110 	orr.w	r1, r6, #16
 8000e0e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000e12:	462a      	mov	r2, r5
 8000e14:	6463      	str	r3, [r4, #68]	; 0x44
 8000e16:	2001      	movs	r0, #1
 8000e18:	462b      	mov	r3, r5
 8000e1a:	47c0      	blx	r8
 8000e1c:	bb78      	cbnz	r0, 8000e7e <unwind_phase2_forced+0xbe>
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e2e:	616b      	str	r3, [r5, #20]
 8000e30:	4621      	mov	r1, r4
 8000e32:	a87a      	add	r0, sp, #488	; 0x1e8
 8000e34:	f005 f81c 	bl	8005e70 <memcpy>
 8000e38:	692b      	ldr	r3, [r5, #16]
 8000e3a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4798      	blx	r3
 8000e42:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000e44:	4682      	mov	sl, r0
 8000e46:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	6463      	str	r3, [r4, #68]	; 0x44
 8000e4e:	462a      	mov	r2, r5
 8000e50:	462b      	mov	r3, r5
 8000e52:	2001      	movs	r0, #1
 8000e54:	47c0      	blx	r8
 8000e56:	b990      	cbnz	r0, 8000e7e <unwind_phase2_forced+0xbe>
 8000e58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e5c:	a97a      	add	r1, sp, #488	; 0x1e8
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f005 f806 	bl	8005e70 <memcpy>
 8000e64:	f1ba 0f08 	cmp.w	sl, #8
 8000e68:	d106      	bne.n	8000e78 <unwind_phase2_forced+0xb8>
 8000e6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f7ff feff 	bl	8000c70 <get_eit_entry>
 8000e72:	2609      	movs	r6, #9
 8000e74:	4607      	mov	r7, r0
 8000e76:	e7c6      	b.n	8000e06 <unwind_phase2_forced+0x46>
 8000e78:	f1ba 0f07 	cmp.w	sl, #7
 8000e7c:	d005      	beq.n	8000e8a <unwind_phase2_forced+0xca>
 8000e7e:	2709      	movs	r7, #9
 8000e80:	4638      	mov	r0, r7
 8000e82:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e8e:	f7ff ff75 	bl	8000d7c <_Unwind_DebugHook>
 8000e92:	a803      	add	r0, sp, #12
 8000e94:	f000 fb8c 	bl	80015b0 <__restore_core_regs>

08000e98 <_Unwind_GetCFA>:
 8000e98:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000e9a:	4770      	bx	lr

08000e9c <__gnu_Unwind_RaiseException>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000ea2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000ea4:	b0f9      	sub	sp, #484	; 0x1e4
 8000ea6:	640b      	str	r3, [r1, #64]	; 0x40
 8000ea8:	1d0e      	adds	r6, r1, #4
 8000eaa:	ad01      	add	r5, sp, #4
 8000eac:	460f      	mov	r7, r1
 8000eae:	4604      	mov	r4, r0
 8000eb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ec0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ec4:	f8cd e000 	str.w	lr, [sp]
 8000ec8:	e006      	b.n	8000ed8 <__gnu_Unwind_RaiseException+0x3c>
 8000eca:	6923      	ldr	r3, [r4, #16]
 8000ecc:	466a      	mov	r2, sp
 8000ece:	4621      	mov	r1, r4
 8000ed0:	4798      	blx	r3
 8000ed2:	2808      	cmp	r0, #8
 8000ed4:	4605      	mov	r5, r0
 8000ed6:	d108      	bne.n	8000eea <__gnu_Unwind_RaiseException+0x4e>
 8000ed8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fec8 	bl	8000c70 <get_eit_entry>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d0f2      	beq.n	8000eca <__gnu_Unwind_RaiseException+0x2e>
 8000ee4:	2009      	movs	r0, #9
 8000ee6:	b079      	add	sp, #484	; 0x1e4
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	4668      	mov	r0, sp
 8000eec:	f7ff ff12 	bl	8000d14 <restore_non_core_regs>
 8000ef0:	2d06      	cmp	r5, #6
 8000ef2:	d1f7      	bne.n	8000ee4 <__gnu_Unwind_RaiseException+0x48>
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f7ff ff42 	bl	8000d80 <unwind_phase2>

08000efc <__gnu_Unwind_ForcedUnwind>:
 8000efc:	b430      	push	{r4, r5}
 8000efe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000f00:	60c1      	str	r1, [r0, #12]
 8000f02:	6182      	str	r2, [r0, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	641d      	str	r5, [r3, #64]	; 0x40
 8000f08:	2200      	movs	r2, #0
 8000f0a:	bc30      	pop	{r4, r5}
 8000f0c:	e758      	b.n	8000dc0 <unwind_phase2_forced>
 8000f0e:	bf00      	nop

08000f10 <__gnu_Unwind_Resume>:
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	6943      	ldr	r3, [r0, #20]
 8000f14:	68c6      	ldr	r6, [r0, #12]
 8000f16:	640b      	str	r3, [r1, #64]	; 0x40
 8000f18:	b126      	cbz	r6, 8000f24 <__gnu_Unwind_Resume+0x14>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f7ff ff50 	bl	8000dc0 <unwind_phase2_forced>
 8000f20:	f004 fbe2 	bl	80056e8 <abort>
 8000f24:	6903      	ldr	r3, [r0, #16]
 8000f26:	460a      	mov	r2, r1
 8000f28:	4604      	mov	r4, r0
 8000f2a:	460d      	mov	r5, r1
 8000f2c:	4601      	mov	r1, r0
 8000f2e:	2002      	movs	r0, #2
 8000f30:	4798      	blx	r3
 8000f32:	2807      	cmp	r0, #7
 8000f34:	d007      	beq.n	8000f46 <__gnu_Unwind_Resume+0x36>
 8000f36:	2808      	cmp	r0, #8
 8000f38:	d103      	bne.n	8000f42 <__gnu_Unwind_Resume+0x32>
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ff1f 	bl	8000d80 <unwind_phase2>
 8000f42:	f004 fbd1 	bl	80056e8 <abort>
 8000f46:	4630      	mov	r0, r6
 8000f48:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f4a:	f7ff ff17 	bl	8000d7c <_Unwind_DebugHook>
 8000f4e:	1d28      	adds	r0, r5, #4
 8000f50:	f000 fb2e 	bl	80015b0 <__restore_core_regs>

08000f54 <__gnu_Unwind_Resume_or_Rethrow>:
 8000f54:	68c2      	ldr	r2, [r0, #12]
 8000f56:	b12a      	cbz	r2, 8000f64 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000f58:	b410      	push	{r4}
 8000f5a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	640c      	str	r4, [r1, #64]	; 0x40
 8000f60:	bc10      	pop	{r4}
 8000f62:	e72d      	b.n	8000dc0 <unwind_phase2_forced>
 8000f64:	e79a      	b.n	8000e9c <__gnu_Unwind_RaiseException>
 8000f66:	bf00      	nop

08000f68 <_Unwind_Complete>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <_Unwind_DeleteException>:
 8000f6c:	6883      	ldr	r3, [r0, #8]
 8000f6e:	b113      	cbz	r3, 8000f76 <_Unwind_DeleteException+0xa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	2001      	movs	r0, #1
 8000f74:	4718      	bx	r3
 8000f76:	4770      	bx	lr

08000f78 <_Unwind_VRS_Get>:
 8000f78:	b500      	push	{lr}
 8000f7a:	2904      	cmp	r1, #4
 8000f7c:	d807      	bhi.n	8000f8e <_Unwind_VRS_Get+0x16>
 8000f7e:	e8df f001 	tbb	[pc, r1]
 8000f82:	0903      	.short	0x0903
 8000f84:	0906      	.short	0x0906
 8000f86:	09          	.byte	0x09
 8000f87:	00          	.byte	0x00
 8000f88:	b90b      	cbnz	r3, 8000f8e <_Unwind_VRS_Get+0x16>
 8000f8a:	2a0f      	cmp	r2, #15
 8000f8c:	d905      	bls.n	8000f9a <_Unwind_VRS_Get+0x22>
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f94:	2001      	movs	r0, #1
 8000f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f9e:	6852      	ldr	r2, [r2, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	9b01      	ldr	r3, [sp, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000faa:	bf00      	nop

08000fac <_Unwind_GetGR>:
 8000fac:	2300      	movs	r3, #0
 8000fae:	b510      	push	{r4, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	ac03      	add	r4, sp, #12
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	9400      	str	r4, [sp, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff ffdd 	bl	8000f78 <_Unwind_VRS_Get>
 8000fbe:	9803      	ldr	r0, [sp, #12]
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <_Unwind_VRS_Set>:
 8000fc4:	b500      	push	{lr}
 8000fc6:	2904      	cmp	r1, #4
 8000fc8:	d807      	bhi.n	8000fda <_Unwind_VRS_Set+0x16>
 8000fca:	e8df f001 	tbb	[pc, r1]
 8000fce:	0903      	.short	0x0903
 8000fd0:	0906      	.short	0x0906
 8000fd2:	09          	.byte	0x09
 8000fd3:	00          	.byte	0x00
 8000fd4:	b90b      	cbnz	r3, 8000fda <_Unwind_VRS_Set+0x16>
 8000fd6:	2a0f      	cmp	r2, #15
 8000fd8:	d905      	bls.n	8000fe6 <_Unwind_VRS_Set+0x22>
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe6:	9901      	ldr	r1, [sp, #4]
 8000fe8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000fec:	6809      	ldr	r1, [r1, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	6051      	str	r1, [r2, #4]
 8000ff2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_SetGR>:
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	ac04      	add	r4, sp, #16
 8001000:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001004:	9400      	str	r4, [sp, #0]
 8001006:	460a      	mov	r2, r1
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff ffdb 	bl	8000fc4 <_Unwind_VRS_Set>
 800100e:	b004      	add	sp, #16
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop

08001014 <__gnu_Unwind_Backtrace>:
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800101a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800101c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	1d15      	adds	r5, r2, #4
 8001024:	ac17      	add	r4, sp, #92	; 0x5c
 8001026:	4607      	mov	r7, r0
 8001028:	460e      	mov	r6, r1
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001036:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800103a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8001042:	e012      	b.n	800106a <__gnu_Unwind_Backtrace+0x56>
 8001044:	210c      	movs	r1, #12
 8001046:	a816      	add	r0, sp, #88	; 0x58
 8001048:	466a      	mov	r2, sp
 800104a:	f7ff ffd5 	bl	8000ff8 <_Unwind_SetGR>
 800104e:	4631      	mov	r1, r6
 8001050:	a816      	add	r0, sp, #88	; 0x58
 8001052:	47b8      	blx	r7
 8001054:	b978      	cbnz	r0, 8001076 <__gnu_Unwind_Backtrace+0x62>
 8001056:	9b04      	ldr	r3, [sp, #16]
 8001058:	aa16      	add	r2, sp, #88	; 0x58
 800105a:	4669      	mov	r1, sp
 800105c:	2008      	movs	r0, #8
 800105e:	4798      	blx	r3
 8001060:	2805      	cmp	r0, #5
 8001062:	4604      	mov	r4, r0
 8001064:	d008      	beq.n	8001078 <__gnu_Unwind_Backtrace+0x64>
 8001066:	2809      	cmp	r0, #9
 8001068:	d005      	beq.n	8001076 <__gnu_Unwind_Backtrace+0x62>
 800106a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800106c:	4668      	mov	r0, sp
 800106e:	f7ff fdff 	bl	8000c70 <get_eit_entry>
 8001072:	2800      	cmp	r0, #0
 8001074:	d0e6      	beq.n	8001044 <__gnu_Unwind_Backtrace+0x30>
 8001076:	2409      	movs	r4, #9
 8001078:	a816      	add	r0, sp, #88	; 0x58
 800107a:	f7ff fe4b 	bl	8000d14 <restore_non_core_regs>
 800107e:	4620      	mov	r0, r4
 8001080:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	bf00      	nop

08001088 <__gnu_unwind_pr_common>:
 8001088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800108e:	4691      	mov	r9, r2
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	3404      	adds	r4, #4
 8001096:	460d      	mov	r5, r1
 8001098:	9207      	str	r2, [sp, #28]
 800109a:	9408      	str	r4, [sp, #32]
 800109c:	f000 0b03 	and.w	fp, r0, #3
 80010a0:	461e      	mov	r6, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d160      	bne.n	8001168 <__gnu_unwind_pr_common+0xe0>
 80010a6:	2303      	movs	r3, #3
 80010a8:	0212      	lsls	r2, r2, #8
 80010aa:	9207      	str	r2, [sp, #28]
 80010ac:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80010b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80010b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010b6:	f1bb 0f02 	cmp.w	fp, #2
 80010ba:	bf08      	it	eq
 80010bc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80010be:	f013 0301 	ands.w	r3, r3, #1
 80010c2:	d140      	bne.n	8001146 <__gnu_unwind_pr_common+0xbe>
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f000 0308 	and.w	r3, r0, #8
 80010ca:	9303      	str	r3, [sp, #12]
 80010cc:	f8d4 8000 	ldr.w	r8, [r4]
 80010d0:	f1b8 0f00 	cmp.w	r8, #0
 80010d4:	d039      	beq.n	800114a <__gnu_unwind_pr_common+0xc2>
 80010d6:	2e02      	cmp	r6, #2
 80010d8:	d043      	beq.n	8001162 <__gnu_unwind_pr_common+0xda>
 80010da:	f8b4 8000 	ldrh.w	r8, [r4]
 80010de:	8867      	ldrh	r7, [r4, #2]
 80010e0:	3404      	adds	r4, #4
 80010e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80010e4:	f027 0a01 	bic.w	sl, r7, #1
 80010e8:	210f      	movs	r1, #15
 80010ea:	4648      	mov	r0, r9
 80010ec:	449a      	add	sl, r3
 80010ee:	f7ff ff5d 	bl	8000fac <_Unwind_GetGR>
 80010f2:	4582      	cmp	sl, r0
 80010f4:	d833      	bhi.n	800115e <__gnu_unwind_pr_common+0xd6>
 80010f6:	f028 0301 	bic.w	r3, r8, #1
 80010fa:	449a      	add	sl, r3
 80010fc:	4550      	cmp	r0, sl
 80010fe:	bf2c      	ite	cs
 8001100:	2000      	movcs	r0, #0
 8001102:	2001      	movcc	r0, #1
 8001104:	007f      	lsls	r7, r7, #1
 8001106:	f007 0702 	and.w	r7, r7, #2
 800110a:	f008 0801 	and.w	r8, r8, #1
 800110e:	ea47 0708 	orr.w	r7, r7, r8
 8001112:	2f01      	cmp	r7, #1
 8001114:	d03e      	beq.n	8001194 <__gnu_unwind_pr_common+0x10c>
 8001116:	d335      	bcc.n	8001184 <__gnu_unwind_pr_common+0xfc>
 8001118:	2f02      	cmp	r7, #2
 800111a:	d11c      	bne.n	8001156 <__gnu_unwind_pr_common+0xce>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001122:	9202      	str	r2, [sp, #8]
 8001124:	f1bb 0f00 	cmp.w	fp, #0
 8001128:	d176      	bne.n	8001218 <__gnu_unwind_pr_common+0x190>
 800112a:	b128      	cbz	r0, 8001138 <__gnu_unwind_pr_common+0xb0>
 800112c:	9903      	ldr	r1, [sp, #12]
 800112e:	2900      	cmp	r1, #0
 8001130:	d07e      	beq.n	8001230 <__gnu_unwind_pr_common+0x1a8>
 8001132:	2a00      	cmp	r2, #0
 8001134:	f000 80a6 	beq.w	8001284 <__gnu_unwind_pr_common+0x1fc>
 8001138:	2b00      	cmp	r3, #0
 800113a:	db77      	blt.n	800122c <__gnu_unwind_pr_common+0x1a4>
 800113c:	9b02      	ldr	r3, [sp, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001144:	e7c2      	b.n	80010cc <__gnu_unwind_pr_common+0x44>
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2e02      	cmp	r6, #2
 800114c:	dd3e      	ble.n	80011cc <__gnu_unwind_pr_common+0x144>
 800114e:	f7ff fe13 	bl	8000d78 <__gnu_unwind_24bit.isra.1>
 8001152:	2800      	cmp	r0, #0
 8001154:	d040      	beq.n	80011d8 <__gnu_unwind_pr_common+0x150>
 8001156:	2009      	movs	r0, #9
 8001158:	b00b      	add	sp, #44	; 0x2c
 800115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115e:	2000      	movs	r0, #0
 8001160:	e7d0      	b.n	8001104 <__gnu_unwind_pr_common+0x7c>
 8001162:	6867      	ldr	r7, [r4, #4]
 8001164:	3408      	adds	r4, #8
 8001166:	e7bc      	b.n	80010e2 <__gnu_unwind_pr_common+0x5a>
 8001168:	2b02      	cmp	r3, #2
 800116a:	dca3      	bgt.n	80010b4 <__gnu_unwind_pr_common+0x2c>
 800116c:	2102      	movs	r1, #2
 800116e:	0c13      	lsrs	r3, r2, #16
 8001170:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001174:	0412      	lsls	r2, r2, #16
 8001176:	b2db      	uxtb	r3, r3
 8001178:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800117c:	9207      	str	r2, [sp, #28]
 800117e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8001182:	e797      	b.n	80010b4 <__gnu_unwind_pr_common+0x2c>
 8001184:	f1bb 0f00 	cmp.w	fp, #0
 8001188:	d002      	beq.n	8001190 <__gnu_unwind_pr_common+0x108>
 800118a:	2800      	cmp	r0, #0
 800118c:	f040 80bd 	bne.w	800130a <__gnu_unwind_pr_common+0x282>
 8001190:	3404      	adds	r4, #4
 8001192:	e79b      	b.n	80010cc <__gnu_unwind_pr_common+0x44>
 8001194:	f1bb 0f00 	cmp.w	fp, #0
 8001198:	d125      	bne.n	80011e6 <__gnu_unwind_pr_common+0x15e>
 800119a:	b1a8      	cbz	r0, 80011c8 <__gnu_unwind_pr_common+0x140>
 800119c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80011a0:	1c99      	adds	r1, r3, #2
 80011a2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80011a6:	d0d6      	beq.n	8001156 <__gnu_unwind_pr_common+0xce>
 80011a8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80011ac:	3301      	adds	r3, #1
 80011ae:	9106      	str	r1, [sp, #24]
 80011b0:	f000 80a3 	beq.w	80012fa <__gnu_unwind_pr_common+0x272>
 80011b4:	1d20      	adds	r0, r4, #4
 80011b6:	f7ff fdd9 	bl	8000d6c <_Unwind_decode_typeinfo_ptr.isra.0>
 80011ba:	ab06      	add	r3, sp, #24
 80011bc:	4601      	mov	r1, r0
 80011be:	4628      	mov	r0, r5
 80011c0:	f002 ffb4 	bl	800412c <__cxa_type_match>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d177      	bne.n	80012b8 <__gnu_unwind_pr_common+0x230>
 80011c8:	3408      	adds	r4, #8
 80011ca:	e77f      	b.n	80010cc <__gnu_unwind_pr_common+0x44>
 80011cc:	a907      	add	r1, sp, #28
 80011ce:	4648      	mov	r0, r9
 80011d0:	f000 faf0 	bl	80017b4 <__gnu_unwind_execute>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1be      	bne.n	8001156 <__gnu_unwind_pr_common+0xce>
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d15c      	bne.n	8001298 <__gnu_unwind_pr_common+0x210>
 80011de:	2008      	movs	r0, #8
 80011e0:	b00b      	add	sp, #44	; 0x2c
 80011e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e6:	210d      	movs	r1, #13
 80011e8:	4648      	mov	r0, r9
 80011ea:	6a2f      	ldr	r7, [r5, #32]
 80011ec:	f7ff fede 	bl	8000fac <_Unwind_GetGR>
 80011f0:	4287      	cmp	r7, r0
 80011f2:	d1e9      	bne.n	80011c8 <__gnu_unwind_pr_common+0x140>
 80011f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80011f6:	429c      	cmp	r4, r3
 80011f8:	d1e6      	bne.n	80011c8 <__gnu_unwind_pr_common+0x140>
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff fcea 	bl	8000bd4 <selfrel_offset31>
 8001200:	210f      	movs	r1, #15
 8001202:	4602      	mov	r2, r0
 8001204:	4648      	mov	r0, r9
 8001206:	f7ff fef7 	bl	8000ff8 <_Unwind_SetGR>
 800120a:	4648      	mov	r0, r9
 800120c:	462a      	mov	r2, r5
 800120e:	2100      	movs	r1, #0
 8001210:	f7ff fef2 	bl	8000ff8 <_Unwind_SetGR>
 8001214:	2007      	movs	r0, #7
 8001216:	e79f      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 8001218:	210d      	movs	r1, #13
 800121a:	4648      	mov	r0, r9
 800121c:	6a2f      	ldr	r7, [r5, #32]
 800121e:	f7ff fec5 	bl	8000fac <_Unwind_GetGR>
 8001222:	4287      	cmp	r7, r0
 8001224:	d058      	beq.n	80012d8 <__gnu_unwind_pr_common+0x250>
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da87      	bge.n	800113c <__gnu_unwind_pr_common+0xb4>
 800122c:	3404      	adds	r4, #4
 800122e:	e785      	b.n	800113c <__gnu_unwind_pr_common+0xb4>
 8001230:	9b02      	ldr	r3, [sp, #8]
 8001232:	b33b      	cbz	r3, 8001284 <__gnu_unwind_pr_common+0x1fc>
 8001234:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001238:	1d27      	adds	r7, r4, #4
 800123a:	f8cd b010 	str.w	fp, [sp, #16]
 800123e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001242:	46a3      	mov	fp, r4
 8001244:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001248:	461c      	mov	r4, r3
 800124a:	9605      	str	r6, [sp, #20]
 800124c:	e002      	b.n	8001254 <__gnu_unwind_pr_common+0x1cc>
 800124e:	45b2      	cmp	sl, r6
 8001250:	46b0      	mov	r8, r6
 8001252:	d016      	beq.n	8001282 <__gnu_unwind_pr_common+0x1fa>
 8001254:	4638      	mov	r0, r7
 8001256:	9406      	str	r4, [sp, #24]
 8001258:	f7ff fd88 	bl	8000d6c <_Unwind_decode_typeinfo_ptr.isra.0>
 800125c:	ab06      	add	r3, sp, #24
 800125e:	4601      	mov	r1, r0
 8001260:	2200      	movs	r2, #0
 8001262:	4628      	mov	r0, r5
 8001264:	f002 ff62 	bl	800412c <__cxa_type_match>
 8001268:	f108 0601 	add.w	r6, r8, #1
 800126c:	3704      	adds	r7, #4
 800126e:	2800      	cmp	r0, #0
 8001270:	d0ed      	beq.n	800124e <__gnu_unwind_pr_common+0x1c6>
 8001272:	9b02      	ldr	r3, [sp, #8]
 8001274:	465c      	mov	r4, fp
 8001276:	4543      	cmp	r3, r8
 8001278:	f8dd b010 	ldr.w	fp, [sp, #16]
 800127c:	9e05      	ldr	r6, [sp, #20]
 800127e:	d1d2      	bne.n	8001226 <__gnu_unwind_pr_common+0x19e>
 8001280:	e000      	b.n	8001284 <__gnu_unwind_pr_common+0x1fc>
 8001282:	465c      	mov	r4, fp
 8001284:	4648      	mov	r0, r9
 8001286:	210d      	movs	r1, #13
 8001288:	f7ff fe90 	bl	8000fac <_Unwind_GetGR>
 800128c:	9b06      	ldr	r3, [sp, #24]
 800128e:	6228      	str	r0, [r5, #32]
 8001290:	62ac      	str	r4, [r5, #40]	; 0x28
 8001292:	626b      	str	r3, [r5, #36]	; 0x24
 8001294:	2006      	movs	r0, #6
 8001296:	e75f      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 8001298:	210f      	movs	r1, #15
 800129a:	4648      	mov	r0, r9
 800129c:	f7ff fe86 	bl	8000fac <_Unwind_GetGR>
 80012a0:	210e      	movs	r1, #14
 80012a2:	4602      	mov	r2, r0
 80012a4:	4648      	mov	r0, r9
 80012a6:	f7ff fea7 	bl	8000ff8 <_Unwind_SetGR>
 80012aa:	4648      	mov	r0, r9
 80012ac:	4a29      	ldr	r2, [pc, #164]	; (8001354 <__gnu_unwind_pr_common+0x2cc>)
 80012ae:	210f      	movs	r1, #15
 80012b0:	f7ff fea2 	bl	8000ff8 <_Unwind_SetGR>
 80012b4:	2007      	movs	r0, #7
 80012b6:	e74f      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 80012b8:	4607      	mov	r7, r0
 80012ba:	210d      	movs	r1, #13
 80012bc:	4648      	mov	r0, r9
 80012be:	f7ff fe75 	bl	8000fac <_Unwind_GetGR>
 80012c2:	2f02      	cmp	r7, #2
 80012c4:	6228      	str	r0, [r5, #32]
 80012c6:	d11d      	bne.n	8001304 <__gnu_unwind_pr_common+0x27c>
 80012c8:	462b      	mov	r3, r5
 80012ca:	9a06      	ldr	r2, [sp, #24]
 80012cc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80012d0:	626b      	str	r3, [r5, #36]	; 0x24
 80012d2:	62ac      	str	r4, [r5, #40]	; 0x28
 80012d4:	2006      	movs	r0, #6
 80012d6:	e73f      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 80012d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012da:	429c      	cmp	r4, r3
 80012dc:	d1a3      	bne.n	8001226 <__gnu_unwind_pr_common+0x19e>
 80012de:	2204      	movs	r2, #4
 80012e0:	2700      	movs	r7, #0
 80012e2:	9902      	ldr	r1, [sp, #8]
 80012e4:	18a3      	adds	r3, r4, r2
 80012e6:	62a9      	str	r1, [r5, #40]	; 0x28
 80012e8:	62ef      	str	r7, [r5, #44]	; 0x2c
 80012ea:	632a      	str	r2, [r5, #48]	; 0x30
 80012ec:	636b      	str	r3, [r5, #52]	; 0x34
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	42bb      	cmp	r3, r7
 80012f2:	db1d      	blt.n	8001330 <__gnu_unwind_pr_common+0x2a8>
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	e720      	b.n	800113c <__gnu_unwind_pr_common+0xb4>
 80012fa:	4648      	mov	r0, r9
 80012fc:	210d      	movs	r1, #13
 80012fe:	f7ff fe55 	bl	8000fac <_Unwind_GetGR>
 8001302:	6228      	str	r0, [r5, #32]
 8001304:	9b06      	ldr	r3, [sp, #24]
 8001306:	626b      	str	r3, [r5, #36]	; 0x24
 8001308:	e7e3      	b.n	80012d2 <__gnu_unwind_pr_common+0x24a>
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff fc62 	bl	8000bd4 <selfrel_offset31>
 8001310:	3404      	adds	r4, #4
 8001312:	4606      	mov	r6, r0
 8001314:	63ac      	str	r4, [r5, #56]	; 0x38
 8001316:	4628      	mov	r0, r5
 8001318:	f002 ff66 	bl	80041e8 <__cxa_begin_cleanup>
 800131c:	2800      	cmp	r0, #0
 800131e:	f43f af1a 	beq.w	8001156 <__gnu_unwind_pr_common+0xce>
 8001322:	4648      	mov	r0, r9
 8001324:	4632      	mov	r2, r6
 8001326:	210f      	movs	r1, #15
 8001328:	f7ff fe66 	bl	8000ff8 <_Unwind_SetGR>
 800132c:	2007      	movs	r0, #7
 800132e:	e713      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 8001330:	4608      	mov	r0, r1
 8001332:	3001      	adds	r0, #1
 8001334:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001338:	f7ff fc4c 	bl	8000bd4 <selfrel_offset31>
 800133c:	210f      	movs	r1, #15
 800133e:	4602      	mov	r2, r0
 8001340:	4648      	mov	r0, r9
 8001342:	f7ff fe59 	bl	8000ff8 <_Unwind_SetGR>
 8001346:	4648      	mov	r0, r9
 8001348:	462a      	mov	r2, r5
 800134a:	4639      	mov	r1, r7
 800134c:	f7ff fe54 	bl	8000ff8 <_Unwind_SetGR>
 8001350:	2007      	movs	r0, #7
 8001352:	e701      	b.n	8001158 <__gnu_unwind_pr_common+0xd0>
 8001354:	080048ef 	.word	0x080048ef

08001358 <__aeabi_unwind_cpp_pr0>:
 8001358:	2300      	movs	r3, #0
 800135a:	e695      	b.n	8001088 <__gnu_unwind_pr_common>

0800135c <__aeabi_unwind_cpp_pr1>:
 800135c:	2301      	movs	r3, #1
 800135e:	e693      	b.n	8001088 <__gnu_unwind_pr_common>

08001360 <__aeabi_unwind_cpp_pr2>:
 8001360:	2302      	movs	r3, #2
 8001362:	e691      	b.n	8001088 <__gnu_unwind_pr_common>

08001364 <_Unwind_VRS_Pop>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4604      	mov	r4, r0
 8001368:	b0c5      	sub	sp, #276	; 0x114
 800136a:	2904      	cmp	r1, #4
 800136c:	d80d      	bhi.n	800138a <_Unwind_VRS_Pop+0x26>
 800136e:	e8df f001 	tbb	[pc, r1]
 8001372:	0355      	.short	0x0355
 8001374:	310c      	.short	0x310c
 8001376:	0f          	.byte	0x0f
 8001377:	00          	.byte	0x00
 8001378:	2b01      	cmp	r3, #1
 800137a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800137e:	b295      	uxth	r5, r2
 8001380:	d164      	bne.n	800144c <_Unwind_VRS_Pop+0xe8>
 8001382:	1972      	adds	r2, r6, r5
 8001384:	2a10      	cmp	r2, #16
 8001386:	f240 809d 	bls.w	80014c4 <_Unwind_VRS_Pop+0x160>
 800138a:	2002      	movs	r0, #2
 800138c:	b045      	add	sp, #276	; 0x114
 800138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1fa      	bne.n	800138a <_Unwind_VRS_Pop+0x26>
 8001394:	2a10      	cmp	r2, #16
 8001396:	d8f8      	bhi.n	800138a <_Unwind_VRS_Pop+0x26>
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	06d8      	lsls	r0, r3, #27
 800139c:	f100 80c8 	bmi.w	8001530 <_Unwind_VRS_Pop+0x1cc>
 80013a0:	ae22      	add	r6, sp, #136	; 0x88
 80013a2:	4630      	mov	r0, r6
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	2501      	movs	r5, #1
 80013a8:	f000 f974 	bl	8001694 <__gnu_Unwind_Save_WMMXC>
 80013ac:	2300      	movs	r3, #0
 80013ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013b0:	9a01      	ldr	r2, [sp, #4]
 80013b2:	fa05 f103 	lsl.w	r1, r5, r3
 80013b6:	4211      	tst	r1, r2
 80013b8:	d003      	beq.n	80013c2 <_Unwind_VRS_Pop+0x5e>
 80013ba:	6801      	ldr	r1, [r0, #0]
 80013bc:	3004      	adds	r0, #4
 80013be:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80013c2:	3301      	adds	r3, #1
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d1f4      	bne.n	80013b2 <_Unwind_VRS_Pop+0x4e>
 80013c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80013ca:	4630      	mov	r0, r6
 80013cc:	f000 f958 	bl	8001680 <__gnu_Unwind_Restore_WMMXC>
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7db      	b.n	800138c <_Unwind_VRS_Pop+0x28>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d1d8      	bne.n	800138a <_Unwind_VRS_Pop+0x26>
 80013d8:	0c15      	lsrs	r5, r2, #16
 80013da:	b297      	uxth	r7, r2
 80013dc:	19eb      	adds	r3, r5, r7
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d8d3      	bhi.n	800138a <_Unwind_VRS_Pop+0x26>
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	071e      	lsls	r6, r3, #28
 80013e6:	f100 80b7 	bmi.w	8001558 <_Unwind_VRS_Pop+0x1f4>
 80013ea:	ae22      	add	r6, sp, #136	; 0x88
 80013ec:	4630      	mov	r0, r6
 80013ee:	f000 f925 	bl	800163c <__gnu_Unwind_Save_WMMXD>
 80013f2:	00ed      	lsls	r5, r5, #3
 80013f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013f6:	b15f      	cbz	r7, 8001410 <_Unwind_VRS_Pop+0xac>
 80013f8:	3d04      	subs	r5, #4
 80013fa:	4603      	mov	r3, r0
 80013fc:	1971      	adds	r1, r6, r5
 80013fe:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001402:	f853 2b04 	ldr.w	r2, [r3], #4
 8001406:	4283      	cmp	r3, r0
 8001408:	f841 2f04 	str.w	r2, [r1, #4]!
 800140c:	d1f9      	bne.n	8001402 <_Unwind_VRS_Pop+0x9e>
 800140e:	4618      	mov	r0, r3
 8001410:	63a0      	str	r0, [r4, #56]	; 0x38
 8001412:	4630      	mov	r0, r6
 8001414:	f000 f8f0 	bl	80015f8 <__gnu_Unwind_Restore_WMMXD>
 8001418:	2000      	movs	r0, #0
 800141a:	e7b7      	b.n	800138c <_Unwind_VRS_Pop+0x28>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1b4      	bne.n	800138a <_Unwind_VRS_Pop+0x26>
 8001420:	2701      	movs	r7, #1
 8001422:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001424:	b296      	uxth	r6, r2
 8001426:	1d20      	adds	r0, r4, #4
 8001428:	fa07 f103 	lsl.w	r1, r7, r3
 800142c:	4231      	tst	r1, r6
 800142e:	f103 0301 	add.w	r3, r3, #1
 8001432:	d002      	beq.n	800143a <_Unwind_VRS_Pop+0xd6>
 8001434:	6829      	ldr	r1, [r5, #0]
 8001436:	3504      	adds	r5, #4
 8001438:	6001      	str	r1, [r0, #0]
 800143a:	2b10      	cmp	r3, #16
 800143c:	f100 0004 	add.w	r0, r0, #4
 8001440:	d1f2      	bne.n	8001428 <_Unwind_VRS_Pop+0xc4>
 8001442:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001446:	d13b      	bne.n	80014c0 <_Unwind_VRS_Pop+0x15c>
 8001448:	63a5      	str	r5, [r4, #56]	; 0x38
 800144a:	e79f      	b.n	800138c <_Unwind_VRS_Pop+0x28>
 800144c:	2b05      	cmp	r3, #5
 800144e:	d19c      	bne.n	800138a <_Unwind_VRS_Pop+0x26>
 8001450:	1977      	adds	r7, r6, r5
 8001452:	2f20      	cmp	r7, #32
 8001454:	d899      	bhi.n	800138a <_Unwind_VRS_Pop+0x26>
 8001456:	2e0f      	cmp	r6, #15
 8001458:	d966      	bls.n	8001528 <_Unwind_VRS_Pop+0x1c4>
 800145a:	462f      	mov	r7, r5
 800145c:	2d00      	cmp	r5, #0
 800145e:	d13a      	bne.n	80014d6 <_Unwind_VRS_Pop+0x172>
 8001460:	462a      	mov	r2, r5
 8001462:	2700      	movs	r7, #0
 8001464:	2a00      	cmp	r2, #0
 8001466:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001468:	dd72      	ble.n	8001550 <_Unwind_VRS_Pop+0x1ec>
 800146a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800146e:	4601      	mov	r1, r0
 8001470:	a844      	add	r0, sp, #272	; 0x110
 8001472:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001476:	388c      	subs	r0, #140	; 0x8c
 8001478:	f851 5b04 	ldr.w	r5, [r1], #4
 800147c:	4291      	cmp	r1, r2
 800147e:	f840 5f04 	str.w	r5, [r0, #4]!
 8001482:	d1f9      	bne.n	8001478 <_Unwind_VRS_Pop+0x114>
 8001484:	4608      	mov	r0, r1
 8001486:	b197      	cbz	r7, 80014ae <_Unwind_VRS_Pop+0x14a>
 8001488:	2e10      	cmp	r6, #16
 800148a:	4632      	mov	r2, r6
 800148c:	bf38      	it	cc
 800148e:	2210      	movcc	r2, #16
 8001490:	a944      	add	r1, sp, #272	; 0x110
 8001492:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001496:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800149a:	0079      	lsls	r1, r7, #1
 800149c:	3a04      	subs	r2, #4
 800149e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80014a2:	f850 5b04 	ldr.w	r5, [r0], #4
 80014a6:	4288      	cmp	r0, r1
 80014a8:	f842 5f04 	str.w	r5, [r2, #4]!
 80014ac:	d1f9      	bne.n	80014a2 <_Unwind_VRS_Pop+0x13e>
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d048      	beq.n	8001544 <_Unwind_VRS_Pop+0x1e0>
 80014b2:	2e0f      	cmp	r6, #15
 80014b4:	63a1      	str	r1, [r4, #56]	; 0x38
 80014b6:	d933      	bls.n	8001520 <_Unwind_VRS_Pop+0x1bc>
 80014b8:	b117      	cbz	r7, 80014c0 <_Unwind_VRS_Pop+0x15c>
 80014ba:	a802      	add	r0, sp, #8
 80014bc:	f000 f894 	bl	80015e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80014c0:	2000      	movs	r0, #0
 80014c2:	e763      	b.n	800138c <_Unwind_VRS_Pop+0x28>
 80014c4:	2e0f      	cmp	r6, #15
 80014c6:	f63f af60 	bhi.w	800138a <_Unwind_VRS_Pop+0x26>
 80014ca:	2700      	movs	r7, #0
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	07d1      	lsls	r1, r2, #31
 80014d0:	d417      	bmi.n	8001502 <_Unwind_VRS_Pop+0x19e>
 80014d2:	2f00      	cmp	r7, #0
 80014d4:	d060      	beq.n	8001598 <_Unwind_VRS_Pop+0x234>
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	0751      	lsls	r1, r2, #29
 80014da:	d445      	bmi.n	8001568 <_Unwind_VRS_Pop+0x204>
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d04d      	beq.n	800157c <_Unwind_VRS_Pop+0x218>
 80014e0:	2e0f      	cmp	r6, #15
 80014e2:	d806      	bhi.n	80014f2 <_Unwind_VRS_Pop+0x18e>
 80014e4:	a822      	add	r0, sp, #136	; 0x88
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	f000 f87a 	bl	80015e0 <__gnu_Unwind_Save_VFP_D>
 80014ec:	9b01      	ldr	r3, [sp, #4]
 80014ee:	2f00      	cmp	r7, #0
 80014f0:	d0b6      	beq.n	8001460 <_Unwind_VRS_Pop+0xfc>
 80014f2:	a802      	add	r0, sp, #8
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	f000 f87b 	bl	80015f0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80014fa:	9b01      	ldr	r3, [sp, #4]
 80014fc:	f1c6 0210 	rsb	r2, r6, #16
 8001500:	e7b0      	b.n	8001464 <_Unwind_VRS_Pop+0x100>
 8001502:	f022 0101 	bic.w	r1, r2, #1
 8001506:	2b05      	cmp	r3, #5
 8001508:	6021      	str	r1, [r4, #0]
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4620      	mov	r0, r4
 800150e:	d03b      	beq.n	8001588 <_Unwind_VRS_Pop+0x224>
 8001510:	f022 0203 	bic.w	r2, r2, #3
 8001514:	f840 2b48 	str.w	r2, [r0], #72
 8001518:	f000 f85a 	bl	80015d0 <__gnu_Unwind_Save_VFP>
 800151c:	9b01      	ldr	r3, [sp, #4]
 800151e:	e7d8      	b.n	80014d2 <_Unwind_VRS_Pop+0x16e>
 8001520:	a822      	add	r0, sp, #136	; 0x88
 8001522:	f000 f859 	bl	80015d8 <__gnu_Unwind_Restore_VFP_D>
 8001526:	e7c7      	b.n	80014b8 <_Unwind_VRS_Pop+0x154>
 8001528:	2f10      	cmp	r7, #16
 800152a:	d9ce      	bls.n	80014ca <_Unwind_VRS_Pop+0x166>
 800152c:	3f10      	subs	r7, #16
 800152e:	e7cd      	b.n	80014cc <_Unwind_VRS_Pop+0x168>
 8001530:	f023 0310 	bic.w	r3, r3, #16
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800153a:	9201      	str	r2, [sp, #4]
 800153c:	f000 f8aa 	bl	8001694 <__gnu_Unwind_Save_WMMXC>
 8001540:	9a01      	ldr	r2, [sp, #4]
 8001542:	e72d      	b.n	80013a0 <_Unwind_VRS_Pop+0x3c>
 8001544:	3104      	adds	r1, #4
 8001546:	63a1      	str	r1, [r4, #56]	; 0x38
 8001548:	a822      	add	r0, sp, #136	; 0x88
 800154a:	f000 f83d 	bl	80015c8 <__gnu_Unwind_Restore_VFP>
 800154e:	e7b7      	b.n	80014c0 <_Unwind_VRS_Pop+0x15c>
 8001550:	2f00      	cmp	r7, #0
 8001552:	d199      	bne.n	8001488 <_Unwind_VRS_Pop+0x124>
 8001554:	4601      	mov	r1, r0
 8001556:	e7aa      	b.n	80014ae <_Unwind_VRS_Pop+0x14a>
 8001558:	f023 0308 	bic.w	r3, r3, #8
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001562:	f000 f86b 	bl	800163c <__gnu_Unwind_Save_WMMXD>
 8001566:	e740      	b.n	80013ea <_Unwind_VRS_Pop+0x86>
 8001568:	4620      	mov	r0, r4
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	f840 2bd0 	str.w	r2, [r0], #208
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f000 f83c 	bl	80015f0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	e7af      	b.n	80014dc <_Unwind_VRS_Pop+0x178>
 800157c:	a822      	add	r0, sp, #136	; 0x88
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	f000 f826 	bl	80015d0 <__gnu_Unwind_Save_VFP>
 8001584:	9b01      	ldr	r3, [sp, #4]
 8001586:	e7b9      	b.n	80014fc <_Unwind_VRS_Pop+0x198>
 8001588:	f041 0102 	orr.w	r1, r1, #2
 800158c:	f840 1b48 	str.w	r1, [r0], #72
 8001590:	f000 f826 	bl	80015e0 <__gnu_Unwind_Save_VFP_D>
 8001594:	9b01      	ldr	r3, [sp, #4]
 8001596:	e79c      	b.n	80014d2 <_Unwind_VRS_Pop+0x16e>
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <_Unwind_VRS_Pop+0x240>
 800159c:	2e0f      	cmp	r6, #15
 800159e:	f63f af5f 	bhi.w	8001460 <_Unwind_VRS_Pop+0xfc>
 80015a2:	e79f      	b.n	80014e4 <_Unwind_VRS_Pop+0x180>
 80015a4:	a822      	add	r0, sp, #136	; 0x88
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	f000 f812 	bl	80015d0 <__gnu_Unwind_Save_VFP>
 80015ac:	9b01      	ldr	r3, [sp, #4]
 80015ae:	e757      	b.n	8001460 <_Unwind_VRS_Pop+0xfc>

080015b0 <__restore_core_regs>:
 80015b0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80015b4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80015b8:	469c      	mov	ip, r3
 80015ba:	46a6      	mov	lr, r4
 80015bc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80015c0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80015c4:	46e5      	mov	sp, ip
 80015c6:	bd00      	pop	{pc}

080015c8 <__gnu_Unwind_Restore_VFP>:
 80015c8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <__gnu_Unwind_Save_VFP>:
 80015d0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <__gnu_Unwind_Restore_VFP_D>:
 80015d8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <__gnu_Unwind_Save_VFP_D>:
 80015e0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80015e8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80015f0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <__gnu_Unwind_Restore_WMMXD>:
 80015f8:	ecf0 0102 	ldfe	f0, [r0], #8
 80015fc:	ecf0 1102 	ldfe	f1, [r0], #8
 8001600:	ecf0 2102 	ldfe	f2, [r0], #8
 8001604:	ecf0 3102 	ldfe	f3, [r0], #8
 8001608:	ecf0 4102 	ldfe	f4, [r0], #8
 800160c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001610:	ecf0 6102 	ldfe	f6, [r0], #8
 8001614:	ecf0 7102 	ldfe	f7, [r0], #8
 8001618:	ecf0 8102 	ldfp	f0, [r0], #8
 800161c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001620:	ecf0 a102 	ldfp	f2, [r0], #8
 8001624:	ecf0 b102 	ldfp	f3, [r0], #8
 8001628:	ecf0 c102 	ldfp	f4, [r0], #8
 800162c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001630:	ecf0 e102 	ldfp	f6, [r0], #8
 8001634:	ecf0 f102 	ldfp	f7, [r0], #8
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <__gnu_Unwind_Save_WMMXD>:
 800163c:	ece0 0102 	stfe	f0, [r0], #8
 8001640:	ece0 1102 	stfe	f1, [r0], #8
 8001644:	ece0 2102 	stfe	f2, [r0], #8
 8001648:	ece0 3102 	stfe	f3, [r0], #8
 800164c:	ece0 4102 	stfe	f4, [r0], #8
 8001650:	ece0 5102 	stfe	f5, [r0], #8
 8001654:	ece0 6102 	stfe	f6, [r0], #8
 8001658:	ece0 7102 	stfe	f7, [r0], #8
 800165c:	ece0 8102 	stfp	f0, [r0], #8
 8001660:	ece0 9102 	stfp	f1, [r0], #8
 8001664:	ece0 a102 	stfp	f2, [r0], #8
 8001668:	ece0 b102 	stfp	f3, [r0], #8
 800166c:	ece0 c102 	stfp	f4, [r0], #8
 8001670:	ece0 d102 	stfp	f5, [r0], #8
 8001674:	ece0 e102 	stfp	f6, [r0], #8
 8001678:	ece0 f102 	stfp	f7, [r0], #8
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <__gnu_Unwind_Restore_WMMXC>:
 8001680:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001684:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001688:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800168c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <__gnu_Unwind_Save_WMMXC>:
 8001694:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001698:	fca0 9101 	stc2	1, cr9, [r0], #4
 800169c:	fca0 a101 	stc2	1, cr10, [r0], #4
 80016a0:	fca0 b101 	stc2	1, cr11, [r0], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <_Unwind_RaiseException>:
 80016a8:	46ec      	mov	ip, sp
 80016aa:	b500      	push	{lr}
 80016ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80016bc:	a901      	add	r1, sp, #4
 80016be:	f7ff fbed 	bl	8000e9c <__gnu_Unwind_RaiseException>
 80016c2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80016c6:	b012      	add	sp, #72	; 0x48
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <_Unwind_Resume>:
 80016cc:	46ec      	mov	ip, sp
 80016ce:	b500      	push	{lr}
 80016d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80016e0:	a901      	add	r1, sp, #4
 80016e2:	f7ff fc15 	bl	8000f10 <__gnu_Unwind_Resume>
 80016e6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80016ea:	b012      	add	sp, #72	; 0x48
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <_Unwind_Resume_or_Rethrow>:
 80016f0:	46ec      	mov	ip, sp
 80016f2:	b500      	push	{lr}
 80016f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001704:	a901      	add	r1, sp, #4
 8001706:	f7ff fc25 	bl	8000f54 <__gnu_Unwind_Resume_or_Rethrow>
 800170a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800170e:	b012      	add	sp, #72	; 0x48
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <_Unwind_ForcedUnwind>:
 8001714:	46ec      	mov	ip, sp
 8001716:	b500      	push	{lr}
 8001718:	e92d 5000 	stmdb	sp!, {ip, lr}
 800171c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001728:	ab01      	add	r3, sp, #4
 800172a:	f7ff fbe7 	bl	8000efc <__gnu_Unwind_ForcedUnwind>
 800172e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001732:	b012      	add	sp, #72	; 0x48
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <_Unwind_Backtrace>:
 8001738:	46ec      	mov	ip, sp
 800173a:	b500      	push	{lr}
 800173c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001740:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e92d 000c 	stmdb	sp!, {r2, r3}
 800174c:	aa01      	add	r2, sp, #4
 800174e:	f7ff fc61 	bl	8001014 <__gnu_Unwind_Backtrace>
 8001752:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001756:	b012      	add	sp, #72	; 0x48
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <next_unwind_byte>:
 800175c:	7a02      	ldrb	r2, [r0, #8]
 800175e:	b91a      	cbnz	r2, 8001768 <next_unwind_byte+0xc>
 8001760:	7a43      	ldrb	r3, [r0, #9]
 8001762:	b943      	cbnz	r3, 8001776 <next_unwind_byte+0x1a>
 8001764:	20b0      	movs	r0, #176	; 0xb0
 8001766:	4770      	bx	lr
 8001768:	6803      	ldr	r3, [r0, #0]
 800176a:	3a01      	subs	r2, #1
 800176c:	7202      	strb	r2, [r0, #8]
 800176e:	021a      	lsls	r2, r3, #8
 8001770:	6002      	str	r2, [r0, #0]
 8001772:	0e18      	lsrs	r0, r3, #24
 8001774:	4770      	bx	lr
 8001776:	2103      	movs	r1, #3
 8001778:	6842      	ldr	r2, [r0, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	b410      	push	{r4}
 800177e:	7243      	strb	r3, [r0, #9]
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	1d14      	adds	r4, r2, #4
 8001784:	7201      	strb	r1, [r0, #8]
 8001786:	021a      	lsls	r2, r3, #8
 8001788:	6044      	str	r4, [r0, #4]
 800178a:	6002      	str	r2, [r0, #0]
 800178c:	bc10      	pop	{r4}
 800178e:	0e18      	lsrs	r0, r3, #24
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <_Unwind_GetGR.constprop.0>:
 8001794:	2300      	movs	r3, #0
 8001796:	b500      	push	{lr}
 8001798:	b085      	sub	sp, #20
 800179a:	aa03      	add	r2, sp, #12
 800179c:	9200      	str	r2, [sp, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	220c      	movs	r2, #12
 80017a2:	f7ff fbe9 	bl	8000f78 <_Unwind_VRS_Get>
 80017a6:	9803      	ldr	r0, [sp, #12]
 80017a8:	b005      	add	sp, #20
 80017aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ae:	bf00      	nop

080017b0 <unwind_UCB_from_context>:
 80017b0:	e7f0      	b.n	8001794 <_Unwind_GetGR.constprop.0>
 80017b2:	bf00      	nop

080017b4 <__gnu_unwind_execute>:
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	4606      	mov	r6, r0
 80017ba:	460f      	mov	r7, r1
 80017bc:	f04f 0800 	mov.w	r8, #0
 80017c0:	b085      	sub	sp, #20
 80017c2:	4638      	mov	r0, r7
 80017c4:	f7ff ffca 	bl	800175c <next_unwind_byte>
 80017c8:	28b0      	cmp	r0, #176	; 0xb0
 80017ca:	4604      	mov	r4, r0
 80017cc:	d023      	beq.n	8001816 <__gnu_unwind_execute+0x62>
 80017ce:	0605      	lsls	r5, r0, #24
 80017d0:	d427      	bmi.n	8001822 <__gnu_unwind_execute+0x6e>
 80017d2:	2300      	movs	r3, #0
 80017d4:	f10d 090c 	add.w	r9, sp, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	0085      	lsls	r5, r0, #2
 80017dc:	220d      	movs	r2, #13
 80017de:	f8cd 9000 	str.w	r9, [sp]
 80017e2:	4630      	mov	r0, r6
 80017e4:	f7ff fbc8 	bl	8000f78 <_Unwind_VRS_Get>
 80017e8:	b2ed      	uxtb	r5, r5
 80017ea:	9b03      	ldr	r3, [sp, #12]
 80017ec:	0660      	lsls	r0, r4, #25
 80017ee:	f105 0504 	add.w	r5, r5, #4
 80017f2:	bf4c      	ite	mi
 80017f4:	1b5d      	submi	r5, r3, r5
 80017f6:	18ed      	addpl	r5, r5, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	220d      	movs	r2, #13
 80017fc:	4619      	mov	r1, r3
 80017fe:	f8cd 9000 	str.w	r9, [sp]
 8001802:	4630      	mov	r0, r6
 8001804:	9503      	str	r5, [sp, #12]
 8001806:	f7ff fbdd 	bl	8000fc4 <_Unwind_VRS_Set>
 800180a:	4638      	mov	r0, r7
 800180c:	f7ff ffa6 	bl	800175c <next_unwind_byte>
 8001810:	28b0      	cmp	r0, #176	; 0xb0
 8001812:	4604      	mov	r4, r0
 8001814:	d1db      	bne.n	80017ce <__gnu_unwind_execute+0x1a>
 8001816:	f1b8 0f00 	cmp.w	r8, #0
 800181a:	f000 8094 	beq.w	8001946 <__gnu_unwind_execute+0x192>
 800181e:	2000      	movs	r0, #0
 8001820:	e01c      	b.n	800185c <__gnu_unwind_execute+0xa8>
 8001822:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001826:	2b80      	cmp	r3, #128	; 0x80
 8001828:	d05c      	beq.n	80018e4 <__gnu_unwind_execute+0x130>
 800182a:	2b90      	cmp	r3, #144	; 0x90
 800182c:	d019      	beq.n	8001862 <__gnu_unwind_execute+0xae>
 800182e:	2ba0      	cmp	r3, #160	; 0xa0
 8001830:	d02c      	beq.n	800188c <__gnu_unwind_execute+0xd8>
 8001832:	2bb0      	cmp	r3, #176	; 0xb0
 8001834:	d03e      	beq.n	80018b4 <__gnu_unwind_execute+0x100>
 8001836:	2bc0      	cmp	r3, #192	; 0xc0
 8001838:	d06b      	beq.n	8001912 <__gnu_unwind_execute+0x15e>
 800183a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800183e:	2bd0      	cmp	r3, #208	; 0xd0
 8001840:	d10b      	bne.n	800185a <__gnu_unwind_execute+0xa6>
 8001842:	f000 0207 	and.w	r2, r0, #7
 8001846:	3201      	adds	r2, #1
 8001848:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800184c:	2305      	movs	r3, #5
 800184e:	2101      	movs	r1, #1
 8001850:	4630      	mov	r0, r6
 8001852:	f7ff fd87 	bl	8001364 <_Unwind_VRS_Pop>
 8001856:	2800      	cmp	r0, #0
 8001858:	d0b3      	beq.n	80017c2 <__gnu_unwind_execute+0xe>
 800185a:	2009      	movs	r0, #9
 800185c:	b005      	add	sp, #20
 800185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001862:	f000 030d 	and.w	r3, r0, #13
 8001866:	2b0d      	cmp	r3, #13
 8001868:	d0f7      	beq.n	800185a <__gnu_unwind_execute+0xa6>
 800186a:	2300      	movs	r3, #0
 800186c:	ad03      	add	r5, sp, #12
 800186e:	f000 020f 	and.w	r2, r0, #15
 8001872:	4619      	mov	r1, r3
 8001874:	9500      	str	r5, [sp, #0]
 8001876:	4630      	mov	r0, r6
 8001878:	f7ff fb7e 	bl	8000f78 <_Unwind_VRS_Get>
 800187c:	2300      	movs	r3, #0
 800187e:	9500      	str	r5, [sp, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	220d      	movs	r2, #13
 8001884:	4630      	mov	r0, r6
 8001886:	f7ff fb9d 	bl	8000fc4 <_Unwind_VRS_Set>
 800188a:	e79a      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 800188c:	43c3      	mvns	r3, r0
 800188e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	411a      	asrs	r2, r3
 8001898:	2300      	movs	r3, #0
 800189a:	0701      	lsls	r1, r0, #28
 800189c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80018a0:	bf48      	it	mi
 80018a2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80018a6:	4619      	mov	r1, r3
 80018a8:	4630      	mov	r0, r6
 80018aa:	f7ff fd5b 	bl	8001364 <_Unwind_VRS_Pop>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d1d3      	bne.n	800185a <__gnu_unwind_execute+0xa6>
 80018b2:	e786      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 80018b4:	28b1      	cmp	r0, #177	; 0xb1
 80018b6:	d057      	beq.n	8001968 <__gnu_unwind_execute+0x1b4>
 80018b8:	28b2      	cmp	r0, #178	; 0xb2
 80018ba:	d068      	beq.n	800198e <__gnu_unwind_execute+0x1da>
 80018bc:	28b3      	cmp	r0, #179	; 0xb3
 80018be:	f000 8095 	beq.w	80019ec <__gnu_unwind_execute+0x238>
 80018c2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80018c6:	2bb4      	cmp	r3, #180	; 0xb4
 80018c8:	d0c7      	beq.n	800185a <__gnu_unwind_execute+0xa6>
 80018ca:	2301      	movs	r3, #1
 80018cc:	f000 0207 	and.w	r2, r0, #7
 80018d0:	441a      	add	r2, r3
 80018d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018d6:	4619      	mov	r1, r3
 80018d8:	4630      	mov	r0, r6
 80018da:	f7ff fd43 	bl	8001364 <_Unwind_VRS_Pop>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d1bb      	bne.n	800185a <__gnu_unwind_execute+0xa6>
 80018e2:	e76e      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 80018e4:	4638      	mov	r0, r7
 80018e6:	f7ff ff39 	bl	800175c <next_unwind_byte>
 80018ea:	0224      	lsls	r4, r4, #8
 80018ec:	4304      	orrs	r4, r0
 80018ee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80018f2:	d0b2      	beq.n	800185a <__gnu_unwind_execute+0xa6>
 80018f4:	2300      	movs	r3, #0
 80018f6:	0124      	lsls	r4, r4, #4
 80018f8:	b2a2      	uxth	r2, r4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4630      	mov	r0, r6
 80018fe:	f7ff fd31 	bl	8001364 <_Unwind_VRS_Pop>
 8001902:	2800      	cmp	r0, #0
 8001904:	d1a9      	bne.n	800185a <__gnu_unwind_execute+0xa6>
 8001906:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800190a:	bf18      	it	ne
 800190c:	f04f 0801 	movne.w	r8, #1
 8001910:	e757      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 8001912:	28c6      	cmp	r0, #198	; 0xc6
 8001914:	d07d      	beq.n	8001a12 <__gnu_unwind_execute+0x25e>
 8001916:	28c7      	cmp	r0, #199	; 0xc7
 8001918:	f000 8086 	beq.w	8001a28 <__gnu_unwind_execute+0x274>
 800191c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001920:	2bc0      	cmp	r3, #192	; 0xc0
 8001922:	f000 8094 	beq.w	8001a4e <__gnu_unwind_execute+0x29a>
 8001926:	28c8      	cmp	r0, #200	; 0xc8
 8001928:	f000 809f 	beq.w	8001a6a <__gnu_unwind_execute+0x2b6>
 800192c:	28c9      	cmp	r0, #201	; 0xc9
 800192e:	d194      	bne.n	800185a <__gnu_unwind_execute+0xa6>
 8001930:	4638      	mov	r0, r7
 8001932:	f7ff ff13 	bl	800175c <next_unwind_byte>
 8001936:	0302      	lsls	r2, r0, #12
 8001938:	f000 000f 	and.w	r0, r0, #15
 800193c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001940:	3001      	adds	r0, #1
 8001942:	4302      	orrs	r2, r0
 8001944:	e782      	b.n	800184c <__gnu_unwind_execute+0x98>
 8001946:	ac03      	add	r4, sp, #12
 8001948:	4643      	mov	r3, r8
 800194a:	220e      	movs	r2, #14
 800194c:	4641      	mov	r1, r8
 800194e:	9400      	str	r4, [sp, #0]
 8001950:	4630      	mov	r0, r6
 8001952:	f7ff fb11 	bl	8000f78 <_Unwind_VRS_Get>
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4630      	mov	r0, r6
 800195a:	4643      	mov	r3, r8
 800195c:	220f      	movs	r2, #15
 800195e:	4641      	mov	r1, r8
 8001960:	f7ff fb30 	bl	8000fc4 <_Unwind_VRS_Set>
 8001964:	4640      	mov	r0, r8
 8001966:	e779      	b.n	800185c <__gnu_unwind_execute+0xa8>
 8001968:	4638      	mov	r0, r7
 800196a:	f7ff fef7 	bl	800175c <next_unwind_byte>
 800196e:	2800      	cmp	r0, #0
 8001970:	f43f af73 	beq.w	800185a <__gnu_unwind_execute+0xa6>
 8001974:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001978:	f47f af6f 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 800197c:	4602      	mov	r2, r0
 800197e:	4619      	mov	r1, r3
 8001980:	4630      	mov	r0, r6
 8001982:	f7ff fcef 	bl	8001364 <_Unwind_VRS_Pop>
 8001986:	2800      	cmp	r0, #0
 8001988:	f47f af67 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 800198c:	e719      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 800198e:	2300      	movs	r3, #0
 8001990:	f10d 090c 	add.w	r9, sp, #12
 8001994:	220d      	movs	r2, #13
 8001996:	4619      	mov	r1, r3
 8001998:	f8cd 9000 	str.w	r9, [sp]
 800199c:	4630      	mov	r0, r6
 800199e:	f7ff faeb 	bl	8000f78 <_Unwind_VRS_Get>
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff feda 	bl	800175c <next_unwind_byte>
 80019a8:	0602      	lsls	r2, r0, #24
 80019aa:	f04f 0402 	mov.w	r4, #2
 80019ae:	d50c      	bpl.n	80019ca <__gnu_unwind_execute+0x216>
 80019b0:	9b03      	ldr	r3, [sp, #12]
 80019b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80019b6:	40a0      	lsls	r0, r4
 80019b8:	4403      	add	r3, r0
 80019ba:	4638      	mov	r0, r7
 80019bc:	9303      	str	r3, [sp, #12]
 80019be:	f7ff fecd 	bl	800175c <next_unwind_byte>
 80019c2:	0603      	lsls	r3, r0, #24
 80019c4:	f104 0407 	add.w	r4, r4, #7
 80019c8:	d4f2      	bmi.n	80019b0 <__gnu_unwind_execute+0x1fc>
 80019ca:	2300      	movs	r3, #0
 80019cc:	9903      	ldr	r1, [sp, #12]
 80019ce:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80019d2:	40a2      	lsls	r2, r4
 80019d4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 80019d8:	188c      	adds	r4, r1, r2
 80019da:	f8cd 9000 	str.w	r9, [sp]
 80019de:	4619      	mov	r1, r3
 80019e0:	220d      	movs	r2, #13
 80019e2:	4630      	mov	r0, r6
 80019e4:	9403      	str	r4, [sp, #12]
 80019e6:	f7ff faed 	bl	8000fc4 <_Unwind_VRS_Set>
 80019ea:	e6ea      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 80019ec:	4638      	mov	r0, r7
 80019ee:	f7ff feb5 	bl	800175c <next_unwind_byte>
 80019f2:	2301      	movs	r3, #1
 80019f4:	0301      	lsls	r1, r0, #12
 80019f6:	f000 000f 	and.w	r0, r0, #15
 80019fa:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80019fe:	18c2      	adds	r2, r0, r3
 8001a00:	430a      	orrs	r2, r1
 8001a02:	4630      	mov	r0, r6
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff fcad 	bl	8001364 <_Unwind_VRS_Pop>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	f47f af25 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 8001a10:	e6d7      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 8001a12:	4638      	mov	r0, r7
 8001a14:	f7ff fea2 	bl	800175c <next_unwind_byte>
 8001a18:	0301      	lsls	r1, r0, #12
 8001a1a:	f000 000f 	and.w	r0, r0, #15
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001a24:	1c42      	adds	r2, r0, #1
 8001a26:	e7eb      	b.n	8001a00 <__gnu_unwind_execute+0x24c>
 8001a28:	4638      	mov	r0, r7
 8001a2a:	f7ff fe97 	bl	800175c <next_unwind_byte>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	f43f af13 	beq.w	800185a <__gnu_unwind_execute+0xa6>
 8001a34:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a38:	f47f af0f 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4630      	mov	r0, r6
 8001a42:	f7ff fc8f 	bl	8001364 <_Unwind_VRS_Pop>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	f47f af07 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 8001a4c:	e6b9      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	f000 020f 	and.w	r2, r0, #15
 8001a54:	3201      	adds	r2, #1
 8001a56:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f7ff fc81 	bl	8001364 <_Unwind_VRS_Pop>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f47f aef9 	bne.w	800185a <__gnu_unwind_execute+0xa6>
 8001a68:	e6ab      	b.n	80017c2 <__gnu_unwind_execute+0xe>
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f7ff fe76 	bl	800175c <next_unwind_byte>
 8001a70:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001a74:	f000 030f 	and.w	r3, r0, #15
 8001a78:	3210      	adds	r2, #16
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001a80:	e6e4      	b.n	800184c <__gnu_unwind_execute+0x98>
 8001a82:	bf00      	nop

08001a84 <__gnu_unwind_frame>:
 8001a84:	b530      	push	{r4, r5, lr}
 8001a86:	2403      	movs	r4, #3
 8001a88:	460d      	mov	r5, r1
 8001a8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	f88d 400c 	strb.w	r4, [sp, #12]
 8001a94:	79dc      	ldrb	r4, [r3, #7]
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	3308      	adds	r3, #8
 8001a9a:	a901      	add	r1, sp, #4
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	9201      	str	r2, [sp, #4]
 8001aa0:	f88d 400d 	strb.w	r4, [sp, #13]
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	f7ff fe85 	bl	80017b4 <__gnu_unwind_execute>
 8001aaa:	b005      	add	sp, #20
 8001aac:	bd30      	pop	{r4, r5, pc}
 8001aae:	bf00      	nop

08001ab0 <_Unwind_GetRegionStart>:
 8001ab0:	b508      	push	{r3, lr}
 8001ab2:	f7ff fe7d 	bl	80017b0 <unwind_UCB_from_context>
 8001ab6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001ab8:	bd08      	pop	{r3, pc}
 8001aba:	bf00      	nop

08001abc <_Unwind_GetLanguageSpecificData>:
 8001abc:	b508      	push	{r3, lr}
 8001abe:	f7ff fe77 	bl	80017b0 <unwind_UCB_from_context>
 8001ac2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001ac4:	79c3      	ldrb	r3, [r0, #7]
 8001ac6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001aca:	3008      	adds	r0, #8
 8001acc:	bd08      	pop	{r3, pc}
 8001ace:	bf00      	nop

08001ad0 <_Unwind_GetTextRelBase>:
 8001ad0:	b508      	push	{r3, lr}
 8001ad2:	f003 fe09 	bl	80056e8 <abort>
 8001ad6:	bf00      	nop

08001ad8 <_Unwind_GetDataRelBase>:
 8001ad8:	b508      	push	{r3, lr}
 8001ada:	f7ff fff9 	bl	8001ad0 <_Unwind_GetTextRelBase>
 8001ade:	bf00      	nop

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_InitTick+0x3c>)
{
 8001ae4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae6:	7818      	ldrb	r0, [r3, #0]
 8001ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aec:	fbb3 f3f0 	udiv	r3, r3, r0
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_InitTick+0x40>)
 8001af2:	6810      	ldr	r0, [r2, #0]
 8001af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001af8:	f000 fa10 	bl	8001f1c <HAL_SYSTICK_Config>
 8001afc:	4604      	mov	r4, r0
 8001afe:	b958      	cbnz	r0, 8001b18 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	2d0f      	cmp	r5, #15
 8001b02:	d809      	bhi.n	8001b18 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	4602      	mov	r2, r0
 8001b06:	4629      	mov	r1, r5
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0c:	f000 f9c6 	bl	8001e9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_InitTick+0x44>)
 8001b12:	4620      	mov	r0, r4
 8001b14:	601d      	str	r5, [r3, #0]
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x20>)
{
 8001b2a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b36:	f000 f99f 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff ffd0 	bl	8001ae0 <HAL_InitTick>
  HAL_MspInit();
 8001b40:	f002 f918 	bl	8003d74 <HAL_MspInit>
}
 8001b44:	2000      	movs	r0, #0
 8001b46:	bd08      	pop	{r3, pc}
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <HAL_IncTick+0x10>)
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_IncTick+0x14>)
 8001b50:	6811      	ldr	r1, [r2, #0]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	440b      	add	r3, r1
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000754 	.word	0x20000754
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b64:	4b01      	ldr	r3, [pc, #4]	; (8001b6c <HAL_GetTick+0x8>)
 8001b66:	6818      	ldr	r0, [r3, #0]
}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000754 	.word	0x20000754

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fff6 	bl	8001b64 <HAL_GetTick>
 8001b78:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7c:	bf1e      	ittt	ne
 8001b7e:	4b04      	ldrne	r3, [pc, #16]	; (8001b90 <HAL_Delay+0x20>)
 8001b80:	781b      	ldrbne	r3, [r3, #0]
 8001b82:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	1b40      	subs	r0, r0, r5
 8001b8a:	4284      	cmp	r4, r0
 8001b8c:	d8fa      	bhi.n	8001b84 <HAL_Delay+0x14>
  {
  }
}
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b96:	4604      	mov	r4, r0
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d06e      	beq.n	8001c7a <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b9c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001ba0:	b90b      	cbnz	r3, 8001ba6 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ba2:	f002 f909 	bl	8003db8 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f023 0302 	bic.w	r3, r3, #2
 8001bae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff ffd8 	bl	8001b64 <HAL_GetTick>
 8001bb4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	0791      	lsls	r1, r2, #30
 8001bbc:	d451      	bmi.n	8001c62 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc6:	f7ff ffcd 	bl	8001b64 <HAL_GetTick>
 8001bca:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	07d2      	lsls	r2, r2, #31
 8001bd2:	d554      	bpl.n	8001c7e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bd4:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd6:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bd8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	bf0c      	ite	eq
 8001bde:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001be2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001be6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001be8:	7e62      	ldrb	r2, [r4, #25]
 8001bea:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	bf0c      	ite	eq
 8001bf0:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf4:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bfa:	7ea2      	ldrb	r2, [r4, #26]
 8001bfc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	bf0c      	ite	eq
 8001c02:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c06:	f022 0220 	bicne.w	r2, r2, #32
 8001c0a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c0c:	7ee2      	ldrb	r2, [r4, #27]
 8001c0e:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	bf0c      	ite	eq
 8001c14:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c18:	f042 0210 	orrne.w	r2, r2, #16
 8001c1c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c1e:	7f22      	ldrb	r2, [r4, #28]
 8001c20:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	bf0c      	ite	eq
 8001c26:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c2a:	f022 0208 	bicne.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c30:	7f62      	ldrb	r2, [r4, #29]
 8001c32:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	bf0c      	ite	eq
 8001c38:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c3c:	f022 0204 	bicne.w	r2, r2, #4
 8001c40:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c42:	68e1      	ldr	r1, [r4, #12]
 8001c44:	68a2      	ldr	r2, [r4, #8]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	6921      	ldr	r1, [r4, #16]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	6961      	ldr	r1, [r4, #20]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	6861      	ldr	r1, [r4, #4]
 8001c52:	3901      	subs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c58:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001c5c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001c60:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c62:	f7ff ff7f 	bl	8001b64 <HAL_GetTick>
 8001c66:	1b40      	subs	r0, r0, r5
 8001c68:	280a      	cmp	r0, #10
 8001c6a:	d9a4      	bls.n	8001bb6 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c72:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c74:	2305      	movs	r3, #5
 8001c76:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
}
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c7e:	f7ff ff71 	bl	8001b64 <HAL_GetTick>
 8001c82:	1b40      	subs	r0, r0, r5
 8001c84:	280a      	cmp	r0, #10
 8001c86:	d9a1      	bls.n	8001bcc <HAL_CAN_Init+0x38>
 8001c88:	e7f0      	b.n	8001c6c <HAL_CAN_Init+0xd8>

08001c8a <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8a:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001c8e:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001c90:	3b01      	subs	r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d85f      	bhi.n	8001d56 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c96:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c98:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c9a:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ca8:	f000 021f 	and.w	r2, r0, #31
 8001cac:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cb0:	43d4      	mvns	r4, r2
 8001cb2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8001cb6:	4025      	ands	r5, r4
 8001cb8:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cbc:	69cd      	ldr	r5, [r1, #28]
 8001cbe:	bb85      	cbnz	r5, 8001d22 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cc0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cc4:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cc6:	4025      	ands	r5, r4
 8001cc8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ccc:	888d      	ldrh	r5, [r1, #4]
 8001cce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cd2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd6:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cda:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cdc:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cde:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ce2:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ce6:	6988      	ldr	r0, [r1, #24]
 8001ce8:	bb68      	cbnz	r0, 8001d46 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cea:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001cee:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cf0:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cf4:	6908      	ldr	r0, [r1, #16]
 8001cf6:	bb50      	cbnz	r0, 8001d4e <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cf8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001cfc:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cfe:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d02:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001d04:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d06:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d08:	bf02      	ittt	eq
 8001d0a:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8001d0e:	430a      	orreq	r2, r1
 8001d10:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d22:	2d01      	cmp	r5, #1
 8001d24:	d1df      	bne.n	8001ce6 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d26:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d2a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d2c:	4315      	orrs	r5, r2
 8001d2e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d32:	888d      	ldrh	r5, [r1, #4]
 8001d34:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d38:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d3c:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d40:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d42:	898d      	ldrh	r5, [r1, #12]
 8001d44:	e7cb      	b.n	8001cde <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d46:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001d4a:	4310      	orrs	r0, r2
 8001d4c:	e7d0      	b.n	8001cf0 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d4e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001d52:	4310      	orrs	r0, r2
 8001d54:	e7d3      	b.n	8001cfe <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
  }
}
 8001d60:	bd70      	pop	{r4, r5, r6, pc}

08001d62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d62:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d64:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001d68:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d11f      	bne.n	8001dae <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d6e:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d70:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d72:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff fef1 	bl	8001b64 <HAL_GetTick>
 8001d82:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	f010 0001 	ands.w	r0, r0, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d8e:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d90:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d92:	f7ff fee7 	bl	8001b64 <HAL_GetTick>
 8001d96:	1b40      	subs	r0, r0, r5
 8001d98:	280a      	cmp	r0, #10
 8001d9a:	d9f3      	bls.n	8001d84 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001da4:	2305      	movs	r3, #5
 8001da6:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8001daa:	2001      	movs	r0, #1
  }
}
 8001dac:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db4:	6243      	str	r3, [r0, #36]	; 0x24
 8001db6:	e7f8      	b.n	8001daa <HAL_CAN_Start+0x48>

08001db8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dba:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dbe:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc0:	3d01      	subs	r5, #1
 8001dc2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dc4:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001dc6:	d841      	bhi.n	8001e4c <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dc8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001dcc:	d03a      	beq.n	8001e44 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001dce:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001dd2:	2c03      	cmp	r4, #3
 8001dd4:	f04f 0501 	mov.w	r5, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001dda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
  }
}
 8001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001de6:	40a5      	lsls	r5, r4
 8001de8:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001dea:	6888      	ldr	r0, [r1, #8]
 8001dec:	68cf      	ldr	r7, [r1, #12]
 8001dee:	f104 0318 	add.w	r3, r4, #24
 8001df2:	bb10      	cbnz	r0, 8001e3a <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001df4:	6808      	ldr	r0, [r1, #0]
 8001df6:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dfe:	6908      	ldr	r0, [r1, #16]
 8001e00:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e02:	7d09      	ldrb	r1, [r1, #20]
 8001e04:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e06:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e0a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e0c:	bf08      	it	eq
 8001e0e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e12:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e14:	bf04      	itt	eq
 8001e16:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001e1a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e1e:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8001e20:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e22:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e2c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e3a:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001e3c:	4338      	orrs	r0, r7
 8001e3e:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001e42:	e7da      	b.n	8001dfa <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4a:	e7c9      	b.n	8001de0 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e52:	e7c5      	b.n	8001de0 <HAL_CAN_AddTxMessage+0x28>

08001e54 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e54:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d805      	bhi.n	8001e6a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e5e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001e60:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e62:	6953      	ldr	r3, [r2, #20]
 8001e64:	4319      	orrs	r1, r3
 8001e66:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001e68:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
  }
}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e7a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001e92:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e94:	60d3      	str	r3, [r2, #12]
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b530      	push	{r4, r5, lr}
 8001ea0:	68dc      	ldr	r4, [r3, #12]
 8001ea2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	bf28      	it	cs
 8001eb0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb8:	bf98      	it	ls
 8001eba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	fa05 f303 	lsl.w	r3, r5, r3
 8001ec0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec4:	bf88      	it	hi
 8001ec6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4019      	ands	r1, r3
 8001eca:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	fa05 f404 	lsl.w	r4, r5, r4
 8001ed0:	3c01      	subs	r4, #1
 8001ed2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001ed4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed6:	ea42 0201 	orr.w	r2, r2, r1
 8001eda:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	bfaf      	iteee	ge
 8001ee0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	4b06      	ldrlt	r3, [pc, #24]	; (8001f00 <HAL_NVIC_SetPriority+0x64>)
 8001ee6:	f000 000f 	andlt.w	r0, r0, #15
 8001eea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	bfa5      	ittet	ge
 8001eee:	b2d2      	uxtbge	r2, r2
 8001ef0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001efa:	bd30      	pop	{r4, r5, pc}
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	e000ed14 	.word	0xe000ed14

08001f04 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f04:	2301      	movs	r3, #1
 8001f06:	0942      	lsrs	r2, r0, #5
 8001f08:	f000 001f 	and.w	r0, r0, #31
 8001f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <HAL_NVIC_EnableIRQ+0x14>)
 8001f12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	3801      	subs	r0, #1
 8001f1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f22:	d20a      	bcs.n	8001f3a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f48:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001f4c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d003      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	2304      	movs	r3, #4
 8001f54:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
 8001f58:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5a:	6803      	ldr	r3, [r0, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f022 020e 	bic.w	r2, r2, #14
 8001f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f6c:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_DMA_Abort_IT+0x88>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x6a>
 8001f72:	3214      	adds	r2, #20
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01e      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x6e>
 8001f78:	3214      	adds	r2, #20
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_Abort_IT+0x72>
 8001f7e:	3214      	adds	r2, #20
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d01d      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x78>
 8001f84:	3214      	adds	r2, #20
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01d      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x7e>
 8001f8a:	3214      	adds	r2, #20
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf0c      	ite	eq
 8001f90:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001f94:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f9c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001fa6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001faa:	b17b      	cbz	r3, 8001fcc <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8001fac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	4620      	mov	r0, r4
 8001fb0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e7f0      	b.n	8001f98 <HAL_DMA_Abort_IT+0x50>
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	e7ee      	b.n	8001f98 <HAL_DMA_Abort_IT+0x50>
 8001fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbe:	e7eb      	b.n	8001f98 <HAL_DMA_Abort_IT+0x50>
 8001fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc4:	e7e8      	b.n	8001f98 <HAL_DMA_Abort_IT+0x50>
 8001fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fca:	e7e5      	b.n	8001f98 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	40020008 	.word	0x40020008
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001fdc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	4616      	mov	r6, r2
 8001fe0:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002188 <HAL_GPIO_Init+0x1b0>
 8001fe6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800218c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001fea:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001ff0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001ff8:	45a0      	cmp	r8, r4
 8001ffa:	d17f      	bne.n	80020fc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001ffc:	684d      	ldr	r5, [r1, #4]
 8001ffe:	2d12      	cmp	r5, #18
 8002000:	f000 80af 	beq.w	8002162 <HAL_GPIO_Init+0x18a>
 8002004:	f200 8088 	bhi.w	8002118 <HAL_GPIO_Init+0x140>
 8002008:	2d02      	cmp	r5, #2
 800200a:	f000 80a7 	beq.w	800215c <HAL_GPIO_Init+0x184>
 800200e:	d87c      	bhi.n	800210a <HAL_GPIO_Init+0x132>
 8002010:	2d00      	cmp	r5, #0
 8002012:	f000 808e 	beq.w	8002132 <HAL_GPIO_Init+0x15a>
 8002016:	2d01      	cmp	r5, #1
 8002018:	f000 809e 	beq.w	8002158 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002020:	2cff      	cmp	r4, #255	; 0xff
 8002022:	bf93      	iteet	ls
 8002024:	4682      	movls	sl, r0
 8002026:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800202a:	3d08      	subhi	r5, #8
 800202c:	f8d0 b000 	ldrls.w	fp, [r0]
 8002030:	bf92      	itee	ls
 8002032:	00b5      	lslls	r5, r6, #2
 8002034:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002038:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800203a:	fa09 f805 	lsl.w	r8, r9, r5
 800203e:	ea2b 0808 	bic.w	r8, fp, r8
 8002042:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002046:	bf88      	it	hi
 8002048:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800204c:	ea48 0505 	orr.w	r5, r8, r5
 8002050:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002054:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002058:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800205c:	d04e      	beq.n	80020fc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800205e:	4d47      	ldr	r5, [pc, #284]	; (800217c <HAL_GPIO_Init+0x1a4>)
 8002060:	4f46      	ldr	r7, [pc, #280]	; (800217c <HAL_GPIO_Init+0x1a4>)
 8002062:	69ad      	ldr	r5, [r5, #24]
 8002064:	f026 0803 	bic.w	r8, r6, #3
 8002068:	f045 0501 	orr.w	r5, r5, #1
 800206c:	61bd      	str	r5, [r7, #24]
 800206e:	69bd      	ldr	r5, [r7, #24]
 8002070:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002074:	f005 0501 	and.w	r5, r5, #1
 8002078:	9501      	str	r5, [sp, #4]
 800207a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800207e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002082:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002084:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8002088:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800208c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002090:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002094:	4d3a      	ldr	r5, [pc, #232]	; (8002180 <HAL_GPIO_Init+0x1a8>)
 8002096:	42a8      	cmp	r0, r5
 8002098:	d068      	beq.n	800216c <HAL_GPIO_Init+0x194>
 800209a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800209e:	42a8      	cmp	r0, r5
 80020a0:	d066      	beq.n	8002170 <HAL_GPIO_Init+0x198>
 80020a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020a6:	42a8      	cmp	r0, r5
 80020a8:	d064      	beq.n	8002174 <HAL_GPIO_Init+0x19c>
 80020aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ae:	42a8      	cmp	r0, r5
 80020b0:	bf0c      	ite	eq
 80020b2:	2503      	moveq	r5, #3
 80020b4:	2504      	movne	r5, #4
 80020b6:	fa05 f50b 	lsl.w	r5, r5, fp
 80020ba:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80020be:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80020c8:	bf14      	ite	ne
 80020ca:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020cc:	43a5      	biceq	r5, r4
 80020ce:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80020d6:	bf14      	ite	ne
 80020d8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020da:	43a5      	biceq	r5, r4
 80020dc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020de:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e4:	bf14      	ite	ne
 80020e6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e8:	43a5      	biceq	r5, r4
 80020ea:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ec:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f2:	bf14      	ite	ne
 80020f4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f6:	ea25 0404 	biceq.w	r4, r5, r4
 80020fa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80020fc:	3601      	adds	r6, #1
 80020fe:	2e10      	cmp	r6, #16
 8002100:	f47f af73 	bne.w	8001fea <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8002104:	b003      	add	sp, #12
 8002106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800210a:	2d03      	cmp	r5, #3
 800210c:	d022      	beq.n	8002154 <HAL_GPIO_Init+0x17c>
 800210e:	2d11      	cmp	r5, #17
 8002110:	d184      	bne.n	800201c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002112:	68ca      	ldr	r2, [r1, #12]
 8002114:	3204      	adds	r2, #4
          break;
 8002116:	e781      	b.n	800201c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8002118:	4f1a      	ldr	r7, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x1ac>)
 800211a:	42bd      	cmp	r5, r7
 800211c:	d009      	beq.n	8002132 <HAL_GPIO_Init+0x15a>
 800211e:	d812      	bhi.n	8002146 <HAL_GPIO_Init+0x16e>
 8002120:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002190 <HAL_GPIO_Init+0x1b8>
 8002124:	454d      	cmp	r5, r9
 8002126:	d004      	beq.n	8002132 <HAL_GPIO_Init+0x15a>
 8002128:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800212c:	454d      	cmp	r5, r9
 800212e:	f47f af75 	bne.w	800201c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002132:	688a      	ldr	r2, [r1, #8]
 8002134:	b1c2      	cbz	r2, 8002168 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002136:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002138:	bf0c      	ite	eq
 800213a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800213e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002142:	2208      	movs	r2, #8
 8002144:	e76a      	b.n	800201c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8002146:	4575      	cmp	r5, lr
 8002148:	d0f3      	beq.n	8002132 <HAL_GPIO_Init+0x15a>
 800214a:	4565      	cmp	r5, ip
 800214c:	d0f1      	beq.n	8002132 <HAL_GPIO_Init+0x15a>
 800214e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002194 <HAL_GPIO_Init+0x1bc>
 8002152:	e7eb      	b.n	800212c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002154:	2200      	movs	r2, #0
 8002156:	e761      	b.n	800201c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002158:	68ca      	ldr	r2, [r1, #12]
          break;
 800215a:	e75f      	b.n	800201c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800215c:	68ca      	ldr	r2, [r1, #12]
 800215e:	3208      	adds	r2, #8
          break;
 8002160:	e75c      	b.n	800201c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002162:	68ca      	ldr	r2, [r1, #12]
 8002164:	320c      	adds	r2, #12
          break;
 8002166:	e759      	b.n	800201c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002168:	2204      	movs	r2, #4
 800216a:	e757      	b.n	800201c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216c:	2500      	movs	r5, #0
 800216e:	e7a2      	b.n	80020b6 <HAL_GPIO_Init+0xde>
 8002170:	2501      	movs	r5, #1
 8002172:	e7a0      	b.n	80020b6 <HAL_GPIO_Init+0xde>
 8002174:	2502      	movs	r5, #2
 8002176:	e79e      	b.n	80020b6 <HAL_GPIO_Init+0xde>
 8002178:	40010400 	.word	0x40010400
 800217c:	40021000 	.word	0x40021000
 8002180:	40010800 	.word	0x40010800
 8002184:	10210000 	.word	0x10210000
 8002188:	10310000 	.word	0x10310000
 800218c:	10320000 	.word	0x10320000
 8002190:	10110000 	.word	0x10110000
 8002194:	10220000 	.word	0x10220000

08002198 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	b10a      	cbz	r2, 800219e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219a:	6101      	str	r1, [r0, #16]
 800219c:	4770      	bx	lr
 800219e:	0409      	lsls	r1, r1, #16
 80021a0:	e7fb      	b.n	800219a <HAL_GPIO_WritePin+0x2>
	...

080021a4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a4:	6803      	ldr	r3, [r0, #0]
{
 80021a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	07db      	lsls	r3, r3, #31
{
 80021ac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	d410      	bmi.n	80021d2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	079f      	lsls	r7, r3, #30
 80021b4:	d45e      	bmi.n	8002274 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	0719      	lsls	r1, r3, #28
 80021ba:	f100 8095 	bmi.w	80022e8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021be:	682b      	ldr	r3, [r5, #0]
 80021c0:	075a      	lsls	r2, r3, #29
 80021c2:	f100 80bf 	bmi.w	8002344 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	69ea      	ldr	r2, [r5, #28]
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	f040 812d 	bne.w	8002428 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80021ce:	2000      	movs	r0, #0
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021d2:	4c90      	ldr	r4, [pc, #576]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d007      	beq.n	80021ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021de:	6863      	ldr	r3, [r4, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021e8:	6863      	ldr	r3, [r4, #4]
 80021ea:	03de      	lsls	r6, r3, #15
 80021ec:	d509      	bpl.n	8002202 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	039c      	lsls	r4, r3, #14
 80021f2:	d5dd      	bpl.n	80021b0 <HAL_RCC_OscConfig+0xc>
 80021f4:	686b      	ldr	r3, [r5, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1da      	bne.n	80021b0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
}
 80021fc:	b002      	add	sp, #8
 80021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	686b      	ldr	r3, [r5, #4]
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d110      	bne.n	800222c <HAL_RCC_OscConfig+0x88>
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002212:	f7ff fca7 	bl	8001b64 <HAL_GetTick>
 8002216:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	0398      	lsls	r0, r3, #14
 800221c:	d4c8      	bmi.n	80021b0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221e:	f7ff fca1 	bl	8001b64 <HAL_GetTick>
 8002222:	1b80      	subs	r0, r0, r6
 8002224:	2864      	cmp	r0, #100	; 0x64
 8002226:	d9f7      	bls.n	8002218 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002228:	2003      	movs	r0, #3
 800222a:	e7e7      	b.n	80021fc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	b99b      	cbnz	r3, 8002256 <HAL_RCC_OscConfig+0xb2>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800223e:	f7ff fc91 	bl	8001b64 <HAL_GetTick>
 8002242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	0399      	lsls	r1, r3, #14
 8002248:	d5b2      	bpl.n	80021b0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224a:	f7ff fc8b 	bl	8001b64 <HAL_GetTick>
 800224e:	1b80      	subs	r0, r0, r6
 8002250:	2864      	cmp	r0, #100	; 0x64
 8002252:	d9f7      	bls.n	8002244 <HAL_RCC_OscConfig+0xa0>
 8002254:	e7e8      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	d103      	bne.n	8002266 <HAL_RCC_OscConfig+0xc2>
 800225e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	e7d1      	b.n	800220a <HAL_RCC_OscConfig+0x66>
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6023      	str	r3, [r4, #0]
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	e7cd      	b.n	8002210 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002274:	4c67      	ldr	r4, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	f013 0f0c 	tst.w	r3, #12
 800227c:	d007      	beq.n	800228e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d110      	bne.n	80022aa <HAL_RCC_OscConfig+0x106>
 8002288:	6863      	ldr	r3, [r4, #4]
 800228a:	03da      	lsls	r2, r3, #15
 800228c:	d40d      	bmi.n	80022aa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	079b      	lsls	r3, r3, #30
 8002292:	d502      	bpl.n	800229a <HAL_RCC_OscConfig+0xf6>
 8002294:	692b      	ldr	r3, [r5, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d1af      	bne.n	80021fa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	696a      	ldr	r2, [r5, #20]
 800229e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	e785      	b.n	80021b6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	692a      	ldr	r2, [r5, #16]
 80022ac:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022ae:	b16a      	cbz	r2, 80022cc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b4:	f7ff fc56 	bl	8001b64 <HAL_GetTick>
 80022b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	079f      	lsls	r7, r3, #30
 80022be:	d4ec      	bmi.n	800229a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff fc50 	bl	8001b64 <HAL_GetTick>
 80022c4:	1b80      	subs	r0, r0, r6
 80022c6:	2802      	cmp	r0, #2
 80022c8:	d9f7      	bls.n	80022ba <HAL_RCC_OscConfig+0x116>
 80022ca:	e7ad      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80022cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc49 	bl	8001b64 <HAL_GetTick>
 80022d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	0798      	lsls	r0, r3, #30
 80022d8:	f57f af6d 	bpl.w	80021b6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fc42 	bl	8001b64 <HAL_GetTick>
 80022e0:	1b80      	subs	r0, r0, r6
 80022e2:	2802      	cmp	r0, #2
 80022e4:	d9f6      	bls.n	80022d4 <HAL_RCC_OscConfig+0x130>
 80022e6:	e79f      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e8:	69aa      	ldr	r2, [r5, #24]
 80022ea:	4c4a      	ldr	r4, [pc, #296]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_OscConfig+0x278>)
 80022ee:	b1da      	cbz	r2, 8002328 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022f4:	f7ff fc36 	bl	8001b64 <HAL_GetTick>
 80022f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022fc:	079b      	lsls	r3, r3, #30
 80022fe:	d50d      	bpl.n	800231c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002300:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fbb3 f3f2 	udiv	r3, r3, r2
 800230c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800230e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002310:	9b01      	ldr	r3, [sp, #4]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_RCC_OscConfig+0x16a>
 800231a:	e750      	b.n	80021be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fc22 	bl	8001b64 <HAL_GetTick>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	2802      	cmp	r0, #2
 8002324:	d9e9      	bls.n	80022fa <HAL_RCC_OscConfig+0x156>
 8002326:	e77f      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002328:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800232a:	f7ff fc1b 	bl	8001b64 <HAL_GetTick>
 800232e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002332:	079f      	lsls	r7, r3, #30
 8002334:	f57f af43 	bpl.w	80021be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fc14 	bl	8001b64 <HAL_GetTick>
 800233c:	1b80      	subs	r0, r0, r6
 800233e:	2802      	cmp	r0, #2
 8002340:	d9f6      	bls.n	8002330 <HAL_RCC_OscConfig+0x18c>
 8002342:	e771      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002344:	4c33      	ldr	r4, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 8002346:	69e3      	ldr	r3, [r4, #28]
 8002348:	00d8      	lsls	r0, r3, #3
 800234a:	d424      	bmi.n	8002396 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800234c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	69e3      	ldr	r3, [r4, #28]
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	61e3      	str	r3, [r4, #28]
 8002356:	69e3      	ldr	r3, [r4, #28]
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4e30      	ldr	r6, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002362:	6833      	ldr	r3, [r6, #0]
 8002364:	05d9      	lsls	r1, r3, #23
 8002366:	d518      	bpl.n	800239a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	68eb      	ldr	r3, [r5, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d126      	bne.n	80023bc <HAL_RCC_OscConfig+0x218>
 800236e:	6a23      	ldr	r3, [r4, #32]
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002376:	f7ff fbf5 	bl	8001b64 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800237e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	6a23      	ldr	r3, [r4, #32]
 8002382:	079b      	lsls	r3, r3, #30
 8002384:	d53f      	bpl.n	8002406 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002386:	2f00      	cmp	r7, #0
 8002388:	f43f af1d 	beq.w	80021c6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	69e3      	ldr	r3, [r4, #28]
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	61e3      	str	r3, [r4, #28]
 8002394:	e717      	b.n	80021c6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2700      	movs	r7, #0
 8002398:	e7e2      	b.n	8002360 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	6833      	ldr	r3, [r6, #0]
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023a2:	f7ff fbdf 	bl	8001b64 <HAL_GetTick>
 80023a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	6833      	ldr	r3, [r6, #0]
 80023aa:	05da      	lsls	r2, r3, #23
 80023ac:	d4dc      	bmi.n	8002368 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff fbd9 	bl	8001b64 <HAL_GetTick>
 80023b2:	eba0 0008 	sub.w	r0, r0, r8
 80023b6:	2864      	cmp	r0, #100	; 0x64
 80023b8:	d9f6      	bls.n	80023a8 <HAL_RCC_OscConfig+0x204>
 80023ba:	e735      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	b9ab      	cbnz	r3, 80023ea <HAL_RCC_OscConfig+0x246>
 80023be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6223      	str	r3, [r4, #32]
 80023ca:	6a23      	ldr	r3, [r4, #32]
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023d2:	f7ff fbc7 	bl	8001b64 <HAL_GetTick>
 80023d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	6a23      	ldr	r3, [r4, #32]
 80023da:	0798      	lsls	r0, r3, #30
 80023dc:	d5d3      	bpl.n	8002386 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff fbc1 	bl	8001b64 <HAL_GetTick>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	4540      	cmp	r0, r8
 80023e6:	d9f7      	bls.n	80023d8 <HAL_RCC_OscConfig+0x234>
 80023e8:	e71e      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	6a23      	ldr	r3, [r4, #32]
 80023ee:	d103      	bne.n	80023f8 <HAL_RCC_OscConfig+0x254>
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6223      	str	r3, [r4, #32]
 80023f6:	e7ba      	b.n	800236e <HAL_RCC_OscConfig+0x1ca>
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6223      	str	r3, [r4, #32]
 80023fe:	6a23      	ldr	r3, [r4, #32]
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	e7b6      	b.n	8002374 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff fbad 	bl	8001b64 <HAL_GetTick>
 800240a:	eba0 0008 	sub.w	r0, r0, r8
 800240e:	42b0      	cmp	r0, r6
 8002410:	d9b6      	bls.n	8002380 <HAL_RCC_OscConfig+0x1dc>
 8002412:	e709      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
 8002414:	40021000 	.word	0x40021000
 8002418:	42420000 	.word	0x42420000
 800241c:	42420480 	.word	0x42420480
 8002420:	20000008 	.word	0x20000008
 8002424:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4c22      	ldr	r4, [pc, #136]	; (80024b4 <HAL_RCC_OscConfig+0x310>)
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	f43f aee2 	beq.w	80021fa <HAL_RCC_OscConfig+0x56>
 8002436:	2300      	movs	r3, #0
 8002438:	4e1f      	ldr	r6, [pc, #124]	; (80024b8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800243c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243e:	d12b      	bne.n	8002498 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002440:	f7ff fb90 	bl	8001b64 <HAL_GetTick>
 8002444:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	0199      	lsls	r1, r3, #6
 800244a:	d41f      	bmi.n	800248c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800244c:	6a2b      	ldr	r3, [r5, #32]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002454:	6862      	ldr	r2, [r4, #4]
 8002456:	68a9      	ldr	r1, [r5, #8]
 8002458:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800245c:	430a      	orrs	r2, r1
 800245e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002462:	6862      	ldr	r2, [r4, #4]
 8002464:	430b      	orrs	r3, r1
 8002466:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800246a:	4313      	orrs	r3, r2
 800246c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800246e:	2301      	movs	r3, #1
 8002470:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002472:	f7ff fb77 	bl	8001b64 <HAL_GetTick>
 8002476:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	019a      	lsls	r2, r3, #6
 800247c:	f53f aea7 	bmi.w	80021ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fb70 	bl	8001b64 <HAL_GetTick>
 8002484:	1b40      	subs	r0, r0, r5
 8002486:	2802      	cmp	r0, #2
 8002488:	d9f6      	bls.n	8002478 <HAL_RCC_OscConfig+0x2d4>
 800248a:	e6cd      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff fb6a 	bl	8001b64 <HAL_GetTick>
 8002490:	1bc0      	subs	r0, r0, r7
 8002492:	2802      	cmp	r0, #2
 8002494:	d9d7      	bls.n	8002446 <HAL_RCC_OscConfig+0x2a2>
 8002496:	e6c7      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002498:	f7ff fb64 	bl	8001b64 <HAL_GetTick>
 800249c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	f57f ae94 	bpl.w	80021ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fb5d 	bl	8001b64 <HAL_GetTick>
 80024aa:	1b40      	subs	r0, r0, r5
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d9f6      	bls.n	800249e <HAL_RCC_OscConfig+0x2fa>
 80024b0:	e6ba      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420060 	.word	0x42420060

080024bc <HAL_RCC_GetSysClockFreq>:
{
 80024bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80024c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024c2:	ac02      	add	r4, sp, #8
 80024c4:	f103 0510 	add.w	r5, r3, #16
 80024c8:	4622      	mov	r2, r4
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	3308      	adds	r3, #8
 80024d0:	c203      	stmia	r2!, {r0, r1}
 80024d2:	42ab      	cmp	r3, r5
 80024d4:	4614      	mov	r4, r2
 80024d6:	d1f7      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024d8:	2301      	movs	r3, #1
 80024da:	f88d 3004 	strb.w	r3, [sp, #4]
 80024de:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80024e0:	4911      	ldr	r1, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80024e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	f003 020c 	and.w	r2, r3, #12
 80024ec:	2a08      	cmp	r2, #8
 80024ee:	d117      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80024f4:	a806      	add	r0, sp, #24
 80024f6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fe:	d50c      	bpl.n	800251a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002500:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002504:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002508:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250a:	aa06      	add	r2, sp, #24
 800250c:	4413      	add	r3, r2
 800250e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002516:	b007      	add	sp, #28
 8002518:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <HAL_RCC_GetSysClockFreq+0x74>)
 800251c:	4350      	muls	r0, r2
 800251e:	e7fa      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002522:	e7f8      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x5a>
 8002524:	08005ee0 	.word	0x08005ee0
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	003d0900 	.word	0x003d0900

08002534 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002534:	4a54      	ldr	r2, [pc, #336]	; (8002688 <HAL_RCC_ClockConfig+0x154>)
{
 8002536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800253a:	6813      	ldr	r3, [r2, #0]
{
 800253c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	428b      	cmp	r3, r1
{
 8002544:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002546:	d32a      	bcc.n	800259e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	6829      	ldr	r1, [r5, #0]
 800254a:	078c      	lsls	r4, r1, #30
 800254c:	d434      	bmi.n	80025b8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	07ca      	lsls	r2, r1, #31
 8002550:	d447      	bmi.n	80025e2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002552:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x154>)
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	429e      	cmp	r6, r3
 800255c:	f0c0 8082 	bcc.w	8002664 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	682a      	ldr	r2, [r5, #0]
 8002562:	4c4a      	ldr	r4, [pc, #296]	; (800268c <HAL_RCC_ClockConfig+0x158>)
 8002564:	f012 0f04 	tst.w	r2, #4
 8002568:	f040 8087 	bne.w	800267a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	0713      	lsls	r3, r2, #28
 800256e:	d506      	bpl.n	800257e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	692a      	ldr	r2, [r5, #16]
 8002574:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002578:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800257c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257e:	f7ff ff9d 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8002582:	6863      	ldr	r3, [r4, #4]
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_RCC_ClockConfig+0x15c>)
 8002586:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	40d8      	lsrs	r0, r3
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_ClockConfig+0x160>)
 8002590:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff faa4 	bl	8001ae0 <HAL_InitTick>
  return HAL_OK;
 8002598:	2000      	movs	r0, #0
}
 800259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f023 0307 	bic.w	r3, r3, #7
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	4299      	cmp	r1, r3
 80025b0:	d0ca      	beq.n	8002548 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80025b2:	2001      	movs	r0, #1
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b8:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025be:	bf1e      	ittt	ne
 80025c0:	685a      	ldrne	r2, [r3, #4]
 80025c2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80025c6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ca:	bf42      	ittt	mi
 80025cc:	685a      	ldrmi	r2, [r3, #4]
 80025ce:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80025d2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	68a8      	ldr	r0, [r5, #8]
 80025d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025dc:	4302      	orrs	r2, r0
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e7b5      	b.n	800254e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	686a      	ldr	r2, [r5, #4]
 80025e4:	4c29      	ldr	r4, [pc, #164]	; (800268c <HAL_RCC_ClockConfig+0x158>)
 80025e6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	d11c      	bne.n	8002626 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	d0df      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f8:	f023 0303 	bic.w	r3, r3, #3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002600:	f7ff fab0 	bl	8001b64 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002604:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002606:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002608:	2b01      	cmp	r3, #1
 800260a:	d114      	bne.n	8002636 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d09d      	beq.n	8002552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7ff faa5 	bl	8001b64 <HAL_GetTick>
 800261a:	1bc0      	subs	r0, r0, r7
 800261c:	4540      	cmp	r0, r8
 800261e:	d9f5      	bls.n	800260c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002620:	2003      	movs	r0, #3
 8002622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002626:	2a02      	cmp	r2, #2
 8002628:	d102      	bne.n	8002630 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800262e:	e7df      	b.n	80025f0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	f013 0f02 	tst.w	r3, #2
 8002634:	e7dc      	b.n	80025f0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	2b02      	cmp	r3, #2
 8002638:	d10f      	bne.n	800265a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d086      	beq.n	8002552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7ff fa8e 	bl	8001b64 <HAL_GetTick>
 8002648:	1bc0      	subs	r0, r0, r7
 800264a:	4540      	cmp	r0, r8
 800264c:	d9f5      	bls.n	800263a <HAL_RCC_ClockConfig+0x106>
 800264e:	e7e7      	b.n	8002620 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7ff fa88 	bl	8001b64 <HAL_GetTick>
 8002654:	1bc0      	subs	r0, r0, r7
 8002656:	4540      	cmp	r0, r8
 8002658:	d8e2      	bhi.n	8002620 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	f013 0f0c 	tst.w	r3, #12
 8002660:	d1f6      	bne.n	8002650 <HAL_RCC_ClockConfig+0x11c>
 8002662:	e776      	b.n	8002552 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f023 0307 	bic.w	r3, r3, #7
 800266a:	4333      	orrs	r3, r6
 800266c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	429e      	cmp	r6, r3
 8002676:	d19c      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x7e>
 8002678:	e772      	b.n	8002560 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	68e9      	ldr	r1, [r5, #12]
 800267e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002682:	430b      	orrs	r3, r1
 8002684:	6063      	str	r3, [r4, #4]
 8002686:	e771      	b.n	800256c <HAL_RCC_ClockConfig+0x38>
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	08005ef0 	.word	0x08005ef0
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026a6:	6810      	ldr	r0, [r2, #0]
}    
 80026a8:	40d8      	lsrs	r0, r3
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08005f00 	.word	0x08005f00
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026c6:	6810      	ldr	r0, [r2, #0]
} 
 80026c8:	40d8      	lsrs	r0, r3
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08005f00 	.word	0x08005f00
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80026da:	4604      	mov	r4, r0
 80026dc:	2800      	cmp	r0, #0
 80026de:	d034      	beq.n	800274a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80026e4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80026e8:	b90b      	cbnz	r3, 80026ee <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ea:	f001 fba9 	bl	8003e40 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80026ee:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80026f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80026f6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026f8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80026fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002700:	6863      	ldr	r3, [r4, #4]
 8002702:	69a2      	ldr	r2, [r4, #24]
 8002704:	4303      	orrs	r3, r0
 8002706:	68e0      	ldr	r0, [r4, #12]
 8002708:	4303      	orrs	r3, r0
 800270a:	6920      	ldr	r0, [r4, #16]
 800270c:	4303      	orrs	r3, r0
 800270e:	6960      	ldr	r0, [r4, #20]
 8002710:	4303      	orrs	r3, r0
 8002712:	69e0      	ldr	r0, [r4, #28]
 8002714:	4303      	orrs	r3, r0
 8002716:	6a20      	ldr	r0, [r4, #32]
 8002718:	4303      	orrs	r3, r0
 800271a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800271c:	4303      	orrs	r3, r0
 800271e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002722:	4303      	orrs	r3, r0
 8002724:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002726:	0c12      	lsrs	r2, r2, #16
 8002728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800272a:	f002 0204 	and.w	r2, r2, #4
 800272e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002732:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002734:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002736:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002738:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800273a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800273e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8002740:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002742:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002744:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8002748:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
}
 800274c:	bd10      	pop	{r4, pc}

0800274e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800274e:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002750:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002764:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002766:	b189      	cbz	r1, 800278c <HAL_TIM_Encoder_Start+0x28>
 8002768:	2904      	cmp	r1, #4
 800276a:	d007      	beq.n	800277c <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800277c:	6a1a      	ldr	r2, [r3, #32]
 800277e:	f022 0210 	bic.w	r2, r2, #16
 8002782:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	f042 0210 	orr.w	r2, r2, #16
 800278a:	e006      	b.n	800279a <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002794:	6a1a      	ldr	r2, [r3, #32]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800279c:	681a      	ldr	r2, [r3, #0]
}
 800279e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80027a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80027ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	f04f 0302 	mov.w	r3, #2
 80027b4:	d01c      	beq.n	80027f0 <HAL_TIM_ConfigClockSource+0x48>
 80027b6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80027be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80027c2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80027c8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80027cc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80027ce:	680a      	ldr	r2, [r1, #0]
 80027d0:	2a40      	cmp	r2, #64	; 0x40
 80027d2:	d079      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0x120>
 80027d4:	d819      	bhi.n	800280a <HAL_TIM_ConfigClockSource+0x62>
 80027d6:	2a10      	cmp	r2, #16
 80027d8:	f000 8093 	beq.w	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	d80a      	bhi.n	80027f4 <HAL_TIM_ConfigClockSource+0x4c>
 80027de:	2a00      	cmp	r2, #0
 80027e0:	f000 8089 	beq.w	80028f6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027ea:	2300      	movs	r3, #0
 80027ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80027f0:	4618      	mov	r0, r3
}
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80027f4:	2a20      	cmp	r2, #32
 80027f6:	f000 808a 	beq.w	800290e <HAL_TIM_ConfigClockSource+0x166>
 80027fa:	2a30      	cmp	r2, #48	; 0x30
 80027fc:	d1f2      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80027fe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002804:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002808:	e036      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800280a:	2a70      	cmp	r2, #112	; 0x70
 800280c:	d036      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xd4>
 800280e:	d81b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0xa0>
 8002810:	2a50      	cmp	r2, #80	; 0x50
 8002812:	d042      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xf2>
 8002814:	2a60      	cmp	r2, #96	; 0x60
 8002816:	d1e5      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002818:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002820:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002822:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002824:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002826:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002828:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800282c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002830:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002834:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002838:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800283a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800283c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800283e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002842:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002846:	e017      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002848:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800284c:	d011      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xca>
 800284e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002852:	d1c7      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002854:	688a      	ldr	r2, [r1, #8]
 8002856:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002858:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800285a:	68c9      	ldr	r1, [r1, #12]
 800285c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002862:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002866:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002868:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002870:	e002      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e7b3      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800287c:	688a      	ldr	r2, [r1, #8]
 800287e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002880:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002882:	68c9      	ldr	r1, [r1, #12]
 8002884:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002886:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002890:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002892:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002894:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002898:	e7ee      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	684c      	ldr	r4, [r1, #4]
 800289c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800289e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a6:	f025 0501 	bic.w	r5, r5, #1
 80028aa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ac:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80028ae:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80028b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ba:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80028bc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80028be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028c2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80028c6:	e7d7      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c8:	684c      	ldr	r4, [r1, #4]
 80028ca:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80028cc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ce:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d4:	f025 0501 	bic.w	r5, r5, #1
 80028d8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028da:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80028dc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80028e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80028ea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80028ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028f0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80028f4:	e7c0      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80028f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80028f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028fc:	f042 0207 	orr.w	r2, r2, #7
 8002900:	e7ba      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002902:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002904:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002908:	f042 0217 	orr.w	r2, r2, #23
 800290c:	e7b4      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800290e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002910:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002914:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002918:	e7ae      	b.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
	...

0800291c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800291e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	4290      	cmp	r0, r2
 8002922:	d00a      	beq.n	800293a <TIM_Base_SetConfig+0x1e>
 8002924:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0x1e>
 800292a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800292e:	4290      	cmp	r0, r2
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0x1e>
 8002932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002936:	4290      	cmp	r0, r2
 8002938:	d115      	bne.n	8002966 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800293a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002940:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	4a11      	ldr	r2, [pc, #68]	; (8002988 <TIM_Base_SetConfig+0x6c>)
 8002944:	4290      	cmp	r0, r2
 8002946:	d00a      	beq.n	800295e <TIM_Base_SetConfig+0x42>
 8002948:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x42>
 800294e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002952:	4290      	cmp	r0, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x42>
 8002956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d103      	bne.n	8002966 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002964:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002966:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800296c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800296e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	688b      	ldr	r3, [r1, #8]
 8002972:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002974:	680b      	ldr	r3, [r1, #0]
 8002976:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <TIM_Base_SetConfig+0x6c>)
 800297a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800297c:	bf04      	itt	eq
 800297e:	690b      	ldreq	r3, [r1, #16]
 8002980:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002982:	2301      	movs	r3, #1
 8002984:	6143      	str	r3, [r0, #20]
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00

0800298c <HAL_TIM_Base_Init>:
{
 800298c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800298e:	4604      	mov	r4, r0
 8002990:	b1a0      	cbz	r0, 80029bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002992:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002996:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800299a:	b91b      	cbnz	r3, 80029a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800299c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029a0:	f001 fad2 	bl	8003f48 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80029a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80029a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	1d21      	adds	r1, r4, #4
 80029ae:	f7ff ffb5 	bl	800291c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80029b2:	2301      	movs	r3, #1
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80029b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029bc:	2001      	movs	r0, #1
}
 80029be:	bd10      	pop	{r4, pc}

080029c0 <HAL_TIM_Encoder_Init>:
{
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	460c      	mov	r4, r1
  if(htim == NULL)
 80029c4:	4605      	mov	r5, r0
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d041      	beq.n	8002a4e <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 80029ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029d2:	b91b      	cbnz	r3, 80029dc <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80029d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80029d8:	f001 fa6e 	bl	8003eb8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029dc:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 80029de:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029e0:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 80029e4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029e8:	6883      	ldr	r3, [r0, #8]
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	f7ff ff94 	bl	800291c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80029f6:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 80029f8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80029fa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029fc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80029fe:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a00:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a06:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a0a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002a0e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a10:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a14:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a16:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a1e:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002a20:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a22:	430b      	orrs	r3, r1
 8002a24:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a26:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a2a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002a2e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a30:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a32:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a36:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002a38:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002a3a:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 8002a3c:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a3e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002a42:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002a44:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8002a46:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
}
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a52 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002a52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002a56:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f04f 0302 	mov.w	r3, #2
 8002a5e:	d018      	beq.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002a64:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002a66:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002a68:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002a6a:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002a6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a70:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4322      	orrs	r2, r4
 8002a76:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7e:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002a92:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002a94:	bd10      	pop	{r4, pc}

08002a96 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a96:	6803      	ldr	r3, [r0, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002aae:	4770      	bx	lr

08002ab0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	6805      	ldr	r5, [r0, #0]
 8002ab6:	68c2      	ldr	r2, [r0, #12]
 8002ab8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aba:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ac4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002ac6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002acc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002ad0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ad4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ada:	696b      	ldr	r3, [r5, #20]
 8002adc:	6982      	ldr	r2, [r0, #24]
 8002ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ae6:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <UART_SetConfig+0x138>)
{
 8002ae8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002aea:	429d      	cmp	r5, r3
 8002aec:	f04f 0419 	mov.w	r4, #25
 8002af0:	d146      	bne.n	8002b80 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002af2:	f7ff fde1 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8002af6:	fb04 f300 	mul.w	r3, r4, r0
 8002afa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002afe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002b02:	00b6      	lsls	r6, r6, #2
 8002b04:	fbb3 f3f6 	udiv	r3, r3, r6
 8002b08:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b0c:	011e      	lsls	r6, r3, #4
 8002b0e:	f7ff fdd3 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8002b12:	4360      	muls	r0, r4
 8002b14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b1e:	f7ff fdcb 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8002b22:	4360      	muls	r0, r4
 8002b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b32:	fb08 7313 	mls	r3, r8, r3, r7
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	3332      	adds	r3, #50	; 0x32
 8002b3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b3e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002b42:	f7ff fdb9 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8002b46:	4360      	muls	r0, r4
 8002b48:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	fbb0 faf2 	udiv	sl, r0, r2
 8002b52:	f7ff fdb1 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b56:	4360      	muls	r0, r4
 8002b58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b66:	fb08 a313 	mls	r3, r8, r3, sl
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	433b      	orrs	r3, r7
 8002b78:	4433      	add	r3, r6
 8002b7a:	60ab      	str	r3, [r5, #8]
 8002b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b80:	f7ff fd8a 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002b84:	fb04 f300 	mul.w	r3, r4, r0
 8002b88:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002b8c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002b90:	00b6      	lsls	r6, r6, #2
 8002b92:	fbb3 f3f6 	udiv	r3, r3, r6
 8002b96:	fbb3 f3f8 	udiv	r3, r3, r8
 8002b9a:	011e      	lsls	r6, r3, #4
 8002b9c:	f7ff fd7c 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	4360      	muls	r0, r4
 8002ba2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	fbb0 f7f3 	udiv	r7, r0, r3
 8002bac:	f7ff fd74 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	4360      	muls	r0, r4
 8002bb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bc0:	fb08 7313 	mls	r3, r8, r3, r7
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	3332      	adds	r3, #50	; 0x32
 8002bc8:	fbb3 f3f8 	udiv	r3, r3, r8
 8002bcc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002bd0:	f7ff fd62 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	4360      	muls	r0, r4
 8002bd6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	fbb0 faf2 	udiv	sl, r0, r2
 8002be0:	f7ff fd5a 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8002be4:	e7b7      	b.n	8002b56 <UART_SetConfig+0xa6>
 8002be6:	bf00      	nop
 8002be8:	40013800 	.word	0x40013800

08002bec <HAL_UART_Init>:
{
 8002bec:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002bee:	4604      	mov	r4, r0
 8002bf0:	b340      	cbz	r0, 8002c44 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002bf2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bfa:	b91b      	cbnz	r3, 8002c04 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002bfc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c00:	f001 f9c0 	bl	8003f84 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002c06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c0c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c0e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c14:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c16:	f7ff ff4b 	bl	8002ab0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c34:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002c36:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c3e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c44:	2001      	movs	r0, #1
}
 8002c46:	bd10      	pop	{r4, pc}

08002c48 <HAL_UART_TxCpltCallback>:
 8002c48:	4770      	bx	lr

08002c4a <HAL_UART_RxCpltCallback>:
 8002c4a:	4770      	bx	lr

08002c4c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002c4c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002c50:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002c52:	2b22      	cmp	r3, #34	; 0x22
 8002c54:	d136      	bne.n	8002cc4 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c56:	6883      	ldr	r3, [r0, #8]
 8002c58:	6901      	ldr	r1, [r0, #16]
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	6802      	ldr	r2, [r0, #0]
 8002c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c62:	d123      	bne.n	8002cac <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c64:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c66:	b9e9      	cbnz	r1, 8002ca4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002c70:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002c72:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002c74:	3c01      	subs	r4, #1
 8002c76:	b2a4      	uxth	r4, r4
 8002c78:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002c7a:	b98c      	cbnz	r4, 8002ca0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c7c:	6803      	ldr	r3, [r0, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	f022 0220 	bic.w	r2, r2, #32
 8002c84:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c8c:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002c96:	2320      	movs	r3, #32
 8002c98:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002c9c:	f7ff ffd5 	bl	8002c4a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002ca0:	2000      	movs	r0, #0
}
 8002ca2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f823 2b01 	strh.w	r2, [r3], #1
 8002caa:	e7e1      	b.n	8002c70 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002cac:	b921      	cbnz	r1, 8002cb8 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	6852      	ldr	r2, [r2, #4]
 8002cb2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e7dc      	b.n	8002c72 <UART_Receive_IT+0x26>
 8002cb8:	6852      	ldr	r2, [r2, #4]
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	6281      	str	r1, [r0, #40]	; 0x28
 8002cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cc2:	e7f7      	b.n	8002cb4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	bd10      	pop	{r4, pc}

08002cc8 <HAL_UART_ErrorCallback>:
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ccc:	6803      	ldr	r3, [r0, #0]
{
 8002cce:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cd0:	681a      	ldr	r2, [r3, #0]
{
 8002cd2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002cd4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002cda:	d107      	bne.n	8002cec <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cdc:	0696      	lsls	r6, r2, #26
 8002cde:	d55a      	bpl.n	8002d96 <HAL_UART_IRQHandler+0xca>
 8002ce0:	068d      	lsls	r5, r1, #26
 8002ce2:	d558      	bpl.n	8002d96 <HAL_UART_IRQHandler+0xca>
}
 8002ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ce8:	f7ff bfb0 	b.w	8002c4c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cec:	f015 0501 	ands.w	r5, r5, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x2c>
 8002cf2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002cf6:	d04e      	beq.n	8002d96 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cf8:	07d3      	lsls	r3, r2, #31
 8002cfa:	d505      	bpl.n	8002d08 <HAL_UART_IRQHandler+0x3c>
 8002cfc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cfe:	bf42      	ittt	mi
 8002d00:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002d02:	f043 0301 	orrmi.w	r3, r3, #1
 8002d06:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d08:	0750      	lsls	r0, r2, #29
 8002d0a:	d504      	bpl.n	8002d16 <HAL_UART_IRQHandler+0x4a>
 8002d0c:	b11d      	cbz	r5, 8002d16 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d16:	0793      	lsls	r3, r2, #30
 8002d18:	d504      	bpl.n	8002d24 <HAL_UART_IRQHandler+0x58>
 8002d1a:	b11d      	cbz	r5, 8002d24 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d24:	0716      	lsls	r6, r2, #28
 8002d26:	d504      	bpl.n	8002d32 <HAL_UART_IRQHandler+0x66>
 8002d28:	b11d      	cbz	r5, 8002d32 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d066      	beq.n	8002e06 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d38:	0695      	lsls	r5, r2, #26
 8002d3a:	d504      	bpl.n	8002d46 <HAL_UART_IRQHandler+0x7a>
 8002d3c:	0688      	lsls	r0, r1, #26
 8002d3e:	d502      	bpl.n	8002d46 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff83 	bl	8002c4c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d46:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002d48:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d4e:	0711      	lsls	r1, r2, #28
 8002d50:	d402      	bmi.n	8002d58 <HAL_UART_IRQHandler+0x8c>
 8002d52:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002d56:	d01a      	beq.n	8002d8e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002d58:	f7ff fe9d 	bl	8002a96 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	0652      	lsls	r2, r2, #25
 8002d62:	d510      	bpl.n	8002d86 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d64:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002d66:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002d6e:	b150      	cbz	r0, 8002d86 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_UART_IRQHandler+0x13c>)
 8002d72:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d74:	f7ff f8e8 	bl	8001f48 <HAL_DMA_Abort_IT>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d044      	beq.n	8002e06 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d84:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7ff ff9e 	bl	8002cc8 <HAL_UART_ErrorCallback>
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002d8e:	f7ff ff9b 	bl	8002cc8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d96:	0616      	lsls	r6, r2, #24
 8002d98:	d527      	bpl.n	8002dea <HAL_UART_IRQHandler+0x11e>
 8002d9a:	060d      	lsls	r5, r1, #24
 8002d9c:	d525      	bpl.n	8002dea <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002da2:	2a21      	cmp	r2, #33	; 0x21
 8002da4:	d12f      	bne.n	8002e06 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da6:	68a2      	ldr	r2, [r4, #8]
 8002da8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002dac:	6a22      	ldr	r2, [r4, #32]
 8002dae:	d117      	bne.n	8002de0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002db0:	8811      	ldrh	r1, [r2, #0]
 8002db2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002db6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002db8:	6921      	ldr	r1, [r4, #16]
 8002dba:	b979      	cbnz	r1, 8002ddc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002dbc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002dbe:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002dc0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002dc8:	b9ea      	cbnz	r2, 8002e06 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002ddc:	3201      	adds	r2, #1
 8002dde:	e7ee      	b.n	8002dbe <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002de0:	1c51      	adds	r1, r2, #1
 8002de2:	6221      	str	r1, [r4, #32]
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	e7ea      	b.n	8002dc0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dea:	0650      	lsls	r0, r2, #25
 8002dec:	d50b      	bpl.n	8002e06 <HAL_UART_IRQHandler+0x13a>
 8002dee:	064a      	lsls	r2, r1, #25
 8002df0:	d509      	bpl.n	8002e06 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002df4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002e02:	f7ff ff21 	bl	8002c48 <HAL_UART_TxCpltCallback>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	08002e0d 	.word	0x08002e0d

08002e0c <UART_DMAAbortOnError>:
{
 8002e0c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002e0e:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002e12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e14:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002e16:	f7ff ff57 	bl	8002cc8 <HAL_UART_ErrorCallback>
 8002e1a:	bd08      	pop	{r3, pc}

08002e1c <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>:
#include "MPU9250.h"
//#include "Global.h"
//#include "Timer.h"
//#include <exception>

MPU9250::MPU9250(SPI_TypeDef * const spi, GPIO_TypeDef * const ss_gpio, const uint32_t ss_pin)
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
	: _spi(spi), _ss_gpio(ss_gpio), _ss_pin(ss_pin)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]
{
	this->_gyroZ_bias = 0.0;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
}
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <_ZNK7MPU92509_spiWriteEh>:

uint8_t MPU9250::_spiWrite(const uint8_t data) const
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
	while(!(_spi->SR & SPI_SR_TXE)) ;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d000      	beq.n	8002e76 <_ZNK7MPU92509_spiWriteEh+0x26>
 8002e74:	e7f2      	b.n	8002e5c <_ZNK7MPU92509_spiWriteEh+0xc>
	_spi->DR = data;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	60da      	str	r2, [r3, #12]
	while(!(_spi->SR & SPI_SR_RXNE)) ;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d000      	beq.n	8002e98 <_ZNK7MPU92509_spiWriteEh+0x48>
 8002e96:	e7f2      	b.n	8002e7e <_ZNK7MPU92509_spiWriteEh+0x2e>
	return (uint8_t)_spi->DR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	b2db      	uxtb	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_ZNK7MPU925014_spiChipSelectEv>:

void MPU9250::_spiChipSelect(void) const
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = (_ss_pin << 16);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	0412      	lsls	r2, r2, #16
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <_ZNK7MPU925016_spiChipDeselectEv>:

void MPU9250::_spiChipDeselect(void) const
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = _ss_pin;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6892      	ldr	r2, [r2, #8]
 8002ed8:	611a      	str	r2, [r3, #16]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <_ZNK7MPU92509WriteWordEht>:

	return result;
}

uint16_t MPU9250::WriteWord(const uint8_t addr, const uint16_t data) const
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	803b      	strh	r3, [r7, #0]
	volatile uint16_t result = 0x00;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	81fb      	strh	r3, [r7, #14]

	_spiChipSelect();
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ffd6 	bl	8002eaa <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa4 	bl	8002e50 <_ZNK7MPU92509_spiWriteEh>

	result = (uint16_t)(_spiWrite((uint8_t)((data >> 8) & 0xff)) << 8);
 8002f08:	883b      	ldrh	r3, [r7, #0]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff9c 	bl	8002e50 <_ZNK7MPU92509_spiWriteEh>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	81fb      	strh	r3, [r7, #14]

	result = (uint16_t)(result | _spiWrite((uint8_t)(data & 0xff)));
 8002f22:	883b      	ldrh	r3, [r7, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff91 	bl	8002e50 <_ZNK7MPU92509_spiWriteEh>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	4313      	orrs	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	81fb      	strh	r3, [r7, #14]

	_spiChipDeselect();
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ffc3 	bl	8002ec8 <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 8002f42:	89fb      	ldrh	r3, [r7, #14]
 8002f44:	b29b      	uxth	r3, r3
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <_ZN8OdometryC1Ev>:
//#include "stm32f10x_conf.h"
//#include "Timer.h"

#include <cmath>

Odometry::Odometry(void)
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
{
	this->x = 0.0f;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
	this->y = 0.0f;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
	this->yaw = 0.0f;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

	this->movavg = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]

	//this->mpu9250 = new MPU9250(SPI_MPU9250, GPIOC, GPIO_PIN_0);
	this->mpu9250 = new MPU9250(SPI_MPU9250, GPIO_MPU9250, PIN_MPU9250);
 8002f7c:	2010      	movs	r0, #16
 8002f7e:	f001 f8a0 	bl	80040c2 <_Znwj>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461c      	mov	r4, r3
 8002f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <_ZN8OdometryC1Ev+0x60>)
 8002f8c:	4909      	ldr	r1, [pc, #36]	; (8002fb4 <_ZN8OdometryC1Ev+0x64>)
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff ff44 	bl	8002e1c <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	601c      	str	r4, [r3, #0]
}
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	e005      	b.n	8002fa8 <_ZN8OdometryC1Ev+0x58>
	this->mpu9250 = new MPU9250(SPI_MPU9250, GPIO_MPU9250, PIN_MPU9250);
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f001 fbea 	bl	8004778 <_ZdlPvj>
 8002fa4:	f001 f89e 	bl	80040e4 <__cxa_end_cleanup>
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	40010c00 	.word	0x40010c00
 8002fb4:	40003800 	.word	0x40003800

08002fb8 <_ZN8Odometry11ReadEncoderEv>:
	// gyro unit is not in desirable state (not stabilized)
	return false;
}

void Odometry::ReadEncoder(void)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	volatile int16_t _p1 = static_cast<int16_t>(((TIM_TypeDef *)(0x40000000U + 0x00000000U))->CNT);//TIM2->CNT
 8002fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	817b      	strh	r3, [r7, #10]
	((TIM_TypeDef *)(0x40000000U + 0x00000000U))->CNT = 0;
 8002fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fce:	2200      	movs	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

	volatile int16_t _p2 = static_cast<int16_t>(((TIM_TypeDef *)(0x40000000U + 0x00000400U))->CNT);//TIM3->CNT
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <_ZN8Odometry11ReadEncoderEv+0x104>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	813b      	strh	r3, [r7, #8]
	((TIM_TypeDef *)(0x40000000U + 0x00000400U))->CNT = 0;
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <_ZN8Odometry11ReadEncoderEv+0x104>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

	// just a simple rotation matrix
	// translate encoder rates to velocity on x-y plane
	float _yaw = yaw - ((float)M_PI / 4.0f); //いじるとしたらこの辺　ジャイロの付け方に依る
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	4936      	ldr	r1, [pc, #216]	; (80030c0 <_ZN8Odometry11ReadEncoderEv+0x108>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fafe 	bl	80005e8 <__aeabi_fsub>
 8002fec:	4603      	mov	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]
	float _cos = cosf(_yaw);
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f001 fd89 	bl	8004b08 <cosf>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	613b      	str	r3, [r7, #16]
	float _sin = sinf(_yaw);
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f001 fdb8 	bl	8004b70 <sinf>
 8003000:	4603      	mov	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]

	x += ((_p1 * _cos) - (_p2 * _sin)) * MPerPulse;
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	b21b      	sxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fba3 	bl	8000754 <__aeabi_i2f>
 800300e:	4603      	mov	r3, r0
 8003010:	6939      	ldr	r1, [r7, #16]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fbf2 	bl	80007fc <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	461c      	mov	r4, r3
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	b21b      	sxth	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fb97 	bl	8000754 <__aeabi_i2f>
 8003026:	4603      	mov	r3, r0
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fbe6 	bl	80007fc <__aeabi_fmul>
 8003030:	4603      	mov	r3, r0
 8003032:	4619      	mov	r1, r3
 8003034:	4620      	mov	r0, r4
 8003036:	f7fd fad7 	bl	80005e8 <__aeabi_fsub>
 800303a:	4603      	mov	r3, r0
 800303c:	4921      	ldr	r1, [pc, #132]	; (80030c4 <_ZN8Odometry11ReadEncoderEv+0x10c>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fbdc 	bl	80007fc <__aeabi_fmul>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd facc 	bl	80005ec <__addsf3>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]
	y += ((_p1 * _sin) + (_p2 * _cos)) * MPerPulse;
 800305c:	897b      	ldrh	r3, [r7, #10]
 800305e:	b21b      	sxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fb77 	bl	8000754 <__aeabi_i2f>
 8003066:	4603      	mov	r3, r0
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fbc6 	bl	80007fc <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	461c      	mov	r4, r3
 8003074:	893b      	ldrh	r3, [r7, #8]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fb6b 	bl	8000754 <__aeabi_i2f>
 800307e:	4603      	mov	r3, r0
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fbba 	bl	80007fc <__aeabi_fmul>
 8003088:	4603      	mov	r3, r0
 800308a:	4619      	mov	r1, r3
 800308c:	4620      	mov	r0, r4
 800308e:	f7fd faad 	bl	80005ec <__addsf3>
 8003092:	4603      	mov	r3, r0
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <_ZN8Odometry11ReadEncoderEv+0x10c>)
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fbb0 	bl	80007fc <__aeabi_fmul>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd faa0 	bl	80005ec <__addsf3>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	40000400 	.word	0x40000400
 80030c0:	3f490fdb 	.word	0x3f490fdb
 80030c4:	389e1f1d 	.word	0x389e1f1d

080030c8 <_ZN8Odometry8ReadGyroEv>:

void Odometry::ReadGyro(void)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	static constexpr float RadPerMilliDeg = M_PI / 180000.0;
	static constexpr float RadPerMilliDegPerSec = RadPerMilliDeg / SamplingFrequency;
	static constexpr float w = 0.01f;
	static constexpr float halfPi = M_PI / 2.0;

	int dy_raw_mdps = (((int16_t)mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000)) * 1000 / SensitivityScaleFactor) + 0.5f;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	21c7      	movs	r1, #199	; 0xc7
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff03 	bl	8002ee4 <_ZNK7MPU92509WriteWordEht>
 80030de:	4603      	mov	r3, r0
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e8:	fb03 f302 	mul.w	r3, r3, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fb31 	bl	8000754 <__aeabi_i2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4940      	ldr	r1, [pc, #256]	; (80031f8 <_ZN8Odometry8ReadGyroEv+0x130>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fc34 	bl	8000964 <__aeabi_fdiv>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa72 	bl	80005ec <__addsf3>
 8003108:	4603      	mov	r3, r0
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fd3c 	bl	8000b88 <__aeabi_f2iz>
 8003110:	4603      	mov	r3, r0
 8003112:	60fb      	str	r3, [r7, #12]
	//temp = mpu9250->WriteWord(READ_FLAG | MPUREG_TEMP_OUT_H, 0x0000);

	int dy_biased_mdps = dy_raw_mdps - movavg;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	60bb      	str	r3, [r7, #8]

	if(dy_biased_mdps < -movband || movband < dy_biased_mdps)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003124:	db02      	blt.n	800312c <_ZN8Odometry8ReadGyroEv+0x64>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	dd3b      	ble.n	80031a4 <_ZN8Odometry8ReadGyroEv+0xdc>
	{
		// yaw is in radian, so, convert from mdps to radian.
		yaw += (float)dy_biased_mdps * RadPerMilliDegPerSec;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691c      	ldr	r4, [r3, #16]
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f7fd fb0f 	bl	8000754 <__aeabi_i2f>
 8003136:	4603      	mov	r3, r0
 8003138:	4930      	ldr	r1, [pc, #192]	; (80031fc <_ZN8Odometry8ReadGyroEv+0x134>)
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fb5e 	bl	80007fc <__aeabi_fmul>
 8003140:	4603      	mov	r3, r0
 8003142:	4619      	mov	r1, r3
 8003144:	4620      	mov	r0, r4
 8003146:	f7fd fa51 	bl	80005ec <__addsf3>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	611a      	str	r2, [r3, #16]

		if(yaw > (float)M_PI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	492a      	ldr	r1, [pc, #168]	; (8003200 <_ZN8Odometry8ReadGyroEv+0x138>)
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fd0b 	bl	8000b74 <__aeabi_fcmpgt>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <_ZN8Odometry8ReadGyroEv+0xb2>
		{
			yaw -= (2.0f * (float)M_PI);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4926      	ldr	r1, [pc, #152]	; (8003204 <_ZN8Odometry8ReadGyroEv+0x13c>)
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa3c 	bl	80005e8 <__aeabi_fsub>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]
		if(yaw > (float)M_PI)
 8003178:	e03a      	b.n	80031f0 <_ZN8Odometry8ReadGyroEv+0x128>
		}
		else if(yaw < -(float)M_PI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4922      	ldr	r1, [pc, #136]	; (8003208 <_ZN8Odometry8ReadGyroEv+0x140>)
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fcd9 	bl	8000b38 <__aeabi_fcmplt>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d100      	bne.n	800318e <_ZN8Odometry8ReadGyroEv+0xc6>
		if(yaw > (float)M_PI)
 800318c:	e030      	b.n	80031f0 <_ZN8Odometry8ReadGyroEv+0x128>
		{
			yaw += (2.0f * (float)M_PI);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	491c      	ldr	r1, [pc, #112]	; (8003204 <_ZN8Odometry8ReadGyroEv+0x13c>)
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fa29 	bl	80005ec <__addsf3>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]
		if(yaw > (float)M_PI)
 80031a2:	e025      	b.n	80031f0 <_ZN8Odometry8ReadGyroEv+0x128>
		}
	}
	else
	{
		movavg = (int)((((float)movavg * (1 - w)) + ((float)dy_raw_mdps * w)) + 0.5f);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fad3 	bl	8000754 <__aeabi_i2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4916      	ldr	r1, [pc, #88]	; (800320c <_ZN8Odometry8ReadGyroEv+0x144>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fb22 	bl	80007fc <__aeabi_fmul>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461c      	mov	r4, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fd fac9 	bl	8000754 <__aeabi_i2f>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4912      	ldr	r1, [pc, #72]	; (8003210 <_ZN8Odometry8ReadGyroEv+0x148>)
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fb18 	bl	80007fc <__aeabi_fmul>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4619      	mov	r1, r3
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7fd fa0b 	bl	80005ec <__addsf3>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fa05 	bl	80005ec <__addsf3>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fccf 	bl	8000b88 <__aeabi_f2iz>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	605a      	str	r2, [r3, #4]
	}

}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	42033333 	.word	0x42033333
 80031fc:	33bb673f 	.word	0x33bb673f
 8003200:	40490fdb 	.word	0x40490fdb
 8003204:	40c90fdb 	.word	0x40c90fdb
 8003208:	c0490fdb 	.word	0xc0490fdb
 800320c:	3f7d70a4 	.word	0x3f7d70a4
 8003210:	3c23d70a 	.word	0x3c23d70a

08003214 <_ZN8Odometry6SampleEv>:
{
	return this->InitGyro();
}

void Odometry::Sample(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	this->ReadEncoder();
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fecb 	bl	8002fb8 <_ZN8Odometry11ReadEncoderEv>
	this->ReadGyro();
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff50 	bl	80030c8 <_ZN8Odometry8ReadGyroEv>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <can_init>:
CAN_FilterTypeDef filter;
uint32_t prescaler;
enum can_bus_state bus_state;

void can_init(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
    // default to 125 kbit/s
    prescaler = 48;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <can_init+0x20>)
 8003236:	2230      	movs	r2, #48	; 0x30
 8003238:	601a      	str	r2, [r3, #0]
    hcan.Instance = CAN1;
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <can_init+0x24>)
 800323c:	4a06      	ldr	r2, [pc, #24]	; (8003258 <can_init+0x28>)
 800323e:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <can_init+0x2c>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000055c 	.word	0x2000055c
 8003254:	2000067c 	.word	0x2000067c
 8003258:	40006400 	.word	0x40006400
 800325c:	20000560 	.word	0x20000560

08003260 <can_set_filter>:

void can_set_filter(uint32_t id, uint32_t mask)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	015b      	lsls	r3, r3, #5
 800326e:	b29b      	uxth	r3, r3
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <can_set_filter+0xa4>)
 8003272:	6013      	str	r3, [r2, #0]
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <can_set_filter+0xa4>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	4413      	add	r3, r2
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <can_set_filter+0xa4>)
 8003280:	6013      	str	r3, [r2, #0]
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <can_set_filter+0xa4>)
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800328e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003292:	4413      	add	r3, r2
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <can_set_filter+0xa4>)
 8003296:	6053      	str	r3, [r2, #4]

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	b29b      	uxth	r3, r3
 800329e:	4a19      	ldr	r2, [pc, #100]	; (8003304 <can_set_filter+0xa4>)
 80032a0:	6093      	str	r3, [r2, #8]
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <can_set_filter+0xa4>)
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	4413      	add	r3, r2
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <can_set_filter+0xa4>)
 80032ae:	6093      	str	r3, [r2, #8]
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <can_set_filter+0xa4>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c0:	4413      	add	r3, r2
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <can_set_filter+0xa4>)
 80032c4:	60d3      	str	r3, [r2, #12]

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <can_set_filter+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <can_set_filter+0xa4>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	61da      	str	r2, [r3, #28]
    filter.FilterBank = 0;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <can_set_filter+0xa4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <can_set_filter+0xa4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <can_set_filter+0xa4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <can_set_filter+0xa4>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	621a      	str	r2, [r3, #32]

    if (bus_state == ON_BUS)
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <can_set_filter+0xa8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d103      	bne.n	80032fa <can_set_filter+0x9a>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 80032f2:	4904      	ldr	r1, [pc, #16]	; (8003304 <can_set_filter+0xa4>)
 80032f4:	4805      	ldr	r0, [pc, #20]	; (800330c <can_set_filter+0xac>)
 80032f6:	f7fe fcc8 	bl	8001c8a <HAL_CAN_ConfigFilter>
    }
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000534 	.word	0x20000534
 8003308:	20000560 	.word	0x20000560
 800330c:	2000067c 	.word	0x2000067c

08003310 <can_enable>:

void can_enable(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
    if (bus_state == OFF_BUS)
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <can_enable+0xa8>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d148      	bne.n	80033ae <can_enable+0x9e>
    {
        hcan.Init.Prescaler = prescaler;
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <can_enable+0xac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <can_enable+0xb0>)
 8003322:	6053      	str	r3, [r2, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <can_enable+0xb0>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <can_enable+0xb0>)
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <can_enable+0xb0>)
 8003332:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003336:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <can_enable+0xb0>)
 800333a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800333e:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <can_enable+0xb0>)
 8003342:	2200      	movs	r2, #0
 8003344:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = DISABLE;
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <can_enable+0xb0>)
 8003348:	2200      	movs	r2, #0
 800334a:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <can_enable+0xb0>)
 800334e:	2200      	movs	r2, #0
 8003350:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8003352:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <can_enable+0xb0>)
 8003354:	2201      	movs	r2, #1
 8003356:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <can_enable+0xb0>)
 800335a:	2200      	movs	r2, #0
 800335c:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <can_enable+0xb0>)
 8003360:	2200      	movs	r2, #0
 8003362:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8003364:	4816      	ldr	r0, [pc, #88]	; (80033c0 <can_enable+0xb0>)
 8003366:	f7fe fc15 	bl	8001b94 <HAL_CAN_Init>
        bus_state = ON_BUS;
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <can_enable+0xa8>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
        can_set_filter(0, 0);
 8003370:	2100      	movs	r1, #0
 8003372:	2000      	movs	r0, #0
 8003374:	f7ff ff74 	bl	8003260 <can_set_filter>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8003378:	4811      	ldr	r0, [pc, #68]	; (80033c0 <can_enable+0xb0>)
 800337a:	f7fe fcf2 	bl	8001d62 <HAL_CAN_Start>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <can_enable+0x82>
        {
          /* Start Error */
          Error_Handler();
 800338e:	f000 fc99 	bl	8003cc4 <Error_Handler>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8003392:	2102      	movs	r1, #2
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <can_enable+0xb0>)
 8003396:	f7fe fd5d 	bl	8001e54 <HAL_CAN_ActivateNotification>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <can_enable+0x9e>
        {
          /* Notification Error */
          Error_Handler();
 80033aa:	f000 fc8b 	bl	8003cc4 <Error_Handler>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS1;
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <can_enable+0xb4>)
 80033b0:	2202      	movs	r2, #2
 80033b2:	611a      	str	r2, [r3, #16]
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000560 	.word	0x20000560
 80033bc:	2000055c 	.word	0x2000055c
 80033c0:	2000067c 	.word	0x2000067c
 80033c4:	40010c00 	.word	0x40010c00

080033c8 <can_set_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR1;
    GPIOC->BSRR = GPIO_BSRR_BR13;
}

void can_set_bitrate(enum can_bitrate bitrate)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
    if (bus_state == ON_BUS)
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <can_set_bitrate+0x9c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d03e      	beq.n	8003458 <can_set_bitrate+0x90>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d83c      	bhi.n	800345a <can_set_bitrate+0x92>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <can_set_bitrate+0x20>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003417 	.word	0x08003417
 80033f0:	0800341f 	.word	0x0800341f
 80033f4:	08003427 	.word	0x08003427
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	08003437 	.word	0x08003437
 8003400:	0800343f 	.word	0x0800343f
 8003404:	08003447 	.word	0x08003447
 8003408:	0800344f 	.word	0x0800344f
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <can_set_bitrate+0xa0>)
 800340e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003412:	601a      	str	r2, [r3, #0]
            break;
 8003414:	e021      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_20K:
            prescaler = 225;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <can_set_bitrate+0xa0>)
 8003418:	22e1      	movs	r2, #225	; 0xe1
 800341a:	601a      	str	r2, [r3, #0]
            break;
 800341c:	e01d      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_50K:
            prescaler = 90;
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <can_set_bitrate+0xa0>)
 8003420:	225a      	movs	r2, #90	; 0x5a
 8003422:	601a      	str	r2, [r3, #0]
            break;
 8003424:	e019      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_100K:
            prescaler = 45;
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <can_set_bitrate+0xa0>)
 8003428:	222d      	movs	r2, #45	; 0x2d
 800342a:	601a      	str	r2, [r3, #0]
            break;
 800342c:	e015      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_125K:
            prescaler = 36;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <can_set_bitrate+0xa0>)
 8003430:	2224      	movs	r2, #36	; 0x24
 8003432:	601a      	str	r2, [r3, #0]
            break;
 8003434:	e011      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_250K:
            prescaler = 18;
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <can_set_bitrate+0xa0>)
 8003438:	2212      	movs	r2, #18
 800343a:	601a      	str	r2, [r3, #0]
            break;
 800343c:	e00d      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_500K:
            prescaler = 9;
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <can_set_bitrate+0xa0>)
 8003440:	2209      	movs	r2, #9
 8003442:	601a      	str	r2, [r3, #0]
            break;
 8003444:	e009      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_750K:
            prescaler = 6;
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <can_set_bitrate+0xa0>)
 8003448:	2206      	movs	r2, #6
 800344a:	601a      	str	r2, [r3, #0]
            break;
 800344c:	e005      	b.n	800345a <can_set_bitrate+0x92>
        case CAN_BITRATE_1000K:
            prescaler = 4;
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <can_set_bitrate+0xa0>)
 8003450:	2204      	movs	r2, #4
 8003452:	601a      	str	r2, [r3, #0]
            break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <can_set_bitrate+0x92>
        return;
 8003458:	bf00      	nop
    }
}
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000560 	.word	0x20000560
 8003468:	2000055c 	.word	0x2000055c

0800346c <can_set_silent>:

void can_set_silent(uint8_t silent)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
    if (bus_state == ON_BUS)
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <can_set_silent+0x34>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00b      	beq.n	8003496 <can_set_silent+0x2a>
    {
        // cannot set silent mode while on bus
        return;
    }
    if (silent)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <can_set_silent+0x22>
    {
        hcan.Init.Mode = CAN_MODE_SILENT;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <can_set_silent+0x38>)
 8003486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e004      	b.n	8003498 <can_set_silent+0x2c>
    }
    else
    {
        hcan.Init.Mode = CAN_MODE_NORMAL;
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <can_set_silent+0x38>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	e000      	b.n	8003498 <can_set_silent+0x2c>
        return;
 8003496:	bf00      	nop
    }
}
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	20000560 	.word	0x20000560
 80034a4:	2000067c 	.word	0x2000067c

080034a8 <can_tx>:

uint32_t can_tx(CAN_TxHeaderTypeDef *tx_header, uint8_t (&buf)[CAN_MTU])
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
    // transmit can frame
    //hcan.pTxMsg = tx_msg;
    //status = HAL_CAN_Transmit(&hcan, timeout);

    uint32_t tx_mailbox;
    status = HAL_CAN_AddTxMessage(&hcan, tx_header, buf, &tx_mailbox);
 80034b2:	f107 0308 	add.w	r3, r7, #8
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4809      	ldr	r0, [pc, #36]	; (80034e0 <can_tx+0x38>)
 80034bc:	f7fe fc7c 	bl	8001db8 <HAL_CAN_AddTxMessage>
 80034c0:	4603      	mov	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]

    GPIOC->BSRR=GPIO_BSRR_BS13;
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <can_tx+0x3c>)
 80034c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ca:	611a      	str	r2, [r3, #16]
    GPIOC->BSRR=GPIO_BSRR_BR13;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <can_tx+0x3c>)
 80034ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034d2:	611a      	str	r2, [r3, #16]

    //led_on();
    return status;
 80034d4:	68fb      	ldr	r3, [r7, #12]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000067c 	.word	0x2000067c
 80034e4:	40011000 	.word	0x40011000

080034e8 <led_process>:
}


// Process time-based LED events
void led_process(void)
{
 80034e8:	b510      	push	{r4, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 80034ea:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <led_process+0x2c>)
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	b17b      	cbz	r3, 8003510 <led_process+0x28>
 80034f0:	f7fe fb38 	bl	8001b64 <HAL_GetTick>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	1ac0      	subs	r0, r0, r3
 80034f8:	280a      	cmp	r0, #10
 80034fa:	d909      	bls.n	8003510 <led_process+0x28>
	{
        GPIOC->BSRR = GPIO_BSRR_BR13;
 80034fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <led_process+0x30>)
 8003502:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	6023      	str	r3, [r4, #0]
		led_lastoff = HAL_GetTick();
 8003508:	f7fe fb2c 	bl	8001b64 <HAL_GetTick>
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <led_process+0x34>)
 800350e:	6018      	str	r0, [r3, #0]
 8003510:	bd10      	pop	{r4, pc}
 8003512:	bf00      	nop
 8003514:	20000708 	.word	0x20000708
 8003518:	40011000 	.word	0x40011000
 800351c:	20000704 	.word	0x20000704

08003520 <NVIC_EnableIRQ>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800352a:	4909      	ldr	r1, [pc, #36]	; (8003550 <NVIC_EnableIRQ+0x30>)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2001      	movs	r0, #1
 800353c:	fa00 f202 	lsl.w	r2, r0, r2
 8003540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100

08003554 <NVIC_SetPriority>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da0c      	bge.n	8003582 <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	490e      	ldr	r1, [pc, #56]	; (80035a4 <NVIC_SetPriority+0x50>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	e00b      	b.n	800359a <NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <NVIC_SetPriority+0x54>)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	1813      	adds	r3, r2, r0
 8003594:	460a      	mov	r2, r1
 8003596:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00
 80035a8:	e000e100 	.word	0xe000e100

080035ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b098      	sub	sp, #96	; 0x60
 80035b0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80035b2:	f7fe fab9 	bl	8001b28 <HAL_Init>

  /* USER CODE BEGIN Init */
	MX_GPIO_Init();
 80035b6:	f000 faf9 	bl	8003bac <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 80035ba:	f000 f9af 	bl	800391c <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80035be:	f000 fa0b 	bl	80039d8 <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 80035c2:	f000 fa67 	bl	8003a94 <_ZL12MX_TIM4_Initv>
	MX_CAN_Init();
 80035c6:	f000 f931 	bl	800382c <_ZL11MX_CAN_Initv>
	MX_SPI2_Init();
 80035ca:	f000 f96b 	bl	80038a4 <_ZL12MX_SPI2_Initv>
	MX_USART1_UART_Init();
 80035ce:	f000 fabf 	bl	8003b50 <_ZL19MX_USART1_UART_Initv>
//	MX_CRC_Init();
//  LL_SYSTICK_EnableIT(); //LLなので使わない使えない
//	serial.start_dma();

	// CANを初期化する．
	can_init();
 80035d2:	f7ff fe2d 	bl	8003230 <can_init>
	//  Init::InitTIM();
	//  Init::InitSPI();
  /* USER CODE END Init */

  /* Configure the system clock */
  NVIC_SetPriority (SysTick_IRQn, 1); //HAL_Delayから戻ってこなくなったので、systickの順位を一番に
 80035d6:	2101      	movs	r1, #1
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035dc:	f7ff ffba 	bl	8003554 <NVIC_SetPriority>
  SystemClock_Config();
 80035e0:	f000 f8d4 	bl	800378c <_Z18SystemClock_Configv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  SPI2->CR1 |= SPI_CR1_SPE;
 80035e4:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <main+0x1a8>)
 80035e6:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <main+0x1a8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ee:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 80035f0:	4859      	ldr	r0, [pc, #356]	; (8003758 <main+0x1ac>)
 80035f2:	f7ff f8ac 	bl	800274e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80035f6:	2118      	movs	r1, #24
 80035f8:	4858      	ldr	r0, [pc, #352]	; (800375c <main+0x1b0>)
 80035fa:	f7ff f8b3 	bl	8002764 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80035fe:	2118      	movs	r1, #24
 8003600:	4857      	ldr	r0, [pc, #348]	; (8003760 <main+0x1b4>)
 8003602:	f7ff f8af 	bl	8002764 <HAL_TIM_Encoder_Start>

   //CANの通信速度を設定する．2018は500kbpsで通信した．と思ってたけど実際は250kbpsだった...
  can_set_bitrate(CAN_BITRATE_500K);
 8003606:	2006      	movs	r0, #6
 8003608:	f7ff fede 	bl	80033c8 <can_set_bitrate>

  GPIOC->BSRR = GPIO_BSRR_BS13;
 800360c:	4b55      	ldr	r3, [pc, #340]	; (8003764 <main+0x1b8>)
 800360e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003612:	611a      	str	r2, [r3, #16]

  GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 8003614:	4b54      	ldr	r3, [pc, #336]	; (8003768 <main+0x1bc>)
 8003616:	4a55      	ldr	r2, [pc, #340]	; (800376c <main+0x1c0>)
 8003618:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 800361a:	20fa      	movs	r0, #250	; 0xfa
 800361c:	f7fe faa8 	bl	8001b70 <HAL_Delay>
  GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BR2;
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <main+0x1bc>)
 8003622:	4a53      	ldr	r2, [pc, #332]	; (8003770 <main+0x1c4>)
 8003624:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 8003626:	20fa      	movs	r0, #250	; 0xfa
 8003628:	f7fe faa2 	bl	8001b70 <HAL_Delay>
  GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 800362c:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <main+0x1bc>)
 800362e:	2207      	movs	r2, #7
 8003630:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 8003632:	20fa      	movs	r0, #250	; 0xfa
 8003634:	f7fe fa9c 	bl	8001b70 <HAL_Delay>
  GPIOB->BSRR = GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <main+0x1bc>)
 800363a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800363e:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 8003640:	20fa      	movs	r0, #250	; 0xfa
 8003642:	f7fe fa95 	bl	8001b70 <HAL_Delay>
  GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2;
 8003646:	4b48      	ldr	r3, [pc, #288]	; (8003768 <main+0x1bc>)
 8003648:	2207      	movs	r2, #7
 800364a:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 800364c:	20fa      	movs	r0, #250	; 0xfa
 800364e:	f7fe fa8f 	bl	8001b70 <HAL_Delay>
  GPIOB->BSRR = GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 8003652:	4b45      	ldr	r3, [pc, #276]	; (8003768 <main+0x1bc>)
 8003654:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003658:	611a      	str	r2, [r3, #16]
  HAL_Delay(250);
 800365a:	20fa      	movs	r0, #250	; 0xfa
 800365c:	f7fe fa88 	bl	8001b70 <HAL_Delay>

  GPIOC->BSRR = GPIO_BSRR_BR13;
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <main+0x1b8>)
 8003662:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003666:	611a      	str	r2, [r3, #16]
  GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <main+0x1bc>)
 800366a:	4a40      	ldr	r2, [pc, #256]	; (800376c <main+0x1c0>)
 800366c:	611a      	str	r2, [r3, #16]
//          HAL_Delay(100);
//          GPIOB->BSRR = GPIO_BSRR_BS9;
//      }
//  }

   can_enable();
 800366e:	f7ff fe4f 	bl	8003310 <can_enable>


  NVIC_EnableIRQ(TIM4_IRQn); //割り込み有効化 ジャイロの値取りに必要
 8003672:	201e      	movs	r0, #30
 8003674:	f7ff ff54 	bl	8003520 <NVIC_EnableIRQ>
  CAN_TxHeaderTypeDef tx_header_yaw;
  uint8_t tx_payload_x[CAN_MTU]; //データの格納場所
  uint8_t tx_payload_y[CAN_MTU];
  uint8_t tx_payload_yaw[CAN_MTU];

  tx_header_x.RTR = CAN_RTR_DATA;
 8003678:	2300      	movs	r3, #0
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
  tx_header_x.IDE = CAN_ID_STD;
 800367c:	2300      	movs	r3, #0
 800367e:	653b      	str	r3, [r7, #80]	; 0x50
  tx_header_x.StdId = 0x206; //ID決める
 8003680:	f240 2306 	movw	r3, #518	; 0x206
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
  tx_header_x.ExtId = 0; //ここは0のままで
 8003686:	2300      	movs	r3, #0
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
  tx_header_x.DLC =8;
 800368a:	2308      	movs	r3, #8
 800368c:	65bb      	str	r3, [r7, #88]	; 0x58
  tx_header_y.RTR = CAN_RTR_DATA;
 800368e:	2300      	movs	r3, #0
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
  tx_header_y.IDE = CAN_ID_STD;
 8003692:	2300      	movs	r3, #0
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
  tx_header_y.StdId = 0x207; //ID決める
 8003696:	f240 2307 	movw	r3, #519	; 0x207
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
  tx_header_y.ExtId = 0; //ここは0のままで
 800369c:	2300      	movs	r3, #0
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
  tx_header_y.DLC =8;
 80036a0:	2308      	movs	r3, #8
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
  tx_header_yaw.RTR = CAN_RTR_DATA;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header_yaw.IDE = CAN_ID_STD;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
  tx_header_yaw.StdId = 0x208; //ID決める
 80036ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80036b0:	61bb      	str	r3, [r7, #24]
  tx_header_yaw.ExtId = 0; //ここは0のままで
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
  tx_header_yaw.DLC =8;
 80036b6:	2308      	movs	r3, #8
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28

//	  char kakudo [7];
//	  sprintf(kakudo,"%1.2f\n\r",odom->yaw);
//	  HAL_UART_Transmit_IT(&huart1,(uint8_t *)kakudo,7);
//	  HAL_Delay(100);
	  can_set_silent(0);
 80036ba:	2000      	movs	r0, #0
 80036bc:	f7ff fed6 	bl	800346c <can_set_silent>
	  current_time = HAL_GetTick();
 80036c0:	f7fe fa50 	bl	8001b64 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <main+0x1c8>)
 80036c8:	601a      	str	r2, [r3, #0]

	   //指定した周波数でCANに座標を送る
	  if(current_time - last_time > interval)
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <main+0x1c8>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <main+0x1cc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc fe85 	bl	80003e4 <__aeabi_ui2d>
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <main+0x1d0>)
 80036e0:	f7fc ff74 	bl	80005cc <__aeabi_dcmpgt>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d031      	beq.n	800374e <main+0x1a2>
	  {
		  can_pack(tx_payload_x,x);
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <main+0x1d4>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 faeb 	bl	8003cd0 <_Z8can_packIfEvRA8_hT_>
		  can_pack(tx_payload_y,y);
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <main+0x1d8>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f107 0308 	add.w	r3, r7, #8
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fae3 	bl	8003cd0 <_Z8can_packIfEvRA8_hT_>
		  can_pack(tx_payload_yaw,yaw);
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <main+0x1dc>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	463b      	mov	r3, r7
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fadc 	bl	8003cd0 <_Z8can_packIfEvRA8_hT_>

		  can_tx(&tx_header_x,tx_payload_x);//can pack 通して tx_payload //can_txのled_onが上手く動いてないっぽいのでデバッグ用にLEDを変えてみる
 8003718:	f107 0210 	add.w	r2, r7, #16
 800371c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fec0 	bl	80034a8 <can_tx>
		  can_tx(&tx_header_y,tx_payload_y);
 8003728:	f107 0208 	add.w	r2, r7, #8
 800372c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff feb8 	bl	80034a8 <can_tx>
		  can_tx(&tx_header_yaw,tx_payload_yaw);
 8003738:	463a      	mov	r2, r7
 800373a:	f107 0318 	add.w	r3, r7, #24
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff feb1 	bl	80034a8 <can_tx>

	  	last_time = current_time;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <main+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <main+0x1cc>)
 800374c:	6013      	str	r3, [r2, #0]
	  }

	  led_process();
 800374e:	f7ff fecb 	bl	80034e8 <led_process>
	  can_set_silent(0);
 8003752:	e7b2      	b.n	80036ba <main+0x10e>
 8003754:	40003800 	.word	0x40003800
 8003758:	2000063c 	.word	0x2000063c
 800375c:	200005bc 	.word	0x200005bc
 8003760:	200005fc 	.word	0x200005fc
 8003764:	40011000 	.word	0x40011000
 8003768:	40010c00 	.word	0x40010c00
 800376c:	00060001 	.word	0x00060001
 8003770:	00040003 	.word	0x00040003
 8003774:	200006f0 	.word	0x200006f0
 8003778:	200006f4 	.word	0x200006f4
 800377c:	40490000 	.word	0x40490000
 8003780:	200006f8 	.word	0x200006f8
 8003784:	200006fc 	.word	0x200006fc
 8003788:	20000700 	.word	0x20000700

0800378c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b090      	sub	sp, #64	; 0x40
 8003790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003792:	f107 0318 	add.w	r3, r7, #24
 8003796:	2228      	movs	r2, #40	; 0x28
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f002 f9ec 	bl	8005b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037b8:	2300      	movs	r3, #0
 80037ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037bc:	2301      	movs	r3, #1
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c0:	2302      	movs	r3, #2
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d0:	f107 0318 	add.w	r3, r7, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fce5 	bl	80021a4 <HAL_RCC_OscConfig>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80037ea:	f000 fa6b 	bl	8003cc4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ee:	230f      	movs	r3, #15
 80037f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f2:	2302      	movs	r3, #2
 80037f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fe93 	bl	8002534 <HAL_RCC_ClockConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800381e:	f000 fa51 	bl	8003cc4 <Error_Handler>
  }
}
 8003822:	bf00      	nop
 8003824:	3740      	adds	r7, #64	; 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <_ZL11MX_CAN_Initv+0x74>)
 8003834:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 48;
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003838:	2230      	movs	r2, #48	; 0x30
 800383a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ; //1->4
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 800384a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800384e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ; //1->3
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003856:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 800385a:	2200      	movs	r2, #0
 800385c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003860:	2200      	movs	r2, #0
 8003862:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003866:	2200      	movs	r2, #0
 8003868:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE; //DISABLE->ENABLE
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 800386c:	2201      	movs	r2, #1
 800386e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003872:	2200      	movs	r2, #0
 8003874:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 8003878:	2200      	movs	r2, #0
 800387a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800387c:	4807      	ldr	r0, [pc, #28]	; (800389c <_ZL11MX_CAN_Initv+0x70>)
 800387e:	f7fe f989 	bl	8001b94 <HAL_CAN_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8003892:	f000 fa17 	bl	8003cc4 <Error_Handler>
  }


}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000067c 	.word	0x2000067c
 80038a0:	40006400 	.word	0x40006400

080038a4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038aa:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <_ZL12MX_SPI2_Initv+0x74>)
 80038ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038b6:	4b17      	ldr	r3, [pc, #92]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038d8:	2228      	movs	r2, #40	; 0x28
 80038da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038de:	2200      	movs	r2, #0
 80038e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038f4:	4807      	ldr	r0, [pc, #28]	; (8003914 <_ZL12MX_SPI2_Initv+0x70>)
 80038f6:	f7fe feef 	bl	80026d8 <HAL_SPI_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800390a:	f000 f9db 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000564 	.word	0x20000564
 8003918:	40003800 	.word	0x40003800

0800391c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f002 f924 	bl	8005b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003938:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800393a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800393e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8003942:	2200      	movs	r2, #0
 8003944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800394e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003960:	2303      	movs	r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003968:	2301      	movs	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	4619      	mov	r1, r3
 800398a:	4812      	ldr	r0, [pc, #72]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800398c:	f7ff f818 	bl	80029c0 <HAL_TIM_Encoder_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80039a0:	f000 f990 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4808      	ldr	r0, [pc, #32]	; (80039d4 <_ZL12MX_TIM2_Initv+0xb8>)
 80039b2:	f7ff f84e 	bl	8002a52 <HAL_TIMEx_MasterConfigSynchronization>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80039c6:	f000 f97d 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	; 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200005bc 	.word	0x200005bc

080039d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 f8c6 	bl	8005b78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <_ZL12MX_TIM3_Initv+0xb8>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8003a06:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a22:	2301      	movs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a32:	2301      	movs	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4619      	mov	r1, r3
 8003a44:	4811      	ldr	r0, [pc, #68]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a46:	f7fe ffbb 	bl	80029c0 <HAL_TIM_Encoder_Init>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8003a5a:	f000 f933 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4808      	ldr	r0, [pc, #32]	; (8003a8c <_ZL12MX_TIM3_Initv+0xb4>)
 8003a6c:	f7fe fff1 	bl	8002a52 <HAL_TIMEx_MasterConfigSynchronization>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8003a80:	f000 f920 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200005fc 	.word	0x200005fc
 8003a90:	40000400 	.word	0x40000400

08003a94 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003ab2:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <_ZL12MX_TIM4_Initv+0xb8>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003ab8:	2247      	movs	r2, #71	; 0x47
 8003aba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003ac4:	f241 3287 	movw	r2, #4999	; 0x1387
 8003ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003aca:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003ad8:	481b      	ldr	r0, [pc, #108]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003ada:	f7fe ff57 	bl	800298c <HAL_TIM_Base_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8003aee:	f000 f8e9 	bl	8003cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	4619      	mov	r1, r3
 8003afe:	4812      	ldr	r0, [pc, #72]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003b00:	f7fe fe52 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8003b14:	f000 f8d6 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b20:	463b      	mov	r3, r7
 8003b22:	4619      	mov	r1, r3
 8003b24:	4808      	ldr	r0, [pc, #32]	; (8003b48 <_ZL12MX_TIM4_Initv+0xb4>)
 8003b26:	f7fe ff94 	bl	8002a52 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8003b3a:	f000 f8c3 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000063c 	.word	0x2000063c
 8003b4c:	40000800 	.word	0x40000800

08003b50 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200; //変更してもいいかな
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b86:	4807      	ldr	r0, [pc, #28]	; (8003ba4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003b88:	f7ff f830 	bl	8002bec <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003b9c:	f000 f892 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200006a4 	.word	0x200006a4
 8003ba8:	40013800 	.word	0x40013800

08003bac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bda:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <_ZL12MX_GPIO_Initv+0xd0>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c26:	4816      	ldr	r0, [pc, #88]	; (8003c80 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c28:	f7fe fab6 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f241 6107 	movw	r1, #5639	; 0x1607
 8003c32:	4814      	ldr	r0, [pc, #80]	; (8003c84 <_ZL12MX_GPIO_Initv+0xd8>)
 8003c34:	f7fe fab0 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2302      	movs	r3, #2
 8003c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c52:	f7fe f9c1 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003c56:	f241 6307 	movw	r3, #5639	; 0x1607
 8003c5a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <_ZL12MX_GPIO_Initv+0xd8>)
 8003c70:	f7fe f9b2 	bl	8001fd8 <HAL_GPIO_Init>

  //GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
  //GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
  //LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
 8003c74:	bf00      	nop
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40011000 	.word	0x40011000
 8003c84:	40010c00 	.word	0x40010c00

08003c88 <TIM4_IRQHandler>:

/* USER CODE BEGIN 4 */
extern "C" void TIM4_IRQHandler(void) //サンプリングレート200
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
    if(TIM4->SR & TIM_SR_UIF)
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <TIM4_IRQHandler+0x34>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <TIM4_IRQHandler+0x30>
    {
        odom->Sample();
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <TIM4_IRQHandler+0x38>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fab4 	bl	8003214 <_ZN8Odometry6SampleEv>

        TIM4->SR &= ~TIM_SR_UIF;
 8003cac:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <TIM4_IRQHandler+0x34>)
 8003cae:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <TIM4_IRQHandler+0x34>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6113      	str	r3, [r2, #16]
    	  //float g=9.81;
//    	  char kakudo [5];
//    	  sprintf(kakudo,"%1.2f\n",yaw);
//    	  HAL_UART_Transmit_IT(&huart1,(uint8_t *)&kakudo,5);
    	  //HAL_Delay(100);
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	200006e4 	.word	0x200006e4

08003cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <_Z8can_packIfEvRA8_hT_>:
     data = _e.data;
 }

 // packs can payload
 template<typename T>
 void can_pack(uint8_t (&buf)[CAN_MTU], const T data) //第一引数に格納用の配列
 8003cd0:	b490      	push	{r4, r7}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
 {
     _Encapsulator<T> _e;
     _e.data = data;
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	60ba      	str	r2, [r7, #8]

     for (int i = sizeof(T); i > 0;)
 8003cde:	2204      	movs	r2, #4
 8003ce0:	617a      	str	r2, [r7, #20]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	dd13      	ble.n	8003d10 <_Z8can_packIfEvRA8_hT_+0x40>
     {
         i--;
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	3a01      	subs	r2, #1
 8003cec:	617a      	str	r2, [r7, #20]
         buf[i] = _e.i & 0xff;
 8003cee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cf2:	b2c8      	uxtb	r0, r1
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	7011      	strb	r1, [r2, #0]
         _e.i >>= 8;
 8003cfe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d02:	0a0b      	lsrs	r3, r1, #8
 8003d04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d08:	0a14      	lsrs	r4, r2, #8
 8003d0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
     for (int i = sizeof(T); i > 0;)
 8003d0e:	e7e8      	b.n	8003ce2 <_Z8can_packIfEvRA8_hT_+0x12>
     }
 }
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc90      	pop	{r4, r7}
 8003d18:	4770      	bx	lr
	...

08003d1c <_Z41__static_initialization_and_destruction_0ii>:
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d110      	bne.n	8003d58 <_Z41__static_initialization_and_destruction_0ii+0x3c>
Odometry *odom = new Odometry();
 8003d36:	2014      	movs	r0, #20
 8003d38:	f000 f9c3 	bl	80040c2 <_Znwj>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461c      	mov	r4, r3
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff f905 	bl	8002f50 <_ZN8OdometryC1Ev>
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003d48:	601c      	str	r4, [r3, #0]
}
 8003d4a:	e005      	b.n	8003d58 <_Z41__static_initialization_and_destruction_0ii+0x3c>
Odometry *odom = new Odometry();
 8003d4c:	2114      	movs	r1, #20
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 fd12 	bl	8004778 <_ZdlPvj>
 8003d54:	f000 f9c6 	bl	80040e4 <__cxa_end_cleanup>
}
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200006e4 	.word	0x200006e4

08003d64 <_GLOBAL__sub_I_hspi2>:
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff ffd5 	bl	8003d1c <_Z41__static_initialization_and_destruction_0ii>
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_MspInit+0x3c>)
{
 8003d76:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	619a      	str	r2, [r3, #24]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	f002 0201 	and.w	r2, r2, #1
 8003d86:	9200      	str	r2, [sp, #0]
 8003d88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d90:	61da      	str	r2, [r3, #28]
 8003d92:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d94:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003daa:	b002      	add	sp, #8
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000

08003db8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	a802      	add	r0, sp, #8
 8003dc4:	f001 fed8 	bl	8005b78 <memset>
  if(hcan->Instance==CAN1)
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_CAN_MspInit+0x7c>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d12e      	bne.n	8003e2e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003dd0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003dd4:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd6:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003dd8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	4815      	ldr	r0, [pc, #84]	; (8003e38 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003de2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003de6:	9200      	str	r2, [sp, #0]
 8003de8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	f042 0204 	orr.w	r2, r2, #4
 8003df0:	619a      	str	r2, [r3, #24]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e00:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e02:	f7fe f8e9 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e10:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	a902      	add	r1, sp, #8
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <HAL_CAN_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e16:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	f7fe f8de 	bl	8001fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    __HAL_AFIO_REMAP_CAN1_2();
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_CAN_MspInit+0x84>)
 8003e1e:	6853      	ldr	r3, [r2, #4]
 8003e20:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003e24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2c:	6053      	str	r3, [r2, #4]
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003e2e:	b006      	add	sp, #24
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	40006400 	.word	0x40006400
 8003e38:	40010c00 	.word	0x40010c00
 8003e3c:	40010000 	.word	0x40010000

08003e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4604      	mov	r4, r0
 8003e44:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e46:	2210      	movs	r2, #16
 8003e48:	2100      	movs	r1, #0
 8003e4a:	a802      	add	r0, sp, #8
 8003e4c:	f001 fe94 	bl	8005b78 <memset>
  if(hspi->Instance==SPI2)
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_SPI_MspInit+0x70>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d128      	bne.n	8003eaa <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e58:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8003e5c:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e64:	61da      	str	r2, [r3, #28]
 8003e66:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e68:	4812      	ldr	r0, [pc, #72]	; (8003eb4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e6a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e6e:	9200      	str	r2, [sp, #0]
 8003e70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003e84:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003e88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f7fe f8a1 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	a902      	add	r1, sp, #8
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea6:	f7fe f897 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003eaa:	b006      	add	sp, #24
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	bf00      	nop
 8003eb0:	40003800 	.word	0x40003800
 8003eb4:	40010c00 	.word	0x40010c00

08003eb8 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	2210      	movs	r2, #16
{
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	eb0d 0002 	add.w	r0, sp, r2
 8003ec6:	f001 fe57 	bl	8005b78 <memset>
  if(htim_encoder->Instance==TIM2)
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d11b      	bne.n	8003f0a <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ed2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	61da      	str	r2, [r3, #28]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	f002 0201 	and.w	r2, r2, #1
 8003ee4:	9200      	str	r2, [sp, #0]
 8003ee6:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	f042 0204 	orr.w	r2, r2, #4
 8003eee:	619a      	str	r2, [r3, #24]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	9b01      	ldr	r3, [sp, #4]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003efa:	2303      	movs	r3, #3
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	480f      	ldr	r0, [pc, #60]	; (8003f3c <HAL_TIM_Encoder_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	f7fe f869 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f06:	b008      	add	sp, #32
 8003f08:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM3)
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <HAL_TIM_Encoder_MspInit+0x88>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d1fa      	bne.n	8003f06 <HAL_TIM_Encoder_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	f042 0202 	orr.w	r2, r2, #2
 8003f18:	61da      	str	r2, [r3, #28]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	f002 0202 	and.w	r2, r2, #2
 8003f20:	9202      	str	r2, [sp, #8]
 8003f22:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	f042 0204 	orr.w	r2, r2, #4
 8003f2a:	619a      	str	r2, [r3, #24]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f36:	23c0      	movs	r3, #192	; 0xc0
 8003f38:	e7e0      	b.n	8003efc <HAL_TIM_Encoder_MspInit+0x44>
 8003f3a:	bf00      	nop
 8003f3c:	40010800 	.word	0x40010800
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40021000 	.word	0x40021000

08003f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f48:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM4)
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_TIM_Base_MspInit+0x38>)
 8003f4c:	6802      	ldr	r2, [r0, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d112      	bne.n	8003f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f52:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f56:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f58:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f5a:	f042 0204 	orr.w	r2, r2, #4
 8003f5e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f60:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f62:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f64:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f6e:	f7fd ff95 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f72:	201e      	movs	r0, #30
 8003f74:	f7fd ffc6 	bl	8001f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f78:	b003      	add	sp, #12
 8003f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f7e:	bf00      	nop
 8003f80:	40000800 	.word	0x40000800

08003f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f84:	b510      	push	{r4, lr}
 8003f86:	4604      	mov	r4, r0
 8003f88:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	a802      	add	r0, sp, #8
 8003f90:	f001 fdf2 	bl	8005b78 <memset>
  if(huart->Instance==USART1)
 8003f94:	6822      	ldr	r2, [r4, #0]
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_UART_MspInit+0x80>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d131      	bne.n	8004000 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f9c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003fa0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa8:	619a      	str	r2, [r3, #24]
 8003faa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	4816      	ldr	r0, [pc, #88]	; (8004008 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb8:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	f042 0204 	orr.w	r2, r2, #4
 8003fbe:	619a      	str	r2, [r3, #24]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	f7fd fffe 	bl	8001fd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe4:	a902      	add	r1, sp, #8
 8003fe6:	4808      	ldr	r0, [pc, #32]	; (8004008 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fea:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fec:	f7fd fff4 	bl	8001fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ff0:	2025      	movs	r0, #37	; 0x25
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f7fd ff51 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ffa:	2025      	movs	r0, #37	; 0x25
 8003ffc:	f7fd ff82 	bl	8001f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004000:	b006      	add	sp, #24
 8004002:	bd10      	pop	{r4, pc}
 8004004:	40013800 	.word	0x40013800
 8004008:	40010800 	.word	0x40010800

0800400c <NMI_Handler>:
 800400c:	4770      	bx	lr

0800400e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800400e:	e7fe      	b.n	800400e <HardFault_Handler>

08004010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004010:	e7fe      	b.n	8004010 <MemManage_Handler>

08004012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004012:	e7fe      	b.n	8004012 <BusFault_Handler>

08004014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004014:	e7fe      	b.n	8004014 <UsageFault_Handler>

08004016 <SVC_Handler>:
 8004016:	4770      	bx	lr

08004018 <DebugMon_Handler>:
 8004018:	4770      	bx	lr

0800401a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401a:	4770      	bx	lr

0800401c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800401c:	f7fd bd96 	b.w	8001b4c <HAL_IncTick>

08004020 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <USART1_IRQHandler+0x8>)
 8004022:	f7fe be53 	b.w	8002ccc <HAL_UART_IRQHandler>
 8004026:	bf00      	nop
 8004028:	200006a4 	.word	0x200006a4

0800402c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <SystemInit+0x40>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <SystemInit+0x44>)
 800403a:	400a      	ands	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004044:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004048:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004050:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004058:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800405a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800405e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <SystemInit+0x48>)
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	f8ff0000 	.word	0xf8ff0000
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004078:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800407a:	e003      	b.n	8004084 <LoopCopyDataInit>

0800407c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800407e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004080:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004082:	3104      	adds	r1, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004084:	480a      	ldr	r0, [pc, #40]	; (80040b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004088:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800408a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800408c:	d3f6      	bcc.n	800407c <CopyDataInit>
  ldr r2, =_sbss
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004090:	e002      	b.n	8004098 <LoopFillZerobss>

08004092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004094:	f842 3b04 	str.w	r3, [r2], #4

08004098 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800409a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800409c:	d3f9      	bcc.n	8004092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800409e:	f7ff ffc5 	bl	800402c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040a2:	f001 fb29 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040a6:	f7ff fa81 	bl	80035ac <main>
  bx lr
 80040aa:	4770      	bx	lr
  ldr r3, =_sidata
 80040ac:	08006648 	.word	0x08006648
  ldr r0, =_sdata
 80040b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80040b4:	20000518 	.word	0x20000518
  ldr r2, =_sbss
 80040b8:	20000518 	.word	0x20000518
  ldr r3, = _ebss
 80040bc:	20000768 	.word	0x20000768

080040c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC1_2_IRQHandler>

080040c2 <_Znwj>:
 80040c2:	b510      	push	{r4, lr}
 80040c4:	2800      	cmp	r0, #0
 80040c6:	bf14      	ite	ne
 80040c8:	4604      	movne	r4, r0
 80040ca:	2401      	moveq	r4, #1
 80040cc:	4620      	mov	r0, r4
 80040ce:	f001 fb37 	bl	8005740 <malloc>
 80040d2:	b930      	cbnz	r0, 80040e2 <_Znwj+0x20>
 80040d4:	f000 fb52 	bl	800477c <_ZSt15get_new_handlerv>
 80040d8:	b908      	cbnz	r0, 80040de <_Znwj+0x1c>
 80040da:	f001 fb05 	bl	80056e8 <abort>
 80040de:	4780      	blx	r0
 80040e0:	e7f4      	b.n	80040cc <_Znwj+0xa>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <__cxa_end_cleanup>:
 80040e4:	b41e      	push	{r1, r2, r3, r4}
 80040e6:	f000 f89c 	bl	8004222 <__gnu_end_cleanup>
 80040ea:	bc1e      	pop	{r1, r2, r3, r4}
 80040ec:	f7fd faee 	bl	80016cc <_Unwind_Resume>

080040f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80040f0:	7803      	ldrb	r3, [r0, #0]
 80040f2:	2b47      	cmp	r3, #71	; 0x47
 80040f4:	d117      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80040f6:	7843      	ldrb	r3, [r0, #1]
 80040f8:	2b4e      	cmp	r3, #78	; 0x4e
 80040fa:	d114      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80040fc:	7883      	ldrb	r3, [r0, #2]
 80040fe:	2b55      	cmp	r3, #85	; 0x55
 8004100:	d111      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004102:	78c3      	ldrb	r3, [r0, #3]
 8004104:	2b43      	cmp	r3, #67	; 0x43
 8004106:	d10e      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004108:	7903      	ldrb	r3, [r0, #4]
 800410a:	2b43      	cmp	r3, #67	; 0x43
 800410c:	d10b      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800410e:	7943      	ldrb	r3, [r0, #5]
 8004110:	2b2b      	cmp	r3, #43	; 0x2b
 8004112:	d108      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004114:	7983      	ldrb	r3, [r0, #6]
 8004116:	2b2b      	cmp	r3, #43	; 0x2b
 8004118:	d105      	bne.n	8004126 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800411a:	79c0      	ldrb	r0, [r0, #7]
 800411c:	2801      	cmp	r0, #1
 800411e:	bf8c      	ite	hi
 8004120:	2000      	movhi	r0, #0
 8004122:	2001      	movls	r0, #1
 8004124:	4770      	bx	lr
 8004126:	2000      	movs	r0, #0
 8004128:	4770      	bx	lr
	...

0800412c <__cxa_type_match>:
 800412c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004130:	461e      	mov	r6, r3
 8004132:	7803      	ldrb	r3, [r0, #0]
 8004134:	460d      	mov	r5, r1
 8004136:	2b47      	cmp	r3, #71	; 0x47
 8004138:	4602      	mov	r2, r0
 800413a:	79c1      	ldrb	r1, [r0, #7]
 800413c:	d147      	bne.n	80041ce <__cxa_type_match+0xa2>
 800413e:	7843      	ldrb	r3, [r0, #1]
 8004140:	2b4e      	cmp	r3, #78	; 0x4e
 8004142:	d144      	bne.n	80041ce <__cxa_type_match+0xa2>
 8004144:	7883      	ldrb	r3, [r0, #2]
 8004146:	2b55      	cmp	r3, #85	; 0x55
 8004148:	d141      	bne.n	80041ce <__cxa_type_match+0xa2>
 800414a:	78c3      	ldrb	r3, [r0, #3]
 800414c:	2b43      	cmp	r3, #67	; 0x43
 800414e:	d13e      	bne.n	80041ce <__cxa_type_match+0xa2>
 8004150:	7903      	ldrb	r3, [r0, #4]
 8004152:	2b46      	cmp	r3, #70	; 0x46
 8004154:	d13b      	bne.n	80041ce <__cxa_type_match+0xa2>
 8004156:	7943      	ldrb	r3, [r0, #5]
 8004158:	2b4f      	cmp	r3, #79	; 0x4f
 800415a:	d138      	bne.n	80041ce <__cxa_type_match+0xa2>
 800415c:	7983      	ldrb	r3, [r0, #6]
 800415e:	2b52      	cmp	r3, #82	; 0x52
 8004160:	d135      	bne.n	80041ce <__cxa_type_match+0xa2>
 8004162:	2900      	cmp	r1, #0
 8004164:	d133      	bne.n	80041ce <__cxa_type_match+0xa2>
 8004166:	2301      	movs	r3, #1
 8004168:	4608      	mov	r0, r1
 800416a:	2400      	movs	r4, #0
 800416c:	9401      	str	r4, [sp, #4]
 800416e:	bb33      	cbnz	r3, 80041be <__cxa_type_match+0x92>
 8004170:	bb38      	cbnz	r0, 80041c2 <__cxa_type_match+0x96>
 8004172:	2901      	cmp	r1, #1
 8004174:	bf0a      	itet	eq
 8004176:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800417a:	f1a2 0320 	subne.w	r3, r2, #32
 800417e:	3b78      	subeq	r3, #120	; 0x78
 8004180:	2901      	cmp	r1, #1
 8004182:	bf0c      	ite	eq
 8004184:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004188:	3258      	addne	r2, #88	; 0x58
 800418a:	681c      	ldr	r4, [r3, #0]
 800418c:	9201      	str	r2, [sp, #4]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4620      	mov	r0, r4
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4798      	blx	r3
 8004196:	b1b0      	cbz	r0, 80041c6 <__cxa_type_match+0x9a>
 8004198:	2702      	movs	r7, #2
 800419a:	9b01      	ldr	r3, [sp, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	aa01      	add	r2, sp, #4
 80041a4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80041a8:	4621      	mov	r1, r4
 80041aa:	2301      	movs	r3, #1
 80041ac:	4628      	mov	r0, r5
 80041ae:	47c0      	blx	r8
 80041b0:	b158      	cbz	r0, 80041ca <__cxa_type_match+0x9e>
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	4638      	mov	r0, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041be:	4c08      	ldr	r4, [pc, #32]	; (80041e0 <__cxa_type_match+0xb4>)
 80041c0:	e7e5      	b.n	800418e <__cxa_type_match+0x62>
 80041c2:	4c08      	ldr	r4, [pc, #32]	; (80041e4 <__cxa_type_match+0xb8>)
 80041c4:	e7e3      	b.n	800418e <__cxa_type_match+0x62>
 80041c6:	2701      	movs	r7, #1
 80041c8:	e7ea      	b.n	80041a0 <__cxa_type_match+0x74>
 80041ca:	4607      	mov	r7, r0
 80041cc:	e7f3      	b.n	80041b6 <__cxa_type_match+0x8a>
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7ff ff8e 	bl	80040f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80041d4:	f080 0001 	eor.w	r0, r0, #1
 80041d8:	b2c0      	uxtb	r0, r0
 80041da:	2300      	movs	r3, #0
 80041dc:	e7c5      	b.n	800416a <__cxa_type_match+0x3e>
 80041de:	bf00      	nop
 80041e0:	08005f08 	.word	0x08005f08
 80041e4:	08005f10 	.word	0x08005f10

080041e8 <__cxa_begin_cleanup>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4604      	mov	r4, r0
 80041ec:	f000 fbfe 	bl	80049ec <__cxa_get_globals>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4620      	mov	r0, r4
 80041f4:	f1a4 0120 	sub.w	r1, r4, #32
 80041f8:	f7ff ff7a 	bl	80040f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80041fc:	b160      	cbz	r0, 8004218 <__cxa_begin_cleanup+0x30>
 80041fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004202:	3301      	adds	r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	f844 3c04 	str.w	r3, [r4, #-4]
 800420a:	d103      	bne.n	8004214 <__cxa_begin_cleanup+0x2c>
 800420c:	6893      	ldr	r3, [r2, #8]
 800420e:	f844 3c08 	str.w	r3, [r4, #-8]
 8004212:	6091      	str	r1, [r2, #8]
 8004214:	2001      	movs	r0, #1
 8004216:	bd10      	pop	{r4, pc}
 8004218:	6893      	ldr	r3, [r2, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f9      	beq.n	8004212 <__cxa_begin_cleanup+0x2a>
 800421e:	f000 fbcd 	bl	80049bc <_ZSt9terminatev>

08004222 <__gnu_end_cleanup>:
 8004222:	b510      	push	{r4, lr}
 8004224:	f000 fbe2 	bl	80049ec <__cxa_get_globals>
 8004228:	6882      	ldr	r2, [r0, #8]
 800422a:	4601      	mov	r1, r0
 800422c:	b90a      	cbnz	r2, 8004232 <__gnu_end_cleanup+0x10>
 800422e:	f000 fbc5 	bl	80049bc <_ZSt9terminatev>
 8004232:	f102 0420 	add.w	r4, r2, #32
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ff5a 	bl	80040f0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800423c:	b140      	cbz	r0, 8004250 <__gnu_end_cleanup+0x2e>
 800423e:	69d3      	ldr	r3, [r2, #28]
 8004240:	3b01      	subs	r3, #1
 8004242:	61d3      	str	r3, [r2, #28]
 8004244:	b913      	cbnz	r3, 800424c <__gnu_end_cleanup+0x2a>
 8004246:	6990      	ldr	r0, [r2, #24]
 8004248:	6088      	str	r0, [r1, #8]
 800424a:	6193      	str	r3, [r2, #24]
 800424c:	4620      	mov	r0, r4
 800424e:	bd10      	pop	{r4, pc}
 8004250:	6088      	str	r0, [r1, #8]
 8004252:	e7fb      	b.n	800424c <__gnu_end_cleanup+0x2a>

08004254 <_ZL12read_uleb128PKhPm>:
 8004254:	2300      	movs	r3, #0
 8004256:	b570      	push	{r4, r5, r6, lr}
 8004258:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800425c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8004260:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004264:	1994      	adds	r4, r2, r6
 8004266:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800426a:	40a2      	lsls	r2, r4
 800426c:	4313      	orrs	r3, r2
 800426e:	062a      	lsls	r2, r5, #24
 8004270:	d4f4      	bmi.n	800425c <_ZL12read_uleb128PKhPm+0x8>
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	bd70      	pop	{r4, r5, r6, pc}

08004276 <_ZL12read_sleb128PKhPl>:
 8004276:	2300      	movs	r3, #0
 8004278:	461a      	mov	r2, r3
 800427a:	b530      	push	{r4, r5, lr}
 800427c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004280:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8004284:	4095      	lsls	r5, r2
 8004286:	432b      	orrs	r3, r5
 8004288:	0625      	lsls	r5, r4, #24
 800428a:	f102 0207 	add.w	r2, r2, #7
 800428e:	d4f5      	bmi.n	800427c <_ZL12read_sleb128PKhPl+0x6>
 8004290:	2a1f      	cmp	r2, #31
 8004292:	d806      	bhi.n	80042a2 <_ZL12read_sleb128PKhPl+0x2c>
 8004294:	0664      	lsls	r4, r4, #25
 8004296:	bf42      	ittt	mi
 8004298:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 800429c:	fa04 f202 	lslmi.w	r2, r4, r2
 80042a0:	4313      	orrmi	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	bd30      	pop	{r4, r5, pc}

080042a6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80042a6:	2850      	cmp	r0, #80	; 0x50
 80042a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	460e      	mov	r6, r1
 80042ae:	4614      	mov	r4, r2
 80042b0:	461f      	mov	r7, r3
 80042b2:	d107      	bne.n	80042c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 80042b4:	1cd0      	adds	r0, r2, #3
 80042b6:	f020 0003 	bic.w	r0, r0, #3
 80042ba:	f850 3b04 	ldr.w	r3, [r0], #4
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	b003      	add	sp, #12
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	f000 030f 	and.w	r3, r0, #15
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d82e      	bhi.n	800432a <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 80042cc:	e8df f003 	tbb	[pc, r3]
 80042d0:	251d0725 	.word	0x251d0725
 80042d4:	2d2d2d29 	.word	0x2d2d2d29
 80042d8:	2521182d 	.word	0x2521182d
 80042dc:	29          	.byte	0x29
 80042dd:	00          	.byte	0x00
 80042de:	a901      	add	r1, sp, #4
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff ffb7 	bl	8004254 <_ZL12read_uleb128PKhPm>
 80042e6:	9b01      	ldr	r3, [sp, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0e8      	beq.n	80042be <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80042ec:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80042f0:	2a10      	cmp	r2, #16
 80042f2:	bf08      	it	eq
 80042f4:	4626      	moveq	r6, r4
 80042f6:	062a      	lsls	r2, r5, #24
 80042f8:	4433      	add	r3, r6
 80042fa:	bf48      	it	mi
 80042fc:	681b      	ldrmi	r3, [r3, #0]
 80042fe:	e7de      	b.n	80042be <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8004300:	a901      	add	r1, sp, #4
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff ffb7 	bl	8004276 <_ZL12read_sleb128PKhPl>
 8004308:	e7ed      	b.n	80042e6 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800430a:	4620      	mov	r0, r4
 800430c:	f830 3b02 	ldrh.w	r3, [r0], #2
 8004310:	e7ea      	b.n	80042e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004312:	4620      	mov	r0, r4
 8004314:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8004318:	e7e6      	b.n	80042e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800431a:	4620      	mov	r0, r4
 800431c:	f850 3b04 	ldr.w	r3, [r0], #4
 8004320:	e7e2      	b.n	80042e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004322:	4620      	mov	r0, r4
 8004324:	f850 3b08 	ldr.w	r3, [r0], #8
 8004328:	e7de      	b.n	80042e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800432a:	f001 f9dd 	bl	80056e8 <abort>

0800432e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800432e:	b508      	push	{r3, lr}
 8004330:	4603      	mov	r3, r0
 8004332:	2bff      	cmp	r3, #255	; 0xff
 8004334:	4608      	mov	r0, r1
 8004336:	d007      	beq.n	8004348 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433c:	2b20      	cmp	r3, #32
 800433e:	d00d      	beq.n	800435c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8004340:	d804      	bhi.n	800434c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8004342:	b10b      	cbz	r3, 8004348 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d107      	bne.n	8004358 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8004348:	2000      	movs	r0, #0
 800434a:	bd08      	pop	{r3, pc}
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d00d      	beq.n	800436c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d0f9      	beq.n	8004348 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d005      	beq.n	8004364 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8004358:	f001 f9c6 	bl	80056e8 <abort>
 800435c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004360:	f7fd bbb6 	b.w	8001ad0 <_Unwind_GetTextRelBase>
 8004364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004368:	f7fd bbb6 	b.w	8001ad8 <_Unwind_GetDataRelBase>
 800436c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004370:	f7fd bb9e 	b.w	8001ab0 <_Unwind_GetRegionStart>

08004374 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	4601      	mov	r1, r0
 800437a:	4620      	mov	r0, r4
 800437c:	4615      	mov	r5, r2
 800437e:	461e      	mov	r6, r3
 8004380:	f7ff ffd5 	bl	800432e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004384:	4633      	mov	r3, r6
 8004386:	462a      	mov	r2, r5
 8004388:	4601      	mov	r1, r0
 800438a:	4620      	mov	r0, r4
 800438c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004390:	f7ff bf89 	b.w	80042a6 <_ZL28read_encoded_value_with_basehjPKhPj>

08004394 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004394:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004396:	460e      	mov	r6, r1
 8004398:	4614      	mov	r4, r2
 800439a:	4605      	mov	r5, r0
 800439c:	b318      	cbz	r0, 80043e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800439e:	f7fd fb87 	bl	8001ab0 <_Unwind_GetRegionStart>
 80043a2:	6020      	str	r0, [r4, #0]
 80043a4:	7831      	ldrb	r1, [r6, #0]
 80043a6:	1c72      	adds	r2, r6, #1
 80043a8:	29ff      	cmp	r1, #255	; 0xff
 80043aa:	d01d      	beq.n	80043e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80043ac:	1d23      	adds	r3, r4, #4
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7ff ffe0 	bl	8004374 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80043b4:	4602      	mov	r2, r0
 80043b6:	7813      	ldrb	r3, [r2, #0]
 80043b8:	1c50      	adds	r0, r2, #1
 80043ba:	2bff      	cmp	r3, #255	; 0xff
 80043bc:	7523      	strb	r3, [r4, #20]
 80043be:	d015      	beq.n	80043ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80043c0:	2310      	movs	r3, #16
 80043c2:	a901      	add	r1, sp, #4
 80043c4:	7523      	strb	r3, [r4, #20]
 80043c6:	f7ff ff45 	bl	8004254 <_ZL12read_uleb128PKhPm>
 80043ca:	9b01      	ldr	r3, [sp, #4]
 80043cc:	4403      	add	r3, r0
 80043ce:	60e3      	str	r3, [r4, #12]
 80043d0:	7803      	ldrb	r3, [r0, #0]
 80043d2:	a901      	add	r1, sp, #4
 80043d4:	7563      	strb	r3, [r4, #21]
 80043d6:	3001      	adds	r0, #1
 80043d8:	f7ff ff3c 	bl	8004254 <_ZL12read_uleb128PKhPm>
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	4403      	add	r3, r0
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	b002      	add	sp, #8
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
 80043e6:	e7dc      	b.n	80043a2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80043e8:	6060      	str	r0, [r4, #4]
 80043ea:	e7e4      	b.n	80043b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80043ec:	2300      	movs	r3, #0
 80043ee:	e7ee      	b.n	80043ce <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080043f0 <_Unwind_GetGR>:
 80043f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043f2:	ab03      	add	r3, sp, #12
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	460a      	mov	r2, r1
 80043fa:	4619      	mov	r1, r3
 80043fc:	f7fc fdbc 	bl	8000f78 <_Unwind_VRS_Get>
 8004400:	9803      	ldr	r0, [sp, #12]
 8004402:	b005      	add	sp, #20
 8004404:	f85d fb04 	ldr.w	pc, [sp], #4

08004408 <__gxx_personality_v0>:
 8004408:	2300      	movs	r3, #0
 800440a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440e:	b091      	sub	sp, #68	; 0x44
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	f000 0303 	and.w	r3, r0, #3
 8004416:	2b01      	cmp	r3, #1
 8004418:	4607      	mov	r7, r0
 800441a:	460c      	mov	r4, r1
 800441c:	4616      	mov	r6, r2
 800441e:	d011      	beq.n	8004444 <__gxx_personality_v0+0x3c>
 8004420:	d303      	bcc.n	800442a <__gxx_personality_v0+0x22>
 8004422:	2b02      	cmp	r3, #2
 8004424:	d003      	beq.n	800442e <__gxx_personality_v0+0x26>
 8004426:	f001 f95f 	bl	80056e8 <abort>
 800442a:	0702      	lsls	r2, r0, #28
 800442c:	d51a      	bpl.n	8004464 <__gxx_personality_v0+0x5c>
 800442e:	4631      	mov	r1, r6
 8004430:	4620      	mov	r0, r4
 8004432:	f7fd fb27 	bl	8001a84 <__gnu_unwind_frame>
 8004436:	b118      	cbz	r0, 8004440 <__gxx_personality_v0+0x38>
 8004438:	2009      	movs	r0, #9
 800443a:	b011      	add	sp, #68	; 0x44
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	2008      	movs	r0, #8
 8004442:	e7fa      	b.n	800443a <__gxx_personality_v0+0x32>
 8004444:	f000 0508 	and.w	r5, r0, #8
 8004448:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800444c:	bb85      	cbnz	r5, 80044b0 <__gxx_personality_v0+0xa8>
 800444e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8004452:	4610      	mov	r0, r2
 8004454:	210d      	movs	r1, #13
 8004456:	f7ff ffcb 	bl	80043f0 <_Unwind_GetGR>
 800445a:	4581      	cmp	r9, r0
 800445c:	f040 8140 	bne.w	80046e0 <__gxx_personality_v0+0x2d8>
 8004460:	2506      	movs	r5, #6
 8004462:	e000      	b.n	8004466 <__gxx_personality_v0+0x5e>
 8004464:	2501      	movs	r5, #1
 8004466:	ab10      	add	r3, sp, #64	; 0x40
 8004468:	f843 4d2c 	str.w	r4, [r3, #-44]!
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	f007 0708 	and.w	r7, r7, #8
 8004474:	433d      	orrs	r5, r7
 8004476:	220c      	movs	r2, #12
 8004478:	4619      	mov	r1, r3
 800447a:	4630      	mov	r0, r6
 800447c:	f7fc fda2 	bl	8000fc4 <_Unwind_VRS_Set>
 8004480:	2d06      	cmp	r5, #6
 8004482:	f040 8139 	bne.w	80046f8 <__gxx_personality_v0+0x2f0>
 8004486:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800448a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800448c:	f1b8 0f00 	cmp.w	r8, #0
 8004490:	bf0c      	ite	eq
 8004492:	f04f 0a01 	moveq.w	sl, #1
 8004496:	f04f 0a03 	movne.w	sl, #3
 800449a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800449c:	f015 0508 	ands.w	r5, r5, #8
 80044a0:	f000 80ce 	beq.w	8004640 <__gxx_personality_v0+0x238>
 80044a4:	f1ba 0f01 	cmp.w	sl, #1
 80044a8:	f040 80c6 	bne.w	8004638 <__gxx_personality_v0+0x230>
 80044ac:	f000 fa86 	bl	80049bc <_ZSt9terminatev>
 80044b0:	2502      	movs	r5, #2
 80044b2:	e7d8      	b.n	8004466 <__gxx_personality_v0+0x5e>
 80044b4:	9a07      	ldr	r2, [sp, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	429f      	cmp	r7, r3
 80044ba:	f080 8137 	bcs.w	800472c <__gxx_personality_v0+0x324>
 80044be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c2:	f1b8 0f00 	cmp.w	r8, #0
 80044c6:	d001      	beq.n	80044cc <__gxx_personality_v0+0xc4>
 80044c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ca:	4498      	add	r8, r3
 80044cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80044ce:	b117      	cbz	r7, 80044d6 <__gxx_personality_v0+0xce>
 80044d0:	1e78      	subs	r0, r7, #1
 80044d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80044d4:	4407      	add	r7, r0
 80044d6:	f1b8 0f00 	cmp.w	r8, #0
 80044da:	d0a8      	beq.n	800442e <__gxx_personality_v0+0x26>
 80044dc:	2f00      	cmp	r7, #0
 80044de:	f000 80a1 	beq.w	8004624 <__gxx_personality_v0+0x21c>
 80044e2:	f015 0308 	ands.w	r3, r5, #8
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	d036      	beq.n	8004558 <__gxx_personality_v0+0x150>
 80044ea:	2347      	movs	r3, #71	; 0x47
 80044ec:	7023      	strb	r3, [r4, #0]
 80044ee:	234e      	movs	r3, #78	; 0x4e
 80044f0:	7063      	strb	r3, [r4, #1]
 80044f2:	2355      	movs	r3, #85	; 0x55
 80044f4:	70a3      	strb	r3, [r4, #2]
 80044f6:	2343      	movs	r3, #67	; 0x43
 80044f8:	70e3      	strb	r3, [r4, #3]
 80044fa:	2346      	movs	r3, #70	; 0x46
 80044fc:	7123      	strb	r3, [r4, #4]
 80044fe:	234f      	movs	r3, #79	; 0x4f
 8004500:	7163      	strb	r3, [r4, #5]
 8004502:	2352      	movs	r3, #82	; 0x52
 8004504:	71a3      	strb	r3, [r4, #6]
 8004506:	2300      	movs	r3, #0
 8004508:	71e3      	strb	r3, [r4, #7]
 800450a:	f04f 0a00 	mov.w	sl, #0
 800450e:	f06f 0b03 	mvn.w	fp, #3
 8004512:	a907      	add	r1, sp, #28
 8004514:	4638      	mov	r0, r7
 8004516:	f7ff feae 	bl	8004276 <_ZL12read_sleb128PKhPl>
 800451a:	a908      	add	r1, sp, #32
 800451c:	9003      	str	r0, [sp, #12]
 800451e:	f7ff feaa 	bl	8004276 <_ZL12read_sleb128PKhPl>
 8004522:	9a07      	ldr	r2, [sp, #28]
 8004524:	2a00      	cmp	r2, #0
 8004526:	d076      	beq.n	8004616 <__gxx_personality_v0+0x20e>
 8004528:	dd3d      	ble.n	80045a6 <__gxx_personality_v0+0x19e>
 800452a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800452e:	28ff      	cmp	r0, #255	; 0xff
 8004530:	d035      	beq.n	800459e <__gxx_personality_v0+0x196>
 8004532:	f000 0307 	and.w	r3, r0, #7
 8004536:	2b04      	cmp	r3, #4
 8004538:	f63f af75 	bhi.w	8004426 <__gxx_personality_v0+0x1e>
 800453c:	a101      	add	r1, pc, #4	; (adr r1, 8004544 <__gxx_personality_v0+0x13c>)
 800453e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	080045a3 	.word	0x080045a3
 8004548:	08004427 	.word	0x08004427
 800454c:	0800456b 	.word	0x0800456b
 8004550:	080045a3 	.word	0x080045a3
 8004554:	0800459b 	.word	0x0800459b
 8004558:	79e3      	ldrb	r3, [r4, #7]
 800455a:	2b01      	cmp	r3, #1
 800455c:	bf0c      	ite	eq
 800455e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8004562:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	e7cf      	b.n	800450a <__gxx_personality_v0+0x102>
 800456a:	2702      	movs	r7, #2
 800456c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800456e:	ab09      	add	r3, sp, #36	; 0x24
 8004570:	fb07 1212 	mls	r2, r7, r2, r1
 8004574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004576:	f7ff fe96 	bl	80042a6 <_ZL28read_encoded_value_with_basehjPKhPj>
 800457a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800457c:	b369      	cbz	r1, 80045da <__gxx_personality_v0+0x1d2>
 800457e:	b12c      	cbz	r4, 800458c <__gxx_personality_v0+0x184>
 8004580:	ab04      	add	r3, sp, #16
 8004582:	2200      	movs	r2, #0
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff fdd1 	bl	800412c <__cxa_type_match>
 800458a:	bb30      	cbnz	r0, 80045da <__gxx_personality_v0+0x1d2>
 800458c:	9f08      	ldr	r7, [sp, #32]
 800458e:	2f00      	cmp	r7, #0
 8004590:	d044      	beq.n	800461c <__gxx_personality_v0+0x214>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	443b      	add	r3, r7
 8004596:	461f      	mov	r7, r3
 8004598:	e7bb      	b.n	8004512 <__gxx_personality_v0+0x10a>
 800459a:	2708      	movs	r7, #8
 800459c:	e7e6      	b.n	800456c <__gxx_personality_v0+0x164>
 800459e:	2700      	movs	r7, #0
 80045a0:	e7e4      	b.n	800456c <__gxx_personality_v0+0x164>
 80045a2:	2704      	movs	r7, #4
 80045a4:	e7e2      	b.n	800456c <__gxx_personality_v0+0x164>
 80045a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80045a8:	3201      	adds	r2, #1
 80045aa:	b36c      	cbz	r4, 8004608 <__gxx_personality_v0+0x200>
 80045ac:	9b02      	ldr	r3, [sp, #8]
 80045ae:	bb5b      	cbnz	r3, 8004608 <__gxx_personality_v0+0x200>
 80045b0:	fb0b 7202 	mla	r2, fp, r2, r7
 80045b4:	9b04      	ldr	r3, [sp, #16]
 80045b6:	1f17      	subs	r7, r2, #4
 80045b8:	9306      	str	r3, [sp, #24]
 80045ba:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80045be:	b141      	cbz	r1, 80045d2 <__gxx_personality_v0+0x1ca>
 80045c0:	ab06      	add	r3, sp, #24
 80045c2:	2200      	movs	r2, #0
 80045c4:	4439      	add	r1, r7
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7ff fdb0 	bl	800412c <__cxa_type_match>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d0f4      	beq.n	80045ba <__gxx_personality_v0+0x1b2>
 80045d0:	2101      	movs	r1, #1
 80045d2:	f081 0101 	eor.w	r1, r1, #1
 80045d6:	2900      	cmp	r1, #0
 80045d8:	d0d8      	beq.n	800458c <__gxx_personality_v0+0x184>
 80045da:	f04f 0a03 	mov.w	sl, #3
 80045de:	9f07      	ldr	r7, [sp, #28]
 80045e0:	07eb      	lsls	r3, r5, #31
 80045e2:	d527      	bpl.n	8004634 <__gxx_personality_v0+0x22c>
 80045e4:	f1ba 0f02 	cmp.w	sl, #2
 80045e8:	f43f af21 	beq.w	800442e <__gxx_personality_v0+0x26>
 80045ec:	210d      	movs	r1, #13
 80045ee:	4630      	mov	r0, r6
 80045f0:	9d04      	ldr	r5, [sp, #16]
 80045f2:	f7ff fefd 	bl	80043f0 <_Unwind_GetGR>
 80045f6:	6265      	str	r5, [r4, #36]	; 0x24
 80045f8:	6220      	str	r0, [r4, #32]
 80045fa:	62a7      	str	r7, [r4, #40]	; 0x28
 80045fc:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8004600:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8004604:	2006      	movs	r0, #6
 8004606:	e718      	b.n	800443a <__gxx_personality_v0+0x32>
 8004608:	fb0b f202 	mul.w	r2, fp, r2
 800460c:	58b9      	ldr	r1, [r7, r2]
 800460e:	fab1 f181 	clz	r1, r1
 8004612:	0949      	lsrs	r1, r1, #5
 8004614:	e7df      	b.n	80045d6 <__gxx_personality_v0+0x1ce>
 8004616:	f04f 0a01 	mov.w	sl, #1
 800461a:	e7b7      	b.n	800458c <__gxx_personality_v0+0x184>
 800461c:	f1ba 0f00 	cmp.w	sl, #0
 8004620:	f43f af05 	beq.w	800442e <__gxx_personality_v0+0x26>
 8004624:	f04f 0a02 	mov.w	sl, #2
 8004628:	e7da      	b.n	80045e0 <__gxx_personality_v0+0x1d8>
 800462a:	2700      	movs	r7, #0
 800462c:	f04f 0a01 	mov.w	sl, #1
 8004630:	46b8      	mov	r8, r7
 8004632:	e7d5      	b.n	80045e0 <__gxx_personality_v0+0x1d8>
 8004634:	4649      	mov	r1, r9
 8004636:	e731      	b.n	800449c <__gxx_personality_v0+0x94>
 8004638:	2f00      	cmp	r7, #0
 800463a:	da23      	bge.n	8004684 <__gxx_personality_v0+0x27c>
 800463c:	f000 f9d0 	bl	80049e0 <_ZSt10unexpectedv>
 8004640:	f1ba 0f01 	cmp.w	sl, #1
 8004644:	d102      	bne.n	800464c <__gxx_personality_v0+0x244>
 8004646:	4620      	mov	r0, r4
 8004648:	f000 f942 	bl	80048d0 <__cxa_call_terminate>
 800464c:	2f00      	cmp	r7, #0
 800464e:	da19      	bge.n	8004684 <__gxx_personality_v0+0x27c>
 8004650:	aa0a      	add	r2, sp, #40	; 0x28
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff fe9e 	bl	8004394 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004658:	4631      	mov	r1, r6
 800465a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800465e:	f7ff fe66 	bl	800432e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004662:	f06f 0303 	mvn.w	r3, #3
 8004666:	fb07 3203 	mla	r2, r7, r3, r3
 800466a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800466c:	900c      	str	r0, [sp, #48]	; 0x30
 800466e:	4413      	add	r3, r2
 8004670:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004674:	b10a      	cbz	r2, 800467a <__gxx_personality_v0+0x272>
 8004676:	3501      	adds	r5, #1
 8004678:	e7fa      	b.n	8004670 <__gxx_personality_v0+0x268>
 800467a:	2204      	movs	r2, #4
 800467c:	62a5      	str	r5, [r4, #40]	; 0x28
 800467e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004680:	6322      	str	r2, [r4, #48]	; 0x30
 8004682:	6363      	str	r3, [r4, #52]	; 0x34
 8004684:	ab10      	add	r3, sp, #64	; 0x40
 8004686:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	4630      	mov	r0, r6
 8004690:	461a      	mov	r2, r3
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc fc96 	bl	8000fc4 <_Unwind_VRS_Set>
 8004698:	ab10      	add	r3, sp, #64	; 0x40
 800469a:	f843 7d20 	str.w	r7, [r3, #-32]!
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	2201      	movs	r2, #1
 80046a4:	4619      	mov	r1, r3
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7fc fc8c 	bl	8000fc4 <_Unwind_VRS_Set>
 80046ac:	210f      	movs	r1, #15
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff fe9e 	bl	80043f0 <_Unwind_GetGR>
 80046b4:	f000 0001 	and.w	r0, r0, #1
 80046b8:	ab10      	add	r3, sp, #64	; 0x40
 80046ba:	ea40 0008 	orr.w	r0, r0, r8
 80046be:	f843 0d24 	str.w	r0, [r3, #-36]!
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	220f      	movs	r2, #15
 80046c8:	4619      	mov	r1, r3
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7fc fc7a 	bl	8000fc4 <_Unwind_VRS_Set>
 80046d0:	f1ba 0f02 	cmp.w	sl, #2
 80046d4:	d102      	bne.n	80046dc <__gxx_personality_v0+0x2d4>
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7ff fd86 	bl	80041e8 <__cxa_begin_cleanup>
 80046dc:	2007      	movs	r0, #7
 80046de:	e6ac      	b.n	800443a <__gxx_personality_v0+0x32>
 80046e0:	aa10      	add	r2, sp, #64	; 0x40
 80046e2:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80046e6:	9200      	str	r2, [sp, #0]
 80046e8:	4643      	mov	r3, r8
 80046ea:	220c      	movs	r2, #12
 80046ec:	4641      	mov	r1, r8
 80046ee:	4630      	mov	r0, r6
 80046f0:	f045 0502 	orr.w	r5, r5, #2
 80046f4:	f7fc fc66 	bl	8000fc4 <_Unwind_VRS_Set>
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7fd f9df 	bl	8001abc <_Unwind_GetLanguageSpecificData>
 80046fe:	4681      	mov	r9, r0
 8004700:	2800      	cmp	r0, #0
 8004702:	f43f ae94 	beq.w	800442e <__gxx_personality_v0+0x26>
 8004706:	aa0a      	add	r2, sp, #40	; 0x28
 8004708:	4601      	mov	r1, r0
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff fe42 	bl	8004394 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004710:	4631      	mov	r1, r6
 8004712:	4680      	mov	r8, r0
 8004714:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004718:	f7ff fe09 	bl	800432e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800471c:	210f      	movs	r1, #15
 800471e:	900c      	str	r0, [sp, #48]	; 0x30
 8004720:	4630      	mov	r0, r6
 8004722:	f7ff fe65 	bl	80043f0 <_Unwind_GetGR>
 8004726:	f020 0001 	bic.w	r0, r0, #1
 800472a:	1e47      	subs	r7, r0, #1
 800472c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472e:	4598      	cmp	r8, r3
 8004730:	f4bf af7b 	bcs.w	800462a <__gxx_personality_v0+0x222>
 8004734:	4642      	mov	r2, r8
 8004736:	ab06      	add	r3, sp, #24
 8004738:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800473c:	2000      	movs	r0, #0
 800473e:	f7ff fe19 	bl	8004374 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004742:	ab07      	add	r3, sp, #28
 8004744:	4602      	mov	r2, r0
 8004746:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800474a:	2000      	movs	r0, #0
 800474c:	f7ff fe12 	bl	8004374 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004750:	ab08      	add	r3, sp, #32
 8004752:	4602      	mov	r2, r0
 8004754:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004758:	2000      	movs	r0, #0
 800475a:	f7ff fe0b 	bl	8004374 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800475e:	a909      	add	r1, sp, #36	; 0x24
 8004760:	f7ff fd78 	bl	8004254 <_ZL12read_uleb128PKhPm>
 8004764:	9a06      	ldr	r2, [sp, #24]
 8004766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004768:	4680      	mov	r8, r0
 800476a:	4413      	add	r3, r2
 800476c:	429f      	cmp	r7, r3
 800476e:	f4bf aea1 	bcs.w	80044b4 <__gxx_personality_v0+0xac>
 8004772:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004776:	e7d9      	b.n	800472c <__gxx_personality_v0+0x324>

08004778 <_ZdlPvj>:
 8004778:	f000 b88b 	b.w	8004892 <_ZdlPv>

0800477c <_ZSt15get_new_handlerv>:
 800477c:	4b02      	ldr	r3, [pc, #8]	; (8004788 <_ZSt15get_new_handlerv+0xc>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	f3bf 8f5b 	dmb	ish
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	2000070c 	.word	0x2000070c

0800478c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800478c:	b510      	push	{r4, lr}
 800478e:	4604      	mov	r4, r0
 8004790:	4b02      	ldr	r3, [pc, #8]	; (800479c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8004792:	6003      	str	r3, [r0, #0]
 8004794:	f000 f94e 	bl	8004a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004798:	4620      	mov	r0, r4
 800479a:	bd10      	pop	{r4, pc}
 800479c:	08005f98 	.word	0x08005f98

080047a0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	4604      	mov	r4, r0
 80047a4:	f7ff fff2 	bl	800478c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80047a8:	4620      	mov	r0, r4
 80047aa:	210c      	movs	r1, #12
 80047ac:	f7ff ffe4 	bl	8004778 <_ZdlPvj>
 80047b0:	4620      	mov	r0, r4
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	9e06      	ldr	r6, [sp, #24]
 80047ba:	4680      	mov	r8, r0
 80047bc:	4296      	cmp	r6, r2
 80047be:	460f      	mov	r7, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	461d      	mov	r5, r3
 80047c4:	d103      	bne.n	80047ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80047c6:	4619      	mov	r1, r3
 80047c8:	f000 f988 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 80047cc:	b958      	cbnz	r0, 80047e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80047ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80047d2:	4622      	mov	r2, r4
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	9606      	str	r6, [sp, #24]
 80047d8:	6a1e      	ldr	r6, [r3, #32]
 80047da:	4639      	mov	r1, r7
 80047dc:	462b      	mov	r3, r5
 80047de:	46b4      	mov	ip, r6
 80047e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	4760      	bx	ip
 80047e6:	2006      	movs	r0, #6
 80047e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80047ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	460e      	mov	r6, r1
 80047f2:	4619      	mov	r1, r3
 80047f4:	4683      	mov	fp, r0
 80047f6:	4617      	mov	r7, r2
 80047f8:	4699      	mov	r9, r3
 80047fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047fc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004800:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004804:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004806:	f000 f969 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 800480a:	b190      	cbz	r0, 8004832 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 800480c:	2e00      	cmp	r6, #0
 800480e:	602c      	str	r4, [r5, #0]
 8004810:	712f      	strb	r7, [r5, #4]
 8004812:	db09      	blt.n	8004828 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8004814:	4434      	add	r4, r6
 8004816:	45a0      	cmp	r8, r4
 8004818:	bf0c      	ite	eq
 800481a:	2406      	moveq	r4, #6
 800481c:	2401      	movne	r4, #1
 800481e:	71ac      	strb	r4, [r5, #6]
 8004820:	2000      	movs	r0, #0
 8004822:	b001      	add	sp, #4
 8004824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004828:	3602      	adds	r6, #2
 800482a:	d1f9      	bne.n	8004820 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800482c:	2301      	movs	r3, #1
 800482e:	71ab      	strb	r3, [r5, #6]
 8004830:	e7f6      	b.n	8004820 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8004832:	4544      	cmp	r4, r8
 8004834:	d104      	bne.n	8004840 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004836:	4651      	mov	r1, sl
 8004838:	4658      	mov	r0, fp
 800483a:	f000 f94f 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 800483e:	b988      	cbnz	r0, 8004864 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8004840:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004844:	463a      	mov	r2, r7
 8004846:	6803      	ldr	r3, [r0, #0]
 8004848:	950d      	str	r5, [sp, #52]	; 0x34
 800484a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800484e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004852:	940a      	str	r4, [sp, #40]	; 0x28
 8004854:	69dc      	ldr	r4, [r3, #28]
 8004856:	4631      	mov	r1, r6
 8004858:	464b      	mov	r3, r9
 800485a:	46a4      	mov	ip, r4
 800485c:	b001      	add	sp, #4
 800485e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004862:	4760      	bx	ip
 8004864:	716f      	strb	r7, [r5, #5]
 8004866:	e7db      	b.n	8004820 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08004868 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	4604      	mov	r4, r0
 800486e:	460d      	mov	r5, r1
 8004870:	4616      	mov	r6, r2
 8004872:	461f      	mov	r7, r3
 8004874:	f000 f8f2 	bl	8004a5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8004878:	b948      	cbnz	r0, 800488e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800487a:	68a0      	ldr	r0, [r4, #8]
 800487c:	4632      	mov	r2, r6
 800487e:	6803      	ldr	r3, [r0, #0]
 8004880:	4629      	mov	r1, r5
 8004882:	699c      	ldr	r4, [r3, #24]
 8004884:	463b      	mov	r3, r7
 8004886:	46a4      	mov	ip, r4
 8004888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	4760      	bx	ip
 800488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004892 <_ZdlPv>:
 8004892:	f000 bf5d 	b.w	8005750 <free>

08004896 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004896:	7803      	ldrb	r3, [r0, #0]
 8004898:	2b47      	cmp	r3, #71	; 0x47
 800489a:	d117      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800489c:	7843      	ldrb	r3, [r0, #1]
 800489e:	2b4e      	cmp	r3, #78	; 0x4e
 80048a0:	d114      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048a2:	7883      	ldrb	r3, [r0, #2]
 80048a4:	2b55      	cmp	r3, #85	; 0x55
 80048a6:	d111      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048a8:	78c3      	ldrb	r3, [r0, #3]
 80048aa:	2b43      	cmp	r3, #67	; 0x43
 80048ac:	d10e      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048ae:	7903      	ldrb	r3, [r0, #4]
 80048b0:	2b43      	cmp	r3, #67	; 0x43
 80048b2:	d10b      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048b4:	7943      	ldrb	r3, [r0, #5]
 80048b6:	2b2b      	cmp	r3, #43	; 0x2b
 80048b8:	d108      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048ba:	7983      	ldrb	r3, [r0, #6]
 80048bc:	2b2b      	cmp	r3, #43	; 0x2b
 80048be:	d105      	bne.n	80048cc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80048c0:	79c0      	ldrb	r0, [r0, #7]
 80048c2:	2801      	cmp	r0, #1
 80048c4:	bf8c      	ite	hi
 80048c6:	2000      	movhi	r0, #0
 80048c8:	2001      	movls	r0, #1
 80048ca:	4770      	bx	lr
 80048cc:	2000      	movs	r0, #0
 80048ce:	4770      	bx	lr

080048d0 <__cxa_call_terminate>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4604      	mov	r4, r0
 80048d4:	b148      	cbz	r0, 80048ea <__cxa_call_terminate+0x1a>
 80048d6:	f000 f83b 	bl	8004950 <__cxa_begin_catch>
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff ffdb 	bl	8004896 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80048e0:	b118      	cbz	r0, 80048ea <__cxa_call_terminate+0x1a>
 80048e2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80048e6:	f000 f85d 	bl	80049a4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80048ea:	f000 f867 	bl	80049bc <_ZSt9terminatev>

080048ee <__cxa_call_unexpected>:
 80048ee:	b538      	push	{r3, r4, r5, lr}
 80048f0:	4602      	mov	r2, r0
 80048f2:	f7ff ffd0 	bl	8004896 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80048f6:	b140      	cbz	r0, 800490a <__cxa_call_unexpected+0x1c>
 80048f8:	2500      	movs	r5, #0
 80048fa:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 f826 	bl	8004950 <__cxa_begin_catch>
 8004904:	b125      	cbz	r5, 8004910 <__cxa_call_unexpected+0x22>
 8004906:	f000 f86b 	bl	80049e0 <_ZSt10unexpectedv>
 800490a:	4604      	mov	r4, r0
 800490c:	2501      	movs	r5, #1
 800490e:	e7f6      	b.n	80048fe <__cxa_call_unexpected+0x10>
 8004910:	4620      	mov	r0, r4
 8004912:	f000 f858 	bl	80049c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004916 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004916:	7803      	ldrb	r3, [r0, #0]
 8004918:	2b47      	cmp	r3, #71	; 0x47
 800491a:	d117      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800491c:	7843      	ldrb	r3, [r0, #1]
 800491e:	2b4e      	cmp	r3, #78	; 0x4e
 8004920:	d114      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004922:	7883      	ldrb	r3, [r0, #2]
 8004924:	2b55      	cmp	r3, #85	; 0x55
 8004926:	d111      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004928:	78c3      	ldrb	r3, [r0, #3]
 800492a:	2b43      	cmp	r3, #67	; 0x43
 800492c:	d10e      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800492e:	7903      	ldrb	r3, [r0, #4]
 8004930:	2b43      	cmp	r3, #67	; 0x43
 8004932:	d10b      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004934:	7943      	ldrb	r3, [r0, #5]
 8004936:	2b2b      	cmp	r3, #43	; 0x2b
 8004938:	d108      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800493a:	7983      	ldrb	r3, [r0, #6]
 800493c:	2b2b      	cmp	r3, #43	; 0x2b
 800493e:	d105      	bne.n	800494c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004940:	79c0      	ldrb	r0, [r0, #7]
 8004942:	2801      	cmp	r0, #1
 8004944:	bf8c      	ite	hi
 8004946:	2000      	movhi	r0, #0
 8004948:	2001      	movls	r0, #1
 800494a:	4770      	bx	lr
 800494c:	2000      	movs	r0, #0
 800494e:	4770      	bx	lr

08004950 <__cxa_begin_catch>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4605      	mov	r5, r0
 8004954:	f000 f84a 	bl	80049ec <__cxa_get_globals>
 8004958:	4601      	mov	r1, r0
 800495a:	6802      	ldr	r2, [r0, #0]
 800495c:	4628      	mov	r0, r5
 800495e:	f1a5 0420 	sub.w	r4, r5, #32
 8004962:	f7ff ffd8 	bl	8004916 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004966:	b930      	cbnz	r0, 8004976 <__cxa_begin_catch+0x26>
 8004968:	b10a      	cbz	r2, 800496e <__cxa_begin_catch+0x1e>
 800496a:	f000 f827 	bl	80049bc <_ZSt9terminatev>
 800496e:	600c      	str	r4, [r1, #0]
 8004970:	4614      	mov	r4, r2
 8004972:	4620      	mov	r0, r4
 8004974:	bd38      	pop	{r3, r4, r5, pc}
 8004976:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800497a:	4628      	mov	r0, r5
 800497c:	2b00      	cmp	r3, #0
 800497e:	bfb4      	ite	lt
 8004980:	f1c3 0301 	rsblt	r3, r3, #1
 8004984:	3301      	addge	r3, #1
 8004986:	f845 3c0c 	str.w	r3, [r5, #-12]
 800498a:	684b      	ldr	r3, [r1, #4]
 800498c:	42a2      	cmp	r2, r4
 800498e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	bf1c      	itt	ne
 8004996:	f845 2c10 	strne.w	r2, [r5, #-16]
 800499a:	600c      	strne	r4, [r1, #0]
 800499c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800499e:	f7fc fae3 	bl	8000f68 <_Unwind_Complete>
 80049a2:	e7e6      	b.n	8004972 <__cxa_begin_catch+0x22>

080049a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80049a4:	b508      	push	{r3, lr}
 80049a6:	4780      	blx	r0
 80049a8:	f000 fe9e 	bl	80056e8 <abort>

080049ac <_ZSt13get_terminatev>:
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <_ZSt13get_terminatev+0xc>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f3bf 8f5b 	dmb	ish
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000000c 	.word	0x2000000c

080049bc <_ZSt9terminatev>:
 80049bc:	b508      	push	{r3, lr}
 80049be:	f7ff fff5 	bl	80049ac <_ZSt13get_terminatev>
 80049c2:	f7ff ffef 	bl	80049a4 <_ZN10__cxxabiv111__terminateEPFvvE>

080049c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80049c6:	b508      	push	{r3, lr}
 80049c8:	4780      	blx	r0
 80049ca:	f7ff fff7 	bl	80049bc <_ZSt9terminatev>
	...

080049d0 <_ZSt14get_unexpectedv>:
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <_ZSt14get_unexpectedv+0xc>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	f3bf 8f5b 	dmb	ish
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000010 	.word	0x20000010

080049e0 <_ZSt10unexpectedv>:
 80049e0:	b508      	push	{r3, lr}
 80049e2:	f7ff fff5 	bl	80049d0 <_ZSt14get_unexpectedv>
 80049e6:	f7ff ffee 	bl	80049c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

080049ec <__cxa_get_globals>:
 80049ec:	4800      	ldr	r0, [pc, #0]	; (80049f0 <__cxa_get_globals+0x4>)
 80049ee:	4770      	bx	lr
 80049f0:	20000710 	.word	0x20000710

080049f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80049f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80049f6:	2310      	movs	r3, #16
 80049f8:	2400      	movs	r4, #0
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	4615      	mov	r5, r2
 8004a00:	699e      	ldr	r6, [r3, #24]
 8004a02:	9400      	str	r4, [sp, #0]
 8004a04:	466b      	mov	r3, sp
 8004a06:	f88d 4004 	strb.w	r4, [sp, #4]
 8004a0a:	9403      	str	r4, [sp, #12]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	47b0      	blx	r6
 8004a10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a14:	f003 0306 	and.w	r3, r3, #6
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	bf09      	itett	eq
 8004a1c:	2001      	moveq	r0, #1
 8004a1e:	4620      	movne	r0, r4
 8004a20:	9b00      	ldreq	r3, [sp, #0]
 8004a22:	602b      	streq	r3, [r5, #0]
 8004a24:	b004      	add	sp, #16
 8004a26:	bd70      	pop	{r4, r5, r6, pc}

08004a28 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004a28:	9800      	ldr	r0, [sp, #0]
 8004a2a:	4290      	cmp	r0, r2
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2006      	moveq	r0, #6
 8004a30:	2001      	movne	r0, #1
 8004a32:	4770      	bx	lr

08004a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4604      	mov	r4, r0
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8004a3a:	6003      	str	r3, [r0, #0]
 8004a3c:	f000 f84b 	bl	8004ad6 <_ZNSt9type_infoD1Ev>
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	08005ff4 	.word	0x08005ff4

08004a48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	f7ff fff2 	bl	8004a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004a50:	4620      	mov	r0, r4
 8004a52:	2108      	movs	r1, #8
 8004a54:	f7ff fe90 	bl	8004778 <_ZdlPvj>
 8004a58:	4620      	mov	r0, r4
 8004a5a:	bd10      	pop	{r4, pc}

08004a5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4615      	mov	r5, r2
 8004a60:	461c      	mov	r4, r3
 8004a62:	f000 f83b 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 8004a66:	b120      	cbz	r0, 8004a72 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	60e3      	str	r3, [r4, #12]
 8004a6c:	2306      	movs	r3, #6
 8004a6e:	6025      	str	r5, [r4, #0]
 8004a70:	7123      	strb	r3, [r4, #4]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}

08004a74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	461f      	mov	r7, r3
 8004a80:	f000 f82c 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 8004a84:	b948      	cbnz	r0, 8004a9a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004a86:	2f03      	cmp	r7, #3
 8004a88:	d807      	bhi.n	8004a9a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	4629      	mov	r1, r5
 8004a90:	4620      	mov	r0, r4
 8004a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	4718      	bx	r3
 8004a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a9e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa2:	9e06      	ldr	r6, [sp, #24]
 8004aa4:	4698      	mov	r8, r3
 8004aa6:	9b08      	ldr	r3, [sp, #32]
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	4615      	mov	r5, r2
 8004aae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004ab0:	d103      	bne.n	8004aba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8004ab2:	9907      	ldr	r1, [sp, #28]
 8004ab4:	f000 f812 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 8004ab8:	b958      	cbnz	r0, 8004ad2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8004aba:	4641      	mov	r1, r8
 8004abc:	4638      	mov	r0, r7
 8004abe:	f000 f80d 	bl	8004adc <_ZNKSt9type_infoeqERKS_>
 8004ac2:	b118      	cbz	r0, 8004acc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6026      	str	r6, [r4, #0]
 8004ac8:	7125      	strb	r5, [r4, #4]
 8004aca:	71a3      	strb	r3, [r4, #6]
 8004acc:	2000      	movs	r0, #0
 8004ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad2:	7165      	strb	r5, [r4, #5]
 8004ad4:	e7fa      	b.n	8004acc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08004ad6 <_ZNSt9type_infoD1Ev>:
 8004ad6:	4770      	bx	lr

08004ad8 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004ad8:	2000      	movs	r0, #0
 8004ada:	4770      	bx	lr

08004adc <_ZNKSt9type_infoeqERKS_>:
 8004adc:	4281      	cmp	r1, r0
 8004ade:	b508      	push	{r3, lr}
 8004ae0:	d00e      	beq.n	8004b00 <_ZNKSt9type_infoeqERKS_+0x24>
 8004ae2:	6840      	ldr	r0, [r0, #4]
 8004ae4:	7803      	ldrb	r3, [r0, #0]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d00c      	beq.n	8004b04 <_ZNKSt9type_infoeqERKS_+0x28>
 8004aea:	6849      	ldr	r1, [r1, #4]
 8004aec:	780b      	ldrb	r3, [r1, #0]
 8004aee:	2b2a      	cmp	r3, #42	; 0x2a
 8004af0:	bf08      	it	eq
 8004af2:	3101      	addeq	r1, #1
 8004af4:	f7fb fb2a 	bl	800014c <strcmp>
 8004af8:	fab0 f080 	clz	r0, r0
 8004afc:	0940      	lsrs	r0, r0, #5
 8004afe:	bd08      	pop	{r3, pc}
 8004b00:	2001      	movs	r0, #1
 8004b02:	bd08      	pop	{r3, pc}
 8004b04:	2000      	movs	r0, #0
 8004b06:	bd08      	pop	{r3, pc}

08004b08 <cosf>:
 8004b08:	b507      	push	{r0, r1, r2, lr}
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <cosf+0x64>)
 8004b0c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004b10:	4293      	cmp	r3, r2
 8004b12:	4601      	mov	r1, r0
 8004b14:	dc03      	bgt.n	8004b1e <cosf+0x16>
 8004b16:	2100      	movs	r1, #0
 8004b18:	f000 f9b8 	bl	8004e8c <__kernel_cosf>
 8004b1c:	e004      	b.n	8004b28 <cosf+0x20>
 8004b1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004b22:	db04      	blt.n	8004b2e <cosf+0x26>
 8004b24:	f7fb fd60 	bl	80005e8 <__aeabi_fsub>
 8004b28:	b003      	add	sp, #12
 8004b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b2e:	4669      	mov	r1, sp
 8004b30:	f000 f854 	bl	8004bdc <__ieee754_rem_pio2f>
 8004b34:	f000 0203 	and.w	r2, r0, #3
 8004b38:	2a01      	cmp	r2, #1
 8004b3a:	d005      	beq.n	8004b48 <cosf+0x40>
 8004b3c:	2a02      	cmp	r2, #2
 8004b3e:	d00a      	beq.n	8004b56 <cosf+0x4e>
 8004b40:	b972      	cbnz	r2, 8004b60 <cosf+0x58>
 8004b42:	9901      	ldr	r1, [sp, #4]
 8004b44:	9800      	ldr	r0, [sp, #0]
 8004b46:	e7e7      	b.n	8004b18 <cosf+0x10>
 8004b48:	9901      	ldr	r1, [sp, #4]
 8004b4a:	9800      	ldr	r0, [sp, #0]
 8004b4c:	f000 fcc0 	bl	80054d0 <__kernel_sinf>
 8004b50:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004b54:	e7e8      	b.n	8004b28 <cosf+0x20>
 8004b56:	9901      	ldr	r1, [sp, #4]
 8004b58:	9800      	ldr	r0, [sp, #0]
 8004b5a:	f000 f997 	bl	8004e8c <__kernel_cosf>
 8004b5e:	e7f7      	b.n	8004b50 <cosf+0x48>
 8004b60:	2201      	movs	r2, #1
 8004b62:	9901      	ldr	r1, [sp, #4]
 8004b64:	9800      	ldr	r0, [sp, #0]
 8004b66:	f000 fcb3 	bl	80054d0 <__kernel_sinf>
 8004b6a:	e7dd      	b.n	8004b28 <cosf+0x20>
 8004b6c:	3f490fd8 	.word	0x3f490fd8

08004b70 <sinf>:
 8004b70:	b507      	push	{r0, r1, r2, lr}
 8004b72:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <sinf+0x68>)
 8004b74:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	dc04      	bgt.n	8004b88 <sinf+0x18>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	f000 fca5 	bl	80054d0 <__kernel_sinf>
 8004b86:	e004      	b.n	8004b92 <sinf+0x22>
 8004b88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004b8c:	db04      	blt.n	8004b98 <sinf+0x28>
 8004b8e:	f7fb fd2b 	bl	80005e8 <__aeabi_fsub>
 8004b92:	b003      	add	sp, #12
 8004b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b98:	4669      	mov	r1, sp
 8004b9a:	f000 f81f 	bl	8004bdc <__ieee754_rem_pio2f>
 8004b9e:	f000 0003 	and.w	r0, r0, #3
 8004ba2:	2801      	cmp	r0, #1
 8004ba4:	d006      	beq.n	8004bb4 <sinf+0x44>
 8004ba6:	2802      	cmp	r0, #2
 8004ba8:	d009      	beq.n	8004bbe <sinf+0x4e>
 8004baa:	b980      	cbnz	r0, 8004bce <sinf+0x5e>
 8004bac:	2201      	movs	r2, #1
 8004bae:	9901      	ldr	r1, [sp, #4]
 8004bb0:	9800      	ldr	r0, [sp, #0]
 8004bb2:	e7e6      	b.n	8004b82 <sinf+0x12>
 8004bb4:	9901      	ldr	r1, [sp, #4]
 8004bb6:	9800      	ldr	r0, [sp, #0]
 8004bb8:	f000 f968 	bl	8004e8c <__kernel_cosf>
 8004bbc:	e7e9      	b.n	8004b92 <sinf+0x22>
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	9901      	ldr	r1, [sp, #4]
 8004bc2:	9800      	ldr	r0, [sp, #0]
 8004bc4:	f000 fc84 	bl	80054d0 <__kernel_sinf>
 8004bc8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004bcc:	e7e1      	b.n	8004b92 <sinf+0x22>
 8004bce:	9901      	ldr	r1, [sp, #4]
 8004bd0:	9800      	ldr	r0, [sp, #0]
 8004bd2:	f000 f95b 	bl	8004e8c <__kernel_cosf>
 8004bd6:	e7f7      	b.n	8004bc8 <sinf+0x58>
 8004bd8:	3f490fd8 	.word	0x3f490fd8

08004bdc <__ieee754_rem_pio2f>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	4a9d      	ldr	r2, [pc, #628]	; (8004e58 <__ieee754_rem_pio2f+0x27c>)
 8004be2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8004be6:	4295      	cmp	r5, r2
 8004be8:	b087      	sub	sp, #28
 8004bea:	460c      	mov	r4, r1
 8004bec:	4607      	mov	r7, r0
 8004bee:	dc04      	bgt.n	8004bfa <__ieee754_rem_pio2f+0x1e>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	604b      	str	r3, [r1, #4]
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	e01a      	b.n	8004c30 <__ieee754_rem_pio2f+0x54>
 8004bfa:	4a98      	ldr	r2, [pc, #608]	; (8004e5c <__ieee754_rem_pio2f+0x280>)
 8004bfc:	4295      	cmp	r5, r2
 8004bfe:	dc4b      	bgt.n	8004c98 <__ieee754_rem_pio2f+0xbc>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	4997      	ldr	r1, [pc, #604]	; (8004e60 <__ieee754_rem_pio2f+0x284>)
 8004c04:	f025 050f 	bic.w	r5, r5, #15
 8004c08:	4e96      	ldr	r6, [pc, #600]	; (8004e64 <__ieee754_rem_pio2f+0x288>)
 8004c0a:	dd23      	ble.n	8004c54 <__ieee754_rem_pio2f+0x78>
 8004c0c:	f7fb fcec 	bl	80005e8 <__aeabi_fsub>
 8004c10:	42b5      	cmp	r5, r6
 8004c12:	4607      	mov	r7, r0
 8004c14:	d010      	beq.n	8004c38 <__ieee754_rem_pio2f+0x5c>
 8004c16:	4994      	ldr	r1, [pc, #592]	; (8004e68 <__ieee754_rem_pio2f+0x28c>)
 8004c18:	f7fb fce6 	bl	80005e8 <__aeabi_fsub>
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	6020      	str	r0, [r4, #0]
 8004c20:	4638      	mov	r0, r7
 8004c22:	f7fb fce1 	bl	80005e8 <__aeabi_fsub>
 8004c26:	4990      	ldr	r1, [pc, #576]	; (8004e68 <__ieee754_rem_pio2f+0x28c>)
 8004c28:	f7fb fcde 	bl	80005e8 <__aeabi_fsub>
 8004c2c:	2601      	movs	r6, #1
 8004c2e:	6060      	str	r0, [r4, #4]
 8004c30:	4630      	mov	r0, r6
 8004c32:	b007      	add	sp, #28
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	498c      	ldr	r1, [pc, #560]	; (8004e6c <__ieee754_rem_pio2f+0x290>)
 8004c3a:	f7fb fcd5 	bl	80005e8 <__aeabi_fsub>
 8004c3e:	498c      	ldr	r1, [pc, #560]	; (8004e70 <__ieee754_rem_pio2f+0x294>)
 8004c40:	4605      	mov	r5, r0
 8004c42:	f7fb fcd1 	bl	80005e8 <__aeabi_fsub>
 8004c46:	4601      	mov	r1, r0
 8004c48:	6020      	str	r0, [r4, #0]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7fb fccc 	bl	80005e8 <__aeabi_fsub>
 8004c50:	4987      	ldr	r1, [pc, #540]	; (8004e70 <__ieee754_rem_pio2f+0x294>)
 8004c52:	e7e9      	b.n	8004c28 <__ieee754_rem_pio2f+0x4c>
 8004c54:	f7fb fcca 	bl	80005ec <__addsf3>
 8004c58:	42b5      	cmp	r5, r6
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	d00e      	beq.n	8004c7c <__ieee754_rem_pio2f+0xa0>
 8004c5e:	4982      	ldr	r1, [pc, #520]	; (8004e68 <__ieee754_rem_pio2f+0x28c>)
 8004c60:	f7fb fcc4 	bl	80005ec <__addsf3>
 8004c64:	4601      	mov	r1, r0
 8004c66:	6020      	str	r0, [r4, #0]
 8004c68:	4638      	mov	r0, r7
 8004c6a:	f7fb fcbd 	bl	80005e8 <__aeabi_fsub>
 8004c6e:	497e      	ldr	r1, [pc, #504]	; (8004e68 <__ieee754_rem_pio2f+0x28c>)
 8004c70:	f7fb fcbc 	bl	80005ec <__addsf3>
 8004c74:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004c78:	6060      	str	r0, [r4, #4]
 8004c7a:	e7d9      	b.n	8004c30 <__ieee754_rem_pio2f+0x54>
 8004c7c:	497b      	ldr	r1, [pc, #492]	; (8004e6c <__ieee754_rem_pio2f+0x290>)
 8004c7e:	f7fb fcb5 	bl	80005ec <__addsf3>
 8004c82:	497b      	ldr	r1, [pc, #492]	; (8004e70 <__ieee754_rem_pio2f+0x294>)
 8004c84:	4605      	mov	r5, r0
 8004c86:	f7fb fcb1 	bl	80005ec <__addsf3>
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	6020      	str	r0, [r4, #0]
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7fb fcaa 	bl	80005e8 <__aeabi_fsub>
 8004c94:	4976      	ldr	r1, [pc, #472]	; (8004e70 <__ieee754_rem_pio2f+0x294>)
 8004c96:	e7eb      	b.n	8004c70 <__ieee754_rem_pio2f+0x94>
 8004c98:	4a76      	ldr	r2, [pc, #472]	; (8004e74 <__ieee754_rem_pio2f+0x298>)
 8004c9a:	4295      	cmp	r5, r2
 8004c9c:	f300 808c 	bgt.w	8004db8 <__ieee754_rem_pio2f+0x1dc>
 8004ca0:	f000 fc8c 	bl	80055bc <fabsf>
 8004ca4:	4974      	ldr	r1, [pc, #464]	; (8004e78 <__ieee754_rem_pio2f+0x29c>)
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	f7fb fda8 	bl	80007fc <__aeabi_fmul>
 8004cac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cb0:	f7fb fc9c 	bl	80005ec <__addsf3>
 8004cb4:	f7fb ff68 	bl	8000b88 <__aeabi_f2iz>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	f7fb fd4b 	bl	8000754 <__aeabi_i2f>
 8004cbe:	4968      	ldr	r1, [pc, #416]	; (8004e60 <__ieee754_rem_pio2f+0x284>)
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	f7fb fd9b 	bl	80007fc <__aeabi_fmul>
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	4640      	mov	r0, r8
 8004cca:	f7fb fc8d 	bl	80005e8 <__aeabi_fsub>
 8004cce:	4966      	ldr	r1, [pc, #408]	; (8004e68 <__ieee754_rem_pio2f+0x28c>)
 8004cd0:	4680      	mov	r8, r0
 8004cd2:	4650      	mov	r0, sl
 8004cd4:	f7fb fd92 	bl	80007fc <__aeabi_fmul>
 8004cd8:	2e1f      	cmp	r6, #31
 8004cda:	4681      	mov	r9, r0
 8004cdc:	dc0c      	bgt.n	8004cf8 <__ieee754_rem_pio2f+0x11c>
 8004cde:	4a67      	ldr	r2, [pc, #412]	; (8004e7c <__ieee754_rem_pio2f+0x2a0>)
 8004ce0:	1e71      	subs	r1, r6, #1
 8004ce2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004ce6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <__ieee754_rem_pio2f+0x11c>
 8004cee:	4649      	mov	r1, r9
 8004cf0:	4640      	mov	r0, r8
 8004cf2:	f7fb fc79 	bl	80005e8 <__aeabi_fsub>
 8004cf6:	e009      	b.n	8004d0c <__ieee754_rem_pio2f+0x130>
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f7fb fc74 	bl	80005e8 <__aeabi_fsub>
 8004d00:	15ed      	asrs	r5, r5, #23
 8004d02:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004d06:	1aeb      	subs	r3, r5, r3
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	dc01      	bgt.n	8004d10 <__ieee754_rem_pio2f+0x134>
 8004d0c:	6020      	str	r0, [r4, #0]
 8004d0e:	e024      	b.n	8004d5a <__ieee754_rem_pio2f+0x17e>
 8004d10:	4956      	ldr	r1, [pc, #344]	; (8004e6c <__ieee754_rem_pio2f+0x290>)
 8004d12:	4650      	mov	r0, sl
 8004d14:	f7fb fd72 	bl	80007fc <__aeabi_fmul>
 8004d18:	4681      	mov	r9, r0
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	f7fb fc63 	bl	80005e8 <__aeabi_fsub>
 8004d22:	4601      	mov	r1, r0
 8004d24:	4683      	mov	fp, r0
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7fb fc5e 	bl	80005e8 <__aeabi_fsub>
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f7fb fc5b 	bl	80005e8 <__aeabi_fsub>
 8004d32:	4680      	mov	r8, r0
 8004d34:	494e      	ldr	r1, [pc, #312]	; (8004e70 <__ieee754_rem_pio2f+0x294>)
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7fb fd60 	bl	80007fc <__aeabi_fmul>
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	f7fb fc53 	bl	80005e8 <__aeabi_fsub>
 8004d42:	4601      	mov	r1, r0
 8004d44:	4681      	mov	r9, r0
 8004d46:	4658      	mov	r0, fp
 8004d48:	f7fb fc4e 	bl	80005e8 <__aeabi_fsub>
 8004d4c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004d50:	1aed      	subs	r5, r5, r3
 8004d52:	2d19      	cmp	r5, #25
 8004d54:	dc15      	bgt.n	8004d82 <__ieee754_rem_pio2f+0x1a6>
 8004d56:	46d8      	mov	r8, fp
 8004d58:	6020      	str	r0, [r4, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fb fc42 	bl	80005e8 <__aeabi_fsub>
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fc3f 	bl	80005e8 <__aeabi_fsub>
 8004d6a:	2f00      	cmp	r7, #0
 8004d6c:	6060      	str	r0, [r4, #4]
 8004d6e:	f6bf af5f 	bge.w	8004c30 <__ieee754_rem_pio2f+0x54>
 8004d72:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004d76:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	6060      	str	r0, [r4, #4]
 8004d7e:	4276      	negs	r6, r6
 8004d80:	e756      	b.n	8004c30 <__ieee754_rem_pio2f+0x54>
 8004d82:	493f      	ldr	r1, [pc, #252]	; (8004e80 <__ieee754_rem_pio2f+0x2a4>)
 8004d84:	4650      	mov	r0, sl
 8004d86:	f7fb fd39 	bl	80007fc <__aeabi_fmul>
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4601      	mov	r1, r0
 8004d8e:	4658      	mov	r0, fp
 8004d90:	f7fb fc2a 	bl	80005e8 <__aeabi_fsub>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4680      	mov	r8, r0
 8004d98:	4658      	mov	r0, fp
 8004d9a:	f7fb fc25 	bl	80005e8 <__aeabi_fsub>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f7fb fc22 	bl	80005e8 <__aeabi_fsub>
 8004da4:	4605      	mov	r5, r0
 8004da6:	4937      	ldr	r1, [pc, #220]	; (8004e84 <__ieee754_rem_pio2f+0x2a8>)
 8004da8:	4650      	mov	r0, sl
 8004daa:	f7fb fd27 	bl	80007fc <__aeabi_fmul>
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fc1a 	bl	80005e8 <__aeabi_fsub>
 8004db4:	4681      	mov	r9, r0
 8004db6:	e79a      	b.n	8004cee <__ieee754_rem_pio2f+0x112>
 8004db8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004dbc:	db05      	blt.n	8004dca <__ieee754_rem_pio2f+0x1ee>
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	f7fb fc12 	bl	80005e8 <__aeabi_fsub>
 8004dc4:	6060      	str	r0, [r4, #4]
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	e715      	b.n	8004bf6 <__ieee754_rem_pio2f+0x1a>
 8004dca:	15ee      	asrs	r6, r5, #23
 8004dcc:	3e86      	subs	r6, #134	; 0x86
 8004dce:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f7fb fed8 	bl	8000b88 <__aeabi_f2iz>
 8004dd8:	f7fb fcbc 	bl	8000754 <__aeabi_i2f>
 8004ddc:	4601      	mov	r1, r0
 8004dde:	9003      	str	r0, [sp, #12]
 8004de0:	4628      	mov	r0, r5
 8004de2:	f7fb fc01 	bl	80005e8 <__aeabi_fsub>
 8004de6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004dea:	f7fb fd07 	bl	80007fc <__aeabi_fmul>
 8004dee:	4680      	mov	r8, r0
 8004df0:	f7fb feca 	bl	8000b88 <__aeabi_f2iz>
 8004df4:	f7fb fcae 	bl	8000754 <__aeabi_i2f>
 8004df8:	4601      	mov	r1, r0
 8004dfa:	9004      	str	r0, [sp, #16]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	4640      	mov	r0, r8
 8004e00:	f7fb fbf2 	bl	80005e8 <__aeabi_fsub>
 8004e04:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004e08:	f7fb fcf8 	bl	80007fc <__aeabi_fmul>
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	9005      	str	r0, [sp, #20]
 8004e10:	f7fb fe88 	bl	8000b24 <__aeabi_fcmpeq>
 8004e14:	b1e8      	cbz	r0, 8004e52 <__ieee754_rem_pio2f+0x276>
 8004e16:	2100      	movs	r1, #0
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f7fb fe83 	bl	8000b24 <__aeabi_fcmpeq>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2302      	moveq	r3, #2
 8004e26:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <__ieee754_rem_pio2f+0x2ac>)
 8004e28:	4621      	mov	r1, r4
 8004e2a:	9201      	str	r2, [sp, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	a803      	add	r0, sp, #12
 8004e30:	9200      	str	r2, [sp, #0]
 8004e32:	4632      	mov	r2, r6
 8004e34:	f000 f8be 	bl	8004fb4 <__kernel_rem_pio2f>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	f6bf aef8 	bge.w	8004c30 <__ieee754_rem_pio2f+0x54>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	e795      	b.n	8004d7e <__ieee754_rem_pio2f+0x1a2>
 8004e52:	2303      	movs	r3, #3
 8004e54:	e7e7      	b.n	8004e26 <__ieee754_rem_pio2f+0x24a>
 8004e56:	bf00      	nop
 8004e58:	3f490fd8 	.word	0x3f490fd8
 8004e5c:	4016cbe3 	.word	0x4016cbe3
 8004e60:	3fc90f80 	.word	0x3fc90f80
 8004e64:	3fc90fd0 	.word	0x3fc90fd0
 8004e68:	37354443 	.word	0x37354443
 8004e6c:	37354400 	.word	0x37354400
 8004e70:	2e85a308 	.word	0x2e85a308
 8004e74:	43490f80 	.word	0x43490f80
 8004e78:	3f22f984 	.word	0x3f22f984
 8004e7c:	08006030 	.word	0x08006030
 8004e80:	2e85a300 	.word	0x2e85a300
 8004e84:	248d3132 	.word	0x248d3132
 8004e88:	080060b0 	.word	0x080060b0

08004e8c <__kernel_cosf>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004e94:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004e98:	4606      	mov	r6, r0
 8004e9a:	460f      	mov	r7, r1
 8004e9c:	da03      	bge.n	8004ea6 <__kernel_cosf+0x1a>
 8004e9e:	f7fb fe73 	bl	8000b88 <__aeabi_f2iz>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d070      	beq.n	8004f88 <__kernel_cosf+0xfc>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7fb fca7 	bl	80007fc <__aeabi_fmul>
 8004eae:	4605      	mov	r5, r0
 8004eb0:	4937      	ldr	r1, [pc, #220]	; (8004f90 <__kernel_cosf+0x104>)
 8004eb2:	f7fb fca3 	bl	80007fc <__aeabi_fmul>
 8004eb6:	4937      	ldr	r1, [pc, #220]	; (8004f94 <__kernel_cosf+0x108>)
 8004eb8:	f7fb fb98 	bl	80005ec <__addsf3>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb fc9d 	bl	80007fc <__aeabi_fmul>
 8004ec2:	4935      	ldr	r1, [pc, #212]	; (8004f98 <__kernel_cosf+0x10c>)
 8004ec4:	f7fb fb90 	bl	80005e8 <__aeabi_fsub>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fc97 	bl	80007fc <__aeabi_fmul>
 8004ece:	4933      	ldr	r1, [pc, #204]	; (8004f9c <__kernel_cosf+0x110>)
 8004ed0:	f7fb fb8c 	bl	80005ec <__addsf3>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fc91 	bl	80007fc <__aeabi_fmul>
 8004eda:	4931      	ldr	r1, [pc, #196]	; (8004fa0 <__kernel_cosf+0x114>)
 8004edc:	f7fb fb84 	bl	80005e8 <__aeabi_fsub>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	f7fb fc8b 	bl	80007fc <__aeabi_fmul>
 8004ee6:	492f      	ldr	r1, [pc, #188]	; (8004fa4 <__kernel_cosf+0x118>)
 8004ee8:	f7fb fb80 	bl	80005ec <__addsf3>
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb fc85 	bl	80007fc <__aeabi_fmul>
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <__kernel_cosf+0x11c>)
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	dc1d      	bgt.n	8004f36 <__kernel_cosf+0xaa>
 8004efa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7fb fc7c 	bl	80007fc <__aeabi_fmul>
 8004f04:	4641      	mov	r1, r8
 8004f06:	4604      	mov	r4, r0
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7fb fc77 	bl	80007fc <__aeabi_fmul>
 8004f0e:	4639      	mov	r1, r7
 8004f10:	4605      	mov	r5, r0
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7fb fc72 	bl	80007fc <__aeabi_fmul>
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f7fb fb64 	bl	80005e8 <__aeabi_fsub>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4620      	mov	r0, r4
 8004f24:	f7fb fb60 	bl	80005e8 <__aeabi_fsub>
 8004f28:	4601      	mov	r1, r0
 8004f2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004f2e:	f7fb fb5b 	bl	80005e8 <__aeabi_fsub>
 8004f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <__kernel_cosf+0x120>)
 8004f38:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	bfcc      	ite	gt
 8004f40:	4c1b      	ldrgt	r4, [pc, #108]	; (8004fb0 <__kernel_cosf+0x124>)
 8004f42:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8004f46:	4621      	mov	r1, r4
 8004f48:	f7fb fb4e 	bl	80005e8 <__aeabi_fsub>
 8004f4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f50:	4681      	mov	r9, r0
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7fb fc52 	bl	80007fc <__aeabi_fmul>
 8004f58:	4621      	mov	r1, r4
 8004f5a:	f7fb fb45 	bl	80005e8 <__aeabi_fsub>
 8004f5e:	4641      	mov	r1, r8
 8004f60:	4604      	mov	r4, r0
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7fb fc4a 	bl	80007fc <__aeabi_fmul>
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7fb fc45 	bl	80007fc <__aeabi_fmul>
 8004f72:	4601      	mov	r1, r0
 8004f74:	4628      	mov	r0, r5
 8004f76:	f7fb fb37 	bl	80005e8 <__aeabi_fsub>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7fb fb33 	bl	80005e8 <__aeabi_fsub>
 8004f82:	4601      	mov	r1, r0
 8004f84:	4648      	mov	r0, r9
 8004f86:	e7d2      	b.n	8004f2e <__kernel_cosf+0xa2>
 8004f88:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f90:	ad47d74e 	.word	0xad47d74e
 8004f94:	310f74f6 	.word	0x310f74f6
 8004f98:	3493f27c 	.word	0x3493f27c
 8004f9c:	37d00d01 	.word	0x37d00d01
 8004fa0:	3ab60b61 	.word	0x3ab60b61
 8004fa4:	3d2aaaab 	.word	0x3d2aaaab
 8004fa8:	3e999999 	.word	0x3e999999
 8004fac:	3f480000 	.word	0x3f480000
 8004fb0:	3e900000 	.word	0x3e900000

08004fb4 <__kernel_rem_pio2f>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	b0d9      	sub	sp, #356	; 0x164
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	9101      	str	r1, [sp, #4]
 8004fbe:	4bb4      	ldr	r3, [pc, #720]	; (8005290 <__kernel_rem_pio2f+0x2dc>)
 8004fc0:	9962      	ldr	r1, [sp, #392]	; 0x188
 8004fc2:	1ed4      	subs	r4, r2, #3
 8004fc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004fc8:	2500      	movs	r5, #0
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	f04f 0b00 	mov.w	fp, #0
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	fb94 f4f3 	sdiv	r4, r4, r3
 8004fdc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004fe0:	1c66      	adds	r6, r4, #1
 8004fe2:	9b02      	ldr	r3, [sp, #8]
 8004fe4:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8004fe8:	9a03      	ldr	r2, [sp, #12]
 8004fea:	9005      	str	r0, [sp, #20]
 8004fec:	eb03 0802 	add.w	r8, r3, r2
 8004ff0:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8004ff2:	1aa7      	subs	r7, r4, r2
 8004ff4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004ff8:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8004ffc:	4545      	cmp	r5, r8
 8004ffe:	dd10      	ble.n	8005022 <__kernel_rem_pio2f+0x6e>
 8005000:	2500      	movs	r5, #0
 8005002:	f04f 0b00 	mov.w	fp, #0
 8005006:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800500a:	9b02      	ldr	r3, [sp, #8]
 800500c:	429d      	cmp	r5, r3
 800500e:	dc28      	bgt.n	8005062 <__kernel_rem_pio2f+0xae>
 8005010:	9b04      	ldr	r3, [sp, #16]
 8005012:	46d9      	mov	r9, fp
 8005014:	eb03 0805 	add.w	r8, r3, r5
 8005018:	ab1c      	add	r3, sp, #112	; 0x70
 800501a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800501e:	2700      	movs	r7, #0
 8005020:	e018      	b.n	8005054 <__kernel_rem_pio2f+0xa0>
 8005022:	42ef      	cmn	r7, r5
 8005024:	d407      	bmi.n	8005036 <__kernel_rem_pio2f+0x82>
 8005026:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800502a:	f7fb fb93 	bl	8000754 <__aeabi_i2f>
 800502e:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 8005032:	3501      	adds	r5, #1
 8005034:	e7e2      	b.n	8004ffc <__kernel_rem_pio2f+0x48>
 8005036:	4658      	mov	r0, fp
 8005038:	e7f9      	b.n	800502e <__kernel_rem_pio2f+0x7a>
 800503a:	9b05      	ldr	r3, [sp, #20]
 800503c:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 8005040:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005044:	f7fb fbda 	bl	80007fc <__aeabi_fmul>
 8005048:	4601      	mov	r1, r0
 800504a:	4648      	mov	r0, r9
 800504c:	f7fb face 	bl	80005ec <__addsf3>
 8005050:	4681      	mov	r9, r0
 8005052:	3701      	adds	r7, #1
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	429f      	cmp	r7, r3
 8005058:	ddef      	ble.n	800503a <__kernel_rem_pio2f+0x86>
 800505a:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800505e:	3501      	adds	r5, #1
 8005060:	e7d3      	b.n	800500a <__kernel_rem_pio2f+0x56>
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	aa08      	add	r2, sp, #32
 8005066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800506e:	9f02      	ldr	r7, [sp, #8]
 8005070:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005074:	9306      	str	r3, [sp, #24]
 8005076:	46ba      	mov	sl, r7
 8005078:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800507c:	ab58      	add	r3, sp, #352	; 0x160
 800507e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005082:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8005086:	ad07      	add	r5, sp, #28
 8005088:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800508c:	f1ba 0f00 	cmp.w	sl, #0
 8005090:	dc57      	bgt.n	8005142 <__kernel_rem_pio2f+0x18e>
 8005092:	4631      	mov	r1, r6
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fad5 	bl	8005644 <scalbnf>
 800509a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800509e:	4604      	mov	r4, r0
 80050a0:	f7fb fbac 	bl	80007fc <__aeabi_fmul>
 80050a4:	f000 fa8e 	bl	80055c4 <floorf>
 80050a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80050ac:	f7fb fba6 	bl	80007fc <__aeabi_fmul>
 80050b0:	4601      	mov	r1, r0
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7fb fa98 	bl	80005e8 <__aeabi_fsub>
 80050b8:	4604      	mov	r4, r0
 80050ba:	f7fb fd65 	bl	8000b88 <__aeabi_f2iz>
 80050be:	4680      	mov	r8, r0
 80050c0:	f7fb fb48 	bl	8000754 <__aeabi_i2f>
 80050c4:	4601      	mov	r1, r0
 80050c6:	4620      	mov	r0, r4
 80050c8:	f7fb fa8e 	bl	80005e8 <__aeabi_fsub>
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	dd55      	ble.n	800517e <__kernel_rem_pio2f+0x1ca>
 80050d2:	1e7b      	subs	r3, r7, #1
 80050d4:	aa08      	add	r2, sp, #32
 80050d6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80050da:	f1c6 0208 	rsb	r2, r6, #8
 80050de:	fa45 f002 	asr.w	r0, r5, r2
 80050e2:	4480      	add	r8, r0
 80050e4:	4090      	lsls	r0, r2
 80050e6:	1a2d      	subs	r5, r5, r0
 80050e8:	aa08      	add	r2, sp, #32
 80050ea:	f1c6 0007 	rsb	r0, r6, #7
 80050ee:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80050f2:	4105      	asrs	r5, r0
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	dd50      	ble.n	800519a <__kernel_rem_pio2f+0x1e6>
 80050f8:	2200      	movs	r2, #0
 80050fa:	4691      	mov	r9, r2
 80050fc:	f108 0801 	add.w	r8, r8, #1
 8005100:	4297      	cmp	r7, r2
 8005102:	f300 8085 	bgt.w	8005210 <__kernel_rem_pio2f+0x25c>
 8005106:	2e00      	cmp	r6, #0
 8005108:	dd05      	ble.n	8005116 <__kernel_rem_pio2f+0x162>
 800510a:	2e01      	cmp	r6, #1
 800510c:	f000 8097 	beq.w	800523e <__kernel_rem_pio2f+0x28a>
 8005110:	2e02      	cmp	r6, #2
 8005112:	f000 809e 	beq.w	8005252 <__kernel_rem_pio2f+0x29e>
 8005116:	2d02      	cmp	r5, #2
 8005118:	d13f      	bne.n	800519a <__kernel_rem_pio2f+0x1e6>
 800511a:	4621      	mov	r1, r4
 800511c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005120:	f7fb fa62 	bl	80005e8 <__aeabi_fsub>
 8005124:	4604      	mov	r4, r0
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	d036      	beq.n	800519a <__kernel_rem_pio2f+0x1e6>
 800512c:	4631      	mov	r1, r6
 800512e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005132:	f000 fa87 	bl	8005644 <scalbnf>
 8005136:	4601      	mov	r1, r0
 8005138:	4620      	mov	r0, r4
 800513a:	f7fb fa55 	bl	80005e8 <__aeabi_fsub>
 800513e:	4604      	mov	r4, r0
 8005140:	e02b      	b.n	800519a <__kernel_rem_pio2f+0x1e6>
 8005142:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005146:	4620      	mov	r0, r4
 8005148:	f7fb fb58 	bl	80007fc <__aeabi_fmul>
 800514c:	f7fb fd1c 	bl	8000b88 <__aeabi_f2iz>
 8005150:	f7fb fb00 	bl	8000754 <__aeabi_i2f>
 8005154:	4641      	mov	r1, r8
 8005156:	4683      	mov	fp, r0
 8005158:	f7fb fb50 	bl	80007fc <__aeabi_fmul>
 800515c:	4601      	mov	r1, r0
 800515e:	4620      	mov	r0, r4
 8005160:	f7fb fa42 	bl	80005e8 <__aeabi_fsub>
 8005164:	f7fb fd10 	bl	8000b88 <__aeabi_f2iz>
 8005168:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800516c:	f845 0f04 	str.w	r0, [r5, #4]!
 8005170:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8005174:	4658      	mov	r0, fp
 8005176:	f7fb fa39 	bl	80005ec <__addsf3>
 800517a:	4604      	mov	r4, r0
 800517c:	e786      	b.n	800508c <__kernel_rem_pio2f+0xd8>
 800517e:	d105      	bne.n	800518c <__kernel_rem_pio2f+0x1d8>
 8005180:	1e7b      	subs	r3, r7, #1
 8005182:	aa08      	add	r2, sp, #32
 8005184:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005188:	122d      	asrs	r5, r5, #8
 800518a:	e7b3      	b.n	80050f4 <__kernel_rem_pio2f+0x140>
 800518c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005190:	f7fb fce6 	bl	8000b60 <__aeabi_fcmpge>
 8005194:	2800      	cmp	r0, #0
 8005196:	d139      	bne.n	800520c <__kernel_rem_pio2f+0x258>
 8005198:	4605      	mov	r5, r0
 800519a:	2100      	movs	r1, #0
 800519c:	4620      	mov	r0, r4
 800519e:	f7fb fcc1 	bl	8000b24 <__aeabi_fcmpeq>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f000 8098 	beq.w	80052d8 <__kernel_rem_pio2f+0x324>
 80051a8:	1e7c      	subs	r4, r7, #1
 80051aa:	4623      	mov	r3, r4
 80051ac:	2200      	movs	r2, #0
 80051ae:	9902      	ldr	r1, [sp, #8]
 80051b0:	428b      	cmp	r3, r1
 80051b2:	da55      	bge.n	8005260 <__kernel_rem_pio2f+0x2ac>
 80051b4:	2a00      	cmp	r2, #0
 80051b6:	d16e      	bne.n	8005296 <__kernel_rem_pio2f+0x2e2>
 80051b8:	2301      	movs	r3, #1
 80051ba:	f06f 0103 	mvn.w	r1, #3
 80051be:	fb01 f203 	mul.w	r2, r1, r3
 80051c2:	9807      	ldr	r0, [sp, #28]
 80051c4:	5882      	ldr	r2, [r0, r2]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d050      	beq.n	800526c <__kernel_rem_pio2f+0x2b8>
 80051ca:	f06f 0803 	mvn.w	r8, #3
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	1c7d      	adds	r5, r7, #1
 80051d2:	19d4      	adds	r4, r2, r7
 80051d4:	aa58      	add	r2, sp, #352	; 0x160
 80051d6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80051da:	3cf4      	subs	r4, #244	; 0xf4
 80051dc:	441f      	add	r7, r3
 80051de:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80051e2:	42bd      	cmp	r5, r7
 80051e4:	f73f af47 	bgt.w	8005076 <__kernel_rem_pio2f+0xc2>
 80051e8:	9b06      	ldr	r3, [sp, #24]
 80051ea:	f04f 0a00 	mov.w	sl, #0
 80051ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051f2:	f7fb faaf 	bl	8000754 <__aeabi_i2f>
 80051f6:	f04f 0b00 	mov.w	fp, #0
 80051fa:	f844 0f04 	str.w	r0, [r4, #4]!
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	459a      	cmp	sl, r3
 8005202:	dd35      	ble.n	8005270 <__kernel_rem_pio2f+0x2bc>
 8005204:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8005208:	3501      	adds	r5, #1
 800520a:	e7ea      	b.n	80051e2 <__kernel_rem_pio2f+0x22e>
 800520c:	2502      	movs	r5, #2
 800520e:	e773      	b.n	80050f8 <__kernel_rem_pio2f+0x144>
 8005210:	ab08      	add	r3, sp, #32
 8005212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005216:	f1b9 0f00 	cmp.w	r9, #0
 800521a:	d109      	bne.n	8005230 <__kernel_rem_pio2f+0x27c>
 800521c:	b12b      	cbz	r3, 800522a <__kernel_rem_pio2f+0x276>
 800521e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005222:	a908      	add	r1, sp, #32
 8005224:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005228:	2301      	movs	r3, #1
 800522a:	3201      	adds	r2, #1
 800522c:	4699      	mov	r9, r3
 800522e:	e767      	b.n	8005100 <__kernel_rem_pio2f+0x14c>
 8005230:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005234:	a908      	add	r1, sp, #32
 8005236:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800523a:	464b      	mov	r3, r9
 800523c:	e7f5      	b.n	800522a <__kernel_rem_pio2f+0x276>
 800523e:	1e7a      	subs	r2, r7, #1
 8005240:	ab08      	add	r3, sp, #32
 8005242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524a:	a908      	add	r1, sp, #32
 800524c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005250:	e761      	b.n	8005116 <__kernel_rem_pio2f+0x162>
 8005252:	1e7a      	subs	r2, r7, #1
 8005254:	ab08      	add	r3, sp, #32
 8005256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525e:	e7f4      	b.n	800524a <__kernel_rem_pio2f+0x296>
 8005260:	a908      	add	r1, sp, #32
 8005262:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005266:	3b01      	subs	r3, #1
 8005268:	430a      	orrs	r2, r1
 800526a:	e7a0      	b.n	80051ae <__kernel_rem_pio2f+0x1fa>
 800526c:	3301      	adds	r3, #1
 800526e:	e7a6      	b.n	80051be <__kernel_rem_pio2f+0x20a>
 8005270:	fb08 f30a 	mul.w	r3, r8, sl
 8005274:	9a05      	ldr	r2, [sp, #20]
 8005276:	58e0      	ldr	r0, [r4, r3]
 8005278:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800527c:	f7fb fabe 	bl	80007fc <__aeabi_fmul>
 8005280:	4601      	mov	r1, r0
 8005282:	4658      	mov	r0, fp
 8005284:	f7fb f9b2 	bl	80005ec <__addsf3>
 8005288:	f10a 0a01 	add.w	sl, sl, #1
 800528c:	4683      	mov	fp, r0
 800528e:	e7b6      	b.n	80051fe <__kernel_rem_pio2f+0x24a>
 8005290:	080063f4 	.word	0x080063f4
 8005294:	3c01      	subs	r4, #1
 8005296:	ab08      	add	r3, sp, #32
 8005298:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800529c:	3e08      	subs	r6, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f8      	beq.n	8005294 <__kernel_rem_pio2f+0x2e0>
 80052a2:	4631      	mov	r1, r6
 80052a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80052a8:	f000 f9cc 	bl	8005644 <scalbnf>
 80052ac:	46a1      	mov	r9, r4
 80052ae:	4682      	mov	sl, r0
 80052b0:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 80052b4:	ae44      	add	r6, sp, #272	; 0x110
 80052b6:	f1b9 0f00 	cmp.w	r9, #0
 80052ba:	da3f      	bge.n	800533c <__kernel_rem_pio2f+0x388>
 80052bc:	2700      	movs	r7, #0
 80052be:	f04f 0b00 	mov.w	fp, #0
 80052c2:	4b82      	ldr	r3, [pc, #520]	; (80054cc <__kernel_rem_pio2f+0x518>)
 80052c4:	aa30      	add	r2, sp, #192	; 0xc0
 80052c6:	ebb4 0a07 	subs.w	sl, r4, r7
 80052ca:	d462      	bmi.n	8005392 <__kernel_rem_pio2f+0x3de>
 80052cc:	a944      	add	r1, sp, #272	; 0x110
 80052ce:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 80052d2:	46d9      	mov	r9, fp
 80052d4:	2600      	movs	r6, #0
 80052d6:	e053      	b.n	8005380 <__kernel_rem_pio2f+0x3cc>
 80052d8:	4271      	negs	r1, r6
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f9b2 	bl	8005644 <scalbnf>
 80052e0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80052e4:	4604      	mov	r4, r0
 80052e6:	f7fb fc3b 	bl	8000b60 <__aeabi_fcmpge>
 80052ea:	b1f8      	cbz	r0, 800532c <__kernel_rem_pio2f+0x378>
 80052ec:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7fb fa83 	bl	80007fc <__aeabi_fmul>
 80052f6:	f7fb fc47 	bl	8000b88 <__aeabi_f2iz>
 80052fa:	f7fb fa2b 	bl	8000754 <__aeabi_i2f>
 80052fe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005302:	4681      	mov	r9, r0
 8005304:	f7fb fa7a 	bl	80007fc <__aeabi_fmul>
 8005308:	4601      	mov	r1, r0
 800530a:	4620      	mov	r0, r4
 800530c:	f7fb f96c 	bl	80005e8 <__aeabi_fsub>
 8005310:	f7fb fc3a 	bl	8000b88 <__aeabi_f2iz>
 8005314:	ab08      	add	r3, sp, #32
 8005316:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800531a:	4648      	mov	r0, r9
 800531c:	f7fb fc34 	bl	8000b88 <__aeabi_f2iz>
 8005320:	1c7c      	adds	r4, r7, #1
 8005322:	ab08      	add	r3, sp, #32
 8005324:	3608      	adds	r6, #8
 8005326:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800532a:	e7ba      	b.n	80052a2 <__kernel_rem_pio2f+0x2ee>
 800532c:	4620      	mov	r0, r4
 800532e:	f7fb fc2b 	bl	8000b88 <__aeabi_f2iz>
 8005332:	ab08      	add	r3, sp, #32
 8005334:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005338:	463c      	mov	r4, r7
 800533a:	e7b2      	b.n	80052a2 <__kernel_rem_pio2f+0x2ee>
 800533c:	ab08      	add	r3, sp, #32
 800533e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8005342:	f7fb fa07 	bl	8000754 <__aeabi_i2f>
 8005346:	4651      	mov	r1, sl
 8005348:	f7fb fa58 	bl	80007fc <__aeabi_fmul>
 800534c:	4639      	mov	r1, r7
 800534e:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 8005352:	4650      	mov	r0, sl
 8005354:	f7fb fa52 	bl	80007fc <__aeabi_fmul>
 8005358:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800535c:	4682      	mov	sl, r0
 800535e:	e7aa      	b.n	80052b6 <__kernel_rem_pio2f+0x302>
 8005360:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005364:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8005368:	9204      	str	r2, [sp, #16]
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	f7fb fa46 	bl	80007fc <__aeabi_fmul>
 8005370:	4601      	mov	r1, r0
 8005372:	4648      	mov	r0, r9
 8005374:	f7fb f93a 	bl	80005ec <__addsf3>
 8005378:	4681      	mov	r9, r0
 800537a:	9a04      	ldr	r2, [sp, #16]
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	3601      	adds	r6, #1
 8005380:	9902      	ldr	r1, [sp, #8]
 8005382:	428e      	cmp	r6, r1
 8005384:	dc01      	bgt.n	800538a <__kernel_rem_pio2f+0x3d6>
 8005386:	42be      	cmp	r6, r7
 8005388:	ddea      	ble.n	8005360 <__kernel_rem_pio2f+0x3ac>
 800538a:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800538e:	3701      	adds	r7, #1
 8005390:	e799      	b.n	80052c6 <__kernel_rem_pio2f+0x312>
 8005392:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8005394:	2b03      	cmp	r3, #3
 8005396:	d826      	bhi.n	80053e6 <__kernel_rem_pio2f+0x432>
 8005398:	e8df f003 	tbb	[pc, r3]
 800539c:	2a02021c 	.word	0x2a02021c
 80053a0:	4626      	mov	r6, r4
 80053a2:	2000      	movs	r0, #0
 80053a4:	af30      	add	r7, sp, #192	; 0xc0
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	da40      	bge.n	800542c <__kernel_rem_pio2f+0x478>
 80053aa:	2d00      	cmp	r5, #0
 80053ac:	d044      	beq.n	8005438 <__kernel_rem_pio2f+0x484>
 80053ae:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	af58      	add	r7, sp, #352	; 0x160
 80053b6:	4601      	mov	r1, r0
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80053be:	f7fb f913 	bl	80005e8 <__aeabi_fsub>
 80053c2:	2601      	movs	r6, #1
 80053c4:	42b4      	cmp	r4, r6
 80053c6:	da39      	bge.n	800543c <__kernel_rem_pio2f+0x488>
 80053c8:	b10d      	cbz	r5, 80053ce <__kernel_rem_pio2f+0x41a>
 80053ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	6058      	str	r0, [r3, #4]
 80053d2:	e008      	b.n	80053e6 <__kernel_rem_pio2f+0x432>
 80053d4:	2000      	movs	r0, #0
 80053d6:	ae30      	add	r6, sp, #192	; 0xc0
 80053d8:	2c00      	cmp	r4, #0
 80053da:	da21      	bge.n	8005420 <__kernel_rem_pio2f+0x46c>
 80053dc:	b10d      	cbz	r5, 80053e2 <__kernel_rem_pio2f+0x42e>
 80053de:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	f008 0007 	and.w	r0, r8, #7
 80053ea:	b059      	add	sp, #356	; 0x164
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f0:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80053f4:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 80053f8:	4637      	mov	r7, r6
 80053fa:	46a1      	mov	r9, r4
 80053fc:	f1b9 0f00 	cmp.w	r9, #0
 8005400:	dc22      	bgt.n	8005448 <__kernel_rem_pio2f+0x494>
 8005402:	4627      	mov	r7, r4
 8005404:	2f01      	cmp	r7, #1
 8005406:	dc38      	bgt.n	800547a <__kernel_rem_pio2f+0x4c6>
 8005408:	2000      	movs	r0, #0
 800540a:	2c01      	cmp	r4, #1
 800540c:	dc4c      	bgt.n	80054a8 <__kernel_rem_pio2f+0x4f4>
 800540e:	2d00      	cmp	r5, #0
 8005410:	d150      	bne.n	80054b4 <__kernel_rem_pio2f+0x500>
 8005412:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005414:	9a01      	ldr	r2, [sp, #4]
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	6090      	str	r0, [r2, #8]
 800541e:	e7e2      	b.n	80053e6 <__kernel_rem_pio2f+0x432>
 8005420:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8005424:	f7fb f8e2 	bl	80005ec <__addsf3>
 8005428:	3c01      	subs	r4, #1
 800542a:	e7d5      	b.n	80053d8 <__kernel_rem_pio2f+0x424>
 800542c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005430:	f7fb f8dc 	bl	80005ec <__addsf3>
 8005434:	3e01      	subs	r6, #1
 8005436:	e7b6      	b.n	80053a6 <__kernel_rem_pio2f+0x3f2>
 8005438:	4603      	mov	r3, r0
 800543a:	e7ba      	b.n	80053b2 <__kernel_rem_pio2f+0x3fe>
 800543c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005440:	f7fb f8d4 	bl	80005ec <__addsf3>
 8005444:	3601      	adds	r6, #1
 8005446:	e7bd      	b.n	80053c4 <__kernel_rem_pio2f+0x410>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	9202      	str	r2, [sp, #8]
 8005456:	f7fb f8c9 	bl	80005ec <__addsf3>
 800545a:	9a02      	ldr	r2, [sp, #8]
 800545c:	4601      	mov	r1, r0
 800545e:	4683      	mov	fp, r0
 8005460:	4610      	mov	r0, r2
 8005462:	f7fb f8c1 	bl	80005e8 <__aeabi_fsub>
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800546c:	4619      	mov	r1, r3
 800546e:	f7fb f8bd 	bl	80005ec <__addsf3>
 8005472:	6038      	str	r0, [r7, #0]
 8005474:	f847 bd04 	str.w	fp, [r7, #-4]!
 8005478:	e7c0      	b.n	80053fc <__kernel_rem_pio2f+0x448>
 800547a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800547e:	f8d6 b000 	ldr.w	fp, [r6]
 8005482:	4618      	mov	r0, r3
 8005484:	4659      	mov	r1, fp
 8005486:	9302      	str	r3, [sp, #8]
 8005488:	f7fb f8b0 	bl	80005ec <__addsf3>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	4601      	mov	r1, r0
 8005490:	4681      	mov	r9, r0
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb f8a8 	bl	80005e8 <__aeabi_fsub>
 8005498:	4659      	mov	r1, fp
 800549a:	f7fb f8a7 	bl	80005ec <__addsf3>
 800549e:	3f01      	subs	r7, #1
 80054a0:	6030      	str	r0, [r6, #0]
 80054a2:	f846 9d04 	str.w	r9, [r6, #-4]!
 80054a6:	e7ad      	b.n	8005404 <__kernel_rem_pio2f+0x450>
 80054a8:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80054ac:	f7fb f89e 	bl	80005ec <__addsf3>
 80054b0:	3c01      	subs	r4, #1
 80054b2:	e7aa      	b.n	800540a <__kernel_rem_pio2f+0x456>
 80054b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80054b6:	9a01      	ldr	r2, [sp, #4]
 80054b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80054c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80054c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	6053      	str	r3, [r2, #4]
 80054ca:	e7a7      	b.n	800541c <__kernel_rem_pio2f+0x468>
 80054cc:	080063c8 	.word	0x080063c8

080054d0 <__kernel_sinf>:
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80054d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80054dc:	4604      	mov	r4, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	4691      	mov	r9, r2
 80054e2:	da03      	bge.n	80054ec <__kernel_sinf+0x1c>
 80054e4:	f7fb fb50 	bl	8000b88 <__aeabi_f2iz>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d035      	beq.n	8005558 <__kernel_sinf+0x88>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7fb f984 	bl	80007fc <__aeabi_fmul>
 80054f4:	4605      	mov	r5, r0
 80054f6:	4601      	mov	r1, r0
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7fb f97f 	bl	80007fc <__aeabi_fmul>
 80054fe:	4929      	ldr	r1, [pc, #164]	; (80055a4 <__kernel_sinf+0xd4>)
 8005500:	4606      	mov	r6, r0
 8005502:	4628      	mov	r0, r5
 8005504:	f7fb f97a 	bl	80007fc <__aeabi_fmul>
 8005508:	4927      	ldr	r1, [pc, #156]	; (80055a8 <__kernel_sinf+0xd8>)
 800550a:	f7fb f86d 	bl	80005e8 <__aeabi_fsub>
 800550e:	4629      	mov	r1, r5
 8005510:	f7fb f974 	bl	80007fc <__aeabi_fmul>
 8005514:	4925      	ldr	r1, [pc, #148]	; (80055ac <__kernel_sinf+0xdc>)
 8005516:	f7fb f869 	bl	80005ec <__addsf3>
 800551a:	4629      	mov	r1, r5
 800551c:	f7fb f96e 	bl	80007fc <__aeabi_fmul>
 8005520:	4923      	ldr	r1, [pc, #140]	; (80055b0 <__kernel_sinf+0xe0>)
 8005522:	f7fb f861 	bl	80005e8 <__aeabi_fsub>
 8005526:	4629      	mov	r1, r5
 8005528:	f7fb f968 	bl	80007fc <__aeabi_fmul>
 800552c:	4921      	ldr	r1, [pc, #132]	; (80055b4 <__kernel_sinf+0xe4>)
 800552e:	f7fb f85d 	bl	80005ec <__addsf3>
 8005532:	4680      	mov	r8, r0
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	d111      	bne.n	800555e <__kernel_sinf+0x8e>
 800553a:	4601      	mov	r1, r0
 800553c:	4628      	mov	r0, r5
 800553e:	f7fb f95d 	bl	80007fc <__aeabi_fmul>
 8005542:	491d      	ldr	r1, [pc, #116]	; (80055b8 <__kernel_sinf+0xe8>)
 8005544:	f7fb f850 	bl	80005e8 <__aeabi_fsub>
 8005548:	4631      	mov	r1, r6
 800554a:	f7fb f957 	bl	80007fc <__aeabi_fmul>
 800554e:	4601      	mov	r1, r0
 8005550:	4620      	mov	r0, r4
 8005552:	f7fb f84b 	bl	80005ec <__addsf3>
 8005556:	4604      	mov	r4, r0
 8005558:	4620      	mov	r0, r4
 800555a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005562:	4638      	mov	r0, r7
 8005564:	f7fb f94a 	bl	80007fc <__aeabi_fmul>
 8005568:	4641      	mov	r1, r8
 800556a:	4681      	mov	r9, r0
 800556c:	4630      	mov	r0, r6
 800556e:	f7fb f945 	bl	80007fc <__aeabi_fmul>
 8005572:	4601      	mov	r1, r0
 8005574:	4648      	mov	r0, r9
 8005576:	f7fb f837 	bl	80005e8 <__aeabi_fsub>
 800557a:	4629      	mov	r1, r5
 800557c:	f7fb f93e 	bl	80007fc <__aeabi_fmul>
 8005580:	4639      	mov	r1, r7
 8005582:	f7fb f831 	bl	80005e8 <__aeabi_fsub>
 8005586:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__kernel_sinf+0xe8>)
 8005588:	4605      	mov	r5, r0
 800558a:	4630      	mov	r0, r6
 800558c:	f7fb f936 	bl	80007fc <__aeabi_fmul>
 8005590:	4601      	mov	r1, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f7fb f82a 	bl	80005ec <__addsf3>
 8005598:	4601      	mov	r1, r0
 800559a:	4620      	mov	r0, r4
 800559c:	f7fb f824 	bl	80005e8 <__aeabi_fsub>
 80055a0:	e7d9      	b.n	8005556 <__kernel_sinf+0x86>
 80055a2:	bf00      	nop
 80055a4:	2f2ec9d3 	.word	0x2f2ec9d3
 80055a8:	32d72f34 	.word	0x32d72f34
 80055ac:	3638ef1b 	.word	0x3638ef1b
 80055b0:	39500d01 	.word	0x39500d01
 80055b4:	3c088889 	.word	0x3c088889
 80055b8:	3e2aaaab 	.word	0x3e2aaaab

080055bc <fabsf>:
 80055bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055c0:	4770      	bx	lr
	...

080055c4 <floorf>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80055ca:	0df5      	lsrs	r5, r6, #23
 80055cc:	3d7f      	subs	r5, #127	; 0x7f
 80055ce:	2d16      	cmp	r5, #22
 80055d0:	4601      	mov	r1, r0
 80055d2:	4604      	mov	r4, r0
 80055d4:	dc26      	bgt.n	8005624 <floorf+0x60>
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	da0e      	bge.n	80055f8 <floorf+0x34>
 80055da:	4917      	ldr	r1, [pc, #92]	; (8005638 <floorf+0x74>)
 80055dc:	f7fb f806 	bl	80005ec <__addsf3>
 80055e0:	2100      	movs	r1, #0
 80055e2:	f7fb fac7 	bl	8000b74 <__aeabi_fcmpgt>
 80055e6:	b128      	cbz	r0, 80055f4 <floorf+0x30>
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	da23      	bge.n	8005634 <floorf+0x70>
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <floorf+0x78>)
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	bf18      	it	ne
 80055f2:	461c      	movne	r4, r3
 80055f4:	4621      	mov	r1, r4
 80055f6:	e01b      	b.n	8005630 <floorf+0x6c>
 80055f8:	4e11      	ldr	r6, [pc, #68]	; (8005640 <floorf+0x7c>)
 80055fa:	412e      	asrs	r6, r5
 80055fc:	4230      	tst	r0, r6
 80055fe:	d017      	beq.n	8005630 <floorf+0x6c>
 8005600:	490d      	ldr	r1, [pc, #52]	; (8005638 <floorf+0x74>)
 8005602:	f7fa fff3 	bl	80005ec <__addsf3>
 8005606:	2100      	movs	r1, #0
 8005608:	f7fb fab4 	bl	8000b74 <__aeabi_fcmpgt>
 800560c:	2800      	cmp	r0, #0
 800560e:	d0f1      	beq.n	80055f4 <floorf+0x30>
 8005610:	2c00      	cmp	r4, #0
 8005612:	bfbe      	ittt	lt
 8005614:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8005618:	fa43 f505 	asrlt.w	r5, r3, r5
 800561c:	1964      	addlt	r4, r4, r5
 800561e:	ea24 0406 	bic.w	r4, r4, r6
 8005622:	e7e7      	b.n	80055f4 <floorf+0x30>
 8005624:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005628:	d302      	bcc.n	8005630 <floorf+0x6c>
 800562a:	f7fa ffdf 	bl	80005ec <__addsf3>
 800562e:	4601      	mov	r1, r0
 8005630:	4608      	mov	r0, r1
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	2400      	movs	r4, #0
 8005636:	e7dd      	b.n	80055f4 <floorf+0x30>
 8005638:	7149f2ca 	.word	0x7149f2ca
 800563c:	bf800000 	.word	0xbf800000
 8005640:	007fffff 	.word	0x007fffff

08005644 <scalbnf>:
 8005644:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8005648:	b510      	push	{r4, lr}
 800564a:	4602      	mov	r2, r0
 800564c:	460c      	mov	r4, r1
 800564e:	d028      	beq.n	80056a2 <scalbnf+0x5e>
 8005650:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005654:	d304      	bcc.n	8005660 <scalbnf+0x1c>
 8005656:	4601      	mov	r1, r0
 8005658:	f7fa ffc8 	bl	80005ec <__addsf3>
 800565c:	4602      	mov	r2, r0
 800565e:	e020      	b.n	80056a2 <scalbnf+0x5e>
 8005660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005664:	d215      	bcs.n	8005692 <scalbnf+0x4e>
 8005666:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800566a:	f7fb f8c7 	bl	80007fc <__aeabi_fmul>
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <scalbnf+0x8c>)
 8005670:	4602      	mov	r2, r0
 8005672:	429c      	cmp	r4, r3
 8005674:	db22      	blt.n	80056bc <scalbnf+0x78>
 8005676:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800567a:	3b19      	subs	r3, #25
 800567c:	4423      	add	r3, r4
 800567e:	2bfe      	cmp	r3, #254	; 0xfe
 8005680:	dd09      	ble.n	8005696 <scalbnf+0x52>
 8005682:	4611      	mov	r1, r2
 8005684:	4813      	ldr	r0, [pc, #76]	; (80056d4 <scalbnf+0x90>)
 8005686:	f000 f829 	bl	80056dc <copysignf>
 800568a:	4912      	ldr	r1, [pc, #72]	; (80056d4 <scalbnf+0x90>)
 800568c:	f7fb f8b6 	bl	80007fc <__aeabi_fmul>
 8005690:	e7e4      	b.n	800565c <scalbnf+0x18>
 8005692:	0ddb      	lsrs	r3, r3, #23
 8005694:	e7f2      	b.n	800567c <scalbnf+0x38>
 8005696:	2b00      	cmp	r3, #0
 8005698:	dd05      	ble.n	80056a6 <scalbnf+0x62>
 800569a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800569e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 80056a2:	4610      	mov	r0, r2
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	f113 0f16 	cmn.w	r3, #22
 80056aa:	da09      	bge.n	80056c0 <scalbnf+0x7c>
 80056ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80056b0:	429c      	cmp	r4, r3
 80056b2:	4611      	mov	r1, r2
 80056b4:	dce6      	bgt.n	8005684 <scalbnf+0x40>
 80056b6:	4808      	ldr	r0, [pc, #32]	; (80056d8 <scalbnf+0x94>)
 80056b8:	f000 f810 	bl	80056dc <copysignf>
 80056bc:	4906      	ldr	r1, [pc, #24]	; (80056d8 <scalbnf+0x94>)
 80056be:	e7e5      	b.n	800568c <scalbnf+0x48>
 80056c0:	3319      	adds	r3, #25
 80056c2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80056c6:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80056ca:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80056ce:	e7dd      	b.n	800568c <scalbnf+0x48>
 80056d0:	ffff3cb0 	.word	0xffff3cb0
 80056d4:	7149f2ca 	.word	0x7149f2ca
 80056d8:	0da24260 	.word	0x0da24260

080056dc <copysignf>:
 80056dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80056e4:	4308      	orrs	r0, r1
 80056e6:	4770      	bx	lr

080056e8 <abort>:
 80056e8:	b508      	push	{r3, lr}
 80056ea:	2006      	movs	r0, #6
 80056ec:	f000 fa90 	bl	8005c10 <raise>
 80056f0:	2001      	movs	r0, #1
 80056f2:	f000 fbe7 	bl	8005ec4 <_exit>
	...

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	2500      	movs	r5, #0
 80056fc:	4e0c      	ldr	r6, [pc, #48]	; (8005730 <__libc_init_array+0x38>)
 80056fe:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 8005700:	1ba4      	subs	r4, r4, r6
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	42a5      	cmp	r5, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	f000 fbde 	bl	8005ec8 <_init>
 800570c:	2500      	movs	r5, #0
 800570e:	4e0a      	ldr	r6, [pc, #40]	; (8005738 <__libc_init_array+0x40>)
 8005710:	4c0a      	ldr	r4, [pc, #40]	; (800573c <__libc_init_array+0x44>)
 8005712:	1ba4      	subs	r4, r4, r6
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	42a5      	cmp	r5, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005720:	4798      	blx	r3
 8005722:	3501      	adds	r5, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800572a:	4798      	blx	r3
 800572c:	3501      	adds	r5, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	0800663c 	.word	0x0800663c
 8005734:	0800663c 	.word	0x0800663c
 8005738:	0800663c 	.word	0x0800663c
 800573c:	08006644 	.word	0x08006644

08005740 <malloc>:
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <malloc+0xc>)
 8005742:	4601      	mov	r1, r0
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f000 b80b 	b.w	8005760 <_malloc_r>
 800574a:	bf00      	nop
 800574c:	20000014 	.word	0x20000014

08005750 <free>:
 8005750:	4b02      	ldr	r3, [pc, #8]	; (800575c <free+0xc>)
 8005752:	4601      	mov	r1, r0
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	f000 bacd 	b.w	8005cf4 <_free_r>
 800575a:	bf00      	nop
 800575c:	20000014 	.word	0x20000014

08005760 <_malloc_r>:
 8005760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	f101 040b 	add.w	r4, r1, #11
 8005768:	2c16      	cmp	r4, #22
 800576a:	4681      	mov	r9, r0
 800576c:	d907      	bls.n	800577e <_malloc_r+0x1e>
 800576e:	f034 0407 	bics.w	r4, r4, #7
 8005772:	d505      	bpl.n	8005780 <_malloc_r+0x20>
 8005774:	230c      	movs	r3, #12
 8005776:	f8c9 3000 	str.w	r3, [r9]
 800577a:	2600      	movs	r6, #0
 800577c:	e131      	b.n	80059e2 <_malloc_r+0x282>
 800577e:	2410      	movs	r4, #16
 8005780:	428c      	cmp	r4, r1
 8005782:	d3f7      	bcc.n	8005774 <_malloc_r+0x14>
 8005784:	4648      	mov	r0, r9
 8005786:	f000 f9ff 	bl	8005b88 <__malloc_lock>
 800578a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800578e:	4d9b      	ldr	r5, [pc, #620]	; (80059fc <_malloc_r+0x29c>)
 8005790:	d236      	bcs.n	8005800 <_malloc_r+0xa0>
 8005792:	f104 0208 	add.w	r2, r4, #8
 8005796:	442a      	add	r2, r5
 8005798:	6856      	ldr	r6, [r2, #4]
 800579a:	f1a2 0108 	sub.w	r1, r2, #8
 800579e:	428e      	cmp	r6, r1
 80057a0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80057a4:	d102      	bne.n	80057ac <_malloc_r+0x4c>
 80057a6:	68d6      	ldr	r6, [r2, #12]
 80057a8:	42b2      	cmp	r2, r6
 80057aa:	d010      	beq.n	80057ce <_malloc_r+0x6e>
 80057ac:	6873      	ldr	r3, [r6, #4]
 80057ae:	68f2      	ldr	r2, [r6, #12]
 80057b0:	68b1      	ldr	r1, [r6, #8]
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	60ca      	str	r2, [r1, #12]
 80057b8:	4433      	add	r3, r6
 80057ba:	6091      	str	r1, [r2, #8]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	4648      	mov	r0, r9
 80057c6:	f000 f9e5 	bl	8005b94 <__malloc_unlock>
 80057ca:	3608      	adds	r6, #8
 80057cc:	e109      	b.n	80059e2 <_malloc_r+0x282>
 80057ce:	3302      	adds	r3, #2
 80057d0:	4a8b      	ldr	r2, [pc, #556]	; (8005a00 <_malloc_r+0x2a0>)
 80057d2:	692e      	ldr	r6, [r5, #16]
 80057d4:	4611      	mov	r1, r2
 80057d6:	4296      	cmp	r6, r2
 80057d8:	d06d      	beq.n	80058b6 <_malloc_r+0x156>
 80057da:	6870      	ldr	r0, [r6, #4]
 80057dc:	f020 0003 	bic.w	r0, r0, #3
 80057e0:	1b07      	subs	r7, r0, r4
 80057e2:	2f0f      	cmp	r7, #15
 80057e4:	dd47      	ble.n	8005876 <_malloc_r+0x116>
 80057e6:	1933      	adds	r3, r6, r4
 80057e8:	f044 0401 	orr.w	r4, r4, #1
 80057ec:	6074      	str	r4, [r6, #4]
 80057ee:	616b      	str	r3, [r5, #20]
 80057f0:	612b      	str	r3, [r5, #16]
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	f047 0201 	orr.w	r2, r7, #1
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	5037      	str	r7, [r6, r0]
 80057fe:	e7e1      	b.n	80057c4 <_malloc_r+0x64>
 8005800:	0a63      	lsrs	r3, r4, #9
 8005802:	d02a      	beq.n	800585a <_malloc_r+0xfa>
 8005804:	2b04      	cmp	r3, #4
 8005806:	d812      	bhi.n	800582e <_malloc_r+0xce>
 8005808:	09a3      	lsrs	r3, r4, #6
 800580a:	3338      	adds	r3, #56	; 0x38
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005812:	6856      	ldr	r6, [r2, #4]
 8005814:	f1a2 0008 	sub.w	r0, r2, #8
 8005818:	4286      	cmp	r6, r0
 800581a:	d006      	beq.n	800582a <_malloc_r+0xca>
 800581c:	6872      	ldr	r2, [r6, #4]
 800581e:	f022 0203 	bic.w	r2, r2, #3
 8005822:	1b11      	subs	r1, r2, r4
 8005824:	290f      	cmp	r1, #15
 8005826:	dd1c      	ble.n	8005862 <_malloc_r+0x102>
 8005828:	3b01      	subs	r3, #1
 800582a:	3301      	adds	r3, #1
 800582c:	e7d0      	b.n	80057d0 <_malloc_r+0x70>
 800582e:	2b14      	cmp	r3, #20
 8005830:	d801      	bhi.n	8005836 <_malloc_r+0xd6>
 8005832:	335b      	adds	r3, #91	; 0x5b
 8005834:	e7ea      	b.n	800580c <_malloc_r+0xac>
 8005836:	2b54      	cmp	r3, #84	; 0x54
 8005838:	d802      	bhi.n	8005840 <_malloc_r+0xe0>
 800583a:	0b23      	lsrs	r3, r4, #12
 800583c:	336e      	adds	r3, #110	; 0x6e
 800583e:	e7e5      	b.n	800580c <_malloc_r+0xac>
 8005840:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005844:	d802      	bhi.n	800584c <_malloc_r+0xec>
 8005846:	0be3      	lsrs	r3, r4, #15
 8005848:	3377      	adds	r3, #119	; 0x77
 800584a:	e7df      	b.n	800580c <_malloc_r+0xac>
 800584c:	f240 5254 	movw	r2, #1364	; 0x554
 8005850:	4293      	cmp	r3, r2
 8005852:	d804      	bhi.n	800585e <_malloc_r+0xfe>
 8005854:	0ca3      	lsrs	r3, r4, #18
 8005856:	337c      	adds	r3, #124	; 0x7c
 8005858:	e7d8      	b.n	800580c <_malloc_r+0xac>
 800585a:	233f      	movs	r3, #63	; 0x3f
 800585c:	e7d6      	b.n	800580c <_malloc_r+0xac>
 800585e:	237e      	movs	r3, #126	; 0x7e
 8005860:	e7d4      	b.n	800580c <_malloc_r+0xac>
 8005862:	2900      	cmp	r1, #0
 8005864:	68f1      	ldr	r1, [r6, #12]
 8005866:	db04      	blt.n	8005872 <_malloc_r+0x112>
 8005868:	68b3      	ldr	r3, [r6, #8]
 800586a:	60d9      	str	r1, [r3, #12]
 800586c:	608b      	str	r3, [r1, #8]
 800586e:	18b3      	adds	r3, r6, r2
 8005870:	e7a4      	b.n	80057bc <_malloc_r+0x5c>
 8005872:	460e      	mov	r6, r1
 8005874:	e7d0      	b.n	8005818 <_malloc_r+0xb8>
 8005876:	2f00      	cmp	r7, #0
 8005878:	616a      	str	r2, [r5, #20]
 800587a:	612a      	str	r2, [r5, #16]
 800587c:	db05      	blt.n	800588a <_malloc_r+0x12a>
 800587e:	4430      	add	r0, r6
 8005880:	6843      	ldr	r3, [r0, #4]
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6043      	str	r3, [r0, #4]
 8005888:	e79c      	b.n	80057c4 <_malloc_r+0x64>
 800588a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800588e:	d244      	bcs.n	800591a <_malloc_r+0x1ba>
 8005890:	2201      	movs	r2, #1
 8005892:	08c0      	lsrs	r0, r0, #3
 8005894:	1087      	asrs	r7, r0, #2
 8005896:	fa02 f707 	lsl.w	r7, r2, r7
 800589a:	686a      	ldr	r2, [r5, #4]
 800589c:	3001      	adds	r0, #1
 800589e:	433a      	orrs	r2, r7
 80058a0:	606a      	str	r2, [r5, #4]
 80058a2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80058a6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80058aa:	3a08      	subs	r2, #8
 80058ac:	60f2      	str	r2, [r6, #12]
 80058ae:	60b7      	str	r7, [r6, #8]
 80058b0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80058b4:	60fe      	str	r6, [r7, #12]
 80058b6:	2001      	movs	r0, #1
 80058b8:	109a      	asrs	r2, r3, #2
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	6868      	ldr	r0, [r5, #4]
 80058c0:	4282      	cmp	r2, r0
 80058c2:	f200 809f 	bhi.w	8005a04 <_malloc_r+0x2a4>
 80058c6:	4202      	tst	r2, r0
 80058c8:	d106      	bne.n	80058d8 <_malloc_r+0x178>
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	0052      	lsls	r2, r2, #1
 80058d0:	4202      	tst	r2, r0
 80058d2:	f103 0304 	add.w	r3, r3, #4
 80058d6:	d0fa      	beq.n	80058ce <_malloc_r+0x16e>
 80058d8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80058dc:	46e0      	mov	r8, ip
 80058de:	469e      	mov	lr, r3
 80058e0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80058e4:	4546      	cmp	r6, r8
 80058e6:	d153      	bne.n	8005990 <_malloc_r+0x230>
 80058e8:	f10e 0e01 	add.w	lr, lr, #1
 80058ec:	f01e 0f03 	tst.w	lr, #3
 80058f0:	f108 0808 	add.w	r8, r8, #8
 80058f4:	d1f4      	bne.n	80058e0 <_malloc_r+0x180>
 80058f6:	0798      	lsls	r0, r3, #30
 80058f8:	d179      	bne.n	80059ee <_malloc_r+0x28e>
 80058fa:	686b      	ldr	r3, [r5, #4]
 80058fc:	ea23 0302 	bic.w	r3, r3, r2
 8005900:	606b      	str	r3, [r5, #4]
 8005902:	6868      	ldr	r0, [r5, #4]
 8005904:	0052      	lsls	r2, r2, #1
 8005906:	4282      	cmp	r2, r0
 8005908:	d87c      	bhi.n	8005a04 <_malloc_r+0x2a4>
 800590a:	2a00      	cmp	r2, #0
 800590c:	d07a      	beq.n	8005a04 <_malloc_r+0x2a4>
 800590e:	4673      	mov	r3, lr
 8005910:	4202      	tst	r2, r0
 8005912:	d1e1      	bne.n	80058d8 <_malloc_r+0x178>
 8005914:	3304      	adds	r3, #4
 8005916:	0052      	lsls	r2, r2, #1
 8005918:	e7fa      	b.n	8005910 <_malloc_r+0x1b0>
 800591a:	0a42      	lsrs	r2, r0, #9
 800591c:	2a04      	cmp	r2, #4
 800591e:	d815      	bhi.n	800594c <_malloc_r+0x1ec>
 8005920:	0982      	lsrs	r2, r0, #6
 8005922:	3238      	adds	r2, #56	; 0x38
 8005924:	1c57      	adds	r7, r2, #1
 8005926:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800592a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800592e:	45be      	cmp	lr, r7
 8005930:	d126      	bne.n	8005980 <_malloc_r+0x220>
 8005932:	2001      	movs	r0, #1
 8005934:	1092      	asrs	r2, r2, #2
 8005936:	fa00 f202 	lsl.w	r2, r0, r2
 800593a:	6868      	ldr	r0, [r5, #4]
 800593c:	4310      	orrs	r0, r2
 800593e:	6068      	str	r0, [r5, #4]
 8005940:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005944:	60b7      	str	r7, [r6, #8]
 8005946:	f8ce 6008 	str.w	r6, [lr, #8]
 800594a:	e7b3      	b.n	80058b4 <_malloc_r+0x154>
 800594c:	2a14      	cmp	r2, #20
 800594e:	d801      	bhi.n	8005954 <_malloc_r+0x1f4>
 8005950:	325b      	adds	r2, #91	; 0x5b
 8005952:	e7e7      	b.n	8005924 <_malloc_r+0x1c4>
 8005954:	2a54      	cmp	r2, #84	; 0x54
 8005956:	d802      	bhi.n	800595e <_malloc_r+0x1fe>
 8005958:	0b02      	lsrs	r2, r0, #12
 800595a:	326e      	adds	r2, #110	; 0x6e
 800595c:	e7e2      	b.n	8005924 <_malloc_r+0x1c4>
 800595e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005962:	d802      	bhi.n	800596a <_malloc_r+0x20a>
 8005964:	0bc2      	lsrs	r2, r0, #15
 8005966:	3277      	adds	r2, #119	; 0x77
 8005968:	e7dc      	b.n	8005924 <_malloc_r+0x1c4>
 800596a:	f240 5754 	movw	r7, #1364	; 0x554
 800596e:	42ba      	cmp	r2, r7
 8005970:	bf9a      	itte	ls
 8005972:	0c82      	lsrls	r2, r0, #18
 8005974:	327c      	addls	r2, #124	; 0x7c
 8005976:	227e      	movhi	r2, #126	; 0x7e
 8005978:	e7d4      	b.n	8005924 <_malloc_r+0x1c4>
 800597a:	68bf      	ldr	r7, [r7, #8]
 800597c:	45be      	cmp	lr, r7
 800597e:	d004      	beq.n	800598a <_malloc_r+0x22a>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	f022 0203 	bic.w	r2, r2, #3
 8005986:	4290      	cmp	r0, r2
 8005988:	d3f7      	bcc.n	800597a <_malloc_r+0x21a>
 800598a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800598e:	e7d7      	b.n	8005940 <_malloc_r+0x1e0>
 8005990:	6870      	ldr	r0, [r6, #4]
 8005992:	68f7      	ldr	r7, [r6, #12]
 8005994:	f020 0003 	bic.w	r0, r0, #3
 8005998:	eba0 0a04 	sub.w	sl, r0, r4
 800599c:	f1ba 0f0f 	cmp.w	sl, #15
 80059a0:	dd10      	ble.n	80059c4 <_malloc_r+0x264>
 80059a2:	68b2      	ldr	r2, [r6, #8]
 80059a4:	1933      	adds	r3, r6, r4
 80059a6:	f044 0401 	orr.w	r4, r4, #1
 80059aa:	6074      	str	r4, [r6, #4]
 80059ac:	60d7      	str	r7, [r2, #12]
 80059ae:	60ba      	str	r2, [r7, #8]
 80059b0:	f04a 0201 	orr.w	r2, sl, #1
 80059b4:	616b      	str	r3, [r5, #20]
 80059b6:	612b      	str	r3, [r5, #16]
 80059b8:	60d9      	str	r1, [r3, #12]
 80059ba:	6099      	str	r1, [r3, #8]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	f846 a000 	str.w	sl, [r6, r0]
 80059c2:	e6ff      	b.n	80057c4 <_malloc_r+0x64>
 80059c4:	f1ba 0f00 	cmp.w	sl, #0
 80059c8:	db0f      	blt.n	80059ea <_malloc_r+0x28a>
 80059ca:	4430      	add	r0, r6
 80059cc:	6843      	ldr	r3, [r0, #4]
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6043      	str	r3, [r0, #4]
 80059d4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80059d8:	4648      	mov	r0, r9
 80059da:	60df      	str	r7, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	f000 f8d9 	bl	8005b94 <__malloc_unlock>
 80059e2:	4630      	mov	r0, r6
 80059e4:	b003      	add	sp, #12
 80059e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ea:	463e      	mov	r6, r7
 80059ec:	e77a      	b.n	80058e4 <_malloc_r+0x184>
 80059ee:	f85c 0908 	ldr.w	r0, [ip], #-8
 80059f2:	3b01      	subs	r3, #1
 80059f4:	4584      	cmp	ip, r0
 80059f6:	f43f af7e 	beq.w	80058f6 <_malloc_r+0x196>
 80059fa:	e782      	b.n	8005902 <_malloc_r+0x1a2>
 80059fc:	20000108 	.word	0x20000108
 8005a00:	20000110 	.word	0x20000110
 8005a04:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005a08:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005a0c:	f026 0603 	bic.w	r6, r6, #3
 8005a10:	42b4      	cmp	r4, r6
 8005a12:	d803      	bhi.n	8005a1c <_malloc_r+0x2bc>
 8005a14:	1b33      	subs	r3, r6, r4
 8005a16:	2b0f      	cmp	r3, #15
 8005a18:	f300 8095 	bgt.w	8005b46 <_malloc_r+0x3e6>
 8005a1c:	4a4f      	ldr	r2, [pc, #316]	; (8005b5c <_malloc_r+0x3fc>)
 8005a1e:	eb0b 0306 	add.w	r3, fp, r6
 8005a22:	6817      	ldr	r7, [r2, #0]
 8005a24:	4a4e      	ldr	r2, [pc, #312]	; (8005b60 <_malloc_r+0x400>)
 8005a26:	3710      	adds	r7, #16
 8005a28:	6811      	ldr	r1, [r2, #0]
 8005a2a:	4427      	add	r7, r4
 8005a2c:	3101      	adds	r1, #1
 8005a2e:	d005      	beq.n	8005a3c <_malloc_r+0x2dc>
 8005a30:	494c      	ldr	r1, [pc, #304]	; (8005b64 <_malloc_r+0x404>)
 8005a32:	3901      	subs	r1, #1
 8005a34:	440f      	add	r7, r1
 8005a36:	3101      	adds	r1, #1
 8005a38:	4249      	negs	r1, r1
 8005a3a:	400f      	ands	r7, r1
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4648      	mov	r0, r9
 8005a40:	9201      	str	r2, [sp, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f000 f8ac 	bl	8005ba0 <_sbrk_r>
 8005a48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	d055      	beq.n	8005afc <_malloc_r+0x39c>
 8005a50:	9b00      	ldr	r3, [sp, #0]
 8005a52:	9a01      	ldr	r2, [sp, #4]
 8005a54:	4283      	cmp	r3, r0
 8005a56:	d901      	bls.n	8005a5c <_malloc_r+0x2fc>
 8005a58:	45ab      	cmp	fp, r5
 8005a5a:	d14f      	bne.n	8005afc <_malloc_r+0x39c>
 8005a5c:	4842      	ldr	r0, [pc, #264]	; (8005b68 <_malloc_r+0x408>)
 8005a5e:	4543      	cmp	r3, r8
 8005a60:	6801      	ldr	r1, [r0, #0]
 8005a62:	4682      	mov	sl, r0
 8005a64:	eb07 0e01 	add.w	lr, r7, r1
 8005a68:	f8c0 e000 	str.w	lr, [r0]
 8005a6c:	493f      	ldr	r1, [pc, #252]	; (8005b6c <_malloc_r+0x40c>)
 8005a6e:	d113      	bne.n	8005a98 <_malloc_r+0x338>
 8005a70:	420b      	tst	r3, r1
 8005a72:	d111      	bne.n	8005a98 <_malloc_r+0x338>
 8005a74:	68ab      	ldr	r3, [r5, #8]
 8005a76:	443e      	add	r6, r7
 8005a78:	f046 0601 	orr.w	r6, r6, #1
 8005a7c:	605e      	str	r6, [r3, #4]
 8005a7e:	4a3c      	ldr	r2, [pc, #240]	; (8005b70 <_malloc_r+0x410>)
 8005a80:	f8da 3000 	ldr.w	r3, [sl]
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	428b      	cmp	r3, r1
 8005a88:	bf88      	it	hi
 8005a8a:	6013      	strhi	r3, [r2, #0]
 8005a8c:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <_malloc_r+0x414>)
 8005a8e:	6811      	ldr	r1, [r2, #0]
 8005a90:	428b      	cmp	r3, r1
 8005a92:	bf88      	it	hi
 8005a94:	6013      	strhi	r3, [r2, #0]
 8005a96:	e031      	b.n	8005afc <_malloc_r+0x39c>
 8005a98:	6810      	ldr	r0, [r2, #0]
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	bf1b      	ittet	ne
 8005a9e:	eba8 0303 	subne.w	r3, r8, r3
 8005aa2:	4473      	addne	r3, lr
 8005aa4:	f8c2 8000 	streq.w	r8, [r2]
 8005aa8:	f8ca 3000 	strne.w	r3, [sl]
 8005aac:	f018 0007 	ands.w	r0, r8, #7
 8005ab0:	bf1c      	itt	ne
 8005ab2:	f1c0 0008 	rsbne	r0, r0, #8
 8005ab6:	4480      	addne	r8, r0
 8005ab8:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <_malloc_r+0x404>)
 8005aba:	4447      	add	r7, r8
 8005abc:	4418      	add	r0, r3
 8005abe:	400f      	ands	r7, r1
 8005ac0:	1bc7      	subs	r7, r0, r7
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f000 f86b 	bl	8005ba0 <_sbrk_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	bf04      	itt	eq
 8005ace:	4640      	moveq	r0, r8
 8005ad0:	2700      	moveq	r7, #0
 8005ad2:	f8da 3000 	ldr.w	r3, [sl]
 8005ad6:	eba0 0008 	sub.w	r0, r0, r8
 8005ada:	443b      	add	r3, r7
 8005adc:	4407      	add	r7, r0
 8005ade:	f047 0701 	orr.w	r7, r7, #1
 8005ae2:	45ab      	cmp	fp, r5
 8005ae4:	f8c5 8008 	str.w	r8, [r5, #8]
 8005ae8:	f8ca 3000 	str.w	r3, [sl]
 8005aec:	f8c8 7004 	str.w	r7, [r8, #4]
 8005af0:	d0c5      	beq.n	8005a7e <_malloc_r+0x31e>
 8005af2:	2e0f      	cmp	r6, #15
 8005af4:	d810      	bhi.n	8005b18 <_malloc_r+0x3b8>
 8005af6:	2301      	movs	r3, #1
 8005af8:	f8c8 3004 	str.w	r3, [r8, #4]
 8005afc:	68ab      	ldr	r3, [r5, #8]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	f022 0203 	bic.w	r2, r2, #3
 8005b04:	4294      	cmp	r4, r2
 8005b06:	eba2 0304 	sub.w	r3, r2, r4
 8005b0a:	d801      	bhi.n	8005b10 <_malloc_r+0x3b0>
 8005b0c:	2b0f      	cmp	r3, #15
 8005b0e:	dc1a      	bgt.n	8005b46 <_malloc_r+0x3e6>
 8005b10:	4648      	mov	r0, r9
 8005b12:	f000 f83f 	bl	8005b94 <__malloc_unlock>
 8005b16:	e630      	b.n	800577a <_malloc_r+0x1a>
 8005b18:	2205      	movs	r2, #5
 8005b1a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005b1e:	3e0c      	subs	r6, #12
 8005b20:	f026 0607 	bic.w	r6, r6, #7
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	4333      	orrs	r3, r6
 8005b2a:	f8cb 3004 	str.w	r3, [fp, #4]
 8005b2e:	2e0f      	cmp	r6, #15
 8005b30:	eb0b 0306 	add.w	r3, fp, r6
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	d9a1      	bls.n	8005a7e <_malloc_r+0x31e>
 8005b3a:	f10b 0108 	add.w	r1, fp, #8
 8005b3e:	4648      	mov	r0, r9
 8005b40:	f000 f8d8 	bl	8005cf4 <_free_r>
 8005b44:	e79b      	b.n	8005a7e <_malloc_r+0x31e>
 8005b46:	68ae      	ldr	r6, [r5, #8]
 8005b48:	f044 0201 	orr.w	r2, r4, #1
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	4434      	add	r4, r6
 8005b52:	6072      	str	r2, [r6, #4]
 8005b54:	60ac      	str	r4, [r5, #8]
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	e634      	b.n	80057c4 <_malloc_r+0x64>
 8005b5a:	bf00      	nop
 8005b5c:	2000074c 	.word	0x2000074c
 8005b60:	20000510 	.word	0x20000510
 8005b64:	00001000 	.word	0x00001000
 8005b68:	2000071c 	.word	0x2000071c
 8005b6c:	00000fff 	.word	0x00000fff
 8005b70:	20000744 	.word	0x20000744
 8005b74:	20000748 	.word	0x20000748

08005b78 <memset>:
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4402      	add	r2, r0
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d100      	bne.n	8005b82 <memset+0xa>
 8005b80:	4770      	bx	lr
 8005b82:	f803 1b01 	strb.w	r1, [r3], #1
 8005b86:	e7f9      	b.n	8005b7c <memset+0x4>

08005b88 <__malloc_lock>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__malloc_lock+0x8>)
 8005b8a:	f000 b96f 	b.w	8005e6c <__retarget_lock_acquire_recursive>
 8005b8e:	bf00      	nop
 8005b90:	2000075c 	.word	0x2000075c

08005b94 <__malloc_unlock>:
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <__malloc_unlock+0x8>)
 8005b96:	f000 b96a 	b.w	8005e6e <__retarget_lock_release_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	2000075c 	.word	0x2000075c

08005ba0 <_sbrk_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4c05      	ldr	r4, [pc, #20]	; (8005bbc <_sbrk_r+0x1c>)
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	f000 f97c 	bl	8005ea8 <_sbrk>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_sbrk_r+0x1a>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_sbrk_r+0x1a>
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000764 	.word	0x20000764

08005bc0 <_raise_r>:
 8005bc0:	291f      	cmp	r1, #31
 8005bc2:	b538      	push	{r3, r4, r5, lr}
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	d904      	bls.n	8005bd4 <_raise_r+0x14>
 8005bca:	2316      	movs	r3, #22
 8005bcc:	6003      	str	r3, [r0, #0]
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bd6:	b112      	cbz	r2, 8005bde <_raise_r+0x1e>
 8005bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bdc:	b94b      	cbnz	r3, 8005bf2 <_raise_r+0x32>
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 f830 	bl	8005c44 <_getpid_r>
 8005be4:	462a      	mov	r2, r5
 8005be6:	4601      	mov	r1, r0
 8005be8:	4620      	mov	r0, r4
 8005bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bee:	f000 b817 	b.w	8005c20 <_kill_r>
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d00a      	beq.n	8005c0c <_raise_r+0x4c>
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	d103      	bne.n	8005c02 <_raise_r+0x42>
 8005bfa:	2316      	movs	r3, #22
 8005bfc:	6003      	str	r3, [r0, #0]
 8005bfe:	2001      	movs	r0, #1
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	2400      	movs	r4, #0
 8005c04:	4628      	mov	r0, r5
 8005c06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c0a:	4798      	blx	r3
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}

08005c10 <raise>:
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <raise+0xc>)
 8005c12:	4601      	mov	r1, r0
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	f7ff bfd3 	b.w	8005bc0 <_raise_r>
 8005c1a:	bf00      	nop
 8005c1c:	20000014 	.word	0x20000014

08005c20 <_kill_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	2300      	movs	r3, #0
 8005c24:	4c06      	ldr	r4, [pc, #24]	; (8005c40 <_kill_r+0x20>)
 8005c26:	4605      	mov	r5, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	f000 f933 	bl	8005e98 <_kill>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d102      	bne.n	8005c3c <_kill_r+0x1c>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	b103      	cbz	r3, 8005c3c <_kill_r+0x1c>
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000764 	.word	0x20000764

08005c44 <_getpid_r>:
 8005c44:	f000 b920 	b.w	8005e88 <_getpid>

08005c48 <_malloc_trim_r>:
 8005c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	4689      	mov	r9, r1
 8005c4e:	4f25      	ldr	r7, [pc, #148]	; (8005ce4 <_malloc_trim_r+0x9c>)
 8005c50:	4606      	mov	r6, r0
 8005c52:	f7ff ff99 	bl	8005b88 <__malloc_lock>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005cf0 <_malloc_trim_r+0xa8>
 8005c5c:	685d      	ldr	r5, [r3, #4]
 8005c5e:	f1a8 0411 	sub.w	r4, r8, #17
 8005c62:	f025 0503 	bic.w	r5, r5, #3
 8005c66:	eba4 0409 	sub.w	r4, r4, r9
 8005c6a:	442c      	add	r4, r5
 8005c6c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005c70:	3c01      	subs	r4, #1
 8005c72:	fb08 f404 	mul.w	r4, r8, r4
 8005c76:	4544      	cmp	r4, r8
 8005c78:	da05      	bge.n	8005c86 <_malloc_trim_r+0x3e>
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ff8a 	bl	8005b94 <__malloc_unlock>
 8005c80:	2000      	movs	r0, #0
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	2100      	movs	r1, #0
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ff89 	bl	8005ba0 <_sbrk_r>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	442b      	add	r3, r5
 8005c92:	4298      	cmp	r0, r3
 8005c94:	d1f1      	bne.n	8005c7a <_malloc_trim_r+0x32>
 8005c96:	4261      	negs	r1, r4
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ff81 	bl	8005ba0 <_sbrk_r>
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d110      	bne.n	8005cc4 <_malloc_trim_r+0x7c>
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff ff7b 	bl	8005ba0 <_sbrk_r>
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	1a83      	subs	r3, r0, r2
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	dde3      	ble.n	8005c7a <_malloc_trim_r+0x32>
 8005cb2:	490d      	ldr	r1, [pc, #52]	; (8005ce8 <_malloc_trim_r+0xa0>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	6053      	str	r3, [r2, #4]
 8005cbc:	1a40      	subs	r0, r0, r1
 8005cbe:	490b      	ldr	r1, [pc, #44]	; (8005cec <_malloc_trim_r+0xa4>)
 8005cc0:	6008      	str	r0, [r1, #0]
 8005cc2:	e7da      	b.n	8005c7a <_malloc_trim_r+0x32>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <_malloc_trim_r+0xa4>)
 8005cc8:	1b2d      	subs	r5, r5, r4
 8005cca:	f045 0501 	orr.w	r5, r5, #1
 8005cce:	605d      	str	r5, [r3, #4]
 8005cd0:	6813      	ldr	r3, [r2, #0]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	1b1c      	subs	r4, r3, r4
 8005cd6:	6014      	str	r4, [r2, #0]
 8005cd8:	f7ff ff5c 	bl	8005b94 <__malloc_unlock>
 8005cdc:	2001      	movs	r0, #1
 8005cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000108 	.word	0x20000108
 8005ce8:	20000510 	.word	0x20000510
 8005cec:	2000071c 	.word	0x2000071c
 8005cf0:	00001000 	.word	0x00001000

08005cf4 <_free_r>:
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4688      	mov	r8, r1
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	f000 80ab 	beq.w	8005e58 <_free_r+0x164>
 8005d02:	f7ff ff41 	bl	8005b88 <__malloc_lock>
 8005d06:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005d0a:	4d54      	ldr	r5, [pc, #336]	; (8005e5c <_free_r+0x168>)
 8005d0c:	f022 0001 	bic.w	r0, r2, #1
 8005d10:	f1a8 0308 	sub.w	r3, r8, #8
 8005d14:	181f      	adds	r7, r3, r0
 8005d16:	68a9      	ldr	r1, [r5, #8]
 8005d18:	687e      	ldr	r6, [r7, #4]
 8005d1a:	428f      	cmp	r7, r1
 8005d1c:	f026 0603 	bic.w	r6, r6, #3
 8005d20:	f002 0201 	and.w	r2, r2, #1
 8005d24:	d11b      	bne.n	8005d5e <_free_r+0x6a>
 8005d26:	4430      	add	r0, r6
 8005d28:	b93a      	cbnz	r2, 8005d3a <_free_r+0x46>
 8005d2a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	4410      	add	r0, r2
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	60ca      	str	r2, [r1, #12]
 8005d38:	6091      	str	r1, [r2, #8]
 8005d3a:	f040 0201 	orr.w	r2, r0, #1
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	60ab      	str	r3, [r5, #8]
 8005d42:	4b47      	ldr	r3, [pc, #284]	; (8005e60 <_free_r+0x16c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4298      	cmp	r0, r3
 8005d48:	d304      	bcc.n	8005d54 <_free_r+0x60>
 8005d4a:	4b46      	ldr	r3, [pc, #280]	; (8005e64 <_free_r+0x170>)
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	f7ff ff7a 	bl	8005c48 <_malloc_trim_r>
 8005d54:	4620      	mov	r0, r4
 8005d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5a:	f7ff bf1b 	b.w	8005b94 <__malloc_unlock>
 8005d5e:	607e      	str	r6, [r7, #4]
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d139      	bne.n	8005dd8 <_free_r+0xe4>
 8005d64:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005d68:	f105 0e08 	add.w	lr, r5, #8
 8005d6c:	1a5b      	subs	r3, r3, r1
 8005d6e:	4408      	add	r0, r1
 8005d70:	6899      	ldr	r1, [r3, #8]
 8005d72:	4571      	cmp	r1, lr
 8005d74:	d032      	beq.n	8005ddc <_free_r+0xe8>
 8005d76:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005d7a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005d7e:	f8ce 1008 	str.w	r1, [lr, #8]
 8005d82:	19b9      	adds	r1, r7, r6
 8005d84:	6849      	ldr	r1, [r1, #4]
 8005d86:	07c9      	lsls	r1, r1, #31
 8005d88:	d40a      	bmi.n	8005da0 <_free_r+0xac>
 8005d8a:	4430      	add	r0, r6
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	bb3a      	cbnz	r2, 8005de0 <_free_r+0xec>
 8005d90:	4e35      	ldr	r6, [pc, #212]	; (8005e68 <_free_r+0x174>)
 8005d92:	42b1      	cmp	r1, r6
 8005d94:	d124      	bne.n	8005de0 <_free_r+0xec>
 8005d96:	2201      	movs	r2, #1
 8005d98:	616b      	str	r3, [r5, #20]
 8005d9a:	612b      	str	r3, [r5, #16]
 8005d9c:	60d9      	str	r1, [r3, #12]
 8005d9e:	6099      	str	r1, [r3, #8]
 8005da0:	f040 0101 	orr.w	r1, r0, #1
 8005da4:	6059      	str	r1, [r3, #4]
 8005da6:	5018      	str	r0, [r3, r0]
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d1d3      	bne.n	8005d54 <_free_r+0x60>
 8005dac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005db0:	d21a      	bcs.n	8005de8 <_free_r+0xf4>
 8005db2:	2201      	movs	r2, #1
 8005db4:	08c0      	lsrs	r0, r0, #3
 8005db6:	1081      	asrs	r1, r0, #2
 8005db8:	408a      	lsls	r2, r1
 8005dba:	6869      	ldr	r1, [r5, #4]
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	606a      	str	r2, [r5, #4]
 8005dc2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005dc6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005dca:	3a08      	subs	r2, #8
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	6099      	str	r1, [r3, #8]
 8005dd0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005dd4:	60cb      	str	r3, [r1, #12]
 8005dd6:	e7bd      	b.n	8005d54 <_free_r+0x60>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	e7d2      	b.n	8005d82 <_free_r+0x8e>
 8005ddc:	2201      	movs	r2, #1
 8005dde:	e7d0      	b.n	8005d82 <_free_r+0x8e>
 8005de0:	68fe      	ldr	r6, [r7, #12]
 8005de2:	60ce      	str	r6, [r1, #12]
 8005de4:	60b1      	str	r1, [r6, #8]
 8005de6:	e7db      	b.n	8005da0 <_free_r+0xac>
 8005de8:	0a42      	lsrs	r2, r0, #9
 8005dea:	2a04      	cmp	r2, #4
 8005dec:	d813      	bhi.n	8005e16 <_free_r+0x122>
 8005dee:	0982      	lsrs	r2, r0, #6
 8005df0:	3238      	adds	r2, #56	; 0x38
 8005df2:	1c51      	adds	r1, r2, #1
 8005df4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005df8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005dfc:	428e      	cmp	r6, r1
 8005dfe:	d124      	bne.n	8005e4a <_free_r+0x156>
 8005e00:	2001      	movs	r0, #1
 8005e02:	1092      	asrs	r2, r2, #2
 8005e04:	fa00 f202 	lsl.w	r2, r0, r2
 8005e08:	6868      	ldr	r0, [r5, #4]
 8005e0a:	4302      	orrs	r2, r0
 8005e0c:	606a      	str	r2, [r5, #4]
 8005e0e:	60de      	str	r6, [r3, #12]
 8005e10:	6099      	str	r1, [r3, #8]
 8005e12:	60b3      	str	r3, [r6, #8]
 8005e14:	e7de      	b.n	8005dd4 <_free_r+0xe0>
 8005e16:	2a14      	cmp	r2, #20
 8005e18:	d801      	bhi.n	8005e1e <_free_r+0x12a>
 8005e1a:	325b      	adds	r2, #91	; 0x5b
 8005e1c:	e7e9      	b.n	8005df2 <_free_r+0xfe>
 8005e1e:	2a54      	cmp	r2, #84	; 0x54
 8005e20:	d802      	bhi.n	8005e28 <_free_r+0x134>
 8005e22:	0b02      	lsrs	r2, r0, #12
 8005e24:	326e      	adds	r2, #110	; 0x6e
 8005e26:	e7e4      	b.n	8005df2 <_free_r+0xfe>
 8005e28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005e2c:	d802      	bhi.n	8005e34 <_free_r+0x140>
 8005e2e:	0bc2      	lsrs	r2, r0, #15
 8005e30:	3277      	adds	r2, #119	; 0x77
 8005e32:	e7de      	b.n	8005df2 <_free_r+0xfe>
 8005e34:	f240 5154 	movw	r1, #1364	; 0x554
 8005e38:	428a      	cmp	r2, r1
 8005e3a:	bf9a      	itte	ls
 8005e3c:	0c82      	lsrls	r2, r0, #18
 8005e3e:	327c      	addls	r2, #124	; 0x7c
 8005e40:	227e      	movhi	r2, #126	; 0x7e
 8005e42:	e7d6      	b.n	8005df2 <_free_r+0xfe>
 8005e44:	6889      	ldr	r1, [r1, #8]
 8005e46:	428e      	cmp	r6, r1
 8005e48:	d004      	beq.n	8005e54 <_free_r+0x160>
 8005e4a:	684a      	ldr	r2, [r1, #4]
 8005e4c:	f022 0203 	bic.w	r2, r2, #3
 8005e50:	4290      	cmp	r0, r2
 8005e52:	d3f7      	bcc.n	8005e44 <_free_r+0x150>
 8005e54:	68ce      	ldr	r6, [r1, #12]
 8005e56:	e7da      	b.n	8005e0e <_free_r+0x11a>
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	20000108 	.word	0x20000108
 8005e60:	20000514 	.word	0x20000514
 8005e64:	2000074c 	.word	0x2000074c
 8005e68:	20000110 	.word	0x20000110

08005e6c <__retarget_lock_acquire_recursive>:
 8005e6c:	4770      	bx	lr

08005e6e <__retarget_lock_release_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <memcpy>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	1e43      	subs	r3, r0, #1
 8005e74:	440a      	add	r2, r1
 8005e76:	4291      	cmp	r1, r2
 8005e78:	d100      	bne.n	8005e7c <memcpy+0xc>
 8005e7a:	bd10      	pop	{r4, pc}
 8005e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e84:	e7f7      	b.n	8005e76 <memcpy+0x6>
	...

08005e88 <_getpid>:
 8005e88:	2258      	movs	r2, #88	; 0x58
 8005e8a:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <_getpid+0xc>)
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	4770      	bx	lr
 8005e94:	20000764 	.word	0x20000764

08005e98 <_kill>:
 8005e98:	2258      	movs	r2, #88	; 0x58
 8005e9a:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <_kill+0xc>)
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	4770      	bx	lr
 8005ea4:	20000764 	.word	0x20000764

08005ea8 <_sbrk>:
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <_sbrk+0x14>)
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	b909      	cbnz	r1, 8005eb4 <_sbrk+0xc>
 8005eb0:	4903      	ldr	r1, [pc, #12]	; (8005ec0 <_sbrk+0x18>)
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	4402      	add	r2, r0
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	4770      	bx	lr
 8005ebc:	20000750 	.word	0x20000750
 8005ec0:	20000768 	.word	0x20000768

08005ec4 <_exit>:
 8005ec4:	e7fe      	b.n	8005ec4 <_exit>
	...

08005ec8 <_init>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr

08005ed4 <_fini>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr
