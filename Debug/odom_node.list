
odom_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000854  20000000  080051c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000294  20000854  08005a18  00020854  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000ae8  08005a18  00020ae8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001da2c  00000000  00000000  0002087d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003deb  00000000  00000000  0003e2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b83  00000000  00000000  00042094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b48  00000000  00000000  00048c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  00049760  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001ae50  00000000  00000000  0004a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c455  00000000  00000000  00065350  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00081292  00000000  00000000  000717a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000f2a37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d28  00000000  00000000  000f2ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000003c  00000000  00000000  000f57dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  000f5818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000854 	.word	0x20000854
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d98 	.word	0x08004d98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000858 	.word	0x20000858
 8000148:	08004d98 	.word	0x08004d98

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpun>:
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d108      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_InitTick+0x3c>)
{
 8000fac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fae:	7818      	ldrb	r0, [r3, #0]
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_InitTick+0x40>)
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc0:	f000 fa0e 	bl	80013e0 <HAL_SYSTICK_Config>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	b958      	cbnz	r0, 8000fe0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	2d0f      	cmp	r5, #15
 8000fca:	d809      	bhi.n	8000fe0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f000 f9c4 	bl	8001360 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4620      	mov	r0, r4
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_InitTick+0x44>)
 8000fdc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	e7fc      	b.n	8000fde <HAL_InitTick+0x36>
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x20>)
{
 8000ff2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	f000 f99d 	bl	800133c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ffd0 	bl	8000fa8 <HAL_InitTick>
  HAL_MspInit();
 8001008:	f002 f9cc 	bl	80033a4 <HAL_MspInit>
}
 800100c:	2000      	movs	r0, #0
 800100e:	bd08      	pop	{r3, pc}
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x10>)
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_IncTick+0x14>)
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	440b      	add	r3, r1
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000ad4 	.word	0x20000ad4
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <HAL_GetTick+0x8>)
 800102e:	6818      	ldr	r0, [r3, #0]
}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000ad4 	.word	0x20000ad4

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff6 	bl	800102c <HAL_GetTick>
 8001040:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001044:	bf1e      	ittt	ne
 8001046:	4b04      	ldrne	r3, [pc, #16]	; (8001058 <HAL_Delay+0x20>)
 8001048:	781b      	ldrbne	r3, [r3, #0]
 800104a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	42a0      	cmp	r0, r4
 8001054:	d3fa      	bcc.n	800104c <HAL_Delay+0x14>
  {
  }
}
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000000 	.word	0x20000000

0800105c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800105c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800105e:	4604      	mov	r4, r0
 8001060:	2800      	cmp	r0, #0
 8001062:	d06e      	beq.n	8001142 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001064:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001068:	b90b      	cbnz	r3, 800106e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800106a:	f002 f9bd 	bl	80033e8 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	f023 0302 	bic.w	r3, r3, #2
 8001076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001078:	f7ff ffd8 	bl	800102c <HAL_GetTick>
 800107c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	0791      	lsls	r1, r2, #30
 8001084:	d451      	bmi.n	800112a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff ffcd 	bl	800102c <HAL_GetTick>
 8001092:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	07d2      	lsls	r2, r2, #31
 800109a:	d554      	bpl.n	8001146 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800109c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800109e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	bf0c      	ite	eq
 80010a6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010aa:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80010ae:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80010b0:	7e62      	ldrb	r2, [r4, #25]
 80010b2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	bf0c      	ite	eq
 80010b8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010bc:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010c0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010c2:	7ea2      	ldrb	r2, [r4, #26]
 80010c4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	bf0c      	ite	eq
 80010ca:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ce:	f022 0220 	bicne.w	r2, r2, #32
 80010d2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010d4:	7ee2      	ldrb	r2, [r4, #27]
 80010d6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	bf0c      	ite	eq
 80010dc:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e0:	f042 0210 	orrne.w	r2, r2, #16
 80010e4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010e6:	7f22      	ldrb	r2, [r4, #28]
 80010e8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	bf0c      	ite	eq
 80010ee:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f2:	f022 0208 	bicne.w	r2, r2, #8
 80010f6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010f8:	7f62      	ldrb	r2, [r4, #29]
 80010fa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	bf0c      	ite	eq
 8001100:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001104:	f022 0204 	bicne.w	r2, r2, #4
 8001108:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800110a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800110e:	430a      	orrs	r2, r1
 8001110:	6921      	ldr	r1, [r4, #16]
 8001112:	430a      	orrs	r2, r1
 8001114:	6961      	ldr	r1, [r4, #20]
 8001116:	430a      	orrs	r2, r1
 8001118:	6861      	ldr	r1, [r4, #4]
 800111a:	3901      	subs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001120:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001122:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001124:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001128:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800112a:	f7ff ff7f 	bl	800102c <HAL_GetTick>
 800112e:	1b40      	subs	r0, r0, r5
 8001130:	280a      	cmp	r0, #10
 8001132:	d9a4      	bls.n	800107e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800113c:	2305      	movs	r3, #5
 800113e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e7f0      	b.n	8001128 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001146:	f7ff ff71 	bl	800102c <HAL_GetTick>
 800114a:	1b40      	subs	r0, r0, r5
 800114c:	280a      	cmp	r0, #10
 800114e:	d9a1      	bls.n	8001094 <HAL_CAN_Init+0x38>
 8001150:	e7f0      	b.n	8001134 <HAL_CAN_Init+0xd8>

08001152 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001152:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001156:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001158:	3b01      	subs	r3, #1
 800115a:	2b01      	cmp	r3, #1
 800115c:	d85f      	bhi.n	800121e <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800115e:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001160:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800116e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001170:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001174:	f002 001f 	and.w	r0, r2, #31
 8001178:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800117c:	43c4      	mvns	r4, r0
 800117e:	4025      	ands	r5, r4
 8001180:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001184:	69cd      	ldr	r5, [r1, #28]
 8001186:	bb85      	cbnz	r5, 80011ea <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001188:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800118c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800118e:	4025      	ands	r5, r4
 8001190:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001194:	888d      	ldrh	r5, [r1, #4]
 8001196:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800119a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119e:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011a4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011aa:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ae:	698a      	ldr	r2, [r1, #24]
 80011b0:	bb6a      	cbnz	r2, 800120e <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011b6:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011bc:	690a      	ldr	r2, [r1, #16]
 80011be:	bb52      	cbnz	r2, 8001216 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011c4:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ca:	6a0a      	ldr	r2, [r1, #32]
 80011cc:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ce:	bf02      	ittt	eq
 80011d0:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80011d4:	4310      	orreq	r0, r2
 80011d6:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 80011da:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011ea:	2d01      	cmp	r5, #1
 80011ec:	d1df      	bne.n	80011ae <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011ee:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f2:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011f4:	4305      	orrs	r5, r0
 80011f6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011fa:	888d      	ldrh	r5, [r1, #4]
 80011fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001200:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001208:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800120a:	898d      	ldrh	r5, [r1, #12]
 800120c:	e7cb      	b.n	80011a6 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800120e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001212:	4302      	orrs	r2, r0
 8001214:	e7d0      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001216:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800121a:	4302      	orrs	r2, r0
 800121c:	e7d3      	b.n	80011c6 <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800121e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e7de      	b.n	80011e8 <HAL_CAN_ConfigFilter+0x96>

0800122a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800122a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800122c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001230:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001232:	2b01      	cmp	r3, #1
 8001234:	d11f      	bne.n	8001276 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001236:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001238:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800123a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001246:	f7ff fef1 	bl	800102c <HAL_GetTick>
 800124a:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	6858      	ldr	r0, [r3, #4]
 8001250:	f010 0001 	ands.w	r0, r0, #1
 8001254:	d101      	bne.n	800125a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800125a:	f7ff fee7 	bl	800102c <HAL_GetTick>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	280a      	cmp	r0, #10
 8001262:	d9f3      	bls.n	800124c <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800126c:	2305      	movs	r3, #5
 800126e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
 8001274:	e7f0      	b.n	8001258 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001276:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800127c:	6243      	str	r3, [r0, #36]	; 0x24
 800127e:	e7f8      	b.n	8001272 <HAL_CAN_Start+0x48>

08001280 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001282:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001286:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001288:	3d01      	subs	r5, #1
 800128a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800128c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800128e:	d840      	bhi.n	8001312 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001290:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001294:	d039      	beq.n	800130a <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001296:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800129a:	2c03      	cmp	r4, #3
 800129c:	f04f 0501 	mov.w	r5, #1
 80012a0:	d105      	bne.n	80012ae <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e027      	b.n	80012fe <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012ae:	40a5      	lsls	r5, r4
 80012b0:	601d      	str	r5, [r3, #0]
 80012b2:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80012b6:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 80012ba:	bb08      	cbnz	r0, 8001300 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012bc:	6808      	ldr	r0, [r1, #0]
 80012be:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c6:	6908      	ldr	r0, [r1, #16]
 80012c8:	0124      	lsls	r4, r4, #4
 80012ca:	1933      	adds	r3, r6, r4
 80012cc:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 80012d0:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d2:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012d4:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d6:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d8:	bf02      	ittt	eq
 80012da:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 80012de:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80012e2:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012e6:	6851      	ldr	r1, [r2, #4]
 80012e8:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001300:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001302:	4338      	orrs	r0, r7
 8001304:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001308:	e7db      	b.n	80012c2 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800130a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	e7ca      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001312:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	e7c6      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x28>

0800131a <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800131a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800131e:	3b01      	subs	r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d805      	bhi.n	8001330 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001324:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001326:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001328:	6953      	ldr	r3, [r2, #20]
 800132a:	4319      	orrs	r1, r3
 800132c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800132e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2001      	movs	r0, #1
  }
}
 800133a:	4770      	bx	lr

0800133c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800133e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001342:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001356:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001358:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b570      	push	{r4, r5, r6, lr}
 8001364:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001366:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136e:	f1c4 0507 	rsb	r5, r4, #7
 8001372:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001374:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	bf28      	it	cs
 800137a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137c:	2b06      	cmp	r3, #6
 800137e:	bf98      	it	ls
 8001380:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	bf88      	it	hi
 8001388:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138a:	ea21 0303 	bic.w	r3, r1, r3
 800138e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	fa06 f404 	lsl.w	r4, r6, r4
 8001394:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8001398:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	bfa8      	it	ge
 80013a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80013a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	bfb8      	it	lt
 80013aa:	4a06      	ldrlt	r2, [pc, #24]	; (80013c4 <HAL_NVIC_SetPriority+0x64>)
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	bfb5      	itete	lt
 80013b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	e000ed14 	.word	0xe000ed14

080013c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013c8:	2301      	movs	r3, #1
 80013ca:	0942      	lsrs	r2, r0, #5
 80013cc:	f000 001f 	and.w	r0, r0, #31
 80013d0:	fa03 f000 	lsl.w	r0, r3, r0
 80013d4:	4b01      	ldr	r3, [pc, #4]	; (80013dc <HAL_NVIC_EnableIRQ+0x14>)
 80013d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	3801      	subs	r0, #1
 80013e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013e6:	d20a      	bcs.n	80013fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800140c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001410:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001416:	2304      	movs	r3, #4
 8001418:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800141a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800141c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	6803      	ldr	r3, [r0, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f022 020e 	bic.w	r2, r2, #14
 8001426:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_DMA_Abort_IT+0x88>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_DMA_Abort_IT+0x6a>
 8001436:	3214      	adds	r2, #20
 8001438:	4293      	cmp	r3, r2
 800143a:	d01e      	beq.n	800147a <HAL_DMA_Abort_IT+0x6e>
 800143c:	3214      	adds	r2, #20
 800143e:	4293      	cmp	r3, r2
 8001440:	d01d      	beq.n	800147e <HAL_DMA_Abort_IT+0x72>
 8001442:	3214      	adds	r2, #20
 8001444:	4293      	cmp	r3, r2
 8001446:	d01d      	beq.n	8001484 <HAL_DMA_Abort_IT+0x78>
 8001448:	3214      	adds	r2, #20
 800144a:	4293      	cmp	r3, r2
 800144c:	d01d      	beq.n	800148a <HAL_DMA_Abort_IT+0x7e>
 800144e:	3214      	adds	r2, #20
 8001450:	4293      	cmp	r3, r2
 8001452:	bf0c      	ite	eq
 8001454:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001458:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800145e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001460:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001462:	2301      	movs	r3, #1
 8001464:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001468:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800146a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800146e:	b17b      	cbz	r3, 8001490 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001470:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001472:	4620      	mov	r0, r4
 8001474:	e7d2      	b.n	800141c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001476:	2301      	movs	r3, #1
 8001478:	e7f0      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800147a:	2310      	movs	r3, #16
 800147c:	e7ee      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	e7eb      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	e7e8      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148e:	e7e5      	b.n	800145c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	4618      	mov	r0, r3
 8001492:	e7c3      	b.n	800141c <HAL_DMA_Abort_IT+0x10>
 8001494:	40020008 	.word	0x40020008
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014a0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	4616      	mov	r6, r2
 80014a4:	4b65      	ldr	r3, [pc, #404]	; (800163c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014a6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800164c <HAL_GPIO_Init+0x1b0>
 80014aa:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001650 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80014ae:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80014b4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80014bc:	45a0      	cmp	r8, r4
 80014be:	d17e      	bne.n	80015be <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80014c0:	684d      	ldr	r5, [r1, #4]
 80014c2:	2d12      	cmp	r5, #18
 80014c4:	f000 80ae 	beq.w	8001624 <HAL_GPIO_Init+0x188>
 80014c8:	f200 8087 	bhi.w	80015da <HAL_GPIO_Init+0x13e>
 80014cc:	2d02      	cmp	r5, #2
 80014ce:	f000 80a6 	beq.w	800161e <HAL_GPIO_Init+0x182>
 80014d2:	d87b      	bhi.n	80015cc <HAL_GPIO_Init+0x130>
 80014d4:	2d00      	cmp	r5, #0
 80014d6:	f000 808d 	beq.w	80015f4 <HAL_GPIO_Init+0x158>
 80014da:	2d01      	cmp	r5, #1
 80014dc:	f000 809d 	beq.w	800161a <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	2cff      	cmp	r4, #255	; 0xff
 80014e6:	bf93      	iteet	ls
 80014e8:	4682      	movls	sl, r0
 80014ea:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80014ee:	3d08      	subhi	r5, #8
 80014f0:	f8d0 b000 	ldrls.w	fp, [r0]
 80014f4:	bf92      	itee	ls
 80014f6:	00b5      	lslls	r5, r6, #2
 80014f8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80014fc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fe:	fa09 f805 	lsl.w	r8, r9, r5
 8001502:	ea2b 0808 	bic.w	r8, fp, r8
 8001506:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150a:	bf88      	it	hi
 800150c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001510:	ea48 0505 	orr.w	r5, r8, r5
 8001514:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001518:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800151c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001520:	d04d      	beq.n	80015be <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4f47      	ldr	r7, [pc, #284]	; (8001640 <HAL_GPIO_Init+0x1a4>)
 8001524:	f026 0803 	bic.w	r8, r6, #3
 8001528:	69bd      	ldr	r5, [r7, #24]
 800152a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800152e:	f045 0501 	orr.w	r5, r5, #1
 8001532:	61bd      	str	r5, [r7, #24]
 8001534:	69bd      	ldr	r5, [r7, #24]
 8001536:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800153a:	f005 0501 	and.w	r5, r5, #1
 800153e:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001540:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001546:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800154a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800154e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001552:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	4d3b      	ldr	r5, [pc, #236]	; (8001644 <HAL_GPIO_Init+0x1a8>)
 8001558:	42a8      	cmp	r0, r5
 800155a:	d068      	beq.n	800162e <HAL_GPIO_Init+0x192>
 800155c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001560:	42a8      	cmp	r0, r5
 8001562:	d066      	beq.n	8001632 <HAL_GPIO_Init+0x196>
 8001564:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001568:	42a8      	cmp	r0, r5
 800156a:	d064      	beq.n	8001636 <HAL_GPIO_Init+0x19a>
 800156c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001570:	42a8      	cmp	r0, r5
 8001572:	bf0c      	ite	eq
 8001574:	2503      	moveq	r5, #3
 8001576:	2504      	movne	r5, #4
 8001578:	fa05 f50b 	lsl.w	r5, r5, fp
 800157c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001580:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001584:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001586:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800158a:	bf14      	ite	ne
 800158c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158e:	43a5      	biceq	r5, r4
 8001590:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001592:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001598:	bf14      	ite	ne
 800159a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159c:	43a5      	biceq	r5, r4
 800159e:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a0:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a6:	bf14      	ite	ne
 80015a8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015aa:	43a5      	biceq	r5, r4
 80015ac:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ae:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b4:	bf14      	ite	ne
 80015b6:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b8:	ea25 0404 	biceq.w	r4, r5, r4
 80015bc:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015be:	3601      	adds	r6, #1
 80015c0:	2e10      	cmp	r6, #16
 80015c2:	f47f af74 	bne.w	80014ae <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80015c6:	b003      	add	sp, #12
 80015c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80015cc:	2d03      	cmp	r5, #3
 80015ce:	d022      	beq.n	8001616 <HAL_GPIO_Init+0x17a>
 80015d0:	2d11      	cmp	r5, #17
 80015d2:	d185      	bne.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d4:	68ca      	ldr	r2, [r1, #12]
 80015d6:	3204      	adds	r2, #4
          break;
 80015d8:	e782      	b.n	80014e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80015da:	4f1b      	ldr	r7, [pc, #108]	; (8001648 <HAL_GPIO_Init+0x1ac>)
 80015dc:	42bd      	cmp	r5, r7
 80015de:	d009      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 80015e0:	d812      	bhi.n	8001608 <HAL_GPIO_Init+0x16c>
 80015e2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001654 <HAL_GPIO_Init+0x1b8>
 80015e6:	454d      	cmp	r5, r9
 80015e8:	d004      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 80015ea:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80015ee:	454d      	cmp	r5, r9
 80015f0:	f47f af76 	bne.w	80014e0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f4:	688a      	ldr	r2, [r1, #8]
 80015f6:	b1c2      	cbz	r2, 800162a <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80015fa:	bf0c      	ite	eq
 80015fc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001600:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2208      	movs	r2, #8
 8001606:	e76b      	b.n	80014e0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001608:	4565      	cmp	r5, ip
 800160a:	d0f3      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 800160c:	4575      	cmp	r5, lr
 800160e:	d0f1      	beq.n	80015f4 <HAL_GPIO_Init+0x158>
 8001610:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001658 <HAL_GPIO_Init+0x1bc>
 8001614:	e7eb      	b.n	80015ee <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001616:	2200      	movs	r2, #0
 8001618:	e762      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800161a:	68ca      	ldr	r2, [r1, #12]
          break;
 800161c:	e760      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161e:	68ca      	ldr	r2, [r1, #12]
 8001620:	3208      	adds	r2, #8
          break;
 8001622:	e75d      	b.n	80014e0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001624:	68ca      	ldr	r2, [r1, #12]
 8001626:	320c      	adds	r2, #12
          break;
 8001628:	e75a      	b.n	80014e0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162a:	2204      	movs	r2, #4
 800162c:	e758      	b.n	80014e0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162e:	2500      	movs	r5, #0
 8001630:	e7a2      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 8001632:	2501      	movs	r5, #1
 8001634:	e7a0      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 8001636:	2502      	movs	r5, #2
 8001638:	e79e      	b.n	8001578 <HAL_GPIO_Init+0xdc>
 800163a:	bf00      	nop
 800163c:	40010400 	.word	0x40010400
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	10210000 	.word	0x10210000
 800164c:	10310000 	.word	0x10310000
 8001650:	10320000 	.word	0x10320000
 8001654:	10110000 	.word	0x10110000
 8001658:	10220000 	.word	0x10220000

0800165c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	b10a      	cbz	r2, 8001662 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	6101      	str	r1, [r0, #16]
  }
}
 8001660:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	0409      	lsls	r1, r1, #16
 8001664:	e7fb      	b.n	800165e <HAL_GPIO_WritePin+0x2>
	...

08001668 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001668:	6803      	ldr	r3, [r0, #0]
{
 800166a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	07db      	lsls	r3, r3, #31
{
 8001670:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	d410      	bmi.n	8001696 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	079f      	lsls	r7, r3, #30
 8001678:	d45e      	bmi.n	8001738 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	0719      	lsls	r1, r3, #28
 800167e:	f100 8095 	bmi.w	80017ac <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	075a      	lsls	r2, r3, #29
 8001686:	f100 80bf 	bmi.w	8001808 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	69ea      	ldr	r2, [r5, #28]
 800168c:	2a00      	cmp	r2, #0
 800168e:	f040 812d 	bne.w	80018ec <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001692:	2000      	movs	r0, #0
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001696:	4c90      	ldr	r4, [pc, #576]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d007      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5e>
 80016ac:	6863      	ldr	r3, [r4, #4]
 80016ae:	03de      	lsls	r6, r3, #15
 80016b0:	d509      	bpl.n	80016c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	039c      	lsls	r4, r3, #14
 80016b6:	d5dd      	bpl.n	8001674 <HAL_RCC_OscConfig+0xc>
 80016b8:	686b      	ldr	r3, [r5, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1da      	bne.n	8001674 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	686b      	ldr	r3, [r5, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d110      	bne.n	80016f0 <HAL_RCC_OscConfig+0x88>
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016d6:	f7ff fca9 	bl	800102c <HAL_GetTick>
 80016da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	0398      	lsls	r0, r3, #14
 80016e0:	d4c8      	bmi.n	8001674 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fca3 	bl	800102c <HAL_GetTick>
 80016e6:	1b80      	subs	r0, r0, r6
 80016e8:	2864      	cmp	r0, #100	; 0x64
 80016ea:	d9f7      	bls.n	80016dc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80016ec:	2003      	movs	r0, #3
 80016ee:	e7e7      	b.n	80016c0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	b99b      	cbnz	r3, 800171a <HAL_RCC_OscConfig+0xb2>
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6023      	str	r3, [r4, #0]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001702:	f7ff fc93 	bl	800102c <HAL_GetTick>
 8001706:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	0399      	lsls	r1, r3, #14
 800170c:	d5b2      	bpl.n	8001674 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170e:	f7ff fc8d 	bl	800102c <HAL_GetTick>
 8001712:	1b80      	subs	r0, r0, r6
 8001714:	2864      	cmp	r0, #100	; 0x64
 8001716:	d9f7      	bls.n	8001708 <HAL_RCC_OscConfig+0xa0>
 8001718:	e7e8      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	d103      	bne.n	800172a <HAL_RCC_OscConfig+0xc2>
 8001722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001726:	6023      	str	r3, [r4, #0]
 8001728:	e7d1      	b.n	80016ce <HAL_RCC_OscConfig+0x66>
 800172a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172e:	6023      	str	r3, [r4, #0]
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	e7cd      	b.n	80016d4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001738:	4c67      	ldr	r4, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	f013 0f0c 	tst.w	r3, #12
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d110      	bne.n	800176e <HAL_RCC_OscConfig+0x106>
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	03da      	lsls	r2, r3, #15
 8001750:	d40d      	bmi.n	800176e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	079b      	lsls	r3, r3, #30
 8001756:	d502      	bpl.n	800175e <HAL_RCC_OscConfig+0xf6>
 8001758:	692b      	ldr	r3, [r5, #16]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d1af      	bne.n	80016be <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	696a      	ldr	r2, [r5, #20]
 8001762:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001766:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	e785      	b.n	800167a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176e:	692a      	ldr	r2, [r5, #16]
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x274>)
 8001772:	b16a      	cbz	r2, 8001790 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001778:	f7ff fc58 	bl	800102c <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	079f      	lsls	r7, r3, #30
 8001782:	d4ec      	bmi.n	800175e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fc52 	bl	800102c <HAL_GetTick>
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	2802      	cmp	r0, #2
 800178c:	d9f7      	bls.n	800177e <HAL_RCC_OscConfig+0x116>
 800178e:	e7ad      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001790:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001792:	f7ff fc4b 	bl	800102c <HAL_GetTick>
 8001796:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	0798      	lsls	r0, r3, #30
 800179c:	f57f af6d 	bpl.w	800167a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc44 	bl	800102c <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9f6      	bls.n	8001798 <HAL_RCC_OscConfig+0x130>
 80017aa:	e79f      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ac:	69aa      	ldr	r2, [r5, #24]
 80017ae:	4c4a      	ldr	r4, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_OscConfig+0x278>)
 80017b2:	b1da      	cbz	r2, 80017ec <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017b8:	f7ff fc38 	bl	800102c <HAL_GetTick>
 80017bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017c0:	079b      	lsls	r3, r3, #30
 80017c2:	d50d      	bpl.n	80017e0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017d4:	9b01      	ldr	r3, [sp, #4]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_RCC_OscConfig+0x16a>
 80017de:	e750      	b.n	8001682 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc24 	bl	800102c <HAL_GetTick>
 80017e4:	1b80      	subs	r0, r0, r6
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9e9      	bls.n	80017be <HAL_RCC_OscConfig+0x156>
 80017ea:	e77f      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80017ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017ee:	f7ff fc1d 	bl	800102c <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f6:	079f      	lsls	r7, r3, #30
 80017f8:	f57f af43 	bpl.w	8001682 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fc16 	bl	800102c <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f6      	bls.n	80017f4 <HAL_RCC_OscConfig+0x18c>
 8001806:	e771      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001808:	4c33      	ldr	r4, [pc, #204]	; (80018d8 <HAL_RCC_OscConfig+0x270>)
 800180a:	69e3      	ldr	r3, [r4, #28]
 800180c:	00d8      	lsls	r0, r3, #3
 800180e:	d424      	bmi.n	800185a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001810:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	69e3      	ldr	r3, [r4, #28]
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	61e3      	str	r3, [r4, #28]
 800181a:	69e3      	ldr	r3, [r4, #28]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4e30      	ldr	r6, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001826:	6833      	ldr	r3, [r6, #0]
 8001828:	05d9      	lsls	r1, r3, #23
 800182a:	d518      	bpl.n	800185e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	68eb      	ldr	r3, [r5, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d126      	bne.n	8001880 <HAL_RCC_OscConfig+0x218>
 8001832:	6a23      	ldr	r3, [r4, #32]
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800183a:	f7ff fbf7 	bl	800102c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001842:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	6a23      	ldr	r3, [r4, #32]
 8001846:	079b      	lsls	r3, r3, #30
 8001848:	d53f      	bpl.n	80018ca <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800184a:	2f00      	cmp	r7, #0
 800184c:	f43f af1d 	beq.w	800168a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	69e3      	ldr	r3, [r4, #28]
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	61e3      	str	r3, [r4, #28]
 8001858:	e717      	b.n	800168a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2700      	movs	r7, #0
 800185c:	e7e2      	b.n	8001824 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	6833      	ldr	r3, [r6, #0]
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001866:	f7ff fbe1 	bl	800102c <HAL_GetTick>
 800186a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	6833      	ldr	r3, [r6, #0]
 800186e:	05da      	lsls	r2, r3, #23
 8001870:	d4dc      	bmi.n	800182c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fbdb 	bl	800102c <HAL_GetTick>
 8001876:	eba0 0008 	sub.w	r0, r0, r8
 800187a:	2864      	cmp	r0, #100	; 0x64
 800187c:	d9f6      	bls.n	800186c <HAL_RCC_OscConfig+0x204>
 800187e:	e735      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	b9ab      	cbnz	r3, 80018ae <HAL_RCC_OscConfig+0x246>
 8001882:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6223      	str	r3, [r4, #32]
 800188e:	6a23      	ldr	r3, [r4, #32]
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001896:	f7ff fbc9 	bl	800102c <HAL_GetTick>
 800189a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	6a23      	ldr	r3, [r4, #32]
 800189e:	0798      	lsls	r0, r3, #30
 80018a0:	d5d3      	bpl.n	800184a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fbc3 	bl	800102c <HAL_GetTick>
 80018a6:	1b80      	subs	r0, r0, r6
 80018a8:	4540      	cmp	r0, r8
 80018aa:	d9f7      	bls.n	800189c <HAL_RCC_OscConfig+0x234>
 80018ac:	e71e      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	6a23      	ldr	r3, [r4, #32]
 80018b2:	d103      	bne.n	80018bc <HAL_RCC_OscConfig+0x254>
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6223      	str	r3, [r4, #32]
 80018ba:	e7ba      	b.n	8001832 <HAL_RCC_OscConfig+0x1ca>
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6223      	str	r3, [r4, #32]
 80018c2:	6a23      	ldr	r3, [r4, #32]
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	e7b6      	b.n	8001838 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fbaf 	bl	800102c <HAL_GetTick>
 80018ce:	eba0 0008 	sub.w	r0, r0, r8
 80018d2:	42b0      	cmp	r0, r6
 80018d4:	d9b6      	bls.n	8001844 <HAL_RCC_OscConfig+0x1dc>
 80018d6:	e709      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	42420000 	.word	0x42420000
 80018e0:	42420480 	.word	0x42420480
 80018e4:	20000008 	.word	0x20000008
 80018e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4c22      	ldr	r4, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x310>)
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	f43f aee2 	beq.w	80016be <HAL_RCC_OscConfig+0x56>
 80018fa:	2300      	movs	r3, #0
 80018fc:	4e1f      	ldr	r6, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001900:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	d12b      	bne.n	800195c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001904:	f7ff fb92 	bl	800102c <HAL_GetTick>
 8001908:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	0199      	lsls	r1, r3, #6
 800190e:	d41f      	bmi.n	8001950 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001910:	6a2b      	ldr	r3, [r5, #32]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001918:	6862      	ldr	r2, [r4, #4]
 800191a:	68a9      	ldr	r1, [r5, #8]
 800191c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001920:	430a      	orrs	r2, r1
 8001922:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001926:	6862      	ldr	r2, [r4, #4]
 8001928:	430b      	orrs	r3, r1
 800192a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800192e:	4313      	orrs	r3, r2
 8001930:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001932:	2301      	movs	r3, #1
 8001934:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001936:	f7ff fb79 	bl	800102c <HAL_GetTick>
 800193a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	019a      	lsls	r2, r3, #6
 8001940:	f53f aea7 	bmi.w	8001692 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb72 	bl	800102c <HAL_GetTick>
 8001948:	1b40      	subs	r0, r0, r5
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x2d4>
 800194e:	e6cd      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fb6c 	bl	800102c <HAL_GetTick>
 8001954:	1bc0      	subs	r0, r0, r7
 8001956:	2802      	cmp	r0, #2
 8001958:	d9d7      	bls.n	800190a <HAL_RCC_OscConfig+0x2a2>
 800195a:	e6c7      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800195c:	f7ff fb66 	bl	800102c <HAL_GetTick>
 8001960:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	f57f ae94 	bpl.w	8001692 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb5f 	bl	800102c <HAL_GetTick>
 800196e:	1b40      	subs	r0, r0, r5
 8001970:	2802      	cmp	r0, #2
 8001972:	d9f6      	bls.n	8001962 <HAL_RCC_OscConfig+0x2fa>
 8001974:	e6ba      	b.n	80016ec <HAL_RCC_OscConfig+0x84>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	42420060 	.word	0x42420060

08001980 <HAL_RCC_GetSysClockFreq>:
{
 8001980:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001984:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001986:	ac02      	add	r4, sp, #8
 8001988:	f103 0510 	add.w	r5, r3, #16
 800198c:	4622      	mov	r2, r4
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	6859      	ldr	r1, [r3, #4]
 8001992:	3308      	adds	r3, #8
 8001994:	c203      	stmia	r2!, {r0, r1}
 8001996:	42ab      	cmp	r3, r5
 8001998:	4614      	mov	r4, r2
 800199a:	d1f7      	bne.n	800198c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800199c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80019a0:	4911      	ldr	r1, [pc, #68]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80019a6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019a8:	f003 020c 	and.w	r2, r3, #12
 80019ac:	2a08      	cmp	r2, #8
 80019ae:	d117      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019b4:	a806      	add	r0, sp, #24
 80019b6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019be:	d50c      	bpl.n	80019da <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c2:	480a      	ldr	r0, [pc, #40]	; (80019ec <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ca:	aa06      	add	r2, sp, #24
 80019cc:	4413      	add	r3, r2
 80019ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019d6:	b007      	add	sp, #28
 80019d8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80019dc:	4350      	muls	r0, r2
 80019de:	e7fa      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80019e2:	e7f8      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x56>
 80019e4:	08004db0 	.word	0x08004db0
 80019e8:	40021000 	.word	0x40021000
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	003d0900 	.word	0x003d0900

080019f4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019f4:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x150>)
{
 80019f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fa:	6813      	ldr	r3, [r2, #0]
{
 80019fc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	428b      	cmp	r3, r1
{
 8001a04:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a06:	d328      	bcc.n	8001a5a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	6829      	ldr	r1, [r5, #0]
 8001a0a:	078c      	lsls	r4, r1, #30
 8001a0c:	d432      	bmi.n	8001a74 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	07ca      	lsls	r2, r1, #31
 8001a10:	d445      	bmi.n	8001a9e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a12:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_RCC_ClockConfig+0x150>)
 8001a14:	6813      	ldr	r3, [r2, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	42b3      	cmp	r3, r6
 8001a1c:	d87f      	bhi.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1e:	682a      	ldr	r2, [r5, #0]
 8001a20:	4c49      	ldr	r4, [pc, #292]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
 8001a22:	f012 0f04 	tst.w	r2, #4
 8001a26:	f040 8085 	bne.w	8001b34 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	0713      	lsls	r3, r2, #28
 8001a2c:	d506      	bpl.n	8001a3c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	692a      	ldr	r2, [r5, #16]
 8001a32:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a3a:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3c:	f7ff ffa0 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_RCC_ClockConfig+0x158>)
 8001a44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	40d8      	lsrs	r0, r3
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_RCC_ClockConfig+0x15c>)
 8001a4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff faa9 	bl	8000fa8 <HAL_InitTick>
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	d0cc      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
}
 8001a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7a:	bf1e      	ittt	ne
 8001a7c:	685a      	ldrne	r2, [r3, #4]
 8001a7e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a82:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a86:	bf42      	ittt	mi
 8001a88:	685a      	ldrmi	r2, [r3, #4]
 8001a8a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a8e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	68a8      	ldr	r0, [r5, #8]
 8001a94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a98:	4302      	orrs	r2, r0
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	e7b7      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	686a      	ldr	r2, [r5, #4]
 8001aa0:	4c29      	ldr	r4, [pc, #164]	; (8001b48 <HAL_RCC_ClockConfig+0x154>)
 8001aa2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	d0df      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001abc:	f7ff fab6 	bl	800102c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ac2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d113      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d09f      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff faab 	bl	800102c <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	4540      	cmp	r0, r8
 8001ada:	d9f5      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e7c7      	b.n	8001a70 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	2a02      	cmp	r2, #2
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ae8:	e7e0      	b.n	8001aac <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	f013 0f02 	tst.w	r3, #2
 8001aee:	e7dd      	b.n	8001aac <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d089      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff fa95 	bl	800102c <HAL_GetTick>
 8001b02:	1bc0      	subs	r0, r0, r7
 8001b04:	4540      	cmp	r0, r8
 8001b06:	d9f5      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x100>
 8001b08:	e7e8      	b.n	8001adc <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff fa8f 	bl	800102c <HAL_GetTick>
 8001b0e:	1bc0      	subs	r0, r0, r7
 8001b10:	4540      	cmp	r0, r8
 8001b12:	d8e3      	bhi.n	8001adc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b14:	6863      	ldr	r3, [r4, #4]
 8001b16:	f013 0f0c 	tst.w	r3, #12
 8001b1a:	d1f6      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x116>
 8001b1c:	e779      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	6813      	ldr	r3, [r2, #0]
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	4333      	orrs	r3, r6
 8001b26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	42b3      	cmp	r3, r6
 8001b30:	d19d      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x7a>
 8001b32:	e774      	b.n	8001a1e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	68e9      	ldr	r1, [r5, #12]
 8001b38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6063      	str	r3, [r4, #4]
 8001b40:	e773      	b.n	8001a2a <HAL_RCC_ClockConfig+0x36>
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004dc0 	.word	0x08004dc0
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b62:	6810      	ldr	r0, [r2, #0]
}    
 8001b64:	40d8      	lsrs	r0, r3
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08004dd0 	.word	0x08004dd0
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b82:	6810      	ldr	r0, [r2, #0]
} 
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08004dd0 	.word	0x08004dd0
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b94:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b96:	4604      	mov	r4, r0
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d034      	beq.n	8001c06 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ba0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001ba4:	b90b      	cbnz	r3, 8001baa <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ba6:	f001 fc63 	bl	8003470 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001baa:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bac:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001bb2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bb4:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bbc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001bc0:	4303      	orrs	r3, r0
 8001bc2:	68e0      	ldr	r0, [r4, #12]
 8001bc4:	4303      	orrs	r3, r0
 8001bc6:	6920      	ldr	r0, [r4, #16]
 8001bc8:	4303      	orrs	r3, r0
 8001bca:	6960      	ldr	r0, [r4, #20]
 8001bcc:	4303      	orrs	r3, r0
 8001bce:	69e0      	ldr	r0, [r4, #28]
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	6a20      	ldr	r0, [r4, #32]
 8001bd4:	4303      	orrs	r3, r0
 8001bd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001bd8:	4303      	orrs	r3, r0
 8001bda:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001bde:	4303      	orrs	r3, r0
 8001be0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001be2:	0c12      	lsrs	r2, r2, #16
 8001be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be6:	f002 0204 	and.w	r2, r2, #4
 8001bea:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bee:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001bf0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bf2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bf4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bfa:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001bfc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bfe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001c00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8001c04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
 8001c08:	e7fc      	b.n	8001c04 <HAL_SPI_Init+0x70>

08001c0a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0a:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001c0c:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c20:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001c22:	b189      	cbz	r1, 8001c48 <HAL_TIM_Encoder_Start+0x28>
 8001c24:	2904      	cmp	r1, #4
 8001c26:	d007      	beq.n	8001c38 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	e006      	b.n	8001c56 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001c58:	681a      	ldr	r2, [r3, #0]
}
 8001c5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	f04f 0302 	mov.w	r3, #2
 8001c70:	d01c      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x48>
 8001c72:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001c78:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001c7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001c7e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c84:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c88:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c8a:	680a      	ldr	r2, [r1, #0]
 8001c8c:	2a40      	cmp	r2, #64	; 0x40
 8001c8e:	d079      	beq.n	8001d84 <HAL_TIM_ConfigClockSource+0x120>
 8001c90:	d819      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x62>
 8001c92:	2a10      	cmp	r2, #16
 8001c94:	f000 8093 	beq.w	8001dbe <HAL_TIM_ConfigClockSource+0x15a>
 8001c98:	d80a      	bhi.n	8001cb0 <HAL_TIM_ConfigClockSource+0x4c>
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	f000 8089 	beq.w	8001db2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001cac:	4618      	mov	r0, r3
}
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001cb0:	2a20      	cmp	r2, #32
 8001cb2:	f000 808a 	beq.w	8001dca <HAL_TIM_ConfigClockSource+0x166>
 8001cb6:	2a30      	cmp	r2, #48	; 0x30
 8001cb8:	d1f2      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001cba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cc0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001cc4:	e036      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001cc6:	2a70      	cmp	r2, #112	; 0x70
 8001cc8:	d036      	beq.n	8001d38 <HAL_TIM_ConfigClockSource+0xd4>
 8001cca:	d81b      	bhi.n	8001d04 <HAL_TIM_ConfigClockSource+0xa0>
 8001ccc:	2a50      	cmp	r2, #80	; 0x50
 8001cce:	d042      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xf2>
 8001cd0:	2a60      	cmp	r2, #96	; 0x60
 8001cd2:	d1e5      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cd6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cdc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cde:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ce8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001cf4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cf6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001cf8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cfe:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001d02:	e017      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d04:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d08:	d011      	beq.n	8001d2e <HAL_TIM_ConfigClockSource+0xca>
 8001d0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d0e:	d1c7      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d10:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d14:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d16:	68c9      	ldr	r1, [r1, #12]
 8001d18:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d22:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d24:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2c:	e002      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	e7b3      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 8001d38:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d3a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001d3e:	68c9      	ldr	r1, [r1, #12]
 8001d40:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d4a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d4c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d4e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d50:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001d54:	e7ee      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	684c      	ldr	r4, [r1, #4]
 8001d58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d5a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d5c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d62:	f025 0501 	bic.w	r5, r5, #1
 8001d66:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d68:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d6a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d70:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d76:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d7e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001d82:	e7d7      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d84:	684c      	ldr	r4, [r1, #4]
 8001d86:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d88:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d8c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d90:	f025 0501 	bic.w	r5, r5, #1
 8001d94:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d96:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d98:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d9e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001da6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dac:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001db0:	e7c0      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001db2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001db8:	f042 0207 	orr.w	r2, r2, #7
 8001dbc:	e7ba      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dbe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dc4:	f042 0217 	orr.w	r2, r2, #23
 8001dc8:	e7b4      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001dca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001dd0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001dd4:	e7ae      	b.n	8001d34 <HAL_TIM_ConfigClockSource+0xd0>
	...

08001dd8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001dda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ddc:	4290      	cmp	r0, r2
 8001dde:	d00a      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001de6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0x1e>
 8001dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d115      	bne.n	8001e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001df6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001dfc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
 8001e00:	4290      	cmp	r0, r2
 8001e02:	d00a      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e0e:	4290      	cmp	r0, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0x42>
 8001e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e16:	4290      	cmp	r0, r2
 8001e18:	d103      	bne.n	8001e22 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e20:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e22:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2c:	688b      	ldr	r3, [r1, #8]
 8001e2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e30:	680b      	ldr	r3, [r1, #0]
 8001e32:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <TIM_Base_SetConfig+0x6c>)
 8001e36:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001e38:	bf04      	itt	eq
 8001e3a:	690b      	ldreq	r3, [r1, #16]
 8001e3c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	6143      	str	r3, [r0, #20]
}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00

08001e48 <HAL_TIM_Base_Init>:
{
 8001e48:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	b1a0      	cbz	r0, 8001e78 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e56:	b91b      	cbnz	r3, 8001e60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e5c:	f001 fba0 	bl	80035a0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e62:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	1d21      	adds	r1, r4, #4
 8001e6a:	f7ff ffb5 	bl	8001dd8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e6e:	2301      	movs	r3, #1
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001e76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e7fc      	b.n	8001e76 <HAL_TIM_Base_Init+0x2e>

08001e7c <HAL_TIM_Encoder_Init>:
{
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	460c      	mov	r4, r1
  if(htim == NULL)
 8001e80:	4605      	mov	r5, r0
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d041      	beq.n	8001f0a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e8e:	b91b      	cbnz	r3, 8001e98 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001e94:	f001 fb28 	bl	80034e8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e98:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8001e9a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e9c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ea4:	6883      	ldr	r3, [r0, #8]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	f7ff ff94 	bl	8001dd8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001eb0:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001eb2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001eb4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001eb6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001eb8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8001eba:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ebc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ebe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ec2:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ec6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001eca:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ecc:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ed0:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ed2:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eda:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8001edc:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ee2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ee6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001eea:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001eec:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001eee:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef2:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001ef4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001efa:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001efc:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8001efe:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001f00:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8001f02:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f04:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
 8001f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	e7fc      	b.n	8001f08 <HAL_TIM_Encoder_Init+0x8c>

08001f0e <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001f0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f12:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f04f 0302 	mov.w	r3, #2
 8001f1a:	d018      	beq.n	8001f4e <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f20:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f22:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f24:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f26:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f2c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4322      	orrs	r2, r4
 8001f32:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3a:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f4e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f50:	bd10      	pop	{r4, pc}

08001f52 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f52:	6803      	ldr	r3, [r0, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	2320      	movs	r3, #32
 8001f66:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f70:	4680      	mov	r8, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	68c1      	ldr	r1, [r0, #12]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	2419      	movs	r4, #25
 8001f7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f82:	6882      	ldr	r2, [r0, #8]
 8001f84:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001f86:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	f8d8 0014 	ldr.w	r0, [r8, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001f8e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001f92:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f96:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8001fa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <UART_SetConfig+0x138>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d147      	bne.n	8002040 <UART_SetConfig+0xd4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb0:	f7ff fde0 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fb4:	fb04 f300 	mul.w	r3, r4, r0
 8001fb8:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8001fbc:	2764      	movs	r7, #100	; 0x64
 8001fbe:	00b6      	lsls	r6, r6, #2
 8001fc0:	fbb3 f3f6 	udiv	r3, r3, r6
 8001fc4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fc8:	011e      	lsls	r6, r3, #4
 8001fca:	f7ff fdd3 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fce:	4360      	muls	r0, r4
 8001fd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fbb0 f5f3 	udiv	r5, r0, r3
 8001fda:	f7ff fdcb 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001fde:	4360      	muls	r0, r4
 8001fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fee:	fb07 5313 	mls	r3, r7, r3, r5
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	; 0x32
 8001ff6:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ffa:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8001ffe:	f7ff fdb9 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002002:	4360      	muls	r0, r4
 8002004:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	fbb0 f9f2 	udiv	r9, r0, r2
 800200e:	f7ff fdb1 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002012:	4360      	muls	r0, r4
 8002014:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002018:	f8d8 2000 	ldr.w	r2, [r8]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	fbb3 f3f7 	udiv	r3, r3, r7
 8002026:	fb07 9313 	mls	r3, r7, r3, r9
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	3332      	adds	r3, #50	; 0x32
 800202e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	432b      	orrs	r3, r5
 8002038:	4433      	add	r3, r6
 800203a:	6093      	str	r3, [r2, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002040:	f7ff fd88 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002044:	fb04 f300 	mul.w	r3, r4, r0
 8002048:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800204c:	2764      	movs	r7, #100	; 0x64
 800204e:	00b6      	lsls	r6, r6, #2
 8002050:	fbb3 f3f6 	udiv	r3, r3, r6
 8002054:	fbb3 f3f7 	udiv	r3, r3, r7
 8002058:	011e      	lsls	r6, r3, #4
 800205a:	f7ff fd7b 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800205e:	4360      	muls	r0, r4
 8002060:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fbb0 f5f3 	udiv	r5, r0, r3
 800206a:	f7ff fd73 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800206e:	4360      	muls	r0, r4
 8002070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	fbb3 f3f7 	udiv	r3, r3, r7
 800207e:	fb07 5313 	mls	r3, r7, r3, r5
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	fbb3 f3f7 	udiv	r3, r3, r7
 800208a:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800208e:	f7ff fd61 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002092:	4360      	muls	r0, r4
 8002094:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	fbb0 f9f2 	udiv	r9, r0, r2
 800209e:	f7ff fd59 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80020a2:	e7b6      	b.n	8002012 <UART_SetConfig+0xa6>
 80020a4:	40013800 	.word	0x40013800

080020a8 <HAL_UART_Init>:
{
 80020a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80020aa:	4604      	mov	r4, r0
 80020ac:	b340      	cbz	r0, 8002100 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80020ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b6:	b91b      	cbnz	r3, 80020c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020bc:	f001 fa88 	bl	80035d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80020c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80020ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80020cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020d2:	f7ff ff4b 	bl	8001f6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80020f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80020f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80020fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80020fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002100:	2001      	movs	r0, #1
 8002102:	e7fc      	b.n	80020fe <HAL_UART_Init+0x56>

08002104 <HAL_UART_TxCpltCallback>:
 8002104:	4770      	bx	lr

08002106 <HAL_UART_RxCpltCallback>:
 8002106:	4770      	bx	lr

08002108 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002108:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800210c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800210e:	2b22      	cmp	r3, #34	; 0x22
 8002110:	d133      	bne.n	800217a <UART_Receive_IT+0x72>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002112:	6881      	ldr	r1, [r0, #8]
 8002114:	6904      	ldr	r4, [r0, #16]
 8002116:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800211a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800211c:	6802      	ldr	r2, [r0, #0]
 800211e:	d123      	bne.n	8002168 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002120:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002122:	b9ec      	cbnz	r4, 8002160 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002128:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800212c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800212e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002130:	3c01      	subs	r4, #1
 8002132:	b2a4      	uxth	r4, r4
 8002134:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002136:	b98c      	cbnz	r4, 800215c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	f022 0220 	bic.w	r2, r2, #32
 8002140:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002148:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002158:	f7ff ffd5 	bl	8002106 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800215c:	2000      	movs	r0, #0
 800215e:	e00d      	b.n	800217c <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f823 2b01 	strh.w	r2, [r3], #1
 8002166:	e7e1      	b.n	800212c <UART_Receive_IT+0x24>
 8002168:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	6281      	str	r1, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800216e:	b90c      	cbnz	r4, 8002174 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e7dc      	b.n	800212e <UART_Receive_IT+0x26>
 8002174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002178:	e7fa      	b.n	8002170 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800217a:	2002      	movs	r0, #2
}
 800217c:	bd10      	pop	{r4, pc}

0800217e <HAL_UART_ErrorCallback>:
 800217e:	4770      	bx	lr

08002180 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002180:	6803      	ldr	r3, [r0, #0]
{
 8002182:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002184:	681a      	ldr	r2, [r3, #0]
{
 8002186:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002188:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800218a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800218c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800218e:	d107      	bne.n	80021a0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002190:	0696      	lsls	r6, r2, #26
 8002192:	d558      	bpl.n	8002246 <HAL_UART_IRQHandler+0xc6>
 8002194:	068d      	lsls	r5, r1, #26
 8002196:	d556      	bpl.n	8002246 <HAL_UART_IRQHandler+0xc6>
}
 8002198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800219c:	f7ff bfb4 	b.w	8002108 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a0:	f015 0501 	ands.w	r5, r5, #1
 80021a4:	d102      	bne.n	80021ac <HAL_UART_IRQHandler+0x2c>
 80021a6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80021aa:	d04c      	beq.n	8002246 <HAL_UART_IRQHandler+0xc6>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ac:	07d3      	lsls	r3, r2, #31
 80021ae:	d505      	bpl.n	80021bc <HAL_UART_IRQHandler+0x3c>
 80021b0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021b2:	bf42      	ittt	mi
 80021b4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80021b6:	f043 0301 	orrmi.w	r3, r3, #1
 80021ba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021bc:	0750      	lsls	r0, r2, #29
 80021be:	d504      	bpl.n	80021ca <HAL_UART_IRQHandler+0x4a>
 80021c0:	b11d      	cbz	r5, 80021ca <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ca:	0793      	lsls	r3, r2, #30
 80021cc:	d504      	bpl.n	80021d8 <HAL_UART_IRQHandler+0x58>
 80021ce:	b11d      	cbz	r5, 80021d8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d8:	0716      	lsls	r6, r2, #28
 80021da:	d504      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x66>
 80021dc:	b11d      	cbz	r5, 80021e6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e8:	b343      	cbz	r3, 800223c <HAL_UART_IRQHandler+0xbc>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ea:	0695      	lsls	r5, r2, #26
 80021ec:	d504      	bpl.n	80021f8 <HAL_UART_IRQHandler+0x78>
 80021ee:	0688      	lsls	r0, r1, #26
 80021f0:	d502      	bpl.n	80021f8 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff ff88 	bl	8002108 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021f8:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80021fa:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021fc:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002200:	0711      	lsls	r1, r2, #28
 8002202:	d402      	bmi.n	800220a <HAL_UART_IRQHandler+0x8a>
 8002204:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002208:	d019      	beq.n	800223e <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 800220a:	f7ff fea2 	bl	8001f52 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	0652      	lsls	r2, r2, #25
 8002214:	d50f      	bpl.n	8002236 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002216:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002218:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002220:	b148      	cbz	r0, 8002236 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_UART_IRQHandler+0x13c>)
 8002224:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002226:	f7ff f8f1 	bl	800140c <HAL_DMA_Abort_IT>
 800222a:	b138      	cbz	r0, 800223c <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800222c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800222e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002234:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ffa1 	bl	800217e <HAL_UART_ErrorCallback>
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800223e:	f7ff ff9e 	bl	800217e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002244:	e7fa      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002246:	0616      	lsls	r6, r2, #24
 8002248:	d528      	bpl.n	800229c <HAL_UART_IRQHandler+0x11c>
 800224a:	060d      	lsls	r5, r1, #24
 800224c:	d526      	bpl.n	800229c <HAL_UART_IRQHandler+0x11c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800224e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002252:	2a21      	cmp	r2, #33	; 0x21
 8002254:	d1f2      	bne.n	800223c <HAL_UART_IRQHandler+0xbc>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002256:	68a1      	ldr	r1, [r4, #8]
 8002258:	6a22      	ldr	r2, [r4, #32]
 800225a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800225e:	d118      	bne.n	8002292 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002260:	8811      	ldrh	r1, [r2, #0]
 8002262:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002266:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002268:	6921      	ldr	r1, [r4, #16]
 800226a:	b981      	cbnz	r1, 800228e <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 800226c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800226e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002270:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002272:	3a01      	subs	r2, #1
 8002274:	b292      	uxth	r2, r2
 8002276:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002278:	2a00      	cmp	r2, #0
 800227a:	d1df      	bne.n	800223c <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002282:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e7d6      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 800228e:	3201      	adds	r2, #1
 8002290:	e7ed      	b.n	800226e <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002292:	1c51      	adds	r1, r2, #1
 8002294:	6221      	str	r1, [r4, #32]
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	e7e9      	b.n	8002270 <HAL_UART_IRQHandler+0xf0>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d5cd      	bpl.n	800223c <HAL_UART_IRQHandler+0xbc>
 80022a0:	064a      	lsls	r2, r1, #25
 80022a2:	d5cb      	bpl.n	800223c <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022a4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80022a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022ae:	2320      	movs	r3, #32
 80022b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80022b4:	f7ff ff26 	bl	8002104 <HAL_UART_TxCpltCallback>
 80022b8:	e7c0      	b.n	800223c <HAL_UART_IRQHandler+0xbc>
 80022ba:	bf00      	nop
 80022bc:	080022c1 	.word	0x080022c1

080022c0 <UART_DMAAbortOnError>:
{
 80022c0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80022c2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80022c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022c8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80022ca:	f7ff ff58 	bl	800217e <HAL_UART_ErrorCallback>
}
 80022ce:	bd08      	pop	{r3, pc}

080022d0 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>:
#include "MPU9250.h"
//#include "Global.h"
//#include "Timer.h"
//#include <exception>

MPU9250::MPU9250(SPI_TypeDef * const spi, GPIO_TypeDef * const ss_gpio, const uint32_t ss_pin)
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	: _spi(spi), _ss_gpio(ss_gpio), _ss_pin(ss_pin)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	609a      	str	r2, [r3, #8]
{
	this->_gyroZ_bias = 0.0;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
}
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <_ZNK7MPU92509_spiWriteEh>:

uint8_t MPU9250::_spiWrite(const uint8_t data) const
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
	while(!(_spi->SR & SPI_SR_TXE)) ;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d000      	beq.n	800232a <_ZNK7MPU92509_spiWriteEh+0x26>
 8002328:	e7f2      	b.n	8002310 <_ZNK7MPU92509_spiWriteEh+0xc>
	_spi->DR = data;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	60da      	str	r2, [r3, #12]
	while(!(_spi->SR & SPI_SR_RXNE)) ;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d000      	beq.n	800234c <_ZNK7MPU92509_spiWriteEh+0x48>
 800234a:	e7f2      	b.n	8002332 <_ZNK7MPU92509_spiWriteEh+0x2e>
	return (uint8_t)_spi->DR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	b2db      	uxtb	r3, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <_ZNK7MPU925014_spiChipSelectEv>:

void MPU9250::_spiChipSelect(void) const
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = (_ss_pin << 16);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0412      	lsls	r2, r2, #16
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <_ZNK7MPU925016_spiChipDeselectEv>:

void MPU9250::_spiChipDeselect(void) const
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	_ss_gpio->BSRR = _ss_pin;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	611a      	str	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <_ZNK7MPU92509WriteByteEhh>:

uint8_t MPU9250::WriteByte(const uint8_t addr, const uint8_t data) const
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
 80023a4:	4613      	mov	r3, r2
 80023a6:	70bb      	strb	r3, [r7, #2]
	volatile uint8_t result = 0x00;
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]

	_spiChipSelect();
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffd6 	bl	800235e <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffa4 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>

	result = _spiWrite(data);
 80023bc:	78bb      	ldrb	r3, [r7, #2]
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff9f 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]

	_spiChipDeselect();
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffd6 	bl	800237c <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	b2db      	uxtb	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNK7MPU92509WriteWordEht>:

uint16_t MPU9250::WriteWord(const uint8_t addr, const uint16_t data) const
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
	volatile uint16_t result = 0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	81fb      	strh	r3, [r7, #14]

	_spiChipSelect();
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffb4 	bl	800235e <_ZNK7MPU925014_spiChipSelectEv>

	_spiWrite(addr);
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff82 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>

	result = (uint16_t)(_spiWrite((uint8_t)((data >> 8) & 0xff)) << 8);
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff7a 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 8002410:	4603      	mov	r3, r0
 8002412:	b29b      	uxth	r3, r3
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	81fb      	strh	r3, [r7, #14]

	result = (uint16_t)(result | _spiWrite((uint8_t)(data & 0xff)));
 800241a:	883b      	ldrh	r3, [r7, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff6f 	bl	8002304 <_ZNK7MPU92509_spiWriteEh>
 8002426:	4603      	mov	r3, r0
 8002428:	b29a      	uxth	r2, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	81fb      	strh	r3, [r7, #14]

	_spiChipDeselect();
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffa1 	bl	800237c <_ZNK7MPU925016_spiChipDeselectEv>

	return result;
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	b29b      	uxth	r3, r3
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <_ZN8OdometryC1Ev>:
//#include "stm32f10x_conf.h"
//#include "Timer.h"

#include <cmath>

Odometry::Odometry(void)
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
{
	this->x = 0.0f;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
	this->y = 0.0f;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
	this->yaw = 0.0f;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	609a      	str	r2, [r3, #8]

	this->movavg = 0;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]

	//this->mpu9250 = new MPU9250(SPI_MPU9250, GPIOC, GPIO_PIN_0);
	this->mpu9250 = new MPU9250(SPI_MPU9250, GPIO_MPU9250, PIN_MPU9250);
 8002474:	2010      	movs	r0, #16
 8002476:	f001 f94c 	bl	8003712 <_Znwj>
 800247a:	4603      	mov	r3, r0
 800247c:	461c      	mov	r4, r3
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	4a06      	ldr	r2, [pc, #24]	; (800249c <_ZN8OdometryC1Ev+0x54>)
 8002484:	4906      	ldr	r1, [pc, #24]	; (80024a0 <_ZN8OdometryC1Ev+0x58>)
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff ff22 	bl	80022d0 <_ZN7MPU9250C1EP11SPI_TypeDefP12GPIO_TypeDefm>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60dc      	str	r4, [r3, #12]
}
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	40003800 	.word	0x40003800

080024a4 <_ZNK8Odometry11GetGyroBiasEPfS0_>:

void Odometry::GetGyroBias(float * const avg, float * const stdev) const
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	static constexpr int NumOfTrial = 256;

	float _avg = 0.0f;
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
	float _stdev = 0.0f;
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < NumOfTrial; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	dc2f      	bgt.n	8002526 <_ZNK8Odometry11GetGyroBiasEPfS0_+0x82>
	{
		float reading = (int16_t)mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000) * 1000.0f / SensitivityScaleFactor;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	21c7      	movs	r1, #199	; 0xc7
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff84 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fb0f 	bl	8000afc <__aeabi_i2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	4927      	ldr	r1, [pc, #156]	; (8002580 <_ZNK8Odometry11GetGyroBiasEPfS0_+0xdc>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fb5e 	bl	8000ba4 <__aeabi_fmul>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4926      	ldr	r1, [pc, #152]	; (8002584 <_ZNK8Odometry11GetGyroBiasEPfS0_+0xe0>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc0d 	bl	8000d0c <__aeabi_fdiv>
 80024f2:	4603      	mov	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]

		_avg += reading;
 80024f6:	6939      	ldr	r1, [r7, #16]
 80024f8:	69f8      	ldr	r0, [r7, #28]
 80024fa:	f7fe fa4b 	bl	8000994 <__addsf3>
 80024fe:	4603      	mov	r3, r0
 8002500:	61fb      	str	r3, [r7, #28]
		_stdev += reading * reading;
 8002502:	6939      	ldr	r1, [r7, #16]
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	f7fe fb4d 	bl	8000ba4 <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f7fe fa40 	bl	8000994 <__addsf3>
 8002514:	4603      	mov	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]

		//Timer::sleep(5);
		HAL_Delay(5);
 8002518:	2005      	movs	r0, #5
 800251a:	f7fe fd8d 	bl	8001038 <HAL_Delay>
	for(int i = 0; i < NumOfTrial; i++)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e7cc      	b.n	80024c0 <_ZNK8Odometry11GetGyroBiasEPfS0_+0x1c>
	}

	_avg /= NumOfTrial;
 8002526:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800252a:	69f8      	ldr	r0, [r7, #28]
 800252c:	f7fe fbee 	bl	8000d0c <__aeabi_fdiv>
 8002530:	4603      	mov	r3, r0
 8002532:	61fb      	str	r3, [r7, #28]

	_stdev -= NumOfTrial * _avg * _avg;
 8002534:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002538:	69f8      	ldr	r0, [r7, #28]
 800253a:	f7fe fb33 	bl	8000ba4 <__aeabi_fmul>
 800253e:	4603      	mov	r3, r0
 8002540:	69f9      	ldr	r1, [r7, #28]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fb2e 	bl	8000ba4 <__aeabi_fmul>
 8002548:	4603      	mov	r3, r0
 800254a:	4619      	mov	r1, r3
 800254c:	69b8      	ldr	r0, [r7, #24]
 800254e:	f7fe fa1f 	bl	8000990 <__aeabi_fsub>
 8002552:	4603      	mov	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
	_stdev /= NumOfTrial - 1;
 8002556:	490c      	ldr	r1, [pc, #48]	; (8002588 <_ZNK8Odometry11GetGyroBiasEPfS0_+0xe4>)
 8002558:	69b8      	ldr	r0, [r7, #24]
 800255a:	f7fe fbd7 	bl	8000d0c <__aeabi_fdiv>
 800255e:	4603      	mov	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
	_stdev = sqrtf(_stdev);
 8002562:	69b8      	ldr	r0, [r7, #24]
 8002564:	f001 f95a 	bl	800381c <sqrtf>
 8002568:	61b8      	str	r0, [r7, #24]

	*avg = _avg;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	601a      	str	r2, [r3, #0]
	*stdev = _stdev;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	447a0000 	.word	0x447a0000
 8002584:	42033333 	.word	0x42033333
 8002588:	437f0000 	.word	0x437f0000

0800258c <_ZN8Odometry8InitGyroEv>:

bool Odometry::InitGyro(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint8_t whoami = mpu9250->WriteByte(READ_FLAG | MPUREG_WHOAMI, 0x00);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	21f5      	movs	r1, #245	; 0xf5
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fefb 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]

	if(whoami != 0x71)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b71      	cmp	r3, #113	; 0x71
 80025aa:	d007      	beq.n	80025bc <_ZN8Odometry8InitGyroEv+0x30>
	{
		delete mpu9250;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2110      	movs	r1, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f8ab 	bl	800370e <_ZdlPvj>
		return false;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e046      	b.n	800264a <_ZN8Odometry8InitGyroEv+0xbe>
	}

	 // get stable time source
	mpu9250->WriteByte(MPUREG_PWR_MGMT_1, 0x03);  // Set clock source to be PLL with z-axis gyroscope reference, bits 2:0 = 011
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2203      	movs	r2, #3
 80025c2:	216b      	movs	r1, #107	; 0x6b
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fee7 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>
	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 4000 and 250 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 000; this sets the sample rate at 8 kHz for both
	 // Maximum delay is 0.97 ms which is just over a 1 kHz maximum rate
	//mpu9250->WriteByte(MPUREG_CONFIG, 0x00);
	mpu9250->WriteByte(MPUREG_CONFIG, 0x03);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2203      	movs	r2, #3
 80025d0:	211a      	movs	r1, #26
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fee0 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x07);  // Use a 1 kHz rate; the same rate set in CONFIG above
	//mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	mpu9250->WriteByte(MPUREG_SMPLRT_DIV, 0x00);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	2119      	movs	r1, #25
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fed9 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	mpu9250->WriteByte(MPUREG_GYRO_CONFIG, BITS_FS_1000DPS);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2210      	movs	r2, #16
 80025ec:	211b      	movs	r1, #27
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fed2 	bl	8002398 <_ZNK7MPU92509WriteByteEhh>

	//Timer::sleep(100);
	HAL_Delay(100);
 80025f4:	2064      	movs	r0, #100	; 0x64
 80025f6:	f7fe fd1f 	bl	8001038 <HAL_Delay>

	float avg = 0.0f;
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
	float stdev = 1000.0f;
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <_ZN8Odometry8InitGyroEv+0xc8>)
 8002602:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < 10; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b09      	cmp	r3, #9
 800260c:	dc1c      	bgt.n	8002648 <_ZN8Odometry8InitGyroEv+0xbc>
	{
		this->GetGyroBias(&avg, &stdev);
 800260e:	f107 0208 	add.w	r2, r7, #8
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ff43 	bl	80024a4 <_ZNK8Odometry11GetGyroBiasEPfS0_>

		if (stdev < 700)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	490d      	ldr	r1, [pc, #52]	; (8002658 <_ZN8Odometry8InitGyroEv+0xcc>)
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fc5c 	bl	8000ee0 <__aeabi_fcmplt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <_ZN8Odometry8InitGyroEv+0xb4>
		{
			movavg = (int32_t)avg;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fc93 	bl	8000f5c <__aeabi_f2iz>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	611a      	str	r2, [r3, #16]

			return true;
 800263c:	2301      	movs	r3, #1
 800263e:	e004      	b.n	800264a <_ZN8Odometry8InitGyroEv+0xbe>
	for(int i = 0; i < 10; i++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e7df      	b.n	8002608 <_ZN8Odometry8InitGyroEv+0x7c>
		}
	}

	// gyro unit is not in desirable state (not stabilized)
	return false;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	447a0000 	.word	0x447a0000
 8002658:	442f0000 	.word	0x442f0000

0800265c <_ZN8Odometry11ReadEncoderEv>:

void Odometry::ReadEncoder(void)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	volatile int16_t _p1 = static_cast<int16_t>(TIM3->CNT);
 8002664:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b21b      	sxth	r3, r3
 800266a:	817b      	strh	r3, [r7, #10]
	TIM3->CNT = 0;
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <_ZN8Odometry11ReadEncoderEv+0xfc>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

	volatile int16_t _p2 = static_cast<int16_t>(TIM4->CNT);
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <_ZN8Odometry11ReadEncoderEv+0x100>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b21b      	sxth	r3, r3
 8002678:	813b      	strh	r3, [r7, #8]
	TIM4->CNT = 0;
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <_ZN8Odometry11ReadEncoderEv+0x100>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

	// just a simple rotation matrix
	// translate encoder rates to velocity on x-y plane
	float _yaw = yaw - ((float)M_PI / 4.0f); //いじるとしたらこの辺　ジャイロの付け方に依る
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4936      	ldr	r1, [pc, #216]	; (8002760 <_ZN8Odometry11ReadEncoderEv+0x104>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe f982 	bl	8000990 <__aeabi_fsub>
 800268c:	4603      	mov	r3, r0
 800268e:	617b      	str	r3, [r7, #20]
	float _cos = cosf(_yaw);
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f001 f859 	bl	8003748 <cosf>
 8002696:	6138      	str	r0, [r7, #16]
	float _sin = sinf(_yaw);
 8002698:	6978      	ldr	r0, [r7, #20]
 800269a:	f001 f889 	bl	80037b0 <sinf>
 800269e:	60f8      	str	r0, [r7, #12]


	x += ((_p1 * _cos) - (_p2 * _sin)) * MPerPulse;
 80026a0:	897b      	ldrh	r3, [r7, #10]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fa29 	bl	8000afc <__aeabi_i2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	6939      	ldr	r1, [r7, #16]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fa78 	bl	8000ba4 <__aeabi_fmul>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461c      	mov	r4, r3
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fa1d 	bl	8000afc <__aeabi_i2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fa6c 	bl	8000ba4 <__aeabi_fmul>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7fe f95d 	bl	8000990 <__aeabi_fsub>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <_ZN8Odometry11ReadEncoderEv+0x108>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fa62 	bl	8000ba4 <__aeabi_fmul>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe f952 	bl	8000994 <__addsf3>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]
	y += ((_p1 * _sin) + (_p2 * _cos)) * MPerPulse;
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe f9fd 	bl	8000afc <__aeabi_i2f>
 8002702:	4603      	mov	r3, r0
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fa4c 	bl	8000ba4 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	461c      	mov	r4, r3
 8002710:	893b      	ldrh	r3, [r7, #8]
 8002712:	b21b      	sxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe f9f1 	bl	8000afc <__aeabi_i2f>
 800271a:	4603      	mov	r3, r0
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fa40 	bl	8000ba4 <__aeabi_fmul>
 8002724:	4603      	mov	r3, r0
 8002726:	4619      	mov	r1, r3
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe f933 	bl	8000994 <__addsf3>
 800272e:	4603      	mov	r3, r0
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <_ZN8Odometry11ReadEncoderEv+0x108>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fa36 	bl	8000ba4 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7fe f926 	bl	8000994 <__addsf3>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800
 8002760:	3f490fdb 	.word	0x3f490fdb
 8002764:	389e1f1d 	.word	0x389e1f1d

08002768 <_ZN8Odometry8ReadGyroEv>:

void Odometry::ReadGyro(void)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	static constexpr float RadPerMilliDeg = M_PI / 180000.0;
	static constexpr float RadPerMilliDegPerSec = RadPerMilliDeg / SamplingFrequency;
	static constexpr float w = 0.01f;
	//static constexpr float halfPi = M_PI / 2.0;

	int dy_raw_mdps = (((int16_t)mpu9250->WriteWord(READ_FLAG | MPUREG_GYRO_ZOUT_H, 0x0000)) * 1000 / SensitivityScaleFactor) + 0.5f;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	21c7      	movs	r1, #199	; 0xc7
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fe2f 	bl	80023dc <_ZNK7MPU92509WriteWordEht>
 800277e:	4603      	mov	r3, r0
 8002780:	b21b      	sxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002788:	fb03 f302 	mul.w	r3, r3, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe f9b5 	bl	8000afc <__aeabi_i2f>
 8002792:	4603      	mov	r3, r0
 8002794:	4940      	ldr	r1, [pc, #256]	; (8002898 <_ZN8Odometry8ReadGyroEv+0x130>)
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fab8 	bl	8000d0c <__aeabi_fdiv>
 800279c:	4603      	mov	r3, r0
 800279e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f8f6 	bl	8000994 <__addsf3>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fbd6 	bl	8000f5c <__aeabi_f2iz>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
	//temp = mpu9250->WriteWord(READ_FLAG | MPUREG_TEMP_OUT_H, 0x0000);

	int dy_biased_mdps = dy_raw_mdps - movavg;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	60bb      	str	r3, [r7, #8]

	if(dy_biased_mdps < -movband || movband < dy_biased_mdps)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80027c4:	db02      	blt.n	80027cc <_ZN8Odometry8ReadGyroEv+0x64>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	dd3b      	ble.n	8002844 <_ZN8Odometry8ReadGyroEv+0xdc>
	{
		// yaw is in radian, so, convert from mdps to radian.
		yaw += (float)dy_biased_mdps * RadPerMilliDegPerSec;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689c      	ldr	r4, [r3, #8]
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f7fe f993 	bl	8000afc <__aeabi_i2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4930      	ldr	r1, [pc, #192]	; (800289c <_ZN8Odometry8ReadGyroEv+0x134>)
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe f9e2 	bl	8000ba4 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7fe f8d5 	bl	8000994 <__addsf3>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]

		if(yaw > (float)M_PI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	492a      	ldr	r1, [pc, #168]	; (80028a0 <_ZN8Odometry8ReadGyroEv+0x138>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fb8f 	bl	8000f1c <__aeabi_fcmpgt>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <_ZN8Odometry8ReadGyroEv+0xb2>
		{
			yaw -= (2.0f * (float)M_PI);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4926      	ldr	r1, [pc, #152]	; (80028a4 <_ZN8Odometry8ReadGyroEv+0x13c>)
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe f8c0 	bl	8000990 <__aeabi_fsub>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
		if(yaw > (float)M_PI)
 8002818:	e03a      	b.n	8002890 <_ZN8Odometry8ReadGyroEv+0x128>
		}
		else if(yaw < -(float)M_PI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4922      	ldr	r1, [pc, #136]	; (80028a8 <_ZN8Odometry8ReadGyroEv+0x140>)
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fb5d 	bl	8000ee0 <__aeabi_fcmplt>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d100      	bne.n	800282e <_ZN8Odometry8ReadGyroEv+0xc6>
		if(yaw > (float)M_PI)
 800282c:	e030      	b.n	8002890 <_ZN8Odometry8ReadGyroEv+0x128>
		{
			yaw += (2.0f * (float)M_PI);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	491c      	ldr	r1, [pc, #112]	; (80028a4 <_ZN8Odometry8ReadGyroEv+0x13c>)
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe f8ad 	bl	8000994 <__addsf3>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]
		if(yaw > (float)M_PI)
 8002842:	e025      	b.n	8002890 <_ZN8Odometry8ReadGyroEv+0x128>
		}
	}
	else
	{
		movavg = (int)((((float)movavg * (1 - w)) + ((float)dy_raw_mdps * w)) + 0.5f);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe f957 	bl	8000afc <__aeabi_i2f>
 800284e:	4603      	mov	r3, r0
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <_ZN8Odometry8ReadGyroEv+0x144>)
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f9a6 	bl	8000ba4 <__aeabi_fmul>
 8002858:	4603      	mov	r3, r0
 800285a:	461c      	mov	r4, r3
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7fe f94d 	bl	8000afc <__aeabi_i2f>
 8002862:	4603      	mov	r3, r0
 8002864:	4912      	ldr	r1, [pc, #72]	; (80028b0 <_ZN8Odometry8ReadGyroEv+0x148>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe f99c 	bl	8000ba4 <__aeabi_fmul>
 800286c:	4603      	mov	r3, r0
 800286e:	4619      	mov	r1, r3
 8002870:	4620      	mov	r0, r4
 8002872:	f7fe f88f 	bl	8000994 <__addsf3>
 8002876:	4603      	mov	r3, r0
 8002878:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe f889 	bl	8000994 <__addsf3>
 8002882:	4603      	mov	r3, r0
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fb69 	bl	8000f5c <__aeabi_f2iz>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	611a      	str	r2, [r3, #16]
	}

}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	42033333 	.word	0x42033333
 800289c:	3315ec32 	.word	0x3315ec32
 80028a0:	40490fdb 	.word	0x40490fdb
 80028a4:	40c90fdb 	.word	0x40c90fdb
 80028a8:	c0490fdb 	.word	0xc0490fdb
 80028ac:	3f7d70a4 	.word	0x3f7d70a4
 80028b0:	3c23d70a 	.word	0x3c23d70a

080028b4 <_ZN8Odometry10InitializeEv>:

bool Odometry::Initialize(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	return this->InitGyro();
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fe65 	bl	800258c <_ZN8Odometry8InitGyroEv>
 80028c2:	4603      	mov	r3, r0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN8Odometry6SampleEv>:

void Odometry::Sample(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	this->ReadEncoder();
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fec1 	bl	800265c <_ZN8Odometry11ReadEncoderEv>
	this->ReadGyro();
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff44 	bl	8002768 <_ZN8Odometry8ReadGyroEv>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZN8Odometry7GetPoseEPfS0_S0_>:
	this->y = y;
	this->yaw = yaw;
}

void Odometry::GetPose(float * const x, float * const y, float * const yaw)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
	*x = this->x;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	601a      	str	r2, [r3, #0]
	*y = this->y;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
	*yaw = this->yaw;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <can_init>:
CAN_FilterTypeDef filter;
uint32_t prescaler;
enum can_bus_state bus_state;

void can_init(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    // default to 125 kbit/s
    prescaler = 48;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <can_init+0x20>)
 800291e:	2230      	movs	r2, #48	; 0x30
 8002920:	601a      	str	r2, [r3, #0]
    hcan.Instance = CAN1;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <can_init+0x24>)
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <can_init+0x28>)
 8002926:	601a      	str	r2, [r3, #0]
    bus_state = OFF_BUS;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <can_init+0x2c>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000898 	.word	0x20000898
 800293c:	20000a00 	.word	0x20000a00
 8002940:	40006400 	.word	0x40006400
 8002944:	2000089c 	.word	0x2000089c

08002948 <can_set_filter>:

void can_set_filter(uint32_t id, uint32_t mask)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    // see page 825 of RM0091 for details on filters
    // set the standard ID part
    filter.FilterIdHigh = (id & 0x7FF) << 5;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	015b      	lsls	r3, r3, #5
 8002956:	b29b      	uxth	r3, r3
 8002958:	4a24      	ldr	r2, [pc, #144]	; (80029ec <can_set_filter+0xa4>)
 800295a:	6013      	str	r3, [r2, #0]
    // add the top 5 bits of the extended ID
    filter.FilterIdHigh += (id >> 24) & 0xFFFF;
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <can_set_filter+0xa4>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	4413      	add	r3, r2
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <can_set_filter+0xa4>)
 8002968:	6013      	str	r3, [r2, #0]
    // set the low part to the remaining extended ID bits
    filter.FilterIdLow += ((id & 0x1FFFF800) << 3);
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <can_set_filter+0xa4>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002976:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800297a:	4413      	add	r3, r2
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <can_set_filter+0xa4>)
 800297e:	6053      	str	r3, [r2, #4]

    // set the standard ID part
    filter.FilterMaskIdHigh = (mask & 0x7FF) << 5;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	015b      	lsls	r3, r3, #5
 8002984:	b29b      	uxth	r3, r3
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <can_set_filter+0xa4>)
 8002988:	6093      	str	r3, [r2, #8]
    // add the top 5 bits of the extended ID
    filter.FilterMaskIdHigh += (mask >> 24) & 0xFFFF;
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <can_set_filter+0xa4>)
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	0e1b      	lsrs	r3, r3, #24
 8002992:	4413      	add	r3, r2
 8002994:	4a15      	ldr	r2, [pc, #84]	; (80029ec <can_set_filter+0xa4>)
 8002996:	6093      	str	r3, [r2, #8]
    // set the low part to the remaining extended ID bits
    filter.FilterMaskIdLow += ((mask & 0x1FFFF800) << 3);
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <can_set_filter+0xa4>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a8:	4413      	add	r3, r2
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <can_set_filter+0xa4>)
 80029ac:	60d3      	str	r3, [r2, #12]

    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <can_set_filter+0xa4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <can_set_filter+0xa4>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	61da      	str	r2, [r3, #28]
    filter.FilterBank = 0;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <can_set_filter+0xa4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <can_set_filter+0xa4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    filter.SlaveStartFilterBank = 0;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <can_set_filter+0xa4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
    filter.FilterActivation = ENABLE;
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <can_set_filter+0xa4>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	621a      	str	r2, [r3, #32]

    if (bus_state == ON_BUS)
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <can_set_filter+0xa8>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d103      	bne.n	80029e2 <can_set_filter+0x9a>
    {
        HAL_CAN_ConfigFilter(&hcan, &filter);
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <can_set_filter+0xa4>)
 80029dc:	4805      	ldr	r0, [pc, #20]	; (80029f4 <can_set_filter+0xac>)
 80029de:	f7fe fbb8 	bl	8001152 <HAL_CAN_ConfigFilter>
    }
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000870 	.word	0x20000870
 80029f0:	2000089c 	.word	0x2000089c
 80029f4:	20000a00 	.word	0x20000a00

080029f8 <can_enable>:

void can_enable(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
    if (bus_state == OFF_BUS)
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <can_enable+0xa8>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d148      	bne.n	8002a96 <can_enable+0x9e>
    {
        hcan.Init.Prescaler = prescaler;
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <can_enable+0xac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <can_enable+0xb0>)
 8002a0a:	6053      	str	r3, [r2, #4]
        hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <can_enable+0xb0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
        hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <can_enable+0xb0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
        hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <can_enable+0xb0>)
 8002a1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a1e:	611a      	str	r2, [r3, #16]
        hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <can_enable+0xb0>)
 8002a22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a26:	615a      	str	r2, [r3, #20]
        hcan.Init.TimeTriggeredMode = DISABLE;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <can_enable+0xb0>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	761a      	strb	r2, [r3, #24]
        hcan.Init.AutoBusOff = ENABLE;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <can_enable+0xb0>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	765a      	strb	r2, [r3, #25]
        hcan.Init.AutoWakeUp = DISABLE;
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <can_enable+0xb0>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	769a      	strb	r2, [r3, #26]
        hcan.Init.AutoRetransmission = ENABLE;
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <can_enable+0xb0>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	76da      	strb	r2, [r3, #27]
        hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <can_enable+0xb0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
        hcan.Init.TransmitFifoPriority = DISABLE;
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <can_enable+0xb0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	775a      	strb	r2, [r3, #29]
        //hcan.pTxMsg = NULL;
        HAL_CAN_Init(&hcan);
 8002a4c:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <can_enable+0xb0>)
 8002a4e:	f7fe fb05 	bl	800105c <HAL_CAN_Init>
        bus_state = ON_BUS;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <can_enable+0xa8>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
        can_set_filter(0, 0);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff ff74 	bl	8002948 <can_set_filter>



        /* Start the CAN peripheral */
        if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <can_enable+0xb0>)
 8002a62:	f7fe fbe2 	bl	800122a <HAL_CAN_Start>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <can_enable+0x82>
        {
          /* Start Error */
          Error_Handler();
 8002a76:	f000 fc3f 	bl	80032f8 <Error_Handler>
        }

        /* Activate CAN RX notification */
        if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <can_enable+0xb0>)
 8002a7e:	f7fe fc4c 	bl	800131a <HAL_CAN_ActivateNotification>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <can_enable+0x9e>
        {
          /* Notification Error */
          Error_Handler();
 8002a92:	f000 fc31 	bl	80032f8 <Error_Handler>
        }
    }

    GPIOB->BSRR = GPIO_BSRR_BS1;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <can_enable+0xb4>)
 8002a98:	2202      	movs	r2, #2
 8002a9a:	611a      	str	r2, [r3, #16]
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000089c 	.word	0x2000089c
 8002aa4:	20000898 	.word	0x20000898
 8002aa8:	20000a00 	.word	0x20000a00
 8002aac:	40010c00 	.word	0x40010c00

08002ab0 <can_set_bitrate>:
    GPIOB->BSRR = GPIO_BSRR_BR1;
    GPIOC->BSRR = GPIO_BSRR_BR13;
}

void can_set_bitrate(enum can_bitrate bitrate)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
    if (bus_state == ON_BUS)
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <can_set_bitrate+0x9c>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d03e      	beq.n	8002b40 <can_set_bitrate+0x90>
    {
        // cannot set bitrate while on bus
        return;
    }

    switch (bitrate)
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d83c      	bhi.n	8002b42 <can_set_bitrate+0x92>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <can_set_bitrate+0x20>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002aff 	.word	0x08002aff
 8002ad8:	08002b07 	.word	0x08002b07
 8002adc:	08002b0f 	.word	0x08002b0f
 8002ae0:	08002b17 	.word	0x08002b17
 8002ae4:	08002b1f 	.word	0x08002b1f
 8002ae8:	08002b27 	.word	0x08002b27
 8002aec:	08002b2f 	.word	0x08002b2f
 8002af0:	08002b37 	.word	0x08002b37
    {
        case CAN_BITRATE_10K:
            prescaler = 450;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <can_set_bitrate+0xa0>)
 8002af6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002afa:	601a      	str	r2, [r3, #0]
            break;
 8002afc:	e021      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_20K:
            prescaler = 225;
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b00:	22e1      	movs	r2, #225	; 0xe1
 8002b02:	601a      	str	r2, [r3, #0]
            break;
 8002b04:	e01d      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_50K:
            prescaler = 90;
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b08:	225a      	movs	r2, #90	; 0x5a
 8002b0a:	601a      	str	r2, [r3, #0]
            break;
 8002b0c:	e019      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_100K:
            prescaler = 45;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b10:	222d      	movs	r2, #45	; 0x2d
 8002b12:	601a      	str	r2, [r3, #0]
            break;
 8002b14:	e015      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_125K:
            prescaler = 36;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b18:	2224      	movs	r2, #36	; 0x24
 8002b1a:	601a      	str	r2, [r3, #0]
            break;
 8002b1c:	e011      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_250K:
            prescaler = 18;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b20:	2212      	movs	r2, #18
 8002b22:	601a      	str	r2, [r3, #0]
            break;
 8002b24:	e00d      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_500K:
            prescaler = 9;
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b28:	2209      	movs	r2, #9
 8002b2a:	601a      	str	r2, [r3, #0]
            break;
 8002b2c:	e009      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_750K:
            prescaler = 6;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b30:	2206      	movs	r2, #6
 8002b32:	601a      	str	r2, [r3, #0]
            break;
 8002b34:	e005      	b.n	8002b42 <can_set_bitrate+0x92>
        case CAN_BITRATE_1000K:
            prescaler = 4;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <can_set_bitrate+0xa0>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]
            break;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <can_set_bitrate+0x92>
        return;
 8002b40:	bf00      	nop
    }
}
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2000089c 	.word	0x2000089c
 8002b50:	20000898 	.word	0x20000898

08002b54 <can_tx>:
        hcan.Init.Mode = CAN_MODE_NORMAL;
    }
}

uint32_t can_tx(CAN_TxHeaderTypeDef *tx_header, uint8_t (&buf)[CAN_MTU])
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    // transmit can frame
    //hcan.pTxMsg = tx_msg;
    //status = HAL_CAN_Transmit(&hcan, timeout);

    uint32_t tx_mailbox;
    status = HAL_CAN_AddTxMessage(&hcan, tx_header, buf, &tx_mailbox);
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <can_tx+0x2c>)
 8002b68:	f7fe fb8a 	bl	8001280 <HAL_CAN_AddTxMessage>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]

//    GPIOC->BSRR=GPIO_BSRR_BS13;
//    GPIOC->BSRR=GPIO_BSRR_BR13;

    led_on();
 8002b70:	f000 f808 	bl	8002b84 <led_on>
    return status;
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000a00 	.word	0x20000a00

08002b84 <led_on>:
static uint32_t led_laston = 0;
static uint32_t led_lastoff = 0;

// Attempt to turn on status LED
void led_on(void)
{
 8002b84:	b510      	push	{r4, lr}
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	// This prevents a solid status LED on a busy canbus
	if(led_laston == 0 && HAL_GetTick() - led_lastoff > LED_DURATION)
 8002b86:	4c09      	ldr	r4, [pc, #36]	; (8002bac <led_on+0x28>)
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	b96b      	cbnz	r3, 8002ba8 <led_on+0x24>
 8002b8c:	f7fe fa4e 	bl	800102c <HAL_GetTick>
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <led_on+0x2c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1ac0      	subs	r0, r0, r3
 8002b96:	280a      	cmp	r0, #10
 8002b98:	d906      	bls.n	8002ba8 <led_on+0x24>
	{
	    GPIOC->BSRR = GPIO_BSRR_BS13;
 8002b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <led_on+0x30>)
 8002ba0:	611a      	str	r2, [r3, #16]
		led_laston = HAL_GetTick();
 8002ba2:	f7fe fa43 	bl	800102c <HAL_GetTick>
 8002ba6:	6020      	str	r0, [r4, #0]
	}
}
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	bf00      	nop
 8002bac:	200008a4 	.word	0x200008a4
 8002bb0:	200008a0 	.word	0x200008a0
 8002bb4:	40011000 	.word	0x40011000

08002bb8 <led_process>:


// Process time-based LED events
void led_process(void)
{
 8002bb8:	b510      	push	{r4, lr}
	// If LED has been on for long enough, turn it off
	if(led_laston > 0 && HAL_GetTick() - led_laston > LED_DURATION)
 8002bba:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <led_process+0x2c>)
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	b17b      	cbz	r3, 8002be0 <led_process+0x28>
 8002bc0:	f7fe fa34 	bl	800102c <HAL_GetTick>
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	1ac0      	subs	r0, r0, r3
 8002bc8:	280a      	cmp	r0, #10
 8002bca:	d909      	bls.n	8002be0 <led_process+0x28>
	{
        GPIOC->BSRR = GPIO_BSRR_BR13;
 8002bcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <led_process+0x30>)
 8002bd2:	611a      	str	r2, [r3, #16]
		led_laston = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6023      	str	r3, [r4, #0]
		led_lastoff = HAL_GetTick();
 8002bd8:	f7fe fa28 	bl	800102c <HAL_GetTick>
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <led_process+0x34>)
 8002bde:	6018      	str	r0, [r3, #0]
	}
}
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	bf00      	nop
 8002be4:	200008a4 	.word	0x200008a4
 8002be8:	40011000 	.word	0x40011000
 8002bec:	200008a0 	.word	0x200008a0

08002bf0 <NVIC_SetPriority>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da0c      	bge.n	8002c1e <NVIC_SetPriority+0x2e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	490d      	ldr	r1, [pc, #52]	; (8002c40 <NVIC_SetPriority+0x50>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	e00b      	b.n	8002c36 <NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <NVIC_SetPriority+0x54>)
 8002c24:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	b2d9      	uxtb	r1, r3
 8002c2e:	1813      	adds	r3, r2, r0
 8002c30:	460a      	mov	r2, r1
 8002c32:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002c4e:	f7fe f9cf 	bl	8000ff0 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 8002c52:	f000 fae3 	bl	800321c <_ZL12MX_GPIO_Initv>
	MX_TIM2_Init();
 8002c56:	f000 fa57 	bl	8003108 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 8002c5a:	f000 f9f7 	bl	800304c <_ZL12MX_TIM3_Initv>
	MX_TIM4_Init();
 8002c5e:	f000 f997 	bl	8002f90 <_ZL12MX_TIM4_Initv>
//	MX_CAN_Init(); //要らないかもだけど確認取れて無いので残しておく
	MX_SPI2_Init();
 8002c62:	f000 f959 	bl	8002f18 <_ZL12MX_SPI2_Initv>
	MX_USART1_UART_Init(); //デバッグ用だよ
 8002c66:	f000 faab 	bl	80031c0 <_ZL19MX_USART1_UART_Initv>
	// CANを初期化する．
	can_init();
 8002c6a:	f7ff fe55 	bl	8002918 <can_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	NVIC_SetPriority(SysTick_IRQn, 1); //HAL_Delayから戻ってこなくなったので、systickの順位を上げた　二番目
 8002c6e:	2101      	movs	r1, #1
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c74:	f7ff ffbc 	bl	8002bf0 <NVIC_SetPriority>
	SystemClock_Config();
 8002c78:	f000 f8fe 	bl	8002e78 <_Z18SystemClock_Configv>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	/* USER CODE BEGIN 2 */
	SPI2->CR1 |= SPI_CR1_SPE;
 8002c7c:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <main+0x138>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3f      	ldr	r2, [pc, #252]	; (8002d80 <main+0x138>)
 8002c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c86:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim2); //タイマー割り込み用
 8002c88:	483e      	ldr	r0, [pc, #248]	; (8002d84 <main+0x13c>)
 8002c8a:	f7fe ffbe 	bl	8001c0a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //エンコーダ用
 8002c8e:	2118      	movs	r1, #24
 8002c90:	483d      	ldr	r0, [pc, #244]	; (8002d88 <main+0x140>)
 8002c92:	f7fe ffc5 	bl	8001c20 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002c96:	2118      	movs	r1, #24
 8002c98:	483c      	ldr	r0, [pc, #240]	; (8002d8c <main+0x144>)
 8002c9a:	f7fe ffc1 	bl	8001c20 <HAL_TIM_Encoder_Start>

	//CANの通信速度を設定する
	can_set_bitrate(CAN_BITRATE_500K);
 8002c9e:	2006      	movs	r0, #6
 8002ca0:	f7ff ff06 	bl	8002ab0 <can_set_bitrate>
//	HAL_Delay(250);
//
//	GPIOC->BSRR = GPIO_BSRR_BR13;
//	GPIOB->BSRR = GPIO_BSRR_BS0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2;

	bool r = odom->Initialize(); //ジャイロの初期化に失敗するとループに入る
 8002ca4:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <main+0x148>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe03 	bl	80028b4 <_ZN8Odometry10InitializeEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	70fb      	strb	r3, [r7, #3]
	if (!r) {
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <main+0x94>
		while (1) {
			HAL_Delay(100);
 8002cbe:	2064      	movs	r0, #100	; 0x64
 8002cc0:	f7fe f9ba 	bl	8001038 <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BR9;
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <main+0x14c>)
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cca:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 8002ccc:	2064      	movs	r0, #100	; 0x64
 8002cce:	f7fe f9b3 	bl	8001038 <HAL_Delay>
			GPIOB->BSRR = GPIO_BSRR_BS9;
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <main+0x14c>)
 8002cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd8:	611a      	str	r2, [r3, #16]
			HAL_Delay(100);
 8002cda:	e7f0      	b.n	8002cbe <main+0x76>
		}
	}

	can_enable(); //CANの有効化
 8002cdc:	f7ff fe8c 	bl	80029f8 <can_enable>

	HAL_NVIC_EnableIRQ(TIM2_IRQn); //割り込み有効化 上のodom->Initializeが終わってからでないと、初期化終わる前にジャイロの値をとってしまう 初期の角度がズレる
 8002ce0:	201c      	movs	r0, #28
 8002ce2:	f7fe fb71 	bl	80013c8 <HAL_NVIC_EnableIRQ>

	CANtxinit();
 8002ce6:	f000 f88b 	bl	8002e00 <_ZL9CANtxinitv>

	static float X;
	static float Y;
	static float Yaw;
	uint32_t last_time = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(HAL_GetTick()-last_time >= (1000/CAN_Freq)){
 8002cee:	f7fe f99d 	bl	800102c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	bf8c      	ite	hi
 8002cfc:	2301      	movhi	r3, #1
 8002cfe:	2300      	movls	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f3      	beq.n	8002cee <main+0xa6>
		odom->GetPose(&X, &Y, &Yaw);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <main+0x148>)
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <main+0x150>)
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <main+0x154>)
 8002d0e:	4924      	ldr	r1, [pc, #144]	; (8002da0 <main+0x158>)
 8002d10:	f7ff fdea 	bl	80028e8 <_ZN8Odometry7GetPoseEPfS0_S0_>
		can_pack(tx_payload_x,X);
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <main+0x158>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4822      	ldr	r0, [pc, #136]	; (8002da4 <main+0x15c>)
 8002d1c:	f000 faf2 	bl	8003304 <_Z8can_packIfEvRA8_hT_>
		can_pack(tx_payload_y,Y);
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <main+0x154>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4820      	ldr	r0, [pc, #128]	; (8002da8 <main+0x160>)
 8002d28:	f000 faec 	bl	8003304 <_Z8can_packIfEvRA8_hT_>
		can_pack(tx_payload_yaw,Yaw);
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <main+0x150>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	481e      	ldr	r0, [pc, #120]	; (8002dac <main+0x164>)
 8002d34:	f000 fae6 	bl	8003304 <_Z8can_packIfEvRA8_hT_>

		can_tx(&tx_header_x, tx_payload_x); //can pack 通して tx_payload //can_txのled_onが上手く動いてないっぽいのでデバッグ用にLEDを変えてみる
 8002d38:	491a      	ldr	r1, [pc, #104]	; (8002da4 <main+0x15c>)
 8002d3a:	481d      	ldr	r0, [pc, #116]	; (8002db0 <main+0x168>)
 8002d3c:	f7ff ff0a 	bl	8002b54 <can_tx>
		asm("NOP");
 8002d40:	bf00      	nop
		asm("NOP");
 8002d42:	bf00      	nop
		asm("NOP");
 8002d44:	bf00      	nop
		asm("NOP");
 8002d46:	bf00      	nop
		asm("NOP");
 8002d48:	bf00      	nop
		asm("NOP");
 8002d4a:	bf00      	nop
		asm("NOP");
 8002d4c:	bf00      	nop
		asm("NOP");
 8002d4e:	bf00      	nop
		asm("NOP");
 8002d50:	bf00      	nop
		asm("NOP");
 8002d52:	bf00      	nop
		can_tx(&tx_header_y, tx_payload_y);
 8002d54:	4914      	ldr	r1, [pc, #80]	; (8002da8 <main+0x160>)
 8002d56:	4817      	ldr	r0, [pc, #92]	; (8002db4 <main+0x16c>)
 8002d58:	f7ff fefc 	bl	8002b54 <can_tx>
		asm("NOP");
 8002d5c:	bf00      	nop
		asm("NOP");
 8002d5e:	bf00      	nop
		asm("NOP");
 8002d60:	bf00      	nop
		asm("NOP");
 8002d62:	bf00      	nop
		asm("NOP");
 8002d64:	bf00      	nop
		asm("NOP");
 8002d66:	bf00      	nop
		asm("NOP");
 8002d68:	bf00      	nop
		asm("NOP");
 8002d6a:	bf00      	nop
		asm("NOP");
 8002d6c:	bf00      	nop
		asm("NOP");
 8002d6e:	bf00      	nop
		can_tx(&tx_header_yaw, tx_payload_yaw);
 8002d70:	490e      	ldr	r1, [pc, #56]	; (8002dac <main+0x164>)
 8002d72:	4811      	ldr	r0, [pc, #68]	; (8002db8 <main+0x170>)
 8002d74:	f7ff feee 	bl	8002b54 <can_tx>

		last_time = HAL_GetTick();
 8002d78:	f7fe f958 	bl	800102c <HAL_GetTick>
 8002d7c:	6078      	str	r0, [r7, #4]
		if(HAL_GetTick()-last_time >= (1000/CAN_Freq)){
 8002d7e:	e7b6      	b.n	8002cee <main+0xa6>
 8002d80:	40003800 	.word	0x40003800
 8002d84:	20000900 	.word	0x20000900
 8002d88:	20000940 	.word	0x20000940
 8002d8c:	20000980 	.word	0x20000980
 8002d90:	20000a70 	.word	0x20000a70
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	20000a94 	.word	0x20000a94
 8002d9c:	20000a90 	.word	0x20000a90
 8002da0:	20000a8c 	.word	0x20000a8c
 8002da4:	20000a74 	.word	0x20000a74
 8002da8:	20000a7c 	.word	0x20000a7c
 8002dac:	20000a84 	.word	0x20000a84
 8002db0:	20000a28 	.word	0x20000a28
 8002db4:	20000a40 	.word	0x20000a40
 8002db8:	20000a58 	.word	0x20000a58

08002dbc <TIM2_IRQHandler>:
		/* USER CODE BEGIN 3 */
	}
}

extern "C" void TIM2_IRQHandler(void) //サンプリングレート1000
		{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 8002dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <TIM2_IRQHandler+0x36>
		odom->Sample();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <TIM2_IRQHandler+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd75 	bl	80028cc <_ZN8Odometry6SampleEv>

		TIM2->SR &= ~TIM_SR_UIF;
 8002de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6113      	str	r3, [r2, #16]
	}

	led_process();
 8002df2:	f7ff fee1 	bl	8002bb8 <led_process>
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000a70 	.word	0x20000a70

08002e00 <_ZL9CANtxinitv>:

void CANtxinit(void) {
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

	tx_header_x.RTR = CAN_RTR_DATA;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <_ZL9CANtxinitv+0x6c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
	tx_header_x.IDE = CAN_ID_STD;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <_ZL9CANtxinitv+0x6c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
	tx_header_x.StdId = 0x205; //ID決める
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <_ZL9CANtxinitv+0x6c>)
 8002e12:	f240 2205 	movw	r2, #517	; 0x205
 8002e16:	601a      	str	r2, [r3, #0]
	tx_header_x.ExtId = 0; //ここは0のままで 無くても問題ないと思う
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <_ZL9CANtxinitv+0x6c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
	tx_header_x.DLC = 8;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_ZL9CANtxinitv+0x6c>)
 8002e20:	2208      	movs	r2, #8
 8002e22:	611a      	str	r2, [r3, #16]
	tx_header_y.RTR = CAN_RTR_DATA;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <_ZL9CANtxinitv+0x70>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
	tx_header_y.IDE = CAN_ID_STD;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_ZL9CANtxinitv+0x70>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
	tx_header_y.StdId = 0x206;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <_ZL9CANtxinitv+0x70>)
 8002e32:	f240 2206 	movw	r2, #518	; 0x206
 8002e36:	601a      	str	r2, [r3, #0]
	tx_header_y.ExtId = 0;
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <_ZL9CANtxinitv+0x70>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
	tx_header_y.DLC = 8;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <_ZL9CANtxinitv+0x70>)
 8002e40:	2208      	movs	r2, #8
 8002e42:	611a      	str	r2, [r3, #16]
	tx_header_yaw.RTR = CAN_RTR_DATA;
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <_ZL9CANtxinitv+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
	tx_header_yaw.IDE = CAN_ID_STD;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <_ZL9CANtxinitv+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
	tx_header_yaw.StdId = 0x207;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <_ZL9CANtxinitv+0x74>)
 8002e52:	f240 2207 	movw	r2, #519	; 0x207
 8002e56:	601a      	str	r2, [r3, #0]
	tx_header_yaw.ExtId = 0;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <_ZL9CANtxinitv+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	605a      	str	r2, [r3, #4]
	tx_header_yaw.DLC = 8;
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <_ZL9CANtxinitv+0x74>)
 8002e60:	2208      	movs	r2, #8
 8002e62:	611a      	str	r2, [r3, #16]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000a28 	.word	0x20000a28
 8002e70:	20000a40 	.word	0x20000a40
 8002e74:	20000a58 	.word	0x20000a58

08002e78 <_Z18SystemClock_Configv>:
/* USER CODE END 3 */
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002e7e:	f107 0318 	add.w	r3, r7, #24
 8002e82:	2228      	movs	r2, #40	; 0x28
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fd62 	bl	8004950 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eac:	2302      	movs	r3, #2
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002eb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ebc:	f107 0318 	add.w	r3, r7, #24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fbd1 	bl	8001668 <HAL_RCC_OscConfig>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <_Z18SystemClock_Configv+0x62>
		Error_Handler();
 8002ed6:	f000 fa0f 	bl	80032f8 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002eda:	230f      	movs	r3, #15
 8002edc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fd7d 	bl	80019f4 <HAL_RCC_ClockConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <_Z18SystemClock_Configv+0x96>
		Error_Handler();
 8002f0a:	f000 f9f5 	bl	80032f8 <Error_Handler>
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3740      	adds	r7, #64	; 0x40
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <_ZL12MX_SPI2_Initv+0x74>)
 8002f20:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f28:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f4c:	2228      	movs	r2, #40	; 0x28
 8002f4e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002f68:	4807      	ldr	r0, [pc, #28]	; (8002f88 <_ZL12MX_SPI2_Initv+0x70>)
 8002f6a:	f7fe fe13 	bl	8001b94 <HAL_SPI_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <_ZL12MX_SPI2_Initv+0x6a>
		Error_Handler();
 8002f7e:	f000 f9bb 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200008a8 	.word	0x200008a8
 8002f8c:	40003800 	.word	0x40003800

08002f90 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	; 0x30
 8002f94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 fcd6 	bl	8004950 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fae:	4a26      	ldr	r2, [pc, #152]	; (8003048 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fb0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xffff;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fea:	2301      	movs	r3, #1
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8002ff6:	f107 030c 	add.w	r3, r7, #12
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4811      	ldr	r0, [pc, #68]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8002ffe:	f7fe ff3d 	bl	8001e7c <HAL_TIM_Encoder_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <_ZL12MX_TIM4_Initv+0x86>
		Error_Handler();
 8003012:	f000 f971 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4808      	ldr	r0, [pc, #32]	; (8003044 <_ZL12MX_TIM4_Initv+0xb4>)
 8003024:	f7fe ff73 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 8003028:	4603      	mov	r3, r0
			!= HAL_OK) {
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <_ZL12MX_TIM4_Initv+0xac>
		Error_Handler();
 8003038:	f000 f95e 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	3730      	adds	r7, #48	; 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000980 	.word	0x20000980
 8003048:	40000800 	.word	0x40000800

0800304c <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f001 fc78 	bl	8004950 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <_ZL12MX_TIM3_Initv+0xb8>)
 800306c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 800307c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003080:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800308e:	2303      	movs	r3, #3
 8003090:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003096:	2301      	movs	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030a6:	2301      	movs	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4619      	mov	r1, r3
 80030b8:	4811      	ldr	r0, [pc, #68]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 80030ba:	f7fe fedf 	bl	8001e7c <HAL_TIM_Encoder_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 80030ce:	f000 f913 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <_ZL12MX_TIM3_Initv+0xb4>)
 80030e0:	f7fe ff15 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 80030e4:	4603      	mov	r3, r0
			!= HAL_OK) {
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 80030f4:	f000 f900 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80030f8:	bf00      	nop
 80030fa:	3730      	adds	r7, #48	; 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000940 	.word	0x20000940
 8003104:	40000400 	.word	0x40000400

08003108 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800311c:	463b      	mov	r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 8003126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 800312e:	2247      	movs	r2, #71	; 0x47
 8003130:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = Period - 1;
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 800313a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800313e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800314e:	481b      	ldr	r0, [pc, #108]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 8003150:	f7fe fe7a 	bl	8001e48 <HAL_TIM_Base_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_ZL12MX_TIM2_Initv+0x60>
		Error_Handler();
 8003164:	f000 f8c8 	bl	80032f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	4619      	mov	r1, r3
 8003174:	4811      	ldr	r0, [pc, #68]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 8003176:	f7fe fd75 	bl	8001c64 <HAL_TIM_ConfigClockSource>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <_ZL12MX_TIM2_Initv+0x86>
		Error_Handler();
 800318a:	f000 f8b5 	bl	80032f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003196:	463b      	mov	r3, r7
 8003198:	4619      	mov	r1, r3
 800319a:	4808      	ldr	r0, [pc, #32]	; (80031bc <_ZL12MX_TIM2_Initv+0xb4>)
 800319c:	f7fe feb7 	bl	8001f0e <HAL_TIMEx_MasterConfigSynchronization>
 80031a0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 80031b0:	f000 f8a2 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000900 	.word	0x20000900

080031c0 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <_ZL19MX_USART1_UART_Initv+0x58>)
 80031c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200; //変更してもいいかな
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80031f6:	4807      	ldr	r0, [pc, #28]	; (8003214 <_ZL19MX_USART1_UART_Initv+0x54>)
 80031f8:	f7fe ff56 	bl	80020a8 <HAL_UART_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 800320c:	f000 f874 	bl	80032f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* USER CODE END USART1_Init 2 */

}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200009c0 	.word	0x200009c0
 8003218:	40013800 	.word	0x40013800

0800321c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003230:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800324e:	f043 0320 	orr.w	r3, r3, #32
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <_ZL12MX_GPIO_Initv+0xd0>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003296:	4816      	ldr	r0, [pc, #88]	; (80032f0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003298:	f7fe f9e0 	bl	800165c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800329c:	2200      	movs	r2, #0
 800329e:	f241 6107 	movw	r1, #5639	; 0x1607
 80032a2:	4814      	ldr	r0, [pc, #80]	; (80032f4 <_ZL12MX_GPIO_Initv+0xd8>)
 80032a4:	f7fe f9da 	bl	800165c <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12
					| GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2302      	movs	r3, #2
 80032b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4619      	mov	r1, r3
 80032c0:	480b      	ldr	r0, [pc, #44]	; (80032f0 <_ZL12MX_GPIO_Initv+0xd4>)
 80032c2:	f7fe f8eb 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB12 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 80032c6:	f241 6307 	movw	r3, #5639	; 0x1607
 80032ca:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_12 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032cc:	2301      	movs	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4619      	mov	r1, r3
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <_ZL12MX_GPIO_Initv+0xd8>)
 80032e0:	f7fe f8dc 	bl	800149c <HAL_GPIO_Init>

	//GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
	//GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
	//LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40011000 	.word	0x40011000
 80032f4:	40010c00 	.word	0x40010c00

080032f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <_Z8can_packIfEvRA8_hT_>:
     data = _e.data;
 }

 // packs can payload
 template<typename T>
 void can_pack(uint8_t (&buf)[CAN_MTU], const T data) //第一引数に格納用の配列
 8003304:	b490      	push	{r4, r7}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 {
     _Encapsulator<T> _e;
     _e.data = data;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	60bb      	str	r3, [r7, #8]

     for (int i = sizeof(T); i > 0;)
 8003312:	2304      	movs	r3, #4
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	dd17      	ble.n	800334c <_Z8can_packIfEvRA8_hT_+0x48>
     {
         i--;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	3b01      	subs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
         buf[i] = _e.i & 0xff;
 8003322:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003326:	b2d9      	uxtb	r1, r3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4413      	add	r3, r2
 800332e:	460a      	mov	r2, r1
 8003330:	701a      	strb	r2, [r3, #0]
         _e.i >>= 8;
 8003332:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	0a0b      	lsrs	r3, r1, #8
 8003340:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003344:	0a14      	lsrs	r4, r2, #8
 8003346:	e9c7 3402 	strd	r3, r4, [r7, #8]
     for (int i = sizeof(T); i > 0;)
 800334a:	e7e4      	b.n	8003316 <_Z8can_packIfEvRA8_hT_+0x12>
     }
 }
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bc90      	pop	{r4, r7}
 8003354:	4770      	bx	lr
	...

08003358 <_Z41__static_initialization_and_destruction_0ii>:
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10e      	bne.n	8003386 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800336e:	4293      	cmp	r3, r2
 8003370:	d109      	bne.n	8003386 <_Z41__static_initialization_and_destruction_0ii+0x2e>
Odometry *odom = new Odometry();
 8003372:	2014      	movs	r0, #20
 8003374:	f000 f9cd 	bl	8003712 <_Znwj>
 8003378:	4603      	mov	r3, r0
 800337a:	461c      	mov	r4, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff f863 	bl	8002448 <_ZN8OdometryC1Ev>
 8003382:	4b03      	ldr	r3, [pc, #12]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003384:	601c      	str	r4, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	bf00      	nop
 8003390:	20000a70 	.word	0x20000a70

08003394 <_GLOBAL__sub_I_hspi2>:
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
 8003398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff ffdb 	bl	8003358 <_Z41__static_initialization_and_destruction_0ii>
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_MspInit+0x3c>)
{
 80033a6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	619a      	str	r2, [r3, #24]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	f002 0201 	and.w	r2, r2, #1
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033c0:	61da      	str	r2, [r3, #28]
 80033c2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ce:	6853      	ldr	r3, [r2, #4]
 80033d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033da:	b002      	add	sp, #8
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40010000 	.word	0x40010000

080033e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80033e8:	b510      	push	{r4, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	2210      	movs	r2, #16
 80033f0:	2100      	movs	r1, #0
 80033f2:	a802      	add	r0, sp, #8
 80033f4:	f001 faac 	bl	8004950 <memset>
  if(hcan->Instance==CAN1)
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_CAN_MspInit+0x7c>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d12e      	bne.n	800345e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003400:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003404:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003408:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	4815      	ldr	r0, [pc, #84]	; (8003468 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003412:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003416:	9200      	str	r2, [sp, #0]
 8003418:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE(); //GPIOBじゃ無いあたりが気になるけど、動いてるしバグが怖いのでそのままに
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	f042 0204 	orr.w	r2, r2, #4
 8003420:	619a      	str	r2, [r3, #24]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800342c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003430:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	f7fe f833 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343a:	2302      	movs	r3, #2
 800343c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003440:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	a902      	add	r1, sp, #8
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <HAL_CAN_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003446:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003448:	f7fe f828 	bl	800149c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
    __HAL_AFIO_REMAP_CAN1_2();
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_CAN_MspInit+0x84>)
 800344e:	6853      	ldr	r3, [r2, #4]
 8003450:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003454:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6053      	str	r3, [r2, #4]
  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800345e:	b006      	add	sp, #24
 8003460:	bd10      	pop	{r4, pc}
 8003462:	bf00      	nop
 8003464:	40006400 	.word	0x40006400
 8003468:	40010c00 	.word	0x40010c00
 800346c:	40010000 	.word	0x40010000

08003470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003470:	b510      	push	{r4, lr}
 8003472:	4604      	mov	r4, r0
 8003474:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003476:	2210      	movs	r2, #16
 8003478:	2100      	movs	r1, #0
 800347a:	a802      	add	r0, sp, #8
 800347c:	f001 fa68 	bl	8004950 <memset>
  if(hspi->Instance==SPI2)
 8003480:	6822      	ldr	r2, [r4, #0]
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_SPI_MspInit+0x70>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d128      	bne.n	80034da <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003488:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800348c:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003498:	4812      	ldr	r0, [pc, #72]	; (80034e4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800349a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800349e:	9200      	str	r2, [sp, #0]
 80034a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	f042 0208 	orr.w	r2, r2, #8
 80034a8:	619a      	str	r2, [r3, #24]
 80034aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c2:	f7fd ffeb 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ca:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ce:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f7fd ffe1 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034da:	b006      	add	sp, #24
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	bf00      	nop
 80034e0:	40003800 	.word	0x40003800
 80034e4:	40010c00 	.word	0x40010c00

080034e8 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	2210      	movs	r2, #16
{
 80034ea:	b510      	push	{r4, lr}
 80034ec:	4604      	mov	r4, r0
 80034ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	eb0d 0002 	add.w	r0, sp, r2
 80034f4:	2100      	movs	r1, #0
 80034f6:	f001 fa2b 	bl	8004950 <memset>
  if(htim_encoder->Instance==TIM3)
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	4a23      	ldr	r2, [pc, #140]	; (800358c <HAL_TIM_Encoder_MspInit+0xa4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d125      	bne.n	800354e <HAL_TIM_Encoder_MspInit+0x66>
    {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM3_CLK_ENABLE();
 8003502:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_TIM_Encoder_MspInit+0xa8>)
      PB5     ------> TIM3_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_PULLUP;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	a904      	add	r1, sp, #16
      __HAL_RCC_TIM3_CLK_ENABLE();
 8003506:	69da      	ldr	r2, [r3, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	4822      	ldr	r0, [pc, #136]	; (8003594 <HAL_TIM_Encoder_MspInit+0xac>)
      __HAL_RCC_TIM3_CLK_ENABLE();
 800350a:	f042 0202 	orr.w	r2, r2, #2
 800350e:	61da      	str	r2, [r3, #28]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	f002 0202 	and.w	r2, r2, #2
 8003516:	9200      	str	r2, [sp, #0]
 8003518:	9a00      	ldr	r2, [sp, #0]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	f042 0208 	orr.w	r2, r2, #8
 8003520:	619a      	str	r2, [r3, #24]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	9b01      	ldr	r3, [sp, #4]
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800352c:	2330      	movs	r3, #48	; 0x30
 800352e:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003530:	2301      	movs	r3, #1
 8003532:	9306      	str	r3, [sp, #24]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	f7fd ffb2 	bl	800149c <HAL_GPIO_Init>

      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_TIM_Encoder_MspInit+0xb0>)
 800353a:	6853      	ldr	r3, [r2, #4]
 800353c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003540:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003548:	6053      	str	r3, [r2, #4]

  /* USER CODE END TIM4_MspInit 1 */
  }


}
 800354a:	b008      	add	sp, #32
 800354c:	bd10      	pop	{r4, pc}
  else if(htim_encoder->Instance==TIM4)
 800354e:	4a13      	ldr	r2, [pc, #76]	; (800359c <HAL_TIM_Encoder_MspInit+0xb4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d1fa      	bne.n	800354a <HAL_TIM_Encoder_MspInit+0x62>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_TIM_Encoder_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003558:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355a:	480e      	ldr	r0, [pc, #56]	; (8003594 <HAL_TIM_Encoder_MspInit+0xac>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800355c:	f042 0204 	orr.w	r2, r2, #4
 8003560:	61da      	str	r2, [r3, #28]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	f002 0204 	and.w	r2, r2, #4
 8003568:	9202      	str	r2, [sp, #8]
 800356a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	619a      	str	r2, [r3, #24]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800357e:	23c0      	movs	r3, #192	; 0xc0
 8003580:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003582:	2301      	movs	r3, #1
 8003584:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f7fd ff89 	bl	800149c <HAL_GPIO_Init>
}
 800358a:	e7de      	b.n	800354a <HAL_TIM_Encoder_MspInit+0x62>
 800358c:	40000400 	.word	0x40000400
 8003590:	40021000 	.word	0x40021000
 8003594:	40010c00 	.word	0x40010c00
 8003598:	40010000 	.word	0x40010000
 800359c:	40000800 	.word	0x40000800

080035a0 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80035a0:	6803      	ldr	r3, [r0, #0]
{
 80035a2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d110      	bne.n	80035cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80035ae:	69da      	ldr	r2, [r3, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035b0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035c6:	b002      	add	sp, #8
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035c8:	f7fd beca 	b.w	8001360 <HAL_NVIC_SetPriority>
}
 80035cc:	b002      	add	sp, #8
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d0:	b510      	push	{r4, lr}
 80035d2:	4604      	mov	r4, r0
 80035d4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d6:	2210      	movs	r2, #16
 80035d8:	2100      	movs	r1, #0
 80035da:	a802      	add	r0, sp, #8
 80035dc:	f001 f9b8 	bl	8004950 <memset>
  if(huart->Instance==USART1)
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_UART_MspInit+0x80>)
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d131      	bne.n	800364c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035e8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035ec:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ee:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	4816      	ldr	r0, [pc, #88]	; (8003654 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80035fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003602:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003604:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	f042 0204 	orr.w	r2, r2, #4
 800360a:	619a      	str	r2, [r3, #24]
 800360c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003624:	f7fd ff3a 	bl	800149c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003630:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	a902      	add	r1, sp, #8
 8003634:	4807      	ldr	r0, [pc, #28]	; (8003654 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003636:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f7fd ff30 	bl	800149c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800363c:	2025      	movs	r0, #37	; 0x25
 800363e:	4622      	mov	r2, r4
 8003640:	4621      	mov	r1, r4
 8003642:	f7fd fe8d 	bl	8001360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003646:	2025      	movs	r0, #37	; 0x25
 8003648:	f7fd febe 	bl	80013c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */
  }

}
 800364c:	b006      	add	sp, #24
 800364e:	bd10      	pop	{r4, pc}
 8003650:	40013800 	.word	0x40013800
 8003654:	40010800 	.word	0x40010800

08003658 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003658:	4770      	bx	lr

0800365a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800365a:	e7fe      	b.n	800365a <HardFault_Handler>

0800365c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800365c:	e7fe      	b.n	800365c <MemManage_Handler>

0800365e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800365e:	e7fe      	b.n	800365e <BusFault_Handler>

08003660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003660:	e7fe      	b.n	8003660 <UsageFault_Handler>

08003662 <SVC_Handler>:
 8003662:	4770      	bx	lr

08003664 <DebugMon_Handler>:
 8003664:	4770      	bx	lr

08003666 <PendSV_Handler>:
 8003666:	4770      	bx	lr

08003668 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003668:	f7fd bcd4 	b.w	8001014 <HAL_IncTick>

0800366c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <USART1_IRQHandler+0x8>)
 800366e:	f7fe bd87 	b.w	8002180 <HAL_UART_IRQHandler>
 8003672:	bf00      	nop
 8003674:	200009c0 	.word	0x200009c0

08003678 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <SystemInit+0x40>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <SystemInit+0x44>)
 8003686:	400a      	ands	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003690:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003694:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800369c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80036a4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80036a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <SystemInit+0x48>)
 80036b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	f8ff0000 	.word	0xf8ff0000
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036c6:	e003      	b.n	80036d0 <LoopCopyDataInit>

080036c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036ce:	3104      	adds	r1, #4

080036d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80036d0:	480a      	ldr	r0, [pc, #40]	; (80036fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80036d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80036d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80036d8:	d3f6      	bcc.n	80036c8 <CopyDataInit>
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80036dc:	e002      	b.n	80036e4 <LoopFillZerobss>

080036de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80036e0:	f842 3b04 	str.w	r3, [r2], #4

080036e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036e8:	d3f9      	bcc.n	80036de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036ea:	f7ff ffc5 	bl	8003678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ee:	f000 fec5 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036f2:	f7ff faa9 	bl	8002c48 <main>
  bx lr
 80036f6:	4770      	bx	lr
  ldr r3, =_sidata
 80036f8:	080051c4 	.word	0x080051c4
  ldr r0, =_sdata
 80036fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003700:	20000854 	.word	0x20000854
  ldr r2, =_sbss
 8003704:	20000854 	.word	0x20000854
  ldr r3, = _ebss
 8003708:	20000ae8 	.word	0x20000ae8

0800370c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800370c:	e7fe      	b.n	800370c <ADC1_2_IRQHandler>

0800370e <_ZdlPvj>:
 800370e:	f000 b819 	b.w	8003744 <_ZdlPv>

08003712 <_Znwj>:
 8003712:	b510      	push	{r4, lr}
 8003714:	2800      	cmp	r0, #0
 8003716:	bf14      	ite	ne
 8003718:	4604      	movne	r4, r0
 800371a:	2401      	moveq	r4, #1
 800371c:	4620      	mov	r0, r4
 800371e:	f000 fed1 	bl	80044c4 <malloc>
 8003722:	b930      	cbnz	r0, 8003732 <_Znwj+0x20>
 8003724:	f000 f806 	bl	8003734 <_ZSt15get_new_handlerv>
 8003728:	b908      	cbnz	r0, 800372e <_Znwj+0x1c>
 800372a:	f000 fe99 	bl	8004460 <abort>
 800372e:	4780      	blx	r0
 8003730:	e7f4      	b.n	800371c <_Znwj+0xa>
 8003732:	bd10      	pop	{r4, pc}

08003734 <_ZSt15get_new_handlerv>:
 8003734:	4b02      	ldr	r3, [pc, #8]	; (8003740 <_ZSt15get_new_handlerv+0xc>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	f3bf 8f5b 	dmb	ish
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000a98 	.word	0x20000a98

08003744 <_ZdlPv>:
 8003744:	f000 bec6 	b.w	80044d4 <free>

08003748 <cosf>:
 8003748:	b507      	push	{r0, r1, r2, lr}
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <cosf+0x64>)
 800374c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003750:	4293      	cmp	r3, r2
 8003752:	4601      	mov	r1, r0
 8003754:	dc03      	bgt.n	800375e <cosf+0x16>
 8003756:	2100      	movs	r1, #0
 8003758:	f000 fa56 	bl	8003c08 <__kernel_cosf>
 800375c:	e004      	b.n	8003768 <cosf+0x20>
 800375e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003762:	db04      	blt.n	800376e <cosf+0x26>
 8003764:	f7fd f914 	bl	8000990 <__aeabi_fsub>
 8003768:	b003      	add	sp, #12
 800376a:	f85d fb04 	ldr.w	pc, [sp], #4
 800376e:	4669      	mov	r1, sp
 8003770:	f000 f89e 	bl	80038b0 <__ieee754_rem_pio2f>
 8003774:	f000 0203 	and.w	r2, r0, #3
 8003778:	2a01      	cmp	r2, #1
 800377a:	d005      	beq.n	8003788 <cosf+0x40>
 800377c:	2a02      	cmp	r2, #2
 800377e:	d00a      	beq.n	8003796 <cosf+0x4e>
 8003780:	b972      	cbnz	r2, 80037a0 <cosf+0x58>
 8003782:	9901      	ldr	r1, [sp, #4]
 8003784:	9800      	ldr	r0, [sp, #0]
 8003786:	e7e7      	b.n	8003758 <cosf+0x10>
 8003788:	9901      	ldr	r1, [sp, #4]
 800378a:	9800      	ldr	r0, [sp, #0]
 800378c:	f000 fd5a 	bl	8004244 <__kernel_sinf>
 8003790:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003794:	e7e8      	b.n	8003768 <cosf+0x20>
 8003796:	9901      	ldr	r1, [sp, #4]
 8003798:	9800      	ldr	r0, [sp, #0]
 800379a:	f000 fa35 	bl	8003c08 <__kernel_cosf>
 800379e:	e7f7      	b.n	8003790 <cosf+0x48>
 80037a0:	2201      	movs	r2, #1
 80037a2:	9901      	ldr	r1, [sp, #4]
 80037a4:	9800      	ldr	r0, [sp, #0]
 80037a6:	f000 fd4d 	bl	8004244 <__kernel_sinf>
 80037aa:	e7dd      	b.n	8003768 <cosf+0x20>
 80037ac:	3f490fd8 	.word	0x3f490fd8

080037b0 <sinf>:
 80037b0:	b507      	push	{r0, r1, r2, lr}
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <sinf+0x68>)
 80037b4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80037b8:	4293      	cmp	r3, r2
 80037ba:	4601      	mov	r1, r0
 80037bc:	dc04      	bgt.n	80037c8 <sinf+0x18>
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	f000 fd3f 	bl	8004244 <__kernel_sinf>
 80037c6:	e004      	b.n	80037d2 <sinf+0x22>
 80037c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80037cc:	db04      	blt.n	80037d8 <sinf+0x28>
 80037ce:	f7fd f8df 	bl	8000990 <__aeabi_fsub>
 80037d2:	b003      	add	sp, #12
 80037d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80037d8:	4669      	mov	r1, sp
 80037da:	f000 f869 	bl	80038b0 <__ieee754_rem_pio2f>
 80037de:	f000 0003 	and.w	r0, r0, #3
 80037e2:	2801      	cmp	r0, #1
 80037e4:	d006      	beq.n	80037f4 <sinf+0x44>
 80037e6:	2802      	cmp	r0, #2
 80037e8:	d009      	beq.n	80037fe <sinf+0x4e>
 80037ea:	b980      	cbnz	r0, 800380e <sinf+0x5e>
 80037ec:	2201      	movs	r2, #1
 80037ee:	9901      	ldr	r1, [sp, #4]
 80037f0:	9800      	ldr	r0, [sp, #0]
 80037f2:	e7e6      	b.n	80037c2 <sinf+0x12>
 80037f4:	9901      	ldr	r1, [sp, #4]
 80037f6:	9800      	ldr	r0, [sp, #0]
 80037f8:	f000 fa06 	bl	8003c08 <__kernel_cosf>
 80037fc:	e7e9      	b.n	80037d2 <sinf+0x22>
 80037fe:	2201      	movs	r2, #1
 8003800:	9901      	ldr	r1, [sp, #4]
 8003802:	9800      	ldr	r0, [sp, #0]
 8003804:	f000 fd1e 	bl	8004244 <__kernel_sinf>
 8003808:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800380c:	e7e1      	b.n	80037d2 <sinf+0x22>
 800380e:	9901      	ldr	r1, [sp, #4]
 8003810:	9800      	ldr	r0, [sp, #0]
 8003812:	f000 f9f9 	bl	8003c08 <__kernel_cosf>
 8003816:	e7f7      	b.n	8003808 <sinf+0x58>
 8003818:	3f490fd8 	.word	0x3f490fd8

0800381c <sqrtf>:
 800381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381e:	b08b      	sub	sp, #44	; 0x2c
 8003820:	4604      	mov	r4, r0
 8003822:	f000 f99d 	bl	8003b60 <__ieee754_sqrtf>
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <sqrtf+0x8c>)
 8003828:	4606      	mov	r6, r0
 800382a:	f993 5000 	ldrsb.w	r5, [r3]
 800382e:	1c6b      	adds	r3, r5, #1
 8003830:	d02a      	beq.n	8003888 <sqrtf+0x6c>
 8003832:	4621      	mov	r1, r4
 8003834:	4620      	mov	r0, r4
 8003836:	f7fd fb7b 	bl	8000f30 <__aeabi_fcmpun>
 800383a:	4607      	mov	r7, r0
 800383c:	bb20      	cbnz	r0, 8003888 <sqrtf+0x6c>
 800383e:	2100      	movs	r1, #0
 8003840:	4620      	mov	r0, r4
 8003842:	f7fd fb4d 	bl	8000ee0 <__aeabi_fcmplt>
 8003846:	b1f8      	cbz	r0, 8003888 <sqrtf+0x6c>
 8003848:	2301      	movs	r3, #1
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <sqrtf+0x90>)
 800384e:	4620      	mov	r0, r4
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	9708      	str	r7, [sp, #32]
 8003854:	f7fc fdde 	bl	8000414 <__aeabi_f2d>
 8003858:	2200      	movs	r2, #0
 800385a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800385e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003862:	2300      	movs	r3, #0
 8003864:	b99d      	cbnz	r5, 800388e <sqrtf+0x72>
 8003866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800386a:	4668      	mov	r0, sp
 800386c:	f000 fd60 	bl	8004330 <matherr>
 8003870:	b1a8      	cbz	r0, 800389e <sqrtf+0x82>
 8003872:	9b08      	ldr	r3, [sp, #32]
 8003874:	b11b      	cbz	r3, 800387e <sqrtf+0x62>
 8003876:	f000 fdfb 	bl	8004470 <__errno>
 800387a:	9b08      	ldr	r3, [sp, #32]
 800387c:	6003      	str	r3, [r0, #0]
 800387e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003882:	f7fd f831 	bl	80008e8 <__aeabi_d2f>
 8003886:	4606      	mov	r6, r0
 8003888:	4630      	mov	r0, r6
 800388a:	b00b      	add	sp, #44	; 0x2c
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fc ff41 	bl	8000718 <__aeabi_ddiv>
 8003896:	2d02      	cmp	r5, #2
 8003898:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800389c:	d1e5      	bne.n	800386a <sqrtf+0x4e>
 800389e:	f000 fde7 	bl	8004470 <__errno>
 80038a2:	2321      	movs	r3, #33	; 0x21
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	e7e4      	b.n	8003872 <sqrtf+0x56>
 80038a8:	2000000c 	.word	0x2000000c
 80038ac:	08004dd8 	.word	0x08004dd8

080038b0 <__ieee754_rem_pio2f>:
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	4a9d      	ldr	r2, [pc, #628]	; (8003b2c <__ieee754_rem_pio2f+0x27c>)
 80038b6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80038ba:	4295      	cmp	r5, r2
 80038bc:	b087      	sub	sp, #28
 80038be:	460c      	mov	r4, r1
 80038c0:	4607      	mov	r7, r0
 80038c2:	dc04      	bgt.n	80038ce <__ieee754_rem_pio2f+0x1e>
 80038c4:	2300      	movs	r3, #0
 80038c6:	6020      	str	r0, [r4, #0]
 80038c8:	604b      	str	r3, [r1, #4]
 80038ca:	2600      	movs	r6, #0
 80038cc:	e01a      	b.n	8003904 <__ieee754_rem_pio2f+0x54>
 80038ce:	4a98      	ldr	r2, [pc, #608]	; (8003b30 <__ieee754_rem_pio2f+0x280>)
 80038d0:	4295      	cmp	r5, r2
 80038d2:	dc4b      	bgt.n	800396c <__ieee754_rem_pio2f+0xbc>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f025 050f 	bic.w	r5, r5, #15
 80038da:	4996      	ldr	r1, [pc, #600]	; (8003b34 <__ieee754_rem_pio2f+0x284>)
 80038dc:	4e96      	ldr	r6, [pc, #600]	; (8003b38 <__ieee754_rem_pio2f+0x288>)
 80038de:	dd23      	ble.n	8003928 <__ieee754_rem_pio2f+0x78>
 80038e0:	f7fd f856 	bl	8000990 <__aeabi_fsub>
 80038e4:	42b5      	cmp	r5, r6
 80038e6:	4607      	mov	r7, r0
 80038e8:	d010      	beq.n	800390c <__ieee754_rem_pio2f+0x5c>
 80038ea:	4994      	ldr	r1, [pc, #592]	; (8003b3c <__ieee754_rem_pio2f+0x28c>)
 80038ec:	f7fd f850 	bl	8000990 <__aeabi_fsub>
 80038f0:	4601      	mov	r1, r0
 80038f2:	6020      	str	r0, [r4, #0]
 80038f4:	4638      	mov	r0, r7
 80038f6:	f7fd f84b 	bl	8000990 <__aeabi_fsub>
 80038fa:	4990      	ldr	r1, [pc, #576]	; (8003b3c <__ieee754_rem_pio2f+0x28c>)
 80038fc:	f7fd f848 	bl	8000990 <__aeabi_fsub>
 8003900:	2601      	movs	r6, #1
 8003902:	6060      	str	r0, [r4, #4]
 8003904:	4630      	mov	r0, r6
 8003906:	b007      	add	sp, #28
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	498c      	ldr	r1, [pc, #560]	; (8003b40 <__ieee754_rem_pio2f+0x290>)
 800390e:	f7fd f83f 	bl	8000990 <__aeabi_fsub>
 8003912:	498c      	ldr	r1, [pc, #560]	; (8003b44 <__ieee754_rem_pio2f+0x294>)
 8003914:	4605      	mov	r5, r0
 8003916:	f7fd f83b 	bl	8000990 <__aeabi_fsub>
 800391a:	4601      	mov	r1, r0
 800391c:	6020      	str	r0, [r4, #0]
 800391e:	4628      	mov	r0, r5
 8003920:	f7fd f836 	bl	8000990 <__aeabi_fsub>
 8003924:	4987      	ldr	r1, [pc, #540]	; (8003b44 <__ieee754_rem_pio2f+0x294>)
 8003926:	e7e9      	b.n	80038fc <__ieee754_rem_pio2f+0x4c>
 8003928:	f7fd f834 	bl	8000994 <__addsf3>
 800392c:	42b5      	cmp	r5, r6
 800392e:	4607      	mov	r7, r0
 8003930:	d00e      	beq.n	8003950 <__ieee754_rem_pio2f+0xa0>
 8003932:	4982      	ldr	r1, [pc, #520]	; (8003b3c <__ieee754_rem_pio2f+0x28c>)
 8003934:	f7fd f82e 	bl	8000994 <__addsf3>
 8003938:	4601      	mov	r1, r0
 800393a:	6020      	str	r0, [r4, #0]
 800393c:	4638      	mov	r0, r7
 800393e:	f7fd f827 	bl	8000990 <__aeabi_fsub>
 8003942:	497e      	ldr	r1, [pc, #504]	; (8003b3c <__ieee754_rem_pio2f+0x28c>)
 8003944:	f7fd f826 	bl	8000994 <__addsf3>
 8003948:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800394c:	6060      	str	r0, [r4, #4]
 800394e:	e7d9      	b.n	8003904 <__ieee754_rem_pio2f+0x54>
 8003950:	497b      	ldr	r1, [pc, #492]	; (8003b40 <__ieee754_rem_pio2f+0x290>)
 8003952:	f7fd f81f 	bl	8000994 <__addsf3>
 8003956:	497b      	ldr	r1, [pc, #492]	; (8003b44 <__ieee754_rem_pio2f+0x294>)
 8003958:	4605      	mov	r5, r0
 800395a:	f7fd f81b 	bl	8000994 <__addsf3>
 800395e:	4601      	mov	r1, r0
 8003960:	6020      	str	r0, [r4, #0]
 8003962:	4628      	mov	r0, r5
 8003964:	f7fd f814 	bl	8000990 <__aeabi_fsub>
 8003968:	4976      	ldr	r1, [pc, #472]	; (8003b44 <__ieee754_rem_pio2f+0x294>)
 800396a:	e7eb      	b.n	8003944 <__ieee754_rem_pio2f+0x94>
 800396c:	4a76      	ldr	r2, [pc, #472]	; (8003b48 <__ieee754_rem_pio2f+0x298>)
 800396e:	4295      	cmp	r5, r2
 8003970:	f300 808c 	bgt.w	8003a8c <__ieee754_rem_pio2f+0x1dc>
 8003974:	f000 fcde 	bl	8004334 <fabsf>
 8003978:	4974      	ldr	r1, [pc, #464]	; (8003b4c <__ieee754_rem_pio2f+0x29c>)
 800397a:	4680      	mov	r8, r0
 800397c:	f7fd f912 	bl	8000ba4 <__aeabi_fmul>
 8003980:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003984:	f7fd f806 	bl	8000994 <__addsf3>
 8003988:	f7fd fae8 	bl	8000f5c <__aeabi_f2iz>
 800398c:	4606      	mov	r6, r0
 800398e:	f7fd f8b5 	bl	8000afc <__aeabi_i2f>
 8003992:	4968      	ldr	r1, [pc, #416]	; (8003b34 <__ieee754_rem_pio2f+0x284>)
 8003994:	4682      	mov	sl, r0
 8003996:	f7fd f905 	bl	8000ba4 <__aeabi_fmul>
 800399a:	4601      	mov	r1, r0
 800399c:	4640      	mov	r0, r8
 800399e:	f7fc fff7 	bl	8000990 <__aeabi_fsub>
 80039a2:	4966      	ldr	r1, [pc, #408]	; (8003b3c <__ieee754_rem_pio2f+0x28c>)
 80039a4:	4680      	mov	r8, r0
 80039a6:	4650      	mov	r0, sl
 80039a8:	f7fd f8fc 	bl	8000ba4 <__aeabi_fmul>
 80039ac:	2e1f      	cmp	r6, #31
 80039ae:	4681      	mov	r9, r0
 80039b0:	dc0c      	bgt.n	80039cc <__ieee754_rem_pio2f+0x11c>
 80039b2:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <__ieee754_rem_pio2f+0x2a0>)
 80039b4:	1e71      	subs	r1, r6, #1
 80039b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80039ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <__ieee754_rem_pio2f+0x11c>
 80039c2:	4649      	mov	r1, r9
 80039c4:	4640      	mov	r0, r8
 80039c6:	f7fc ffe3 	bl	8000990 <__aeabi_fsub>
 80039ca:	e009      	b.n	80039e0 <__ieee754_rem_pio2f+0x130>
 80039cc:	4649      	mov	r1, r9
 80039ce:	4640      	mov	r0, r8
 80039d0:	f7fc ffde 	bl	8000990 <__aeabi_fsub>
 80039d4:	15ed      	asrs	r5, r5, #23
 80039d6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80039da:	1aeb      	subs	r3, r5, r3
 80039dc:	2b08      	cmp	r3, #8
 80039de:	dc01      	bgt.n	80039e4 <__ieee754_rem_pio2f+0x134>
 80039e0:	6020      	str	r0, [r4, #0]
 80039e2:	e024      	b.n	8003a2e <__ieee754_rem_pio2f+0x17e>
 80039e4:	4956      	ldr	r1, [pc, #344]	; (8003b40 <__ieee754_rem_pio2f+0x290>)
 80039e6:	4650      	mov	r0, sl
 80039e8:	f7fd f8dc 	bl	8000ba4 <__aeabi_fmul>
 80039ec:	4681      	mov	r9, r0
 80039ee:	4601      	mov	r1, r0
 80039f0:	4640      	mov	r0, r8
 80039f2:	f7fc ffcd 	bl	8000990 <__aeabi_fsub>
 80039f6:	4601      	mov	r1, r0
 80039f8:	4683      	mov	fp, r0
 80039fa:	4640      	mov	r0, r8
 80039fc:	f7fc ffc8 	bl	8000990 <__aeabi_fsub>
 8003a00:	4649      	mov	r1, r9
 8003a02:	f7fc ffc5 	bl	8000990 <__aeabi_fsub>
 8003a06:	4680      	mov	r8, r0
 8003a08:	494e      	ldr	r1, [pc, #312]	; (8003b44 <__ieee754_rem_pio2f+0x294>)
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	f7fd f8ca 	bl	8000ba4 <__aeabi_fmul>
 8003a10:	4641      	mov	r1, r8
 8003a12:	f7fc ffbd 	bl	8000990 <__aeabi_fsub>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4681      	mov	r9, r0
 8003a1a:	4658      	mov	r0, fp
 8003a1c:	f7fc ffb8 	bl	8000990 <__aeabi_fsub>
 8003a20:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003a24:	1aed      	subs	r5, r5, r3
 8003a26:	2d19      	cmp	r5, #25
 8003a28:	dc15      	bgt.n	8003a56 <__ieee754_rem_pio2f+0x1a6>
 8003a2a:	46d8      	mov	r8, fp
 8003a2c:	6020      	str	r0, [r4, #0]
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	4640      	mov	r0, r8
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fc ffac 	bl	8000990 <__aeabi_fsub>
 8003a38:	4649      	mov	r1, r9
 8003a3a:	f7fc ffa9 	bl	8000990 <__aeabi_fsub>
 8003a3e:	2f00      	cmp	r7, #0
 8003a40:	6060      	str	r0, [r4, #4]
 8003a42:	f6bf af5f 	bge.w	8003904 <__ieee754_rem_pio2f+0x54>
 8003a46:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003a4a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003a4e:	6025      	str	r5, [r4, #0]
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	4276      	negs	r6, r6
 8003a54:	e756      	b.n	8003904 <__ieee754_rem_pio2f+0x54>
 8003a56:	493f      	ldr	r1, [pc, #252]	; (8003b54 <__ieee754_rem_pio2f+0x2a4>)
 8003a58:	4650      	mov	r0, sl
 8003a5a:	f7fd f8a3 	bl	8000ba4 <__aeabi_fmul>
 8003a5e:	4605      	mov	r5, r0
 8003a60:	4601      	mov	r1, r0
 8003a62:	4658      	mov	r0, fp
 8003a64:	f7fc ff94 	bl	8000990 <__aeabi_fsub>
 8003a68:	4601      	mov	r1, r0
 8003a6a:	4680      	mov	r8, r0
 8003a6c:	4658      	mov	r0, fp
 8003a6e:	f7fc ff8f 	bl	8000990 <__aeabi_fsub>
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc ff8c 	bl	8000990 <__aeabi_fsub>
 8003a78:	4605      	mov	r5, r0
 8003a7a:	4937      	ldr	r1, [pc, #220]	; (8003b58 <__ieee754_rem_pio2f+0x2a8>)
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	f7fd f891 	bl	8000ba4 <__aeabi_fmul>
 8003a82:	4629      	mov	r1, r5
 8003a84:	f7fc ff84 	bl	8000990 <__aeabi_fsub>
 8003a88:	4681      	mov	r9, r0
 8003a8a:	e79a      	b.n	80039c2 <__ieee754_rem_pio2f+0x112>
 8003a8c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003a90:	db05      	blt.n	8003a9e <__ieee754_rem_pio2f+0x1ee>
 8003a92:	4601      	mov	r1, r0
 8003a94:	f7fc ff7c 	bl	8000990 <__aeabi_fsub>
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	6020      	str	r0, [r4, #0]
 8003a9c:	e715      	b.n	80038ca <__ieee754_rem_pio2f+0x1a>
 8003a9e:	15ee      	asrs	r6, r5, #23
 8003aa0:	3e86      	subs	r6, #134	; 0x86
 8003aa2:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f7fd fa58 	bl	8000f5c <__aeabi_f2iz>
 8003aac:	f7fd f826 	bl	8000afc <__aeabi_i2f>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	9003      	str	r0, [sp, #12]
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7fc ff6b 	bl	8000990 <__aeabi_fsub>
 8003aba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003abe:	f7fd f871 	bl	8000ba4 <__aeabi_fmul>
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	f7fd fa4a 	bl	8000f5c <__aeabi_f2iz>
 8003ac8:	f7fd f818 	bl	8000afc <__aeabi_i2f>
 8003acc:	4601      	mov	r1, r0
 8003ace:	9004      	str	r0, [sp, #16]
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f7fc ff5c 	bl	8000990 <__aeabi_fsub>
 8003ad8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003adc:	f7fd f862 	bl	8000ba4 <__aeabi_fmul>
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	9005      	str	r0, [sp, #20]
 8003ae4:	f7fd f9f2 	bl	8000ecc <__aeabi_fcmpeq>
 8003ae8:	b1e8      	cbz	r0, 8003b26 <__ieee754_rem_pio2f+0x276>
 8003aea:	2100      	movs	r1, #0
 8003aec:	4628      	mov	r0, r5
 8003aee:	f7fd f9ed 	bl	8000ecc <__aeabi_fcmpeq>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2302      	moveq	r3, #2
 8003afa:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <__ieee754_rem_pio2f+0x2ac>)
 8003afc:	4621      	mov	r1, r4
 8003afe:	9201      	str	r2, [sp, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	a803      	add	r0, sp, #12
 8003b04:	9200      	str	r2, [sp, #0]
 8003b06:	4632      	mov	r2, r6
 8003b08:	f000 f8fe 	bl	8003d08 <__kernel_rem_pio2f>
 8003b0c:	2f00      	cmp	r7, #0
 8003b0e:	4606      	mov	r6, r0
 8003b10:	f6bf aef8 	bge.w	8003904 <__ieee754_rem_pio2f+0x54>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	e795      	b.n	8003a52 <__ieee754_rem_pio2f+0x1a2>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e7e7      	b.n	8003afa <__ieee754_rem_pio2f+0x24a>
 8003b2a:	bf00      	nop
 8003b2c:	3f490fd8 	.word	0x3f490fd8
 8003b30:	4016cbe3 	.word	0x4016cbe3
 8003b34:	3fc90f80 	.word	0x3fc90f80
 8003b38:	3fc90fd0 	.word	0x3fc90fd0
 8003b3c:	37354443 	.word	0x37354443
 8003b40:	37354400 	.word	0x37354400
 8003b44:	2e85a308 	.word	0x2e85a308
 8003b48:	43490f80 	.word	0x43490f80
 8003b4c:	3f22f984 	.word	0x3f22f984
 8003b50:	08004de0 	.word	0x08004de0
 8003b54:	2e85a300 	.word	0x2e85a300
 8003b58:	248d3132 	.word	0x248d3132
 8003b5c:	08004e60 	.word	0x08004e60

08003b60 <__ieee754_sqrtf>:
 8003b60:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8003b64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	d309      	bcc.n	8003b84 <__ieee754_sqrtf+0x24>
 8003b70:	4601      	mov	r1, r0
 8003b72:	f7fd f817 	bl	8000ba4 <__aeabi_fmul>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7fc ff0b 	bl	8000994 <__addsf3>
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4620      	mov	r0, r4
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	d0fb      	beq.n	8003b80 <__ieee754_sqrtf+0x20>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	da06      	bge.n	8003b9a <__ieee754_sqrtf+0x3a>
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	f7fc feff 	bl	8000990 <__aeabi_fsub>
 8003b92:	4601      	mov	r1, r0
 8003b94:	f7fd f8ba 	bl	8000d0c <__aeabi_fdiv>
 8003b98:	e7f1      	b.n	8003b7e <__ieee754_sqrtf+0x1e>
 8003b9a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003b9e:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8003ba2:	d32e      	bcc.n	8003c02 <__ieee754_sqrtf+0xa2>
 8003ba4:	3c7f      	subs	r4, #127	; 0x7f
 8003ba6:	07e2      	lsls	r2, r4, #31
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	ea4f 0164 	mov.w	r1, r4, asr #1
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	f04f 0419 	mov.w	r4, #25
 8003bb6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003bba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bc2:	bf48      	it	mi
 8003bc4:	005b      	lslmi	r3, r3, #1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	1835      	adds	r5, r6, r0
 8003bca:	429d      	cmp	r5, r3
 8003bcc:	bfde      	ittt	le
 8003bce:	182e      	addle	r6, r5, r0
 8003bd0:	1b5b      	suble	r3, r3, r5
 8003bd2:	1812      	addle	r2, r2, r0
 8003bd4:	3c01      	subs	r4, #1
 8003bd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003bda:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003bde:	d1f3      	bne.n	8003bc8 <__ieee754_sqrtf+0x68>
 8003be0:	b113      	cbz	r3, 8003be8 <__ieee754_sqrtf+0x88>
 8003be2:	3201      	adds	r2, #1
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	1054      	asrs	r4, r2, #1
 8003bea:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8003bee:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8003bf2:	e7c5      	b.n	8003b80 <__ieee754_sqrtf+0x20>
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	3201      	adds	r2, #1
 8003bf8:	0219      	lsls	r1, r3, #8
 8003bfa:	d5fb      	bpl.n	8003bf4 <__ieee754_sqrtf+0x94>
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	1aa4      	subs	r4, r4, r2
 8003c00:	e7d0      	b.n	8003ba4 <__ieee754_sqrtf+0x44>
 8003c02:	2200      	movs	r2, #0
 8003c04:	e7f8      	b.n	8003bf8 <__ieee754_sqrtf+0x98>
	...

08003c08 <__kernel_cosf>:
 8003c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003c10:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003c14:	4606      	mov	r6, r0
 8003c16:	4688      	mov	r8, r1
 8003c18:	da03      	bge.n	8003c22 <__kernel_cosf+0x1a>
 8003c1a:	f7fd f99f 	bl	8000f5c <__aeabi_f2iz>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d05c      	beq.n	8003cdc <__kernel_cosf+0xd4>
 8003c22:	4631      	mov	r1, r6
 8003c24:	4630      	mov	r0, r6
 8003c26:	f7fc ffbd 	bl	8000ba4 <__aeabi_fmul>
 8003c2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c2e:	4605      	mov	r5, r0
 8003c30:	f7fc ffb8 	bl	8000ba4 <__aeabi_fmul>
 8003c34:	492b      	ldr	r1, [pc, #172]	; (8003ce4 <__kernel_cosf+0xdc>)
 8003c36:	4607      	mov	r7, r0
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f7fc ffb3 	bl	8000ba4 <__aeabi_fmul>
 8003c3e:	492a      	ldr	r1, [pc, #168]	; (8003ce8 <__kernel_cosf+0xe0>)
 8003c40:	f7fc fea8 	bl	8000994 <__addsf3>
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc ffad 	bl	8000ba4 <__aeabi_fmul>
 8003c4a:	4928      	ldr	r1, [pc, #160]	; (8003cec <__kernel_cosf+0xe4>)
 8003c4c:	f7fc fea0 	bl	8000990 <__aeabi_fsub>
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7fc ffa7 	bl	8000ba4 <__aeabi_fmul>
 8003c56:	4926      	ldr	r1, [pc, #152]	; (8003cf0 <__kernel_cosf+0xe8>)
 8003c58:	f7fc fe9c 	bl	8000994 <__addsf3>
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc ffa1 	bl	8000ba4 <__aeabi_fmul>
 8003c62:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <__kernel_cosf+0xec>)
 8003c64:	f7fc fe94 	bl	8000990 <__aeabi_fsub>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc ff9b 	bl	8000ba4 <__aeabi_fmul>
 8003c6e:	4922      	ldr	r1, [pc, #136]	; (8003cf8 <__kernel_cosf+0xf0>)
 8003c70:	f7fc fe90 	bl	8000994 <__addsf3>
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7fc ff95 	bl	8000ba4 <__aeabi_fmul>
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	f7fc ff92 	bl	8000ba4 <__aeabi_fmul>
 8003c80:	4641      	mov	r1, r8
 8003c82:	4605      	mov	r5, r0
 8003c84:	4630      	mov	r0, r6
 8003c86:	f7fc ff8d 	bl	8000ba4 <__aeabi_fmul>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f7fc fe7f 	bl	8000990 <__aeabi_fsub>
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <__kernel_cosf+0xf4>)
 8003c94:	4605      	mov	r5, r0
 8003c96:	429c      	cmp	r4, r3
 8003c98:	dc0a      	bgt.n	8003cb0 <__kernel_cosf+0xa8>
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7fc fe77 	bl	8000990 <__aeabi_fsub>
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ca8:	f7fc fe72 	bl	8000990 <__aeabi_fsub>
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <__kernel_cosf+0xf8>)
 8003cb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	bfcc      	ite	gt
 8003cba:	4c12      	ldrgt	r4, [pc, #72]	; (8003d04 <__kernel_cosf+0xfc>)
 8003cbc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f7fc fe65 	bl	8000990 <__aeabi_fsub>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4606      	mov	r6, r0
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f7fc fe60 	bl	8000990 <__aeabi_fsub>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc fe5d 	bl	8000990 <__aeabi_fsub>
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	4630      	mov	r0, r6
 8003cda:	e7e5      	b.n	8003ca8 <__kernel_cosf+0xa0>
 8003cdc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ce0:	e7e4      	b.n	8003cac <__kernel_cosf+0xa4>
 8003ce2:	bf00      	nop
 8003ce4:	ad47d74e 	.word	0xad47d74e
 8003ce8:	310f74f6 	.word	0x310f74f6
 8003cec:	3493f27c 	.word	0x3493f27c
 8003cf0:	37d00d01 	.word	0x37d00d01
 8003cf4:	3ab60b61 	.word	0x3ab60b61
 8003cf8:	3d2aaaab 	.word	0x3d2aaaab
 8003cfc:	3e999999 	.word	0x3e999999
 8003d00:	3f480000 	.word	0x3f480000
 8003d04:	3e900000 	.word	0x3e900000

08003d08 <__kernel_rem_pio2f>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	b0d9      	sub	sp, #356	; 0x164
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	9101      	str	r1, [sp, #4]
 8003d12:	4bc3      	ldr	r3, [pc, #780]	; (8004020 <__kernel_rem_pio2f+0x318>)
 8003d14:	9962      	ldr	r1, [sp, #392]	; 0x188
 8003d16:	1ed4      	subs	r4, r2, #3
 8003d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d1c:	2500      	movs	r5, #0
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	9b04      	ldr	r3, [sp, #16]
 8003d22:	f04f 0a00 	mov.w	sl, #0
 8003d26:	3b01      	subs	r3, #1
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	fb94 f4f3 	sdiv	r4, r4, r3
 8003d30:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003d34:	1c66      	adds	r6, r4, #1
 8003d36:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8003d3a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003d3e:	eb03 0802 	add.w	r8, r3, r2
 8003d42:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8003d44:	1aa7      	subs	r7, r4, r2
 8003d46:	9005      	str	r0, [sp, #20]
 8003d48:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003d4c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8003d50:	4545      	cmp	r5, r8
 8003d52:	dd7f      	ble.n	8003e54 <__kernel_rem_pio2f+0x14c>
 8003d54:	f04f 0800 	mov.w	r8, #0
 8003d58:	f04f 0a00 	mov.w	sl, #0
 8003d5c:	f06f 0b03 	mvn.w	fp, #3
 8003d60:	9b04      	ldr	r3, [sp, #16]
 8003d62:	aa1c      	add	r2, sp, #112	; 0x70
 8003d64:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003d68:	ab44      	add	r3, sp, #272	; 0x110
 8003d6a:	9a02      	ldr	r2, [sp, #8]
 8003d6c:	4590      	cmp	r8, r2
 8003d6e:	f340 8097 	ble.w	8003ea0 <__kernel_rem_pio2f+0x198>
 8003d72:	4613      	mov	r3, r2
 8003d74:	aa08      	add	r2, sp, #32
 8003d76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d7a:	9307      	str	r3, [sp, #28]
 8003d7c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8003d7e:	9f02      	ldr	r7, [sp, #8]
 8003d80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003d84:	9306      	str	r3, [sp, #24]
 8003d86:	46ba      	mov	sl, r7
 8003d88:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8003d8c:	ab58      	add	r3, sp, #352	; 0x160
 8003d8e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003d92:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8003d96:	ad07      	add	r5, sp, #28
 8003d98:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003d9c:	f1ba 0f00 	cmp.w	sl, #0
 8003da0:	f300 8081 	bgt.w	8003ea6 <__kernel_rem_pio2f+0x19e>
 8003da4:	4631      	mov	r1, r6
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 fb08 	bl	80043bc <scalbnf>
 8003dac:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003db0:	4604      	mov	r4, r0
 8003db2:	f7fc fef7 	bl	8000ba4 <__aeabi_fmul>
 8003db6:	f000 fac1 	bl	800433c <floorf>
 8003dba:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003dbe:	f7fc fef1 	bl	8000ba4 <__aeabi_fmul>
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f7fc fde3 	bl	8000990 <__aeabi_fsub>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	f7fd f8c6 	bl	8000f5c <__aeabi_f2iz>
 8003dd0:	4681      	mov	r9, r0
 8003dd2:	f7fc fe93 	bl	8000afc <__aeabi_i2f>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7fc fdd9 	bl	8000990 <__aeabi_fsub>
 8003dde:	2e00      	cmp	r6, #0
 8003de0:	4604      	mov	r4, r0
 8003de2:	dd7e      	ble.n	8003ee2 <__kernel_rem_pio2f+0x1da>
 8003de4:	1e7b      	subs	r3, r7, #1
 8003de6:	aa08      	add	r2, sp, #32
 8003de8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003dec:	f1c6 0208 	rsb	r2, r6, #8
 8003df0:	fa45 f002 	asr.w	r0, r5, r2
 8003df4:	4481      	add	r9, r0
 8003df6:	4090      	lsls	r0, r2
 8003df8:	1a2d      	subs	r5, r5, r0
 8003dfa:	aa08      	add	r2, sp, #32
 8003dfc:	f1c6 0007 	rsb	r0, r6, #7
 8003e00:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8003e04:	4105      	asrs	r5, r0
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	dd79      	ble.n	8003efe <__kernel_rem_pio2f+0x1f6>
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4690      	mov	r8, r2
 8003e0e:	f109 0901 	add.w	r9, r9, #1
 8003e12:	4297      	cmp	r7, r2
 8003e14:	f300 80ae 	bgt.w	8003f74 <__kernel_rem_pio2f+0x26c>
 8003e18:	2e00      	cmp	r6, #0
 8003e1a:	dd05      	ble.n	8003e28 <__kernel_rem_pio2f+0x120>
 8003e1c:	2e01      	cmp	r6, #1
 8003e1e:	f000 80c0 	beq.w	8003fa2 <__kernel_rem_pio2f+0x29a>
 8003e22:	2e02      	cmp	r6, #2
 8003e24:	f000 80c7 	beq.w	8003fb6 <__kernel_rem_pio2f+0x2ae>
 8003e28:	2d02      	cmp	r5, #2
 8003e2a:	d168      	bne.n	8003efe <__kernel_rem_pio2f+0x1f6>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e32:	f7fc fdad 	bl	8000990 <__aeabi_fsub>
 8003e36:	4604      	mov	r4, r0
 8003e38:	f1b8 0f00 	cmp.w	r8, #0
 8003e3c:	d05f      	beq.n	8003efe <__kernel_rem_pio2f+0x1f6>
 8003e3e:	4631      	mov	r1, r6
 8003e40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e44:	f000 faba 	bl	80043bc <scalbnf>
 8003e48:	4601      	mov	r1, r0
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7fc fda0 	bl	8000990 <__aeabi_fsub>
 8003e50:	4604      	mov	r4, r0
 8003e52:	e054      	b.n	8003efe <__kernel_rem_pio2f+0x1f6>
 8003e54:	42ef      	cmn	r7, r5
 8003e56:	d407      	bmi.n	8003e68 <__kernel_rem_pio2f+0x160>
 8003e58:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003e5c:	f7fc fe4e 	bl	8000afc <__aeabi_i2f>
 8003e60:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8003e64:	3501      	adds	r5, #1
 8003e66:	e773      	b.n	8003d50 <__kernel_rem_pio2f+0x48>
 8003e68:	4650      	mov	r0, sl
 8003e6a:	e7f9      	b.n	8003e60 <__kernel_rem_pio2f+0x158>
 8003e6c:	fb0b 5207 	mla	r2, fp, r7, r5
 8003e70:	9306      	str	r3, [sp, #24]
 8003e72:	9b05      	ldr	r3, [sp, #20]
 8003e74:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8003e78:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8003e7c:	f7fc fe92 	bl	8000ba4 <__aeabi_fmul>
 8003e80:	4601      	mov	r1, r0
 8003e82:	4648      	mov	r0, r9
 8003e84:	f7fc fd86 	bl	8000994 <__addsf3>
 8003e88:	4681      	mov	r9, r0
 8003e8a:	9b06      	ldr	r3, [sp, #24]
 8003e8c:	3701      	adds	r7, #1
 8003e8e:	9a03      	ldr	r2, [sp, #12]
 8003e90:	4297      	cmp	r7, r2
 8003e92:	ddeb      	ble.n	8003e6c <__kernel_rem_pio2f+0x164>
 8003e94:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8003e98:	3504      	adds	r5, #4
 8003e9a:	f108 0801 	add.w	r8, r8, #1
 8003e9e:	e764      	b.n	8003d6a <__kernel_rem_pio2f+0x62>
 8003ea0:	46d1      	mov	r9, sl
 8003ea2:	2700      	movs	r7, #0
 8003ea4:	e7f3      	b.n	8003e8e <__kernel_rem_pio2f+0x186>
 8003ea6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f7fc fe7a 	bl	8000ba4 <__aeabi_fmul>
 8003eb0:	f7fd f854 	bl	8000f5c <__aeabi_f2iz>
 8003eb4:	f7fc fe22 	bl	8000afc <__aeabi_i2f>
 8003eb8:	4641      	mov	r1, r8
 8003eba:	4683      	mov	fp, r0
 8003ebc:	f7fc fe72 	bl	8000ba4 <__aeabi_fmul>
 8003ec0:	4601      	mov	r1, r0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7fc fd64 	bl	8000990 <__aeabi_fsub>
 8003ec8:	f7fd f848 	bl	8000f5c <__aeabi_f2iz>
 8003ecc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ed0:	f845 0f04 	str.w	r0, [r5, #4]!
 8003ed4:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8003ed8:	4658      	mov	r0, fp
 8003eda:	f7fc fd5b 	bl	8000994 <__addsf3>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	e75c      	b.n	8003d9c <__kernel_rem_pio2f+0x94>
 8003ee2:	d105      	bne.n	8003ef0 <__kernel_rem_pio2f+0x1e8>
 8003ee4:	1e7b      	subs	r3, r7, #1
 8003ee6:	aa08      	add	r2, sp, #32
 8003ee8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003eec:	122d      	asrs	r5, r5, #8
 8003eee:	e78a      	b.n	8003e06 <__kernel_rem_pio2f+0xfe>
 8003ef0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ef4:	f7fd f808 	bl	8000f08 <__aeabi_fcmpge>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d139      	bne.n	8003f70 <__kernel_rem_pio2f+0x268>
 8003efc:	4605      	mov	r5, r0
 8003efe:	2100      	movs	r1, #0
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7fc ffe3 	bl	8000ecc <__aeabi_fcmpeq>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	f000 80a0 	beq.w	800404c <__kernel_rem_pio2f+0x344>
 8003f0c:	1e7c      	subs	r4, r7, #1
 8003f0e:	4623      	mov	r3, r4
 8003f10:	2200      	movs	r2, #0
 8003f12:	9902      	ldr	r1, [sp, #8]
 8003f14:	428b      	cmp	r3, r1
 8003f16:	da55      	bge.n	8003fc4 <__kernel_rem_pio2f+0x2bc>
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	d07e      	beq.n	800401a <__kernel_rem_pio2f+0x312>
 8003f1c:	ab08      	add	r3, sp, #32
 8003f1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003f22:	3e08      	subs	r6, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 808f 	beq.w	8004048 <__kernel_rem_pio2f+0x340>
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f30:	f000 fa44 	bl	80043bc <scalbnf>
 8003f34:	46a0      	mov	r8, r4
 8003f36:	4682      	mov	sl, r0
 8003f38:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8003f3c:	af44      	add	r7, sp, #272	; 0x110
 8003f3e:	f1b8 0f00 	cmp.w	r8, #0
 8003f42:	f280 80b5 	bge.w	80040b0 <__kernel_rem_pio2f+0x3a8>
 8003f46:	f04f 0a00 	mov.w	sl, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	00a6      	lsls	r6, r4, #2
 8003f4e:	4a35      	ldr	r2, [pc, #212]	; (8004024 <__kernel_rem_pio2f+0x31c>)
 8003f50:	4437      	add	r7, r6
 8003f52:	eba4 010a 	sub.w	r1, r4, sl
 8003f56:	2900      	cmp	r1, #0
 8003f58:	f280 80db 	bge.w	8004112 <__kernel_rem_pio2f+0x40a>
 8003f5c:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	f200 80ff 	bhi.w	8004162 <__kernel_rem_pio2f+0x45a>
 8003f64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f68:	01200102 	.word	0x01200102
 8003f6c:	00d90120 	.word	0x00d90120
 8003f70:	2502      	movs	r5, #2
 8003f72:	e74a      	b.n	8003e0a <__kernel_rem_pio2f+0x102>
 8003f74:	ab08      	add	r3, sp, #32
 8003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	d109      	bne.n	8003f94 <__kernel_rem_pio2f+0x28c>
 8003f80:	b12b      	cbz	r3, 8003f8e <__kernel_rem_pio2f+0x286>
 8003f82:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003f86:	a908      	add	r1, sp, #32
 8003f88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	3201      	adds	r2, #1
 8003f90:	4698      	mov	r8, r3
 8003f92:	e73e      	b.n	8003e12 <__kernel_rem_pio2f+0x10a>
 8003f94:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003f98:	a908      	add	r1, sp, #32
 8003f9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f9e:	4643      	mov	r3, r8
 8003fa0:	e7f5      	b.n	8003f8e <__kernel_rem_pio2f+0x286>
 8003fa2:	1e7a      	subs	r2, r7, #1
 8003fa4:	ab08      	add	r3, sp, #32
 8003fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fae:	a908      	add	r1, sp, #32
 8003fb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003fb4:	e738      	b.n	8003e28 <__kernel_rem_pio2f+0x120>
 8003fb6:	1e7a      	subs	r2, r7, #1
 8003fb8:	ab08      	add	r3, sp, #32
 8003fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc2:	e7f4      	b.n	8003fae <__kernel_rem_pio2f+0x2a6>
 8003fc4:	a908      	add	r1, sp, #32
 8003fc6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	e7a0      	b.n	8003f12 <__kernel_rem_pio2f+0x20a>
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003fd6:	2900      	cmp	r1, #0
 8003fd8:	d0fa      	beq.n	8003fd0 <__kernel_rem_pio2f+0x2c8>
 8003fda:	f06f 0803 	mvn.w	r8, #3
 8003fde:	9a04      	ldr	r2, [sp, #16]
 8003fe0:	1c7d      	adds	r5, r7, #1
 8003fe2:	18bc      	adds	r4, r7, r2
 8003fe4:	aa1c      	add	r2, sp, #112	; 0x70
 8003fe6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8003fea:	441f      	add	r7, r3
 8003fec:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003ff0:	42af      	cmp	r7, r5
 8003ff2:	f6ff aec8 	blt.w	8003d86 <__kernel_rem_pio2f+0x7e>
 8003ff6:	9b06      	ldr	r3, [sp, #24]
 8003ff8:	f04f 0a00 	mov.w	sl, #0
 8003ffc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004000:	f7fc fd7c 	bl	8000afc <__aeabi_i2f>
 8004004:	f04f 0b00 	mov.w	fp, #0
 8004008:	6020      	str	r0, [r4, #0]
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	459a      	cmp	sl, r3
 800400e:	dd0b      	ble.n	8004028 <__kernel_rem_pio2f+0x320>
 8004010:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8004014:	3404      	adds	r4, #4
 8004016:	3501      	adds	r5, #1
 8004018:	e7ea      	b.n	8003ff0 <__kernel_rem_pio2f+0x2e8>
 800401a:	9a07      	ldr	r2, [sp, #28]
 800401c:	2301      	movs	r3, #1
 800401e:	e7d8      	b.n	8003fd2 <__kernel_rem_pio2f+0x2ca>
 8004020:	080051a4 	.word	0x080051a4
 8004024:	08005178 	.word	0x08005178
 8004028:	fb08 f30a 	mul.w	r3, r8, sl
 800402c:	9a05      	ldr	r2, [sp, #20]
 800402e:	58e0      	ldr	r0, [r4, r3]
 8004030:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8004034:	f7fc fdb6 	bl	8000ba4 <__aeabi_fmul>
 8004038:	4601      	mov	r1, r0
 800403a:	4658      	mov	r0, fp
 800403c:	f7fc fcaa 	bl	8000994 <__addsf3>
 8004040:	f10a 0a01 	add.w	sl, sl, #1
 8004044:	4683      	mov	fp, r0
 8004046:	e7e0      	b.n	800400a <__kernel_rem_pio2f+0x302>
 8004048:	3c01      	subs	r4, #1
 800404a:	e767      	b.n	8003f1c <__kernel_rem_pio2f+0x214>
 800404c:	4271      	negs	r1, r6
 800404e:	4620      	mov	r0, r4
 8004050:	f000 f9b4 	bl	80043bc <scalbnf>
 8004054:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004058:	4604      	mov	r4, r0
 800405a:	f7fc ff55 	bl	8000f08 <__aeabi_fcmpge>
 800405e:	b1f8      	cbz	r0, 80040a0 <__kernel_rem_pio2f+0x398>
 8004060:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004064:	4620      	mov	r0, r4
 8004066:	f7fc fd9d 	bl	8000ba4 <__aeabi_fmul>
 800406a:	f7fc ff77 	bl	8000f5c <__aeabi_f2iz>
 800406e:	f7fc fd45 	bl	8000afc <__aeabi_i2f>
 8004072:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004076:	4680      	mov	r8, r0
 8004078:	f7fc fd94 	bl	8000ba4 <__aeabi_fmul>
 800407c:	4601      	mov	r1, r0
 800407e:	4620      	mov	r0, r4
 8004080:	f7fc fc86 	bl	8000990 <__aeabi_fsub>
 8004084:	f7fc ff6a 	bl	8000f5c <__aeabi_f2iz>
 8004088:	ab08      	add	r3, sp, #32
 800408a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800408e:	4640      	mov	r0, r8
 8004090:	f7fc ff64 	bl	8000f5c <__aeabi_f2iz>
 8004094:	1c7c      	adds	r4, r7, #1
 8004096:	ab08      	add	r3, sp, #32
 8004098:	3608      	adds	r6, #8
 800409a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800409e:	e744      	b.n	8003f2a <__kernel_rem_pio2f+0x222>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7fc ff5b 	bl	8000f5c <__aeabi_f2iz>
 80040a6:	ab08      	add	r3, sp, #32
 80040a8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80040ac:	463c      	mov	r4, r7
 80040ae:	e73c      	b.n	8003f2a <__kernel_rem_pio2f+0x222>
 80040b0:	ab08      	add	r3, sp, #32
 80040b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80040b6:	f7fc fd21 	bl	8000afc <__aeabi_i2f>
 80040ba:	4651      	mov	r1, sl
 80040bc:	f7fc fd72 	bl	8000ba4 <__aeabi_fmul>
 80040c0:	4631      	mov	r1, r6
 80040c2:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 80040c6:	4650      	mov	r0, sl
 80040c8:	f7fc fd6c 	bl	8000ba4 <__aeabi_fmul>
 80040cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80040d0:	4682      	mov	sl, r0
 80040d2:	e734      	b.n	8003f3e <__kernel_rem_pio2f+0x236>
 80040d4:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 80040d8:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	9203      	str	r2, [sp, #12]
 80040e0:	f7fc fd60 	bl	8000ba4 <__aeabi_fmul>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4658      	mov	r0, fp
 80040e8:	f7fc fc54 	bl	8000994 <__addsf3>
 80040ec:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80040f0:	4683      	mov	fp, r0
 80040f2:	f108 0801 	add.w	r8, r8, #1
 80040f6:	9902      	ldr	r1, [sp, #8]
 80040f8:	4588      	cmp	r8, r1
 80040fa:	dc01      	bgt.n	8004100 <__kernel_rem_pio2f+0x3f8>
 80040fc:	45c2      	cmp	sl, r8
 80040fe:	dae9      	bge.n	80040d4 <__kernel_rem_pio2f+0x3cc>
 8004100:	a958      	add	r1, sp, #352	; 0x160
 8004102:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004106:	f841 bca0 	str.w	fp, [r1, #-160]
 800410a:	f10a 0a01 	add.w	sl, sl, #1
 800410e:	3f04      	subs	r7, #4
 8004110:	e71f      	b.n	8003f52 <__kernel_rem_pio2f+0x24a>
 8004112:	469b      	mov	fp, r3
 8004114:	f04f 0800 	mov.w	r8, #0
 8004118:	e7ed      	b.n	80040f6 <__kernel_rem_pio2f+0x3ee>
 800411a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800411e:	4456      	add	r6, sl
 8004120:	4637      	mov	r7, r6
 8004122:	46a0      	mov	r8, r4
 8004124:	f1b8 0f00 	cmp.w	r8, #0
 8004128:	dc4a      	bgt.n	80041c0 <__kernel_rem_pio2f+0x4b8>
 800412a:	4627      	mov	r7, r4
 800412c:	2f01      	cmp	r7, #1
 800412e:	dc60      	bgt.n	80041f2 <__kernel_rem_pio2f+0x4ea>
 8004130:	2000      	movs	r0, #0
 8004132:	2c01      	cmp	r4, #1
 8004134:	dc74      	bgt.n	8004220 <__kernel_rem_pio2f+0x518>
 8004136:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8004138:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800413a:	2d00      	cmp	r5, #0
 800413c:	d176      	bne.n	800422c <__kernel_rem_pio2f+0x524>
 800413e:	9901      	ldr	r1, [sp, #4]
 8004140:	600a      	str	r2, [r1, #0]
 8004142:	460a      	mov	r2, r1
 8004144:	604b      	str	r3, [r1, #4]
 8004146:	6090      	str	r0, [r2, #8]
 8004148:	e00b      	b.n	8004162 <__kernel_rem_pio2f+0x45a>
 800414a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800414e:	f7fc fc21 	bl	8000994 <__addsf3>
 8004152:	3c01      	subs	r4, #1
 8004154:	2c00      	cmp	r4, #0
 8004156:	daf8      	bge.n	800414a <__kernel_rem_pio2f+0x442>
 8004158:	b10d      	cbz	r5, 800415e <__kernel_rem_pio2f+0x456>
 800415a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800415e:	9b01      	ldr	r3, [sp, #4]
 8004160:	6018      	str	r0, [r3, #0]
 8004162:	f009 0007 	and.w	r0, r9, #7
 8004166:	b059      	add	sp, #356	; 0x164
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	2000      	movs	r0, #0
 800416e:	ae30      	add	r6, sp, #192	; 0xc0
 8004170:	e7f0      	b.n	8004154 <__kernel_rem_pio2f+0x44c>
 8004172:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8004176:	f7fc fc0d 	bl	8000994 <__addsf3>
 800417a:	3e01      	subs	r6, #1
 800417c:	2e00      	cmp	r6, #0
 800417e:	daf8      	bge.n	8004172 <__kernel_rem_pio2f+0x46a>
 8004180:	b1b5      	cbz	r5, 80041b0 <__kernel_rem_pio2f+0x4a8>
 8004182:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8004186:	9a01      	ldr	r2, [sp, #4]
 8004188:	af58      	add	r7, sp, #352	; 0x160
 800418a:	4601      	mov	r1, r0
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8004192:	f7fc fbfd 	bl	8000990 <__aeabi_fsub>
 8004196:	2601      	movs	r6, #1
 8004198:	42b4      	cmp	r4, r6
 800419a:	da0b      	bge.n	80041b4 <__kernel_rem_pio2f+0x4ac>
 800419c:	b10d      	cbz	r5, 80041a2 <__kernel_rem_pio2f+0x49a>
 800419e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	6058      	str	r0, [r3, #4]
 80041a6:	e7dc      	b.n	8004162 <__kernel_rem_pio2f+0x45a>
 80041a8:	4626      	mov	r6, r4
 80041aa:	2000      	movs	r0, #0
 80041ac:	af30      	add	r7, sp, #192	; 0xc0
 80041ae:	e7e5      	b.n	800417c <__kernel_rem_pio2f+0x474>
 80041b0:	4603      	mov	r3, r0
 80041b2:	e7e8      	b.n	8004186 <__kernel_rem_pio2f+0x47e>
 80041b4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80041b8:	f7fc fbec 	bl	8000994 <__addsf3>
 80041bc:	3601      	adds	r6, #1
 80041be:	e7eb      	b.n	8004198 <__kernel_rem_pio2f+0x490>
 80041c0:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 80041c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	9202      	str	r2, [sp, #8]
 80041d2:	f7fc fbdf 	bl	8000994 <__addsf3>
 80041d6:	9a02      	ldr	r2, [sp, #8]
 80041d8:	4601      	mov	r1, r0
 80041da:	4683      	mov	fp, r0
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fc fbd7 	bl	8000990 <__aeabi_fsub>
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7fc fbd5 	bl	8000994 <__addsf3>
 80041ea:	f8c7 b000 	str.w	fp, [r7]
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	e798      	b.n	8004124 <__kernel_rem_pio2f+0x41c>
 80041f2:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80041f6:	3f01      	subs	r7, #1
 80041f8:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	4659      	mov	r1, fp
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	f7fc fbc7 	bl	8000994 <__addsf3>
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	4601      	mov	r1, r0
 800420a:	4680      	mov	r8, r0
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc fbbf 	bl	8000990 <__aeabi_fsub>
 8004212:	4659      	mov	r1, fp
 8004214:	f7fc fbbe 	bl	8000994 <__addsf3>
 8004218:	f8c6 8000 	str.w	r8, [r6]
 800421c:	6070      	str	r0, [r6, #4]
 800421e:	e785      	b.n	800412c <__kernel_rem_pio2f+0x424>
 8004220:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8004224:	f7fc fbb6 	bl	8000994 <__addsf3>
 8004228:	3c01      	subs	r4, #1
 800422a:	e782      	b.n	8004132 <__kernel_rem_pio2f+0x42a>
 800422c:	9901      	ldr	r1, [sp, #4]
 800422e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004232:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004236:	600a      	str	r2, [r1, #0]
 8004238:	604b      	str	r3, [r1, #4]
 800423a:	460a      	mov	r2, r1
 800423c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004240:	e781      	b.n	8004146 <__kernel_rem_pio2f+0x43e>
 8004242:	bf00      	nop

08004244 <__kernel_sinf>:
 8004244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004248:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800424c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004250:	4604      	mov	r4, r0
 8004252:	460f      	mov	r7, r1
 8004254:	4691      	mov	r9, r2
 8004256:	da03      	bge.n	8004260 <__kernel_sinf+0x1c>
 8004258:	f7fc fe80 	bl	8000f5c <__aeabi_f2iz>
 800425c:	2800      	cmp	r0, #0
 800425e:	d035      	beq.n	80042cc <__kernel_sinf+0x88>
 8004260:	4621      	mov	r1, r4
 8004262:	4620      	mov	r0, r4
 8004264:	f7fc fc9e 	bl	8000ba4 <__aeabi_fmul>
 8004268:	4605      	mov	r5, r0
 800426a:	4601      	mov	r1, r0
 800426c:	4620      	mov	r0, r4
 800426e:	f7fc fc99 	bl	8000ba4 <__aeabi_fmul>
 8004272:	4929      	ldr	r1, [pc, #164]	; (8004318 <__kernel_sinf+0xd4>)
 8004274:	4606      	mov	r6, r0
 8004276:	4628      	mov	r0, r5
 8004278:	f7fc fc94 	bl	8000ba4 <__aeabi_fmul>
 800427c:	4927      	ldr	r1, [pc, #156]	; (800431c <__kernel_sinf+0xd8>)
 800427e:	f7fc fb87 	bl	8000990 <__aeabi_fsub>
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc fc8e 	bl	8000ba4 <__aeabi_fmul>
 8004288:	4925      	ldr	r1, [pc, #148]	; (8004320 <__kernel_sinf+0xdc>)
 800428a:	f7fc fb83 	bl	8000994 <__addsf3>
 800428e:	4629      	mov	r1, r5
 8004290:	f7fc fc88 	bl	8000ba4 <__aeabi_fmul>
 8004294:	4923      	ldr	r1, [pc, #140]	; (8004324 <__kernel_sinf+0xe0>)
 8004296:	f7fc fb7b 	bl	8000990 <__aeabi_fsub>
 800429a:	4629      	mov	r1, r5
 800429c:	f7fc fc82 	bl	8000ba4 <__aeabi_fmul>
 80042a0:	4921      	ldr	r1, [pc, #132]	; (8004328 <__kernel_sinf+0xe4>)
 80042a2:	f7fc fb77 	bl	8000994 <__addsf3>
 80042a6:	4680      	mov	r8, r0
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	d111      	bne.n	80042d2 <__kernel_sinf+0x8e>
 80042ae:	4601      	mov	r1, r0
 80042b0:	4628      	mov	r0, r5
 80042b2:	f7fc fc77 	bl	8000ba4 <__aeabi_fmul>
 80042b6:	491d      	ldr	r1, [pc, #116]	; (800432c <__kernel_sinf+0xe8>)
 80042b8:	f7fc fb6a 	bl	8000990 <__aeabi_fsub>
 80042bc:	4631      	mov	r1, r6
 80042be:	f7fc fc71 	bl	8000ba4 <__aeabi_fmul>
 80042c2:	4601      	mov	r1, r0
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7fc fb65 	bl	8000994 <__addsf3>
 80042ca:	4604      	mov	r4, r0
 80042cc:	4620      	mov	r0, r4
 80042ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80042d6:	4638      	mov	r0, r7
 80042d8:	f7fc fc64 	bl	8000ba4 <__aeabi_fmul>
 80042dc:	4641      	mov	r1, r8
 80042de:	4681      	mov	r9, r0
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7fc fc5f 	bl	8000ba4 <__aeabi_fmul>
 80042e6:	4601      	mov	r1, r0
 80042e8:	4648      	mov	r0, r9
 80042ea:	f7fc fb51 	bl	8000990 <__aeabi_fsub>
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fc fc58 	bl	8000ba4 <__aeabi_fmul>
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fc fb4b 	bl	8000990 <__aeabi_fsub>
 80042fa:	490c      	ldr	r1, [pc, #48]	; (800432c <__kernel_sinf+0xe8>)
 80042fc:	4605      	mov	r5, r0
 80042fe:	4630      	mov	r0, r6
 8004300:	f7fc fc50 	bl	8000ba4 <__aeabi_fmul>
 8004304:	4601      	mov	r1, r0
 8004306:	4628      	mov	r0, r5
 8004308:	f7fc fb44 	bl	8000994 <__addsf3>
 800430c:	4601      	mov	r1, r0
 800430e:	4620      	mov	r0, r4
 8004310:	f7fc fb3e 	bl	8000990 <__aeabi_fsub>
 8004314:	e7d9      	b.n	80042ca <__kernel_sinf+0x86>
 8004316:	bf00      	nop
 8004318:	2f2ec9d3 	.word	0x2f2ec9d3
 800431c:	32d72f34 	.word	0x32d72f34
 8004320:	3638ef1b 	.word	0x3638ef1b
 8004324:	39500d01 	.word	0x39500d01
 8004328:	3c088889 	.word	0x3c088889
 800432c:	3e2aaaab 	.word	0x3e2aaaab

08004330 <matherr>:
 8004330:	2000      	movs	r0, #0
 8004332:	4770      	bx	lr

08004334 <fabsf>:
 8004334:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004338:	4770      	bx	lr
	...

0800433c <floorf>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004342:	0df5      	lsrs	r5, r6, #23
 8004344:	3d7f      	subs	r5, #127	; 0x7f
 8004346:	2d16      	cmp	r5, #22
 8004348:	4601      	mov	r1, r0
 800434a:	4604      	mov	r4, r0
 800434c:	dc26      	bgt.n	800439c <floorf+0x60>
 800434e:	2d00      	cmp	r5, #0
 8004350:	da0e      	bge.n	8004370 <floorf+0x34>
 8004352:	4917      	ldr	r1, [pc, #92]	; (80043b0 <floorf+0x74>)
 8004354:	f7fc fb1e 	bl	8000994 <__addsf3>
 8004358:	2100      	movs	r1, #0
 800435a:	f7fc fddf 	bl	8000f1c <__aeabi_fcmpgt>
 800435e:	b128      	cbz	r0, 800436c <floorf+0x30>
 8004360:	2c00      	cmp	r4, #0
 8004362:	da23      	bge.n	80043ac <floorf+0x70>
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <floorf+0x78>)
 8004366:	2e00      	cmp	r6, #0
 8004368:	bf18      	it	ne
 800436a:	461c      	movne	r4, r3
 800436c:	4621      	mov	r1, r4
 800436e:	e01b      	b.n	80043a8 <floorf+0x6c>
 8004370:	4e11      	ldr	r6, [pc, #68]	; (80043b8 <floorf+0x7c>)
 8004372:	412e      	asrs	r6, r5
 8004374:	4230      	tst	r0, r6
 8004376:	d017      	beq.n	80043a8 <floorf+0x6c>
 8004378:	490d      	ldr	r1, [pc, #52]	; (80043b0 <floorf+0x74>)
 800437a:	f7fc fb0b 	bl	8000994 <__addsf3>
 800437e:	2100      	movs	r1, #0
 8004380:	f7fc fdcc 	bl	8000f1c <__aeabi_fcmpgt>
 8004384:	2800      	cmp	r0, #0
 8004386:	d0f1      	beq.n	800436c <floorf+0x30>
 8004388:	2c00      	cmp	r4, #0
 800438a:	bfbe      	ittt	lt
 800438c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8004390:	fa43 f505 	asrlt.w	r5, r3, r5
 8004394:	1964      	addlt	r4, r4, r5
 8004396:	ea24 0406 	bic.w	r4, r4, r6
 800439a:	e7e7      	b.n	800436c <floorf+0x30>
 800439c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80043a0:	d302      	bcc.n	80043a8 <floorf+0x6c>
 80043a2:	f7fc faf7 	bl	8000994 <__addsf3>
 80043a6:	4601      	mov	r1, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	2400      	movs	r4, #0
 80043ae:	e7dd      	b.n	800436c <floorf+0x30>
 80043b0:	7149f2ca 	.word	0x7149f2ca
 80043b4:	bf800000 	.word	0xbf800000
 80043b8:	007fffff 	.word	0x007fffff

080043bc <scalbnf>:
 80043bc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4602      	mov	r2, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	4601      	mov	r1, r0
 80043c8:	d027      	beq.n	800441a <scalbnf+0x5e>
 80043ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80043ce:	d303      	bcc.n	80043d8 <scalbnf+0x1c>
 80043d0:	f7fc fae0 	bl	8000994 <__addsf3>
 80043d4:	4602      	mov	r2, r0
 80043d6:	e020      	b.n	800441a <scalbnf+0x5e>
 80043d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043dc:	d215      	bcs.n	800440a <scalbnf+0x4e>
 80043de:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80043e2:	f7fc fbdf 	bl	8000ba4 <__aeabi_fmul>
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <scalbnf+0x8c>)
 80043e8:	4602      	mov	r2, r0
 80043ea:	429c      	cmp	r4, r3
 80043ec:	db22      	blt.n	8004434 <scalbnf+0x78>
 80043ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80043f2:	3b19      	subs	r3, #25
 80043f4:	4423      	add	r3, r4
 80043f6:	2bfe      	cmp	r3, #254	; 0xfe
 80043f8:	dd09      	ble.n	800440e <scalbnf+0x52>
 80043fa:	4611      	mov	r1, r2
 80043fc:	4813      	ldr	r0, [pc, #76]	; (800444c <scalbnf+0x90>)
 80043fe:	f000 f829 	bl	8004454 <copysignf>
 8004402:	4912      	ldr	r1, [pc, #72]	; (800444c <scalbnf+0x90>)
 8004404:	f7fc fbce 	bl	8000ba4 <__aeabi_fmul>
 8004408:	e7e4      	b.n	80043d4 <scalbnf+0x18>
 800440a:	0ddb      	lsrs	r3, r3, #23
 800440c:	e7f2      	b.n	80043f4 <scalbnf+0x38>
 800440e:	2b00      	cmp	r3, #0
 8004410:	dd05      	ble.n	800441e <scalbnf+0x62>
 8004412:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8004416:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800441a:	4610      	mov	r0, r2
 800441c:	bd10      	pop	{r4, pc}
 800441e:	f113 0f16 	cmn.w	r3, #22
 8004422:	da09      	bge.n	8004438 <scalbnf+0x7c>
 8004424:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004428:	429c      	cmp	r4, r3
 800442a:	4611      	mov	r1, r2
 800442c:	dce6      	bgt.n	80043fc <scalbnf+0x40>
 800442e:	4808      	ldr	r0, [pc, #32]	; (8004450 <scalbnf+0x94>)
 8004430:	f000 f810 	bl	8004454 <copysignf>
 8004434:	4906      	ldr	r1, [pc, #24]	; (8004450 <scalbnf+0x94>)
 8004436:	e7e5      	b.n	8004404 <scalbnf+0x48>
 8004438:	3319      	adds	r3, #25
 800443a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800443e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004442:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004446:	e7dd      	b.n	8004404 <scalbnf+0x48>
 8004448:	ffff3cb0 	.word	0xffff3cb0
 800444c:	7149f2ca 	.word	0x7149f2ca
 8004450:	0da24260 	.word	0x0da24260

08004454 <copysignf>:
 8004454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004458:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800445c:	4308      	orrs	r0, r1
 800445e:	4770      	bx	lr

08004460 <abort>:
 8004460:	b508      	push	{r3, lr}
 8004462:	2006      	movs	r0, #6
 8004464:	f000 fac2 	bl	80049ec <raise>
 8004468:	2001      	movs	r0, #1
 800446a:	f000 fc93 	bl	8004d94 <_exit>
	...

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000010 	.word	0x20000010

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	2500      	movs	r5, #0
 8004480:	4e0c      	ldr	r6, [pc, #48]	; (80044b4 <__libc_init_array+0x38>)
 8004482:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004484:	1ba4      	subs	r4, r4, r6
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	42a5      	cmp	r5, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	f000 fc84 	bl	8004d98 <_init>
 8004490:	2500      	movs	r5, #0
 8004492:	4e0a      	ldr	r6, [pc, #40]	; (80044bc <__libc_init_array+0x40>)
 8004494:	4c0a      	ldr	r4, [pc, #40]	; (80044c0 <__libc_init_array+0x44>)
 8004496:	1ba4      	subs	r4, r4, r6
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	42a5      	cmp	r5, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a4:	4798      	blx	r3
 80044a6:	3501      	adds	r5, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ae:	4798      	blx	r3
 80044b0:	3501      	adds	r5, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	080051b4 	.word	0x080051b4
 80044b8:	080051b4 	.word	0x080051b4
 80044bc:	080051b4 	.word	0x080051b4
 80044c0:	080051c0 	.word	0x080051c0

080044c4 <malloc>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <malloc+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f000 b80b 	b.w	80044e4 <_malloc_r>
 80044ce:	bf00      	nop
 80044d0:	20000010 	.word	0x20000010

080044d4 <free>:
 80044d4:	4b02      	ldr	r3, [pc, #8]	; (80044e0 <free+0xc>)
 80044d6:	4601      	mov	r1, r0
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f000 bb29 	b.w	8004b30 <_free_r>
 80044de:	bf00      	nop
 80044e0:	20000010 	.word	0x20000010

080044e4 <_malloc_r>:
 80044e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	f101 050b 	add.w	r5, r1, #11
 80044ec:	2d16      	cmp	r5, #22
 80044ee:	4606      	mov	r6, r0
 80044f0:	d906      	bls.n	8004500 <_malloc_r+0x1c>
 80044f2:	f035 0507 	bics.w	r5, r5, #7
 80044f6:	d504      	bpl.n	8004502 <_malloc_r+0x1e>
 80044f8:	230c      	movs	r3, #12
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	2400      	movs	r4, #0
 80044fe:	e1a8      	b.n	8004852 <_malloc_r+0x36e>
 8004500:	2510      	movs	r5, #16
 8004502:	428d      	cmp	r5, r1
 8004504:	d3f8      	bcc.n	80044f8 <_malloc_r+0x14>
 8004506:	4630      	mov	r0, r6
 8004508:	f000 fa2a 	bl	8004960 <__malloc_lock>
 800450c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004510:	4fc0      	ldr	r7, [pc, #768]	; (8004814 <_malloc_r+0x330>)
 8004512:	d238      	bcs.n	8004586 <_malloc_r+0xa2>
 8004514:	f105 0208 	add.w	r2, r5, #8
 8004518:	443a      	add	r2, r7
 800451a:	6854      	ldr	r4, [r2, #4]
 800451c:	f1a2 0108 	sub.w	r1, r2, #8
 8004520:	428c      	cmp	r4, r1
 8004522:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8004526:	d102      	bne.n	800452e <_malloc_r+0x4a>
 8004528:	68d4      	ldr	r4, [r2, #12]
 800452a:	42a2      	cmp	r2, r4
 800452c:	d010      	beq.n	8004550 <_malloc_r+0x6c>
 800452e:	6863      	ldr	r3, [r4, #4]
 8004530:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004534:	f023 0303 	bic.w	r3, r3, #3
 8004538:	60ca      	str	r2, [r1, #12]
 800453a:	4423      	add	r3, r4
 800453c:	6091      	str	r1, [r2, #8]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	4630      	mov	r0, r6
 8004548:	f000 fa10 	bl	800496c <__malloc_unlock>
 800454c:	3408      	adds	r4, #8
 800454e:	e180      	b.n	8004852 <_malloc_r+0x36e>
 8004550:	3302      	adds	r3, #2
 8004552:	4ab1      	ldr	r2, [pc, #708]	; (8004818 <_malloc_r+0x334>)
 8004554:	693c      	ldr	r4, [r7, #16]
 8004556:	4611      	mov	r1, r2
 8004558:	4294      	cmp	r4, r2
 800455a:	d075      	beq.n	8004648 <_malloc_r+0x164>
 800455c:	6860      	ldr	r0, [r4, #4]
 800455e:	f020 0c03 	bic.w	ip, r0, #3
 8004562:	ebac 0005 	sub.w	r0, ip, r5
 8004566:	280f      	cmp	r0, #15
 8004568:	dd48      	ble.n	80045fc <_malloc_r+0x118>
 800456a:	1963      	adds	r3, r4, r5
 800456c:	f045 0501 	orr.w	r5, r5, #1
 8004570:	6065      	str	r5, [r4, #4]
 8004572:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004576:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800457a:	f040 0201 	orr.w	r2, r0, #1
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	f844 000c 	str.w	r0, [r4, ip]
 8004584:	e7df      	b.n	8004546 <_malloc_r+0x62>
 8004586:	0a6b      	lsrs	r3, r5, #9
 8004588:	d02a      	beq.n	80045e0 <_malloc_r+0xfc>
 800458a:	2b04      	cmp	r3, #4
 800458c:	d812      	bhi.n	80045b4 <_malloc_r+0xd0>
 800458e:	09ab      	lsrs	r3, r5, #6
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004598:	6854      	ldr	r4, [r2, #4]
 800459a:	f1a2 0c08 	sub.w	ip, r2, #8
 800459e:	4564      	cmp	r4, ip
 80045a0:	d006      	beq.n	80045b0 <_malloc_r+0xcc>
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	f022 0203 	bic.w	r2, r2, #3
 80045a8:	1b50      	subs	r0, r2, r5
 80045aa:	280f      	cmp	r0, #15
 80045ac:	dd1c      	ble.n	80045e8 <_malloc_r+0x104>
 80045ae:	3b01      	subs	r3, #1
 80045b0:	3301      	adds	r3, #1
 80045b2:	e7ce      	b.n	8004552 <_malloc_r+0x6e>
 80045b4:	2b14      	cmp	r3, #20
 80045b6:	d801      	bhi.n	80045bc <_malloc_r+0xd8>
 80045b8:	335b      	adds	r3, #91	; 0x5b
 80045ba:	e7ea      	b.n	8004592 <_malloc_r+0xae>
 80045bc:	2b54      	cmp	r3, #84	; 0x54
 80045be:	d802      	bhi.n	80045c6 <_malloc_r+0xe2>
 80045c0:	0b2b      	lsrs	r3, r5, #12
 80045c2:	336e      	adds	r3, #110	; 0x6e
 80045c4:	e7e5      	b.n	8004592 <_malloc_r+0xae>
 80045c6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80045ca:	d802      	bhi.n	80045d2 <_malloc_r+0xee>
 80045cc:	0beb      	lsrs	r3, r5, #15
 80045ce:	3377      	adds	r3, #119	; 0x77
 80045d0:	e7df      	b.n	8004592 <_malloc_r+0xae>
 80045d2:	f240 5254 	movw	r2, #1364	; 0x554
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d804      	bhi.n	80045e4 <_malloc_r+0x100>
 80045da:	0cab      	lsrs	r3, r5, #18
 80045dc:	337c      	adds	r3, #124	; 0x7c
 80045de:	e7d8      	b.n	8004592 <_malloc_r+0xae>
 80045e0:	233f      	movs	r3, #63	; 0x3f
 80045e2:	e7d6      	b.n	8004592 <_malloc_r+0xae>
 80045e4:	237e      	movs	r3, #126	; 0x7e
 80045e6:	e7d4      	b.n	8004592 <_malloc_r+0xae>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	68e1      	ldr	r1, [r4, #12]
 80045ec:	db04      	blt.n	80045f8 <_malloc_r+0x114>
 80045ee:	68a3      	ldr	r3, [r4, #8]
 80045f0:	60d9      	str	r1, [r3, #12]
 80045f2:	608b      	str	r3, [r1, #8]
 80045f4:	18a3      	adds	r3, r4, r2
 80045f6:	e7a2      	b.n	800453e <_malloc_r+0x5a>
 80045f8:	460c      	mov	r4, r1
 80045fa:	e7d0      	b.n	800459e <_malloc_r+0xba>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8004602:	db07      	blt.n	8004614 <_malloc_r+0x130>
 8004604:	44a4      	add	ip, r4
 8004606:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	f8cc 3004 	str.w	r3, [ip, #4]
 8004612:	e798      	b.n	8004546 <_malloc_r+0x62>
 8004614:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f080 8099 	bcs.w	8004750 <_malloc_r+0x26c>
 800461e:	2201      	movs	r2, #1
 8004620:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004624:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8004628:	fa02 f20e 	lsl.w	r2, r2, lr
 800462c:	4310      	orrs	r0, r2
 800462e:	f10c 0c01 	add.w	ip, ip, #1
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8004638:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800463c:	3a08      	subs	r2, #8
 800463e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8004642:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8004646:	60c4      	str	r4, [r0, #12]
 8004648:	2001      	movs	r0, #1
 800464a:	109a      	asrs	r2, r3, #2
 800464c:	fa00 f202 	lsl.w	r2, r0, r2
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4290      	cmp	r0, r2
 8004654:	d326      	bcc.n	80046a4 <_malloc_r+0x1c0>
 8004656:	4210      	tst	r0, r2
 8004658:	d106      	bne.n	8004668 <_malloc_r+0x184>
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	0052      	lsls	r2, r2, #1
 8004660:	4210      	tst	r0, r2
 8004662:	f103 0304 	add.w	r3, r3, #4
 8004666:	d0fa      	beq.n	800465e <_malloc_r+0x17a>
 8004668:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800466c:	46e1      	mov	r9, ip
 800466e:	4698      	mov	r8, r3
 8004670:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004674:	454c      	cmp	r4, r9
 8004676:	f040 80af 	bne.w	80047d8 <_malloc_r+0x2f4>
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	f018 0f03 	tst.w	r8, #3
 8004682:	f109 0908 	add.w	r9, r9, #8
 8004686:	d1f3      	bne.n	8004670 <_malloc_r+0x18c>
 8004688:	0798      	lsls	r0, r3, #30
 800468a:	f040 80e8 	bne.w	800485e <_malloc_r+0x37a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	ea23 0302 	bic.w	r3, r3, r2
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	0052      	lsls	r2, r2, #1
 800469a:	4290      	cmp	r0, r2
 800469c:	d302      	bcc.n	80046a4 <_malloc_r+0x1c0>
 800469e:	2a00      	cmp	r2, #0
 80046a0:	f040 80eb 	bne.w	800487a <_malloc_r+0x396>
 80046a4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80046a8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80046ac:	f024 0203 	bic.w	r2, r4, #3
 80046b0:	42aa      	cmp	r2, r5
 80046b2:	d303      	bcc.n	80046bc <_malloc_r+0x1d8>
 80046b4:	1b53      	subs	r3, r2, r5
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	f300 813f 	bgt.w	800493a <_malloc_r+0x456>
 80046bc:	4b57      	ldr	r3, [pc, #348]	; (800481c <_malloc_r+0x338>)
 80046be:	2008      	movs	r0, #8
 80046c0:	681c      	ldr	r4, [r3, #0]
 80046c2:	9200      	str	r2, [sp, #0]
 80046c4:	f000 f9ae 	bl	8004a24 <sysconf>
 80046c8:	4b55      	ldr	r3, [pc, #340]	; (8004820 <_malloc_r+0x33c>)
 80046ca:	3410      	adds	r4, #16
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	442c      	add	r4, r5
 80046d0:	3101      	adds	r1, #1
 80046d2:	bf1f      	itttt	ne
 80046d4:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 80046d8:	1824      	addne	r4, r4, r0
 80046da:	4241      	negne	r1, r0
 80046dc:	400c      	andne	r4, r1
 80046de:	9a00      	ldr	r2, [sp, #0]
 80046e0:	4680      	mov	r8, r0
 80046e2:	4621      	mov	r1, r4
 80046e4:	4630      	mov	r0, r6
 80046e6:	e9cd 2300 	strd	r2, r3, [sp]
 80046ea:	f000 f945 	bl	8004978 <_sbrk_r>
 80046ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80046f2:	4683      	mov	fp, r0
 80046f4:	f000 80fa 	beq.w	80048ec <_malloc_r+0x408>
 80046f8:	9a00      	ldr	r2, [sp, #0]
 80046fa:	9b01      	ldr	r3, [sp, #4]
 80046fc:	eb0a 0102 	add.w	r1, sl, r2
 8004700:	4281      	cmp	r1, r0
 8004702:	d902      	bls.n	800470a <_malloc_r+0x226>
 8004704:	45ba      	cmp	sl, r7
 8004706:	f040 80f1 	bne.w	80048ec <_malloc_r+0x408>
 800470a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800482c <_malloc_r+0x348>
 800470e:	4559      	cmp	r1, fp
 8004710:	f8d9 0000 	ldr.w	r0, [r9]
 8004714:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8004718:	eb00 0e04 	add.w	lr, r0, r4
 800471c:	f8c9 e000 	str.w	lr, [r9]
 8004720:	f040 80ad 	bne.w	800487e <_malloc_r+0x39a>
 8004724:	ea11 0f0c 	tst.w	r1, ip
 8004728:	f040 80a9 	bne.w	800487e <_malloc_r+0x39a>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4414      	add	r4, r2
 8004730:	f044 0401 	orr.w	r4, r4, #1
 8004734:	605c      	str	r4, [r3, #4]
 8004736:	4a3b      	ldr	r2, [pc, #236]	; (8004824 <_malloc_r+0x340>)
 8004738:	f8d9 3000 	ldr.w	r3, [r9]
 800473c:	6811      	ldr	r1, [r2, #0]
 800473e:	428b      	cmp	r3, r1
 8004740:	bf88      	it	hi
 8004742:	6013      	strhi	r3, [r2, #0]
 8004744:	4a38      	ldr	r2, [pc, #224]	; (8004828 <_malloc_r+0x344>)
 8004746:	6811      	ldr	r1, [r2, #0]
 8004748:	428b      	cmp	r3, r1
 800474a:	bf88      	it	hi
 800474c:	6013      	strhi	r3, [r2, #0]
 800474e:	e0cd      	b.n	80048ec <_malloc_r+0x408>
 8004750:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004754:	2a04      	cmp	r2, #4
 8004756:	d818      	bhi.n	800478a <_malloc_r+0x2a6>
 8004758:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800475c:	3238      	adds	r2, #56	; 0x38
 800475e:	f102 0e01 	add.w	lr, r2, #1
 8004762:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8004766:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800476a:	45f0      	cmp	r8, lr
 800476c:	d12b      	bne.n	80047c6 <_malloc_r+0x2e2>
 800476e:	f04f 0c01 	mov.w	ip, #1
 8004772:	1092      	asrs	r2, r2, #2
 8004774:	fa0c f202 	lsl.w	r2, ip, r2
 8004778:	4310      	orrs	r0, r2
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8004780:	f8c8 4008 	str.w	r4, [r8, #8]
 8004784:	f8ce 400c 	str.w	r4, [lr, #12]
 8004788:	e75e      	b.n	8004648 <_malloc_r+0x164>
 800478a:	2a14      	cmp	r2, #20
 800478c:	d801      	bhi.n	8004792 <_malloc_r+0x2ae>
 800478e:	325b      	adds	r2, #91	; 0x5b
 8004790:	e7e5      	b.n	800475e <_malloc_r+0x27a>
 8004792:	2a54      	cmp	r2, #84	; 0x54
 8004794:	d803      	bhi.n	800479e <_malloc_r+0x2ba>
 8004796:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800479a:	326e      	adds	r2, #110	; 0x6e
 800479c:	e7df      	b.n	800475e <_malloc_r+0x27a>
 800479e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80047a2:	d803      	bhi.n	80047ac <_malloc_r+0x2c8>
 80047a4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80047a8:	3277      	adds	r2, #119	; 0x77
 80047aa:	e7d8      	b.n	800475e <_malloc_r+0x27a>
 80047ac:	f240 5e54 	movw	lr, #1364	; 0x554
 80047b0:	4572      	cmp	r2, lr
 80047b2:	bf9a      	itte	ls
 80047b4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80047b8:	327c      	addls	r2, #124	; 0x7c
 80047ba:	227e      	movhi	r2, #126	; 0x7e
 80047bc:	e7cf      	b.n	800475e <_malloc_r+0x27a>
 80047be:	f8de e008 	ldr.w	lr, [lr, #8]
 80047c2:	45f0      	cmp	r8, lr
 80047c4:	d005      	beq.n	80047d2 <_malloc_r+0x2ee>
 80047c6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80047ca:	f022 0203 	bic.w	r2, r2, #3
 80047ce:	4562      	cmp	r2, ip
 80047d0:	d8f5      	bhi.n	80047be <_malloc_r+0x2da>
 80047d2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80047d6:	e7d1      	b.n	800477c <_malloc_r+0x298>
 80047d8:	6860      	ldr	r0, [r4, #4]
 80047da:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80047de:	f020 0003 	bic.w	r0, r0, #3
 80047e2:	eba0 0a05 	sub.w	sl, r0, r5
 80047e6:	f1ba 0f0f 	cmp.w	sl, #15
 80047ea:	dd21      	ble.n	8004830 <_malloc_r+0x34c>
 80047ec:	68a2      	ldr	r2, [r4, #8]
 80047ee:	1963      	adds	r3, r4, r5
 80047f0:	f045 0501 	orr.w	r5, r5, #1
 80047f4:	6065      	str	r5, [r4, #4]
 80047f6:	f8c2 e00c 	str.w	lr, [r2, #12]
 80047fa:	f8ce 2008 	str.w	r2, [lr, #8]
 80047fe:	f04a 0201 	orr.w	r2, sl, #1
 8004802:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004806:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	f844 a000 	str.w	sl, [r4, r0]
 8004810:	e699      	b.n	8004546 <_malloc_r+0x62>
 8004812:	bf00      	nop
 8004814:	20000440 	.word	0x20000440
 8004818:	20000448 	.word	0x20000448
 800481c:	20000acc 	.word	0x20000acc
 8004820:	20000848 	.word	0x20000848
 8004824:	20000ac4 	.word	0x20000ac4
 8004828:	20000ac8 	.word	0x20000ac8
 800482c:	20000a9c 	.word	0x20000a9c
 8004830:	f1ba 0f00 	cmp.w	sl, #0
 8004834:	db11      	blt.n	800485a <_malloc_r+0x376>
 8004836:	4420      	add	r0, r4
 8004838:	6843      	ldr	r3, [r0, #4]
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6043      	str	r3, [r0, #4]
 8004840:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004844:	4630      	mov	r0, r6
 8004846:	f8c3 e00c 	str.w	lr, [r3, #12]
 800484a:	f8ce 3008 	str.w	r3, [lr, #8]
 800484e:	f000 f88d 	bl	800496c <__malloc_unlock>
 8004852:	4620      	mov	r0, r4
 8004854:	b003      	add	sp, #12
 8004856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485a:	4674      	mov	r4, lr
 800485c:	e70a      	b.n	8004674 <_malloc_r+0x190>
 800485e:	f1ac 0008 	sub.w	r0, ip, #8
 8004862:	f8dc c000 	ldr.w	ip, [ip]
 8004866:	3b01      	subs	r3, #1
 8004868:	4584      	cmp	ip, r0
 800486a:	f43f af0d 	beq.w	8004688 <_malloc_r+0x1a4>
 800486e:	e712      	b.n	8004696 <_malloc_r+0x1b2>
 8004870:	3304      	adds	r3, #4
 8004872:	0052      	lsls	r2, r2, #1
 8004874:	4210      	tst	r0, r2
 8004876:	d0fb      	beq.n	8004870 <_malloc_r+0x38c>
 8004878:	e6f6      	b.n	8004668 <_malloc_r+0x184>
 800487a:	4643      	mov	r3, r8
 800487c:	e7fa      	b.n	8004874 <_malloc_r+0x390>
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	3001      	adds	r0, #1
 8004884:	bf1b      	ittet	ne
 8004886:	ebab 0101 	subne.w	r1, fp, r1
 800488a:	4471      	addne	r1, lr
 800488c:	f8c3 b000 	streq.w	fp, [r3]
 8004890:	f8c9 1000 	strne.w	r1, [r9]
 8004894:	f01b 0307 	ands.w	r3, fp, #7
 8004898:	bf1c      	itt	ne
 800489a:	f1c3 0308 	rsbne	r3, r3, #8
 800489e:	449b      	addne	fp, r3
 80048a0:	445c      	add	r4, fp
 80048a2:	4498      	add	r8, r3
 80048a4:	ea04 030c 	and.w	r3, r4, ip
 80048a8:	eba8 0803 	sub.w	r8, r8, r3
 80048ac:	4641      	mov	r1, r8
 80048ae:	4630      	mov	r0, r6
 80048b0:	f000 f862 	bl	8004978 <_sbrk_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	bf04      	itt	eq
 80048b8:	4658      	moveq	r0, fp
 80048ba:	f04f 0800 	moveq.w	r8, #0
 80048be:	f8d9 3000 	ldr.w	r3, [r9]
 80048c2:	eba0 000b 	sub.w	r0, r0, fp
 80048c6:	4440      	add	r0, r8
 80048c8:	4443      	add	r3, r8
 80048ca:	f040 0001 	orr.w	r0, r0, #1
 80048ce:	45ba      	cmp	sl, r7
 80048d0:	f8c7 b008 	str.w	fp, [r7, #8]
 80048d4:	9a00      	ldr	r2, [sp, #0]
 80048d6:	f8c9 3000 	str.w	r3, [r9]
 80048da:	f8cb 0004 	str.w	r0, [fp, #4]
 80048de:	f43f af2a 	beq.w	8004736 <_malloc_r+0x252>
 80048e2:	2a0f      	cmp	r2, #15
 80048e4:	d810      	bhi.n	8004908 <_malloc_r+0x424>
 80048e6:	2301      	movs	r3, #1
 80048e8:	f8cb 3004 	str.w	r3, [fp, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	f022 0203 	bic.w	r2, r2, #3
 80048f4:	42aa      	cmp	r2, r5
 80048f6:	eba2 0305 	sub.w	r3, r2, r5
 80048fa:	d301      	bcc.n	8004900 <_malloc_r+0x41c>
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	dc1c      	bgt.n	800493a <_malloc_r+0x456>
 8004900:	4630      	mov	r0, r6
 8004902:	f000 f833 	bl	800496c <__malloc_unlock>
 8004906:	e5f9      	b.n	80044fc <_malloc_r+0x18>
 8004908:	f1a2 040c 	sub.w	r4, r2, #12
 800490c:	2205      	movs	r2, #5
 800490e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004912:	f024 0407 	bic.w	r4, r4, #7
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	4323      	orrs	r3, r4
 800491c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004920:	2c0f      	cmp	r4, #15
 8004922:	eb0a 0304 	add.w	r3, sl, r4
 8004926:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800492a:	f67f af04 	bls.w	8004736 <_malloc_r+0x252>
 800492e:	f10a 0108 	add.w	r1, sl, #8
 8004932:	4630      	mov	r0, r6
 8004934:	f000 f8fc 	bl	8004b30 <_free_r>
 8004938:	e6fd      	b.n	8004736 <_malloc_r+0x252>
 800493a:	68bc      	ldr	r4, [r7, #8]
 800493c:	f045 0201 	orr.w	r2, r5, #1
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	4425      	add	r5, r4
 8004946:	6062      	str	r2, [r4, #4]
 8004948:	60bd      	str	r5, [r7, #8]
 800494a:	606b      	str	r3, [r5, #4]
 800494c:	e5fb      	b.n	8004546 <_malloc_r+0x62>
 800494e:	bf00      	nop

08004950 <memset>:
 8004950:	4603      	mov	r3, r0
 8004952:	4402      	add	r2, r0
 8004954:	4293      	cmp	r3, r2
 8004956:	d100      	bne.n	800495a <memset+0xa>
 8004958:	4770      	bx	lr
 800495a:	f803 1b01 	strb.w	r1, [r3], #1
 800495e:	e7f9      	b.n	8004954 <memset+0x4>

08004960 <__malloc_lock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_lock+0x8>)
 8004962:	f000 b9a1 	b.w	8004ca8 <__retarget_lock_acquire_recursive>
 8004966:	bf00      	nop
 8004968:	20000adc 	.word	0x20000adc

0800496c <__malloc_unlock>:
 800496c:	4801      	ldr	r0, [pc, #4]	; (8004974 <__malloc_unlock+0x8>)
 800496e:	f000 b99c 	b.w	8004caa <__retarget_lock_release_recursive>
 8004972:	bf00      	nop
 8004974:	20000adc 	.word	0x20000adc

08004978 <_sbrk_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	2300      	movs	r3, #0
 800497c:	4c05      	ldr	r4, [pc, #20]	; (8004994 <_sbrk_r+0x1c>)
 800497e:	4605      	mov	r5, r0
 8004980:	4608      	mov	r0, r1
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	f000 f9f8 	bl	8004d78 <_sbrk>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_sbrk_r+0x1a>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	b103      	cbz	r3, 8004992 <_sbrk_r+0x1a>
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	20000ae4 	.word	0x20000ae4

08004998 <_raise_r>:
 8004998:	291f      	cmp	r1, #31
 800499a:	b538      	push	{r3, r4, r5, lr}
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
 80049a0:	d904      	bls.n	80049ac <_raise_r+0x14>
 80049a2:	2316      	movs	r3, #22
 80049a4:	6003      	str	r3, [r0, #0]
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80049b0:	b112      	cbz	r2, 80049b8 <_raise_r+0x20>
 80049b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049b6:	b94b      	cbnz	r3, 80049cc <_raise_r+0x34>
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 f831 	bl	8004a20 <_getpid_r>
 80049be:	462a      	mov	r2, r5
 80049c0:	4601      	mov	r1, r0
 80049c2:	4620      	mov	r0, r4
 80049c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c8:	f000 b818 	b.w	80049fc <_kill_r>
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d00a      	beq.n	80049e6 <_raise_r+0x4e>
 80049d0:	1c59      	adds	r1, r3, #1
 80049d2:	d103      	bne.n	80049dc <_raise_r+0x44>
 80049d4:	2316      	movs	r3, #22
 80049d6:	6003      	str	r3, [r0, #0]
 80049d8:	2001      	movs	r0, #1
 80049da:	e7e6      	b.n	80049aa <_raise_r+0x12>
 80049dc:	2400      	movs	r4, #0
 80049de:	4628      	mov	r0, r5
 80049e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049e4:	4798      	blx	r3
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7df      	b.n	80049aa <_raise_r+0x12>
	...

080049ec <raise>:
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <raise+0xc>)
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f7ff bfd1 	b.w	8004998 <_raise_r>
 80049f6:	bf00      	nop
 80049f8:	20000010 	.word	0x20000010

080049fc <_kill_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	2300      	movs	r3, #0
 8004a00:	4c06      	ldr	r4, [pc, #24]	; (8004a1c <_kill_r+0x20>)
 8004a02:	4605      	mov	r5, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	f000 f9ad 	bl	8004d68 <_kill>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d102      	bne.n	8004a18 <_kill_r+0x1c>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	b103      	cbz	r3, 8004a18 <_kill_r+0x1c>
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000ae4 	.word	0x20000ae4

08004a20 <_getpid_r>:
 8004a20:	f000 b99a 	b.w	8004d58 <_getpid>

08004a24 <sysconf>:
 8004a24:	2808      	cmp	r0, #8
 8004a26:	b508      	push	{r3, lr}
 8004a28:	d006      	beq.n	8004a38 <sysconf+0x14>
 8004a2a:	f7ff fd21 	bl	8004470 <__errno>
 8004a2e:	2316      	movs	r3, #22
 8004a30:	6003      	str	r3, [r0, #0]
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a36:	bd08      	pop	{r3, pc}
 8004a38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a3c:	e7fb      	b.n	8004a36 <sysconf+0x12>
	...

08004a40 <register_fini>:
 8004a40:	4b02      	ldr	r3, [pc, #8]	; (8004a4c <register_fini+0xc>)
 8004a42:	b113      	cbz	r3, 8004a4a <register_fini+0xa>
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <register_fini+0x10>)
 8004a46:	f000 b805 	b.w	8004a54 <atexit>
 8004a4a:	4770      	bx	lr
 8004a4c:	00000000 	.word	0x00000000
 8004a50:	08004a61 	.word	0x08004a61

08004a54 <atexit>:
 8004a54:	2300      	movs	r3, #0
 8004a56:	4601      	mov	r1, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 b926 	b.w	8004cac <__register_exitproc>

08004a60 <__libc_fini_array>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <__libc_fini_array+0x20>)
 8004a64:	4c07      	ldr	r4, [pc, #28]	; (8004a84 <__libc_fini_array+0x24>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	b91c      	cbnz	r4, 8004a74 <__libc_fini_array+0x14>
 8004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a70:	f000 b998 	b.w	8004da4 <_fini>
 8004a74:	3c01      	subs	r4, #1
 8004a76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004a7a:	4798      	blx	r3
 8004a7c:	e7f5      	b.n	8004a6a <__libc_fini_array+0xa>
 8004a7e:	bf00      	nop
 8004a80:	080051c0 	.word	0x080051c0
 8004a84:	080051c4 	.word	0x080051c4

08004a88 <_malloc_trim_r>:
 8004a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	2008      	movs	r0, #8
 8004a90:	460c      	mov	r4, r1
 8004a92:	f7ff ffc7 	bl	8004a24 <sysconf>
 8004a96:	4680      	mov	r8, r0
 8004a98:	4f22      	ldr	r7, [pc, #136]	; (8004b24 <_malloc_trim_r+0x9c>)
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7ff ff60 	bl	8004960 <__malloc_lock>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	685e      	ldr	r6, [r3, #4]
 8004aa4:	f026 0603 	bic.w	r6, r6, #3
 8004aa8:	1b34      	subs	r4, r6, r4
 8004aaa:	3c11      	subs	r4, #17
 8004aac:	4444      	add	r4, r8
 8004aae:	fbb4 f4f8 	udiv	r4, r4, r8
 8004ab2:	3c01      	subs	r4, #1
 8004ab4:	fb08 f404 	mul.w	r4, r8, r4
 8004ab8:	45a0      	cmp	r8, r4
 8004aba:	dd05      	ble.n	8004ac8 <_malloc_trim_r+0x40>
 8004abc:	4628      	mov	r0, r5
 8004abe:	f7ff ff55 	bl	800496c <__malloc_unlock>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7ff ff54 	bl	8004978 <_sbrk_r>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4433      	add	r3, r6
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	d1f1      	bne.n	8004abc <_malloc_trim_r+0x34>
 8004ad8:	4261      	negs	r1, r4
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7ff ff4c 	bl	8004978 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d110      	bne.n	8004b06 <_malloc_trim_r+0x7e>
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f7ff ff46 	bl	8004978 <_sbrk_r>
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	1a83      	subs	r3, r0, r2
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	dde3      	ble.n	8004abc <_malloc_trim_r+0x34>
 8004af4:	490c      	ldr	r1, [pc, #48]	; (8004b28 <_malloc_trim_r+0xa0>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6809      	ldr	r1, [r1, #0]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	1a40      	subs	r0, r0, r1
 8004b00:	490a      	ldr	r1, [pc, #40]	; (8004b2c <_malloc_trim_r+0xa4>)
 8004b02:	6008      	str	r0, [r1, #0]
 8004b04:	e7da      	b.n	8004abc <_malloc_trim_r+0x34>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <_malloc_trim_r+0xa4>)
 8004b0a:	1b36      	subs	r6, r6, r4
 8004b0c:	f046 0601 	orr.w	r6, r6, #1
 8004b10:	605e      	str	r6, [r3, #4]
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	4628      	mov	r0, r5
 8004b16:	1b1c      	subs	r4, r3, r4
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	f7ff ff27 	bl	800496c <__malloc_unlock>
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7d0      	b.n	8004ac4 <_malloc_trim_r+0x3c>
 8004b22:	bf00      	nop
 8004b24:	20000440 	.word	0x20000440
 8004b28:	20000848 	.word	0x20000848
 8004b2c:	20000a9c 	.word	0x20000a9c

08004b30 <_free_r>:
 8004b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b34:	4604      	mov	r4, r0
 8004b36:	4688      	mov	r8, r1
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	f000 80ab 	beq.w	8004c94 <_free_r+0x164>
 8004b3e:	f7ff ff0f 	bl	8004960 <__malloc_lock>
 8004b42:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004b46:	4d54      	ldr	r5, [pc, #336]	; (8004c98 <_free_r+0x168>)
 8004b48:	f022 0001 	bic.w	r0, r2, #1
 8004b4c:	f1a8 0308 	sub.w	r3, r8, #8
 8004b50:	181f      	adds	r7, r3, r0
 8004b52:	68a9      	ldr	r1, [r5, #8]
 8004b54:	687e      	ldr	r6, [r7, #4]
 8004b56:	42b9      	cmp	r1, r7
 8004b58:	f026 0603 	bic.w	r6, r6, #3
 8004b5c:	f002 0201 	and.w	r2, r2, #1
 8004b60:	d11b      	bne.n	8004b9a <_free_r+0x6a>
 8004b62:	4430      	add	r0, r6
 8004b64:	b93a      	cbnz	r2, 8004b76 <_free_r+0x46>
 8004b66:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	4410      	add	r0, r2
 8004b6e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004b72:	60ca      	str	r2, [r1, #12]
 8004b74:	6091      	str	r1, [r2, #8]
 8004b76:	f040 0201 	orr.w	r2, r0, #1
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	60ab      	str	r3, [r5, #8]
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <_free_r+0x16c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4283      	cmp	r3, r0
 8004b84:	d804      	bhi.n	8004b90 <_free_r+0x60>
 8004b86:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <_free_r+0x170>)
 8004b88:	4620      	mov	r0, r4
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	f7ff ff7c 	bl	8004a88 <_malloc_trim_r>
 8004b90:	4620      	mov	r0, r4
 8004b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b96:	f7ff bee9 	b.w	800496c <__malloc_unlock>
 8004b9a:	607e      	str	r6, [r7, #4]
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	d139      	bne.n	8004c14 <_free_r+0xe4>
 8004ba0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004ba4:	f105 0c08 	add.w	ip, r5, #8
 8004ba8:	1a5b      	subs	r3, r3, r1
 8004baa:	4408      	add	r0, r1
 8004bac:	6899      	ldr	r1, [r3, #8]
 8004bae:	4561      	cmp	r1, ip
 8004bb0:	d032      	beq.n	8004c18 <_free_r+0xe8>
 8004bb2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004bb6:	f8c1 c00c 	str.w	ip, [r1, #12]
 8004bba:	f8cc 1008 	str.w	r1, [ip, #8]
 8004bbe:	19b9      	adds	r1, r7, r6
 8004bc0:	6849      	ldr	r1, [r1, #4]
 8004bc2:	07c9      	lsls	r1, r1, #31
 8004bc4:	d40a      	bmi.n	8004bdc <_free_r+0xac>
 8004bc6:	4430      	add	r0, r6
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	bb3a      	cbnz	r2, 8004c1c <_free_r+0xec>
 8004bcc:	4e35      	ldr	r6, [pc, #212]	; (8004ca4 <_free_r+0x174>)
 8004bce:	42b1      	cmp	r1, r6
 8004bd0:	d124      	bne.n	8004c1c <_free_r+0xec>
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004bd8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004bdc:	f040 0101 	orr.w	r1, r0, #1
 8004be0:	6059      	str	r1, [r3, #4]
 8004be2:	5018      	str	r0, [r3, r0]
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d1d3      	bne.n	8004b90 <_free_r+0x60>
 8004be8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004bec:	d21a      	bcs.n	8004c24 <_free_r+0xf4>
 8004bee:	2201      	movs	r2, #1
 8004bf0:	08c0      	lsrs	r0, r0, #3
 8004bf2:	1081      	asrs	r1, r0, #2
 8004bf4:	408a      	lsls	r2, r1
 8004bf6:	6869      	ldr	r1, [r5, #4]
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	606a      	str	r2, [r5, #4]
 8004bfe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004c02:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004c06:	3a08      	subs	r2, #8
 8004c08:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004c0c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004c10:	60cb      	str	r3, [r1, #12]
 8004c12:	e7bd      	b.n	8004b90 <_free_r+0x60>
 8004c14:	2200      	movs	r2, #0
 8004c16:	e7d2      	b.n	8004bbe <_free_r+0x8e>
 8004c18:	2201      	movs	r2, #1
 8004c1a:	e7d0      	b.n	8004bbe <_free_r+0x8e>
 8004c1c:	68fe      	ldr	r6, [r7, #12]
 8004c1e:	60ce      	str	r6, [r1, #12]
 8004c20:	60b1      	str	r1, [r6, #8]
 8004c22:	e7db      	b.n	8004bdc <_free_r+0xac>
 8004c24:	0a42      	lsrs	r2, r0, #9
 8004c26:	2a04      	cmp	r2, #4
 8004c28:	d813      	bhi.n	8004c52 <_free_r+0x122>
 8004c2a:	0982      	lsrs	r2, r0, #6
 8004c2c:	3238      	adds	r2, #56	; 0x38
 8004c2e:	1c51      	adds	r1, r2, #1
 8004c30:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004c34:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004c38:	428e      	cmp	r6, r1
 8004c3a:	d124      	bne.n	8004c86 <_free_r+0x156>
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	1092      	asrs	r2, r2, #2
 8004c40:	fa00 f202 	lsl.w	r2, r0, r2
 8004c44:	6868      	ldr	r0, [r5, #4]
 8004c46:	4302      	orrs	r2, r0
 8004c48:	606a      	str	r2, [r5, #4]
 8004c4a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004c4e:	60b3      	str	r3, [r6, #8]
 8004c50:	e7de      	b.n	8004c10 <_free_r+0xe0>
 8004c52:	2a14      	cmp	r2, #20
 8004c54:	d801      	bhi.n	8004c5a <_free_r+0x12a>
 8004c56:	325b      	adds	r2, #91	; 0x5b
 8004c58:	e7e9      	b.n	8004c2e <_free_r+0xfe>
 8004c5a:	2a54      	cmp	r2, #84	; 0x54
 8004c5c:	d802      	bhi.n	8004c64 <_free_r+0x134>
 8004c5e:	0b02      	lsrs	r2, r0, #12
 8004c60:	326e      	adds	r2, #110	; 0x6e
 8004c62:	e7e4      	b.n	8004c2e <_free_r+0xfe>
 8004c64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004c68:	d802      	bhi.n	8004c70 <_free_r+0x140>
 8004c6a:	0bc2      	lsrs	r2, r0, #15
 8004c6c:	3277      	adds	r2, #119	; 0x77
 8004c6e:	e7de      	b.n	8004c2e <_free_r+0xfe>
 8004c70:	f240 5154 	movw	r1, #1364	; 0x554
 8004c74:	428a      	cmp	r2, r1
 8004c76:	bf9a      	itte	ls
 8004c78:	0c82      	lsrls	r2, r0, #18
 8004c7a:	327c      	addls	r2, #124	; 0x7c
 8004c7c:	227e      	movhi	r2, #126	; 0x7e
 8004c7e:	e7d6      	b.n	8004c2e <_free_r+0xfe>
 8004c80:	6889      	ldr	r1, [r1, #8]
 8004c82:	428e      	cmp	r6, r1
 8004c84:	d004      	beq.n	8004c90 <_free_r+0x160>
 8004c86:	684a      	ldr	r2, [r1, #4]
 8004c88:	f022 0203 	bic.w	r2, r2, #3
 8004c8c:	4282      	cmp	r2, r0
 8004c8e:	d8f7      	bhi.n	8004c80 <_free_r+0x150>
 8004c90:	68ce      	ldr	r6, [r1, #12]
 8004c92:	e7da      	b.n	8004c4a <_free_r+0x11a>
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	20000440 	.word	0x20000440
 8004c9c:	2000084c 	.word	0x2000084c
 8004ca0:	20000acc 	.word	0x20000acc
 8004ca4:	20000448 	.word	0x20000448

08004ca8 <__retarget_lock_acquire_recursive>:
 8004ca8:	4770      	bx	lr

08004caa <__retarget_lock_release_recursive>:
 8004caa:	4770      	bx	lr

08004cac <__register_exitproc>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4c26      	ldr	r4, [pc, #152]	; (8004d4c <__register_exitproc+0xa0>)
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	4698      	mov	r8, r3
 8004cb8:	460f      	mov	r7, r1
 8004cba:	4691      	mov	r9, r2
 8004cbc:	f7ff fff4 	bl	8004ca8 <__retarget_lock_acquire_recursive>
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <__register_exitproc+0xa4>)
 8004cc2:	681d      	ldr	r5, [r3, #0]
 8004cc4:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8004cc8:	b918      	cbnz	r0, 8004cd2 <__register_exitproc+0x26>
 8004cca:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8004cce:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004cd2:	6843      	ldr	r3, [r0, #4]
 8004cd4:	2b1f      	cmp	r3, #31
 8004cd6:	dd19      	ble.n	8004d0c <__register_exitproc+0x60>
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <__register_exitproc+0xa8>)
 8004cda:	b933      	cbnz	r3, 8004cea <__register_exitproc+0x3e>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	f7ff ffe4 	bl	8004caa <__retarget_lock_release_recursive>
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004cee:	f7ff fbe9 	bl	80044c4 <malloc>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d0f2      	beq.n	8004cdc <__register_exitproc+0x30>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8004cfc:	6042      	str	r2, [r0, #4]
 8004cfe:	6003      	str	r3, [r0, #0]
 8004d00:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004d04:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8004d08:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8004d0c:	6843      	ldr	r3, [r0, #4]
 8004d0e:	b19e      	cbz	r6, 8004d38 <__register_exitproc+0x8c>
 8004d10:	2201      	movs	r2, #1
 8004d12:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8004d16:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8004d1a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	4311      	orrs	r1, r2
 8004d22:	2e02      	cmp	r6, #2
 8004d24:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8004d28:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8004d2c:	bf02      	ittt	eq
 8004d2e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8004d32:	430a      	orreq	r2, r1
 8004d34:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	6042      	str	r2, [r0, #4]
 8004d3e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	f7ff ffb1 	bl	8004caa <__retarget_lock_release_recursive>
 8004d48:	2000      	movs	r0, #0
 8004d4a:	e7cc      	b.n	8004ce6 <__register_exitproc+0x3a>
 8004d4c:	20000850 	.word	0x20000850
 8004d50:	080051b0 	.word	0x080051b0
 8004d54:	080044c5 	.word	0x080044c5

08004d58 <_getpid>:
 8004d58:	2258      	movs	r2, #88	; 0x58
 8004d5a:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <_getpid+0xc>)
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	4770      	bx	lr
 8004d64:	20000ae4 	.word	0x20000ae4

08004d68 <_kill>:
 8004d68:	2258      	movs	r2, #88	; 0x58
 8004d6a:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <_kill+0xc>)
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	4770      	bx	lr
 8004d74:	20000ae4 	.word	0x20000ae4

08004d78 <_sbrk>:
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <_sbrk+0x14>)
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	b909      	cbnz	r1, 8004d84 <_sbrk+0xc>
 8004d80:	4903      	ldr	r1, [pc, #12]	; (8004d90 <_sbrk+0x18>)
 8004d82:	6019      	str	r1, [r3, #0]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	4402      	add	r2, r0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	4770      	bx	lr
 8004d8c:	20000ad0 	.word	0x20000ad0
 8004d90:	20000ae8 	.word	0x20000ae8

08004d94 <_exit>:
 8004d94:	e7fe      	b.n	8004d94 <_exit>
	...

08004d98 <_init>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr

08004da4 <_fini>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr
